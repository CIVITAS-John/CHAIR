You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (49 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
49. 
Concepts: {Repeat the input 49}
Relationship: {What is logical relationship between concepts in code 49, or N/A if not applicable}
Criteria: {Who did what, and how for code 49}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: requesting user manual, requesting documentation
- Users request a user manual or instructions for using the software.
- Users express specific needs for documentation or manuals.

2.
Concepts: seeking guidance, inquiring about usage instructions
- A user asks for guidance or instructions on using specific features or documentation.
- Users ask for instructions or guidance on how to use the software.

3.
Concepts: platform inquiries, inquiring about software platforms
- Users ask questions about platform functionality, updates, and versions.
- Users inquire about specific versions or platforms of the software.

4.
Concepts: request, requesting specific features
- Making a request for specific features or demonstrations within the software.
- Users request specific functionalities or features to be added to the software.

5.
Concepts: proposing new features, suggesting collaboration
- Users propose additional features that would enhance the platform's usability.
- A user suggesting collaboration and proposing new features or improvements.

6.
Concepts: suggesting improvements, providing feedback and suggestions
- Users provide suggestions for features or improvements to enhance the software.
- Users provide feedback or suggestions to improve the software.

7.
Concepts: story sharing, sharing user reviews
- Users sharing stories or anecdotes about their experiences related to the software.
- Users provide reviews or share their experiences about using the software.

8.
Concepts: user experience and impact, sharing classroom experiences
- Users sharing their experiences and the impact of the software on their teaching or learning.
- Users share their experiences and success stories using the software in educational settings.

9.
Concepts: complimenting software, appreciating features, providing positive feedback
- Users compliment the software's performance or a specific feature.
- Users express appreciation for specific features or functionalities of the software.
- Users give positive feedback or praise about the software's functionality and usefulness.

10.
Concepts: communicating with emojis, using non-verbal communication, engaging with emojis
- Users communicate emotions or reactions using emojis.
- Users convey emotions or feelings through emojis or other non-verbal forms of communication.
- Users use emojis to engage and express emotions or reactions within the community.

11.
Concepts: apologizing for disturbance, apologies and politeness
- Designers apologize for any inconvenience or disturbance caused to users.
- Expressions of politeness, apologies, or acknowledgment of potential inconvenience by the designers.

12.
Concepts: acknowledging feedback, appreciating and implementing feedback
- Users or designers acknowledge responses or feedback with gratitude.
- Designers thank users for feedback and discuss plans to incorporate it.

13.
Concepts: building community, community support, acknowledging community support
- Users or designers express gratitude and encouragement within the community.
- Instances where users express support, encouragement, or appreciation for the designers' efforts.
- Users or designers express gratitude for the community's support.

14.
Concepts: expressing gratitude, expressing appreciation
- Users or designers express gratitude or acknowledgment for efforts and contributions.
- Users or designers express appreciation for the efforts and support of others.

15.
Concepts: consulting the community, soliciting community suggestions
- Designers seek input or advice from the community.
- Designers solicit suggestions and requirements from the community.

16.
Concepts: suggesting alternatives, offering/seeking alternative
- A user suggests an alternative solution or approach to a problem.
- A user offering or seeking an alternative solution or option.

17.
Concepts: situation explanation, providing context
- A user explains a situation or context affecting them.
- A user provides context for their question or statement by describing their situation.

18.
Concepts: communicating progress updates, providing feature development status updates
- Designers provide updates on the progress of tasks or features in development.
- A designer provides information and status updates on ongoing research or feature development.

19.
Concepts: providing a release timeline, providing feature development timelines
- Designers provide a schedule or timeline for upcoming software releases.
- Designers set and provide timelines for specific feature development milestones.

20.
Concepts: planning and announcing updates, announcing development plans
- Designers plan and make announcements about future updates.
- Designers announce and share plans for future updates, features, or improvements.

21.
Concepts: communicating updates, explaining future updates
- Designers provide information about upcoming updates and new features.
- Designers explain and detail features or updates planned for future versions.

22.
Concepts: announcing feature releases, announcing feature updates, announcing version updates
- Announcing the release of new features or versions of the software.
- Providing information about new features and updates being added to the product.
- Announcing and describing the details of software updates or new versions.

23.
Concepts: notifying about updates, making community announcements, informing about software versions
- A designer notifies the community about new version updates and upcoming changes.
- Designers provide updates or announcements to the community about the software.
- Designers inform the community about the current or upcoming software versions.

24.
Concepts: announcing software updates, announcing component updates
- Designers notify users about software releases, updates, and new features.
- Designers announce updates or changes to specific components in the software.

25.
Concepts: new components, listing updates and bug fixes
- Listing new features, components, and bug fixes included in an update.
- Designers detail specific bug fixes and new features added in updates.

26.
Concepts: providing version details, explaining software versions
- Designers provide detailed information about specific software versions.
- Designers clarify the type of version being discussed or updated.

27.
Concepts: planning future projects, discussing future plans, outlining future development plans
- Designers discuss future plans and project planning considerations.
- Designers share and discuss future plans or considerations for software development.
- Designers outline and discuss future plans and development efforts.

28.
Concepts: listing future features, explanation of upcoming features
- Listing features to be added in future software updates.
- Providing details about features that will be included in future updates.

29.
Concepts: asking about updates, inquiring about update status, inquire about recent updates
- Users inquire about recent or upcoming software updates.
- Users inquire about the status of specific software updates.
- Inquires about recent software updates.

30.
Concepts: responding to user feedback, demonstrating designer responsiveness
- Designers respond to user feedback or queries, acknowledging the need for support.
- Designers respond to user feedback, inquiries, and suggestions, showing attentiveness to user needs.

31.
Concepts: offering solutions, resolving user concerns
- Designers offer solutions or instructions to address user issues or questions.
- Designers respond to and resolve user concerns or inquiries with specific answers or instructions.

32.
Concepts: seek confirmation, seeking design clarification
- A designer seeks confirmation about a specific detail or request.
- Designers or users seek clarification on specific design elements or options.

33.
Concepts: seeking user request clarification, requesting and responding to clarification
- Designers ask questions to clarify user requests and better understand their needs.
- Designers ask users for specific details to clarify a point and respond to user inquiries or clarifications.

34.
Concepts: technical detail discussion, discussing technical requirements
- A developer discusses technical details or specifications of the software.
- Designers discuss technical aspects or requirements of the software.

35.
Concepts: personal interest, expressing personal interest
- Designers share their personal interests related to the project.
- A designer expresses personal interest in a subject or field related to the community.

36.
Concepts: design refinement, conducting iterative development
- Designers refining the design or functionality based on feedback.
- Designers refine and improve the product repeatedly based on user feedback and testing.

37.
Concepts: encouraging feedback, encouraging community participation
- A designer or community member encourages feedback or suggestions from users.
- Users or designers invite community members to give suggestions or feedback.

38.
Concepts: involving users in design, integrating user feedback
- Designers actively involve users in the design process through feedback or testing.
- Designers acknowledge and integrate user feedback into the design and development process.

39.
Concepts: eliciting feedback, taking user feedback, soliciting feedback, gathering user feedback
- Designers ask for feedback and suggestions on features or components.
- Designers request and take user feedback for future improvements.
- Designers invite users to provide feedback or suggestions for improvements.
- Designers ask users for feedback on their experiences and any problems encountered.

40.
Concepts: respond to feature request, feature request invitation
- Designers respond to users' feature requests or suggestions.
- Designers invite users to suggest new features or improvements.

41.
Concepts: accepting user suggestions, accepting feature requests
- Designers acknowledge and agree to implement a user’s suggestion in a future update.
- Designers acknowledge and commit to including a requested feature in the next update.

42.
Concepts: making design suggestions, making and elaborating suggestions
- Users or designers make suggestions for design improvements or additions.
- Designers make and elaborate on suggestions or ideas for improvement.

43.
Concepts: compatibility assurance, confirming software compatibility
- A developer assures that the application should be compatible with certain hardware or systems.
- Designers confirm the compatibility of software features with specific systems.

44.
Concepts: discussing limitations, discussing technical constraints
- Designers explain the limitations or constraints of a feature or function.
- Designers or users discuss technical limitations or constraints of the software.

45.
Concepts: user frustration, expressing frustration
- A user expresses frustration with their current hardware or system limitations.
- A developer or user expresses frustration with current limitations or issues.

46.
Concepts: explaining features, providing feature examples, explaining component functionality
- Designers provide detailed explanations about the functionalities of certain features.
- Designers provide examples or detailed descriptions of how specific software features function.
- Designers explain the functionality of specific components or features.

47.
Concepts: user interface, discussing software usability
- A designer discussing aspects of the software's user interface.
- Designers and participants discuss the usability aspects of the software.

48.
Concepts: feature development, feature improvement discussion
- A designer discussing the development and refinement of existing or new features.
- A developer and user discuss improvements to features.

49.
Concepts: long term planning, discussing feature stability
- Designer discusses long-term planning for feature stability.
- Designers discuss the stability and long-term implications of software features.
===
---
Definitions for each code (49 in total):
1.
Concepts: requesting user manual, requesting documentation
Relationship: Both involve users expressing a need for written guides.
Criteria: Users request a user manual or documentation for better understanding and usage of the software.
Phrase: Requesting documentation

2.
Concepts: seeking guidance, inquiring about usage instructions
Relationship: Both involve users seeking instructional information.
Criteria: Users seek guidance and inquire about usage instructions for specific software features.
Phrase: Seeking usage guidance

3.
Concepts: platform inquiries, inquiring about software platforms
Relationship: Both relate to questions about the software's platform specifics.
Criteria: Users inquire about platform functionality, updates, and versions of the software.
Phrase: Inquiring about platforms

4.
Concepts: request, requesting specific features
Relationship: Both involve users making requests for additions.
Criteria: Users make requests for specific features or functionalities to be added to the software.
Phrase: Requesting features

5.
Concepts: proposing new features, suggesting collaboration
Relationship: Both involve proposing new ideas to improve the software.
Criteria: Users propose new features and suggest collaboration opportunities to enhance the software.
Phrase: Proposing features and collaboration

6.
Concepts: suggesting improvements, providing feedback and suggestions
Relationship: Both involve offering ideas for enhancement.
Criteria: Users suggest improvements and provide feedback to enhance the software.
Phrase: Suggesting improvements

7.
Concepts: story sharing, sharing user reviews
Relationship: Both involve users sharing their experiences.
Criteria: Users share stories and reviews about their experiences with the software.
Phrase: Sharing experiences

8.
Concepts: user experience and impact, sharing classroom experiences
Relationship: Both involve discussing the software's impact on teaching or learning.
Criteria: Users share their experiences and impact stories of using the software in educational settings.
Phrase: Sharing educational impact

9.
Concepts: complimenting software, appreciating features, providing positive feedback
Relationship: All involve expressing positive sentiments towards the software.
Criteria: Users compliment and express appreciation for the software's features and functionality.
Phrase: Providing positive feedback

10.
Concepts: communicating with emojis, using non-verbal communication, engaging with emojis
Relationship: All involve using emojis for communication.
Criteria: Users engage and communicate emotions or reactions using emojis.
Phrase: Using emojis for engagement

11.
Concepts: apologizing for disturbance, apologies and politeness
Relationship: Both involve expressions of politeness and apologies.
Criteria: Designers apologize for any inconvenience or disturbance caused to users.
Phrase: Apologizing for inconvenience

12.
Concepts: acknowledging feedback, appreciating and implementing feedback
Relationship: Both involve recognizing and valuing feedback.
Criteria: Designers acknowledge and appreciate user feedback and discuss implementation plans.
Phrase: Appreciating feedback

13.
Concepts: building community, community support, acknowledging community support
Relationship: All involve expressions of support and gratitude within the community.
Criteria: Users or designers express gratitude, support, and encouragement within the community.
Phrase: Acknowledging community support

14.
Concepts: expressing gratitude, expressing appreciation
Relationship: Both involve expressions of thankfulness.
Criteria: Users or designers express gratitude and appreciation for efforts and support.
Phrase: Expressing gratitude

15.
Concepts: consulting the community, soliciting community suggestions
Relationship: Both involve seeking input from the community.
Criteria: Designers consult and solicit suggestions from the community.
Phrase: Soliciting community input

16.
Concepts: suggesting alternatives, offering/seeking alternative
Relationship: Both involve presenting alternative solutions.
Criteria: Users suggest or seek alternative solutions or approaches to problems.
Phrase: Suggesting alternatives

17.
Concepts: situation explanation, providing context
Relationship: Both involve explaining background information.
Criteria: Users explain their situation or provide context for their questions or statements.
Phrase: Providing context

18.
Concepts: communicating progress updates, providing feature development status updates
Relationship: Both involve providing updates on development progress.
Criteria: Designers provide updates on the progress and status of feature development.
Phrase: Providing progress updates

19.
Concepts: providing a release timeline, providing feature development timelines
Relationship: Both involve sharing schedules for future releases.
Criteria: Designers provide timelines for upcoming software releases and feature development.
Phrase: Providing release timelines

20.
Concepts: planning and announcing updates, announcing development plans
Relationship: Both involve sharing plans for future updates.
Criteria: Designers plan and announce future updates and development plans.
Phrase: Announcing development plans

21.
Concepts: communicating updates, explaining future updates
Relationship: Both involve sharing information about upcoming updates.
Criteria: Designers communicate and explain details of future updates and new features.
Phrase: Explaining future updates

22.
Concepts: announcing feature releases, announcing feature updates, announcing version updates
Relationship: All involve announcements about new releases or updates.
Criteria: Designers announce the release of new features, updates, and software versions.
Phrase: Announcing updates

23.
Concepts: notifying about updates, making community announcements, informing about software versions
Relationship: All involve notifying the community about software changes.
Criteria: Designers notify the community about new software versions and upcoming changes.
Phrase: Notifying about updates

24.
Concepts: announcing software updates, announcing component updates
Relationship: Both involve announcements about updates to the software.
Criteria: Designers announce updates and changes to the software and its components.
Phrase: Announcing updates

25.
Concepts: new components, listing updates and bug fixes
Relationship: Both involve detailing new additions and fixes.
Criteria: Designers list new features, components, and bug fixes included in updates.
Phrase: Listing updates and fixes

26.
Concepts: providing version details, explaining software versions
Relationship: Both involve detailing specific software versions.
Criteria: Designers provide and explain details about specific software versions.
Phrase: Providing version details

27.
Concepts: planning future projects, discussing future plans, outlining future development plans
Relationship: All involve discussing future project development.
Criteria: Designers discuss and outline future development plans and projects.
Phrase: Discussing future plans

28.
Concepts: listing future features, explanation of upcoming features
Relationship: Both involve detailing future feature additions.
Criteria: Designers list and explain features to be included in future software updates.
Phrase: Listing future features

29.
Concepts: asking about updates, inquiring about update status, inquire about recent updates
Relationship: All involve inquiring about software updates.
Criteria: Users inquire about the status and details of recent or upcoming software updates.
Phrase: Inquiring about updates

30.
Concepts: responding to user feedback, demonstrating designer responsiveness
Relationship: Both involve designers addressing user feedback.
Criteria: Designers respond to user feedback, demonstrating attentiveness to user needs.
Phrase: Responding to feedback

31.
Concepts: offering solutions, resolving user concerns
Relationship: Both involve addressing user issues.
Criteria: Designers offer solutions and resolve user concerns with specific answers or instructions.
Phrase: Offering solutions

32.
Concepts: seek confirmation, seeking design clarification
Relationship: Both involve seeking validation or clarification.
Criteria: Designers seek confirmation or clarification about specific details or requests.
Phrase: Seeking clarification

33.
Concepts: seeking user request clarification, requesting and responding to clarification
Relationship: Both involve clarifying user requests.
Criteria: Designers seek and respond to clarifications of user requests to better understand their needs.
Phrase: Clarifying user requests

34.
Concepts: technical detail discussion, discussing technical requirements
Relationship: Both involve discussing the technical aspects of the software.
Criteria: Designers discuss technical details and requirements of the software.
Phrase: Discussing technical details

35.
Concepts: personal interest, expressing personal interest
Relationship: Both involve sharing personal interests.
Criteria: Designers share their personal interests related to the project or community.
Phrase: Expressing personal interest

36.
Concepts: design refinement, conducting iterative development
Relationship: Both involve refining the software design.
Criteria: Designers refine and improve the software design through iterative development based on feedback.
Phrase: Refining design iteratively

37.
Concepts: encouraging feedback, encouraging community participation
Relationship: Both involve inviting community input.
Criteria: Designers or community members encourage feedback and participation from users.
Phrase: Encouraging feedback

38.
Concepts: involving users in design, integrating user feedback
Relationship: Both involve incorporating user input into the design process.
Criteria: Designers actively involve users in the design process by integrating their feedback.
Phrase: Integrating user feedback

39.
Concepts: eliciting feedback, taking user feedback, soliciting feedback, gathering user feedback
Relationship: All involve seeking feedback from users.
Criteria: Designers solicit and gather feedback from users for future improvements.
Phrase: Gathering feedback

40.
Concepts: respond to feature request, feature request invitation
Relationship: Both involve handling feature requests.
Criteria: Designers respond to and invite feature requests from users.
Phrase: Handling feature requests

41.
Concepts: accepting user suggestions, accepting feature requests
Relationship: Both involve agreeing to implement user suggestions.
Criteria: Designers accept and agree to implement user suggestions or feature requests in future updates.
Phrase: Accepting suggestions

42.
Concepts: making design suggestions, making and elaborating suggestions
Relationship: Both involve proposing design ideas.
Criteria: Users or designers make and elaborate on suggestions for design improvements.
Phrase: Making design suggestions

43.
Concepts: compatibility assurance, confirming software compatibility
Relationship: Both involve confirming compatibility.
Criteria: Designers assure and confirm the software's compatibility with certain systems.
Phrase: Confirming compatibility

44.
Concepts: discussing limitations, discussing technical constraints
Relationship: Both involve discussing limitations of the software.
Criteria: Designers discuss the technical limitations and constraints of the software.
Phrase: Discussing limitations

45.
Concepts: user frustration, expressing frustration
Relationship: Both involve expressing dissatisfaction.
Criteria: Users or designers express frustration with limitations or issues related to the software.
Phrase: Expressing frustration

46.
Concepts: explaining features, providing feature examples, explaining component functionality
Relationship: All involve providing explanations about software functionalities.
Criteria: Designers explain features and provide examples or descriptions of component functionality.
Phrase: Explaining features

47.
Concepts: user interface, discussing software usability
Relationship: Both involve discussing the software's usability.
Criteria: Designers and users discuss aspects of the software's user interface and usability.
Phrase: Discussing usability

48.
Concepts: feature development, feature improvement discussion
Relationship: Both involve discussing feature enhancements.
Criteria: Designers discuss the development and improvement of software features.
Phrase: Discussing feature development

49.
Concepts: long term planning, discussing feature stability
Relationship: Both involve discussing future stability of features.
Criteria: Designers discuss long-term planning and the stability of software features.
Phrase: Discussing feature stability
---