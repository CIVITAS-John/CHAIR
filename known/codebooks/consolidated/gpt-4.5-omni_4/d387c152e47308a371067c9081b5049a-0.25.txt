You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (13 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
13. 
Concepts: {Repeat the input 13}
Relationship: {What is logical relationship between concepts in code 13, or N/A if not applicable}
Criteria: {Who did what, and how for code 13}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: confirming system compatibility, discuss system compatibility
- Designers confirm the compatibility of the software with specific systems.
- Designers discuss the system requirements and compatibility of the software with different hardware and operating systems.

2.
Concepts: communicate updates, announce future updates
- Designers provide information about upcoming updates and engage users by announcing new features.
- Designers announce plans for upcoming features or updates and solicit feedback.

3.
Concepts: announce feature updates, announce software release, announce software updates
- Designers announce new features, updates, or bug fixes in the software.
- Designers announce the release or upcoming release of new software versions or features.
- Designers provide information about the current status, updates, and future plans for the software.

4.
Concepts: confirm updates, committing to future updates
- Designers confirm that an update or feature will occur.
- Designers commit to including a feature in a future update.

5.
Concepts: detailing future updates, discuss update planning
- Developers discuss future updates and detail new features in the software.
- Designers discuss the planning and timing of future updates and feature expansions.

6.
Concepts: seek clarification, ask follow-up questions
- Designers seek clarification on specific topics or aspects to better understand user needs.
- Designers ask follow-up questions to better understand user needs or clarify suggestions.

7.
Concepts: address user concerns, inquire about user issues
- Designers interact with users to clarify details or address issues.
- Designers inquire about problems or specific issues users have encountered.

8.
Concepts: user interaction inquiry, inquire about software usage
- User inquires about how to interact with or access the software.
- Users inquire about how to use a specific version or application of the software.

9.
Concepts: provide feedback, suggest feature improvements
- Users provide feedback or suggestions with justifications to improve the software.
- Users or designers suggest new features or improvements for the software.

10.
Concepts: elicit community feedback, gather community input
- Designers elicit feedback and encourage community participation.
- Designers consult the community for information or feedback on specific topics.

11.
Concepts: sharing identity, share teaching background
- A user shares their teaching experience and identity.
- Users provide information about their teaching background and experience.

12.
Concepts: praise software features, compliment software effects
- Users review the software positively, express admiration for its features, and highlight their satisfaction.
- Users provide positive feedback and compliments about the software's simulation or visual effects.

13.
Concepts: apologize for interruption, apologize for inconvenience
- The designer or user apologizes for an interruption.
- Designers express politeness and apologize for any inconvenience caused to users.
===
---
Definitions for each code (13 in total):
1.
Concepts: confirming system compatibility, discuss system compatibility
Relationship: Both concepts involve ensuring and discussing the software's compatibility with various systems.
Criteria: Designers confirm and discuss the compatibility of the software with different hardware and operating systems.
Phrase: Confirming and discussing system compatibility

2.
Concepts: communicate updates, announce future updates
Relationship: Both concepts involve informing users about updates, with a focus on future changes.
Criteria: Designers provide information about upcoming updates and engage users by announcing new features and soliciting feedback.
Phrase: Communicating and announcing updates

3.
Concepts: announce feature updates, announce software release, announce software updates
Relationship: All concepts involve making announcements related to software changes and releases.
Criteria: Designers announce new features, updates, bug fixes, and the release or upcoming release of new software versions.
Phrase: Announcing software changes and releases

4.
Concepts: confirm updates, committing to future updates
Relationship: Both concepts involve confirming and committing to future software updates.
Criteria: Designers confirm that an update or feature will occur and commit to including it in a future update.
Phrase: Confirming and committing to updates

5.
Concepts: detailing future updates, discuss update planning
Relationship: Both concepts involve discussing and detailing future software updates.
Criteria: Developers discuss and detail new features and the planning and timing of future updates.
Phrase: Discussing and detailing future updates

6.
Concepts: seek clarification, ask follow-up questions
Relationship: Both concepts involve seeking additional information to understand user needs better.
Criteria: Designers seek clarification and ask follow-up questions to better understand user needs or clarify suggestions.
Phrase: Seeking clarification and follow-up

7.
Concepts: address user concerns, inquire about user issues
Relationship: Both concepts involve interacting with users to understand and address their concerns.
Criteria: Designers interact with users to clarify details, address issues, and inquire about specific problems users have encountered.
Phrase: Addressing and inquiring about user concerns

8.
Concepts: user interaction inquiry, inquire about software usage
Relationship: Both concepts involve users inquiring about how to interact with or use the software.
Criteria: Users inquire about how to interact with or use a specific version or application of the software.
Phrase: Inquiring about software interaction and usage

9.
Concepts: provide feedback, suggest feature improvements
Relationship: Both concepts involve users or designers offering feedback and suggestions for software improvements.
Criteria: Users provide feedback and suggest new features or improvements for the software.
Phrase: Providing feedback and suggesting improvements

10.
Concepts: elicit community feedback, gather community input
Relationship: Both concepts involve designers seeking feedback and input from the community.
Criteria: Designers elicit feedback and encourage community participation to gather information on specific topics.
Phrase: Eliciting and gathering community feedback

11.
Concepts: sharing identity, share teaching background
Relationship: Both concepts involve users sharing personal information related to their teaching experience.
Criteria: Users share their teaching experience and background.
Phrase: Sharing teaching identity and background

12.
Concepts: praise software features, compliment software effects
Relationship: Both concepts involve users providing positive feedback about the software.
Criteria: Users review the software positively, express admiration for its features, and highlight their satisfaction.
Phrase: Praising software features and effects

13.
Concepts: apologize for interruption, apologize for inconvenience
Relationship: Both concepts involve expressing apologies for disruptions or inconveniences.
Criteria: Designers or users apologize for interruptions and any inconvenience caused.
Phrase: Apologizing for interruptions and inconveniences
---