You are an expert in thematic analysis. 
Each code is a cluster of multiple qualitative sub-code. If a sub-code includes another, use the broader one. If sub-codes are parallel, write one that covers both.
Write clear and generalizable labels and criteria for each code, informed by the context, and without unnecessary specifics or examples.
Find a theory-informed category for each code. Use 2-4 words for categories and avoid over-generalization (e.g. "social interaction" instead of "interaction", "communication approach" instead of "communication").
The research question is: How did Physics Lab's online community emerge? (through the lens of learning sciences, human-computer interaction, and participatory design)
Always follow the output format:
---
Categories: 
* {Name some categories you identified from the research question and theoretical lens}

Definitions for each code (32 in total):
1.
Relationship: {The logical relationship between sub-codes in code 1}
Criteria: {Consolidated criteria of code 1}
Label: {A consolidated label of code 1}
Category: {2-4 words for code 1}
...
32.
Relationship: {The logical relationship between sub-codes in code 32}
Criteria: {Consolidated criteria of code 32}
Label: {A consolidated label of code 32}
Category: {2-4 words for code 32}
---
~~~
1. software functionality, software information and usage.
- Explaining software capabilities and discussing functionalities
- Providing general information about the software, describing personal usage or inquiring about operation.

2. feature list, product feature details.
- Lists or outlines the features included in the product.
- Detailed descriptions of software features, including technical specifications and functionalities.

3. demonstrating features, introduce feature functions.
- Providing examples or demonstrations of a feature's functionality
- Mentioning a specific feature or function of the app

4. usability evaluation, testing.
- Assessing real-world uses and ease of software functionality.
- Testing or experimentation, testing compatibility of the software, evaluations or assessments of the software's quality or usefulness

5. design and accessibility improvements, expansion and alternative suggestions.
- Proposals for improving software design and accessibility based on user feedback and needs.
- Proposals for expanding or altering software features to enhance functionality or user experience.

6. feature requests, feature requests and software scope.
- Requesting new features, indicating desired changes, requests for feature refinement and enhancement
- Suggestions or requests for adding new features, functionalities, or components to the software, as well as comments on the software's focus and potential expansion.

7. long term benefits, long term planning.
- Describes features or actions that are expected to provide lasting advantages or efficiencies.
- Considering long-term planning, scalability, or future-proofing in the software development process.

8. give an opinion on why still makes the future perfection, give reasons for why the future perfection is not necessarily needed.
- Expressing an opinion or perspective on the importance of a feature
- Providing reasons or justifications for not needing a feature

9. user confirmation processes, feature confirmation and relevance.
- Confirming design choices, implementing confirmation interfaces, confirming previous statements or responses.
- Confirmation and reassurance regarding the relevance and implementation of software features.

10. positive feedback provision, software feature compliment.
- Positive feedback on software design and functionality
- Positive feedback specifically about a software feature's visual or functional effect.

11. experiment design, mechanics experimentation.
- Configurations for experiments and design plans for assessing experiments.
- Discussion of experiments or topics related to mechanics, or details mentioned in the context of an experiment or assessment

12. simulation changes and details, experiment simulation & details.
- Changes and details related to simulated experiments
- Referring to experimental procedures, simulating real experiments

13. simulation update, realism enhancement.
- Updating or improving simulations or models
- Enhancing the realism or accuracy of simulations

14. component simulation, power supply simulation.
- Simulating components for educational purposes.
- Simulating or modeling power supply or electrical systems

15. manual editing, diagram manipulation capabilities.
- Allowing manual editing of diagrams and layouts
- Involves features or utilities within a tool that enable manipulation or transformation of diagrams, specifically connecting different diagram types or converting between them.

16. exercise integration, direct exercise functionality.
- Suggesting integration of exercises or practice problems within the application
- Specific mention of a feature that allows users to perform tasks directly within the application.

17. component property adjustments, component modification and updates.
- Discussing adjustments or changes made to the properties or behaviors of software components
- Planned or implemented modifications to software components as part of significant updates.

18. meter enhancements, educational tool enhancement.
- Describing enhancements or improvements made to the software's meters or measurement tools
- Features and enhancements aimed at improving educational tools

19. component design, design flexibility.
- Designing or customizing components or features
- Allowing flexibility in design for customization.

20. design decision, configuration options.
- Decision-making process, design preferences, and feature configurations
- Describing configuration options, settings, or customization capabilities

21. optimization, product optimization.
- Improving or refining a process or system to achieve better results.
- Optimizing product performance and design elements for better functionality.

22. needs assessment, ask about user needs.
- Identifying or assessing user needs
- Asking about user needs or preferences

23. user needs and constraints, user context understanding.
- Expressing user needs and desires, as well as noting constraints or limitations.
- Understanding of the user context, especially regarding infrastructure limitations or requirements.

24. user experience, platform usability and usage.
- Discussions about user experience, discussions about user's technical environment, ensuring accessibility or usability
- Usability discussions and facilitation of platform usage

25. designer role, designer support.
- Indicating or inquiring about a designer role
- Support or assistance requests directed specifically at designers.

26. user preferences, user feedback on design.
- Preferences expressed by users regarding the software.
- User feedback specifically related to design choices, reflecting personal preferences

27. user-centered design, participatory design process.
- Emphasis on user feedback and involvement in design
- Participatory design approach, feedback-driven development

28. designer responsiveness, design feedback & negotiation.
- Timely and effective response to user needs and feedback by designers.
- Designers being responsive, negotiating designs based on feedback

29. initial user guidance, user onboarding.
- Initial guidance and orientation for new users
- Describing the process of onboarding or introducing new users to the product or community.

30. download instructions, software download instructions.
- Providing instructions or steps for downloading or accessing the product
- Involves inquiries about downloads and providing instructions for software downloads.

31. user guidance, usage guidance & help.
- Involves guidance provision and inquiries about user manuals
- Providing contextual help, usage instructions/guidance

32. product usage instructions, operational instruction.
- Instructions on how to use a product or system.
- Provides instructions or steps necessary to operate a feature or component correctly.
===
Here is the output in the required format:

---
Categories:
* Software Functionality
* Design and Accessibility
* User Experience
* Community Engagement
* Learning and Education
* Product Development
* User Feedback and Support

Definitions for each code:

1.
Relationship: Broader category includes sub-codes
Criteria: Discussing software capabilities, providing general information, and inquiring about operation
Label: Software Information and Usage
Category: Software Functionality

2.
Relationship: Broader category includes sub-codes
Criteria: Listing or describing software features and technical specifications
Label: Feature Details
Category: Software Functionality

3.
Relationship: Parallel to code 2
Criteria: Providing examples or demonstrations of a feature's functionality
Label: Feature Demonstration
Category: Software Functionality

4.
Relationship: Broader category includes sub-codes
Criteria: Assessing real-world uses, ease of software functionality, and testing
Label: Usability Evaluation
Category: User Experience

5.
Relationship: Broader category includes sub-codes
Criteria: Proposing improvements to software design and accessibility
Label: Design Improvement Suggestions
Category: Design and Accessibility

6.
Relationship: Parallel to code 5
Criteria: Requesting new features or enhancements
Label: Feature Requests
Category: Product Development

7.
Relationship: Broader category includes sub-codes
Criteria: Considering long-term benefits, planning, and scalability
Label: Long-term Planning
Category: Product Development

8.
Relationship: Parallel to code 7
Criteria: Expressing opinions on feature importance or justifying their absence
Label: Feature Justification
Category: Product Development

9.
Relationship: Broader category includes sub-codes
Criteria: Confirming design choices and feature relevance
Label: Feature Confirmation
Category: User Experience

10.
Relationship: Parallel to code 9
Criteria: Providing positive feedback on software design and functionality
Label: Positive Feedback
Category: User Experience

11.
Relationship: Broader category includes sub-codes
Criteria: Configuring experiments and designing plans for assessment
Label: Experiment Design
Category: Learning and Education

12.
Relationship: Parallel to code 11
Criteria: Discussing simulations and experimental procedures
Label: Simulation Details
Category: Learning and Education

13.
Relationship: Broader category includes sub-codes
Criteria: Updating or improving simulations or models
Label: Simulation Updates
Category: Learning and Education

14.
Relationship: Parallel to code 13
Criteria: Simulating components for educational purposes
Label: Component Simulation
Category: Learning and Education

15.
Relationship: Broader category includes sub-codes
Criteria: Enabling manual editing of diagrams and layouts
Label: Diagram Manipulation
Category: Design and Accessibility

16.
Relationship: Parallel to code 15
Criteria: Integrating exercises or practice problems within the application
Label: Exercise Integration
Category: Learning and Education

17.
Relationship: Broader category includes sub-codes
Criteria: Modifying or adjusting software components
Label: Component Modification
Category: Product Development

18.
Relationship: Parallel to code 17
Criteria: Enhancing educational tools and meters
Label: Educational Tool Enhancement
Category: Learning and Education

19.
Relationship: Broader category includes sub-codes
Criteria: Designing or customizing components or features
Label: Component Design
Category: Design and Accessibility

20.
Relationship: Parallel to code 19
Criteria: Configuring design preferences and options
Label: Design Configuration
Category: Design and Accessibility

21.
Relationship: Broader category includes sub-codes
Criteria: Optimizing product performance and design
Label: Product Optimization
Category: Product Development

22.
Relationship: Parallel to code 21
Criteria: Assessing user needs and preferences
Label: Needs Assessment
Category: User Experience

23.
Relationship: Broader category includes sub-codes
Criteria: Understanding user context and constraints
Label: User Context Understanding
Category: User Experience

24.
Relationship: Parallel to code 23
Criteria: Discussing user experience and usability
Label: User Experience Discussion
Category: User Experience

25.
Relationship: Broader category includes sub-codes
Criteria: Identifying or inquiring about a designer role
Label: Designer Role
Category: Community Engagement

26.
Relationship: Parallel to code 25
Criteria: Expressing user preferences regarding design
Label: User Preferences
Category: User Experience

27.
Relationship: Broader category includes sub-codes
Criteria: Emphasizing user feedback and involvement in design
Label: User-Centered Design
Category: Community Engagement

28.
Relationship: Parallel to code 27
Criteria: Designers being responsive to user needs and feedback
Label: Designer Responsiveness
Category: Community Engagement

29.
Relationship: Broader category includes sub-codes
Criteria: Providing initial guidance and orientation for new users
Label: User Onboarding
Category: User Experience

30.
Relationship: Parallel to code 29
Criteria: Providing instructions for downloading or accessing the product
Label: Download Instructions
Category: User Experience

31.
Relationship: Broader category includes sub-codes
Criteria: Providing guidance and inquiries about user manuals
Label: User Guidance
Category: User Experience

32.
Relationship: Parallel to code 31
Criteria: Providing instructions for operating a feature or component
Label: Operational Instructions
Category: User Experience