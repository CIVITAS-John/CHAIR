You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (11 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
11. 
Concepts: {Repeat the input 11}
Relationship: {What is logical relationship between concepts in code 11, or N/A if not applicable}
Criteria: {Who did what, and how for code 11}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: collaborative planning, planning for improvement and discussing development goals
- Designers and users collaboratively discussing and planning the development of the software.
- Designers discuss plans for improving the software and long-term goals, and discuss long-term goals and consider future compatibility.

2.
Concepts: share potential future direction, discussion of further interests, suggest future possibilities
- Designer shares potential future directions or interests.
- A designer discusses or expresses interest in exploring further topics or features.
- The designer suggests or discusses potential future possibilities or directions for the software or community.

3.
Concepts: explaining features and complexity, explaining the need and clarifying features
- Designers explain or provide details about features or their importance, and explain the complexity of features or issues, and the development process.
- Designers explain or acknowledge the need for a specific feature or update, and explain or clarify the functionality of existing features.

4.
Concepts: committing to feature development, committing to a solution
- Designers commit to implementing features or improvements to meet user needs.
- Designer commits to providing a solution or fixing an issue, committing to improving the software or addressing user concerns.

5.
Concepts: design concurrence, expressing agreement
- Agreeing or concurring with design ideas
- Users or designers express agreement or confirm collaboration.

6.
Concepts: positive interaction, expressing community support and gratitude
- A user engages in a positive or supportive interaction with others in the online community.
- Users or designers express support, encouragement, or appreciation for each other's efforts within the online community.

7.
Concepts: interacting with users, collaborating on problem-solving and expressing comprehension
- A designer engages in conversation with a user, asking questions or seeking clarification.
- A user and designer work together to address an issue, and the designer expresses understanding or comprehension of a user's request or issue.

8.
Concepts: seeking guidance, requesting guidance, resources, and technical assistance
- Users seek guidance or request help from others.
- Users request guidance or information about using the software, request resources or information related to the software, and request assistance or technical support with the software.

9.
Concepts: inquire about platform compatibility, inquiring about platform usage and features
- Users inquire about platform or device compatibility.
- Users inquire about how to use specific features or access resources, and ask questions about the platform or its features.

10.
Concepts: shared experiences and support, sharing user tips and experiences
- Users and designers sharing experiences and supporting each other in using and improving the software.
- Users share tips or suggest practical use cases for the software, and share their experience or provide specific feedback on the software.

11.
Concepts: requesting new features, providing additional suggestions
- Users request new features or additional experiments in the software.
- Users provide additional suggestions or suggest educational enhancements for the software.
===
Here are the definitions for each code:

---
1.
Concepts: collaborative planning, planning for improvement, discussing development goals
Relationship: Collaborative planning is a means to achieve planning for improvement and discussing development goals.
Criteria: Designers and users collaborate to plan and discuss goals for improving the software.
Phrase: Collaboratively planning for improvement.

2.
Concepts: share potential future direction, discussion of further interests, suggest future possibilities
Relationship: Sharing potential future directions leads to discussions of further interests and suggestions of future possibilities.
Criteria: Designers share and discuss potential future directions and possibilities for the software or community.
Phrase: Sharing future directions.

3.
Concepts: explaining features and complexity, explaining the need and clarifying features
Relationship: Explaining features and complexity is a means to explain the need and clarify features.
Criteria: Designers explain features, complexity, and needs to clarify functionality and development processes.
Phrase: Explaining features and needs.

4.
Concepts: committing to feature development, committing to a solution
Relationship: Committing to feature development is a means to commit to a solution.
Criteria: Designers commit to implementing features or solutions to meet user needs.
Phrase: Committing to solutions.

5.
Concepts: design concurrence, expressing agreement
Relationship: Design concurrence is a result of expressing agreement.
Criteria: Users or designers express agreement or concur with design ideas.
Phrase: Expressing agreement.

6.
Concepts: positive interaction, expressing community support and gratitude
Relationship: Positive interactions lead to expressing community support and gratitude.
Criteria: Users or designers engage in positive interactions, expressing support and gratitude within the online community.
Phrase: Expressing community support.

7.
Concepts: interacting with users, collaborating on problem-solving, expressing comprehension
Relationship: Interacting with users leads to collaborating on problem-solving and expressing comprehension.
Criteria: Designers interact with users, collaborate on problem-solving, and express understanding of user requests or issues.
Phrase: Collaborating on problem-solving.

8.
Concepts: seeking guidance, requesting guidance, resources, and technical assistance
Relationship: Seeking guidance leads to requesting guidance, resources, and technical assistance.
Criteria: Users seek guidance, request help, and ask for resources or technical support.
Phrase: Seeking guidance.

9.
Concepts: inquire about platform compatibility, inquiring about platform usage and features
Relationship: Inquiring about platform compatibility leads to inquiring about platform usage and features.
Criteria: Users inquire about platform compatibility, usage, and features.
Phrase: Inquiring about platform usage.

10.
Concepts: shared experiences and support, sharing user tips and experiences
Relationship: Shared experiences and support lead to sharing user tips and experiences.
Criteria: Users and designers share experiences, support each other, and share tips and feedback on the software.
Phrase: Sharing experiences and tips.

11.
Concepts: requesting new features, providing additional suggestions
Relationship: Requesting new features leads to providing additional suggestions.
Criteria: Users request new features and provide additional suggestions for the software.
Phrase: Requesting new features.