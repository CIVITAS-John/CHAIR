You are an expert in thematic analysis. 
Each code is a cluster of multiple qualitative sub-code. First, determine the logical relationship between sub-codes. If a sub-code includes another, use the broader one. If sub-codes are parallel, try to cover both concepts.
Write clear and generalizable labels and criteria for each merged code, informed by the context, and without unnecessary specifics or examples.
Find a theory-informed category for each code. Use 2-4 words for categories and avoid over-generalization.
The research question is: How did Physics Lab's online community emerge? (through the lens of learning sciences, human-computer interaction, and participatory design)
Always follow the output format:
---
Categories: 
* {Name some categories you identified from the research question and theoretical lens}

Definitions for each code (27 in total):
1.
Relationship: {The logical relationship between sub-codes in code 1}
Criteria: {A sentence of consolidated criteria 1}
Label: {A consolidated label of code 1}
Category: {2-4 words for code 1}
...
27.
Relationship: {The logical relationship between sub-codes in code 27}
Criteria: {A sentence of consolidated criteria 27}
Label: {A consolidated label of code 27}
Category: {2-4 words for code 27}
---
~~~
1. user inquiries, probing user issues.
- Users inquiring about the software or reporting issues they faced.
- Inquires about issues or challenges users have encountered with the software.

2. software usage inquiry, informational exchange.
- Inquiries or discussions about software usage and updates.
- Exchange of informational requests and clarifications regarding software use and features.

3. user request, content customization request.
- User requests for specific content or features, or inquiries within the community.
- Requests for new or modified content or features specific to the users' needs.

4. new user engagement, new user inquiry.
- Engagement from new users seeking information.
- Inquiries from new users about how to access resources or software versions.

5. specific feedback, input solicitation.
- Requests for specific types of feedback or information from the community.
- Involves requesting suggestions and feedback from community members or experts.

6. open feedback, direct communication.
- Invites open feedback or suggestions from users.
- Open and direct communication channels for feedback and suggestions.

7. direct support, personalized support.
- Offering direct and personal assistance to users.
- Offers of personalized support or assistance.

8. download guidance, download process.
- Instructions and information on how to download software or resources.
- Discussions or requests related to the process of downloading or accessing resources, including instructions or guides for downloading or accessing resources.

9. update confirmation, software update status.
- Acknowledging that an update has been implemented.
- Involves confirming successful completion or anticipating upcoming software updates.

10. update information, update schedule.
- Information about software updates, schedules, and details.
- Refers to specific dates or plans for releasing software updates or new versions.

11. software update, version update.
- Refers to updates or new versions of the software being released.
- Information about new versions and the features they include, or indicates the availability or release of a new software version.

12. feature update, update changelog.
- Description of new features, updates, or changes to the software.
- Lists or details the changes or updates included in a new software release.

13. release communication, software release.
- Relates to confirming or clarifying software releases and versions.
- Involves the distribution of software updates to users, or information about the release, update, or review process of the software on app stores or other distribution channels.

14. progress acknowledgment, work in progress.
- Acknowledging that progress is being made on the software.
- Acknowledgment that the software or platform is still in development or undergoing refinement.

15. workarounds, practical solutions.
- Temporary or alternative solutions to address limitations or issues
- Practical solutions or workarounds for usability and technical issues.

16. software design decision-making, design decision.
- Processes involving the making, clarifying, and confirming of software design decisions.
- Decisions made regarding design and functionality, discussions or explanations related to design choices, decisions, and trade-offs involved in the development of the software or platform.

17. research direction, software development direction.
- Research focus or direction for the development team.
- Direction or focus of software development.

18. development prioritization, platform and development prioritization.
- Prioritization of features and development tasks, and statements prioritizing certain areas of development over others.
- Statements indicating the prioritization or sequencing of software updates across different platforms or devices, and statements about the prioritization or sequencing of platform development for different content areas or features.

19. future development, development planning.
- Discussion of plans or ideas for future development or projects.
- Sharing of development plans or roadmaps, including discussions or descriptions of development timelines or milestones.

20. long term roadmap, product roadmap.
- Long-term product roadmap or development plans.
- Sharing information about planned future updates or product roadmap, or timeline, schedule, or roadmap for upcoming development milestones or updates.

21. software features, feature utility description.
- Descriptions and suggestions for software features and functionalities.
- Discussion on the practical utility and applications of software features.

22. feature complexity, complexity of development.
- Discussions or descriptions of the complexity of software features.
- Descriptions of the complexity involved in development tasks.

23. scope expansion, software expansion.
- Discussions about extending the softwareâ€™s scope to include more features or topics.
- Considers expanding the software to cover other physics domains or subject areas.

24. feature planning, feature implementation.
- Planning and considering new features to implement.
- Involves plans or promises for adding new features to the software.

25. optimization, quality improvement.
- Efforts to refine, improve, or optimize the performance or functionality of the software or platform.
- Efforts to enhance the quality or performance of automated features, statements or indications of a commitment to improve or enhance the software or platform.

26. feature stability, long term stability, software stability.
- Features designed to ensure stability or reduce the need for frequent updates.
- Statements indicating that a feature or functionality is intended to provide long-term stability or reliability for the software.
- Ensuring the stability and reliability of the software through careful feature implementation.

27. legacy support, compatibility management, future compatibility.
- Supporting or maintaining compatibility with older or legacy systems.
- Planning or confirming compatibility with legacy systems or versions.
- Considering future compatibility with older systems.
===
Here are the consolidated codes with relationships, criteria, labels, and categories:

---
Categories: 
* Community Engagement
* Software Development
* User Support
* Feature Development
* Design and Planning
* Quality Improvement

Definitions for each code:

1.
Relationship: Inclusive
Criteria: Users inquiring about software or reporting issues.
Label: User Inquiries
Category: Community Engagement

2.
Relationship: Parallel
Criteria: Inquiries or discussions about software usage and updates.
Label: Software Usage Inquiries
Category: Community Engagement

3.
Relationship: Inclusive
Criteria: User requests for specific content or features.
Label: Customization Requests
Category: Feature Development

4.
Relationship: Inclusive
Criteria: New users seeking information.
Label: New User Inquiries
Category: Community Engagement

5.
Relationship: Inclusive
Criteria: Requests for specific feedback or information.
Label: Feedback Solicitation
Category: Community Engagement

6.
Relationship: Parallel
Criteria: Open feedback or suggestions from users.
Label: Open Feedback
Category: Community Engagement

7.
Relationship: Inclusive
Criteria: Offers of personalized support or assistance.
Label: Personalized Support
Category: User Support

8.
Relationship: Inclusive
Criteria: Instructions on how to download software or resources.
Label: Download Guidance
Category: User Support

9.
Relationship: Inclusive
Criteria: Confirming software updates.
Label: Update Confirmation
Category: Software Development

10.
Relationship: Parallel
Criteria: Information about software updates and schedules.
Label: Update Information
Category: Software Development

11.
Relationship: Inclusive
Criteria: Refers to updates or new versions of the software.
Label: Software Updates
Category: Software Development

12.
Relationship: Inclusive
Criteria: Description of new features or updates.
Label: Update Changelog
Category: Software Development

13.
Relationship: Inclusive
Criteria: Confirming software releases and versions.
Label: Release Communication
Category: Software Development

14.
Relationship: Inclusive
Criteria: Acknowledging progress on the software.
Label: Progress Acknowledgment
Category: Software Development

15.
Relationship: Inclusive
Criteria: Temporary solutions to address limitations.
Label: Workarounds
Category: User Support

16.
Relationship: Inclusive
Criteria: Decision-making processes for software design.
Label: Design Decision-Making
Category: Design and Planning

17.
Relationship: Parallel
Criteria: Research focus or direction for development.
Label: Research Direction
Category: Design and Planning

18.
Relationship: Inclusive
Criteria: Prioritization of features and development tasks.
Label: Development Prioritization
Category: Design and Planning

19.
Relationship: Inclusive
Criteria: Discussion of plans or ideas for future development.
Label: Future Development
Category: Design and Planning

20.
Relationship: Inclusive
Criteria: Long-term product roadmap or development plans.
Label: Long-Term Roadmap
Category: Design and Planning

21.
Relationship: Inclusive
Criteria: Descriptions and suggestions for software features.
Label: Feature Description
Category: Feature Development

22.
Relationship: Inclusive
Criteria: Discussions of feature complexity.
Label: Feature Complexity
Category: Feature Development

23.
Relationship: Inclusive
Criteria: Expanding the software's scope to include more features.
Label: Scope Expansion
Category: Feature Development

24.
Relationship: Inclusive
Criteria: Planning and considering new features to implement.
Label: Feature Planning
Category: Feature Development

25.
Relationship: Inclusive
Criteria: Efforts to refine or improve software performance.
Label: Optimization
Category: Quality Improvement

26.
Relationship: Inclusive
Criteria: Features designed for stability or reliability.
Label: Feature Stability
Category: Quality Improvement

27.
Relationship: Inclusive
Criteria: Supporting or maintaining compatibility with older systems.
Label: Legacy Support
Category: Quality Improvement