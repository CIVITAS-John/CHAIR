You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (18 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
18. 
Concepts: {Repeat the input 18}
Relationship: {What is logical relationship between concepts in code 18, or N/A if not applicable}
Criteria: {Who did what, and how for code 18}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: update planning, sharing development timelines
- A person discusses plans for future updates.
- A person provides a timeline for upcoming updates or releases and discusses the development timeline.

2.
Concepts: intro to update content, highlighting progress
- A designer introduces the content of an upcoming update.
- A designer highlights the progress of an update and promises ongoing improvements.

3.
Concepts: outlining plans, explain focus areas
- A designer outlines priorities and plans for future design and development.
- A designer explains the focus areas or priorities in the software development.

4.
Concepts: discussing limitations, talk about why limitation is addressable
- Designers discuss platform or system limitations and explain the limitations of the development team or solutions.
- A designer explains why a limitation can be addressed or worked around.

5.
Concepts: addressing software constraints, express frustration with limitations
- Users highlight technical constraints and address usability issues, acknowledging limitations.
- Users or designers express dissatisfaction or difficulty with system limitations.

6.
Concepts: discussing compatibility, speculate and consider software compatibility
- Developers and users discuss and confirm the software's compatibility with different systems.
- A designer speculates on current and future compatibility of the software with different systems.

7.
Concepts: explaining functionality, elaborating on feature complexities
- Designers address and describe the functionality and technical aspects of software components.
- Designers elaborate on topics or features and compare and explain their complexities.

8.
Concepts: proposing usability improvements, highlight potential user and usability needs
- Users suggest practical use cases and elaborate on usability improvement suggestions.
- A user indicates potential needs and highlights specific usability requirements.

9.
Concepts: implementing feedback, commit to solutions and improvements
- Designers react to feedback by planning updates and confirming plans to implement suggested features.
- Designers commit to providing solutions and improving the software based on user feedback.

10.
Concepts: gather feedback, seeking community input
- Community members seek feedback or input from others and plan for gathering iterative feedback.
- Designers seek opinions and feedback from the community before proceeding with tasks.

11.
Concepts: responding to inquiries, encouraging follow-up
- Users ask questions and receive responses from designers or community members.
- Users or designers continue conversations by responding to messages and encouraging future questions.

12.
Concepts: sharing classroom experiences, discussing practical application
- Users describe successful use and positive student engagement with the software in classrooms.
- Users discuss the specific contexts and practical applications of the software in classrooms.

13.
Concepts: sharing positive feedback, express appreciation for features
- Users express approval, enthusiasm, and compliments about the software.
- Users express appreciation for specific features or the application's development.

14.
Concepts: information seeking, inquiring about downloads
- Users asking questions to gain knowledge or resources related to the software.
- Users inquire about where to download software and how to use specific versions.

15.
Concepts: technical specifics, specifying platform details
- Users provide specific technical details or requirements.
- Users specify platforms and provide platform-specific information.

16.
Concepts: providing context, provide context for interest
- Users provide context or background information for their statements or questions.
- A person provides context or background for their interest or action.

17.
Concepts: clarifying requests, elaborating on questions
- Users restate requests for clarity and explain the intention behind questions.
- Users provide additional information to clarify or expand on conversations.

18.
Concepts: communicating software changes
- Designers inform the community about changes or updates in the software and its components, and announce the release of new software versions with detailed information about their features.
- Developers describe the extent and content of updates and make announcements detailing new features and changes.
===
---
Definitions for each code (18 in total):
1.
Concepts: update planning, sharing development timelines
Relationship: Both involve discussing future updates and their schedules.
Criteria: A person discusses plans for future updates and provides a timeline for upcoming releases.
Phrase: Discussing update plans and timelines

2.
Concepts: intro to update content, highlighting progress
Relationship: Both involve introducing and emphasizing the progress of updates.
Criteria: A designer introduces the content of an upcoming update and highlights the progress and ongoing improvements.
Phrase: Introducing update content and progress

3.
Concepts: outlining plans, explain focus areas
Relationship: Both involve detailing future plans and priorities.
Criteria: A designer outlines priorities and plans for future development and explains the focus areas.
Phrase: Outlining plans and focus areas

4.
Concepts: discussing limitations, talk about why limitation is addressable
Relationship: Both involve discussing limitations and potential solutions.
Criteria: Designers discuss platform limitations and explain why certain limitations can be addressed.
Phrase: Discussing and addressing limitations

5.
Concepts: addressing software constraints, express frustration with limitations
Relationship: Both involve acknowledging and expressing dissatisfaction with software constraints.
Criteria: Users highlight technical constraints and express frustration with system limitations.
Phrase: Addressing and expressing frustration with constraints

6.
Concepts: discussing compatibility, speculate and consider software compatibility
Relationship: Both involve discussing and speculating on software compatibility.
Criteria: Developers and users discuss and speculate on the software's compatibility with different systems.
Phrase: Discussing and speculating on compatibility

7.
Concepts: explaining functionality, elaborating on feature complexities
Relationship: Both involve describing and elaborating on software features and their complexities.
Criteria: Designers explain the functionality of software components and elaborate on feature complexities.
Phrase: Explaining functionality and complexities

8.
Concepts: proposing usability improvements, highlight potential user and usability needs
Relationship: Both involve suggesting and highlighting usability improvements and needs.
Criteria: Users propose usability improvements and highlight potential user needs.
Phrase: Proposing and highlighting usability improvements

9.
Concepts: implementing feedback, commit to solutions and improvements
Relationship: Both involve reacting to feedback and committing to improvements.
Criteria: Designers plan updates based on feedback and commit to implementing solutions.
Phrase: Implementing feedback and committing to improvements

10.
Concepts: gather feedback, seeking community input
Relationship: Both involve seeking and gathering feedback from the community.
Criteria: Community members and designers seek feedback and input from others.
Phrase: Gathering and seeking community feedback

11.
Concepts: responding to inquiries, encouraging follow-up
Relationship: Both involve responding to questions and encouraging further interaction.
Criteria: Users and designers respond to inquiries and encourage follow-up questions.
Phrase: Responding to inquiries and encouraging follow-up

12.
Concepts: sharing classroom experiences, discussing practical application
Relationship: Both involve sharing and discussing the practical use of software in classrooms.
Criteria: Users share classroom experiences and discuss practical applications of the software.
Phrase: Sharing and discussing classroom applications

13.
Concepts: sharing positive feedback, express appreciation for features
Relationship: Both involve expressing positive feedback and appreciation.
Criteria: Users share positive feedback and express appreciation for specific features.
Phrase: Sharing positive feedback and appreciation

14.
Concepts: information seeking, inquiring about downloads
Relationship: Both involve seeking information and inquiring about downloads.
Criteria: Users seek information and inquire about where to download the software.
Phrase: Seeking information and inquiring about downloads

15.
Concepts: technical specifics, specifying platform details
Relationship: Both involve providing technical details and platform-specific information.
Criteria: Users provide technical specifics and specify platform details.
Phrase: Providing technical specifics and platform details

16.
Concepts: providing context, provide context for interest
Relationship: Both involve providing context or background information.
Criteria: Users provide context or background information for their statements or questions.
Phrase: Providing context and background information

17.
Concepts: clarifying requests, elaborating on questions
Relationship: Both involve clarifying and elaborating on requests or questions.
Criteria: Users clarify requests and elaborate on their questions.
Phrase: Clarifying and elaborating on requests

18.
Concepts: communicating software changes
Relationship: N/A
Criteria: Designers inform the community about software changes and announce new features and updates.
Phrase: Communicating software changes and updates
---