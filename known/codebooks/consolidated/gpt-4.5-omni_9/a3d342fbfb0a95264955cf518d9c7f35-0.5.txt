You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (14 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
14. 
Concepts: {Repeat the input 14}
Relationship: {What is logical relationship between concepts in code 14, or N/A if not applicable}
Criteria: {Who did what, and how for code 14}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: announcing component updates, communicating software updates
- Designers announce and describe updates to software components.
- Designers inform and announce updates, new features, or bug fixes.

2.
Concepts: making announcements, announcing new developments
- Designers announce future plans or updates.
- Designers announce updates, new versions, features, and version details.

3.
Concepts: providing update timelines, communicating update schedules
- Designers share and provide timelines for upcoming updates and releases.
- Designers inform users about the update schedule and communicate updates.

4.
Concepts: detailing updates, version update notes
- Designers list updates, new features, and bug fixes.
- A designer provides detailed notes on version updates and new features.

5.
Concepts: request specific features, request new features for experiments
- Users request specific features or functionalities to be added to the software.
- Users request specific features or improvements for physics experiments in the software.

6.
Concepts: proposing new features, offering improvement suggestions
- Users propose new features and improvements for the software.
- Users suggest improvements and provide feedback on the software.

7.
Concepts: clarifying feature details, detailing feature functions
- Designers explain functionality and provide technical details about features.
- Designers provide details, examples, or introductions to feature functions.

8.
Concepts: addressing user feedback, requesting user feedback
- Designers respond to user queries, feedback, and suggestions.
- Designers ask for and prompt users to provide feedback and suggestions.

9.
Concepts: soliciting community engagement, involving the community in design
- Designers invite community input and engage to elicit feedback and suggestions.
- Designers involve the community in the design process or offer co-designing opportunities.

10.
Concepts: proposing solutions, proposing design ideas
- Designers propose and offer potential solutions to technical issues.
- Designers make suggestions or propose new design ideas or features.

11.
Concepts: apologizing for inconvenience, apologies and politeness
- Designers or users apologize for disturbances or potential interruptions.
- Expressions of politeness, apologies, or acknowledgment of potential inconvenience by the designers.

12.
Concepts: expressing satisfaction, praising software features
- Users express satisfaction and praise the software's practicality.
- Users provide positive feedback and compliment the software's features.

13.
Concepts: inquiring about access, answer about access
- Users ask how to access or download the software.
- A participant provides or seeks information on how to access or download resources.

14.
Concepts: discussing future plans
- Participants discuss or share future development plans and directions for the software.
- Designers or participants discuss future updates and development plans.
===
---
Definitions for each code (14 in total):
1.
Concepts: announcing component updates, communicating software updates
Relationship: Both concepts involve the dissemination of information about software changes.
Criteria: Designers announce and describe updates, new features, or bug fixes to software components.
Phrase: Announcing software updates

2.
Concepts: making announcements, announcing new developments
Relationship: Both concepts involve sharing information about future changes or new features.
Criteria: Designers announce updates, new versions, features, and future plans.
Phrase: Announcing new developments

3.
Concepts: providing update timelines, communicating update schedules
Relationship: Both concepts involve sharing information about when updates will occur.
Criteria: Designers inform users about the timelines and schedules for upcoming updates.
Phrase: Communicating update schedules

4.
Concepts: detailing updates, version update notes
Relationship: Both concepts involve providing detailed information about updates.
Criteria: Designers provide detailed notes on updates, new features, and bug fixes.
Phrase: Detailing version updates

5.
Concepts: request specific features, request new features for experiments
Relationship: Both concepts involve users asking for new functionalities.
Criteria: Users request specific features or improvements for the software, particularly for experiments.
Phrase: Requesting new features

6.
Concepts: proposing new features, offering improvement suggestions
Relationship: Both concepts involve users suggesting enhancements.
Criteria: Users propose new features and suggest improvements for the software.
Phrase: Proposing improvements

7.
Concepts: clarifying feature details, detailing feature functions
Relationship: Both concepts involve explaining how features work.
Criteria: Designers provide technical details and explanations about feature functionalities.
Phrase: Clarifying feature details

8.
Concepts: addressing user feedback, requesting user feedback
Relationship: Both concepts involve interaction between designers and users regarding feedback.
Criteria: Designers respond to and solicit feedback and suggestions from users.
Phrase: Engaging with user feedback

9.
Concepts: soliciting community engagement, involving the community in design
Relationship: Both concepts involve actively involving the community in the design process.
Criteria: Designers invite community input and engage users in the design process.
Phrase: Involving community in design

10.
Concepts: proposing solutions, proposing design ideas
Relationship: Both concepts involve offering suggestions to improve the software.
Criteria: Designers propose solutions to technical issues and suggest new design ideas.
Phrase: Proposing design solutions

11.
Concepts: apologizing for inconvenience, apologies and politeness
Relationship: Both concepts involve expressions of regret and politeness.
Criteria: Designers or users apologize for disturbances or potential interruptions.
Phrase: Apologizing for inconvenience

12.
Concepts: expressing satisfaction, praising software features
Relationship: Both concepts involve positive feedback from users.
Criteria: Users express satisfaction and praise the software's features.
Phrase: Praising software features

13.
Concepts: inquiring about access, answer about access
Relationship: Both concepts involve seeking or providing information about access.
Criteria: Users ask and receive information on how to access or download the software.
Phrase: Inquiring about software access

14.
Concepts: discussing future plans
Relationship: N/A
Criteria: Participants discuss future development plans and directions for the software.
Phrase: Discussing future plans
---