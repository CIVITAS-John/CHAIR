You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (28 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
28. 
Concepts: {Repeat the input 28}
Relationship: {What is logical relationship between concepts in code 28, or N/A if not applicable}
Criteria: {Who did what, and how for code 28}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: user identification, question and confirm identity
- A designer interacts with a user and confirms their role.
- Designers question users' identities and roles to provide better context.

2.
Concepts: provide educational context, share teaching identity and background
- Users discuss their teaching environments and provide relevant educational context.
- Users share their teaching experiences and identities.

3.
Concepts: approving software, compliment features and design
- Users express approval or satisfaction with the software, indicating positive feedback.
- Users compliment the software's design and specific features.

4.
Concepts: acknowledgment, community gratitude
- Participants acknowledge and thank other community members.
- A participant thanks the community for support or contributions.

5.
Concepts: user reactions, expressing emotions
- Instances where users express their reactions to updates or announcements, often using emojis.
- Users express emotions or reactions using emojis or non-verbal indicators.

6.
Concepts: encouragement, encouraging feedback
- Users offer encouragement and positive reinforcement.
- Users provide feedback and encourage others to contribute ideas or suggestions.

7.
Concepts: promise features and ongoing updates, managing update and feature expectations
- Designers promise to introduce new features or ongoing updates with specific goals or timelines.
- Designers set expectations about the availability or timeline of new updates and features.

8.
Concepts: express concern, anticipate updates and inquire timelines
- A user expresses concern about the status of updates, often highlighting delays or pending releases.
- Users express anticipation and ask about development timelines for upcoming software updates.

9.
Concepts: confirm and communicate release schedules, communicate updates and version information
- Designers inform and confirm the timing of upcoming software updates.
- Designers keep users informed about software updates and details of specific software releases.

10.
Concepts: version information, providing version update notes
- Designer provides information about the version available to the group.
- Designers clarify which software version is referenced and provide detailed notes on updates, features, and bug fixes.

11.
Concepts: sharing development updates, discuss update timelines and progress
- Information shared by designers about the status, updates, and future plans for the software.
- Designers update the community about timelines, progress, and upcoming software releases.

12.
Concepts: announce features and updates, announcing development and update plans
- Designers announce new features, update components, and share these updates with the community.
- Designers announce development plans, updates, and provide download resources.

13.
Concepts: list and plan feature development, discuss future plans and features
- Participants list future features and outline planned implementations and timelines.
- Participants discuss future developments, ongoing and future projects, and software features.

14.
Concepts: problem solving, providing technical support
- Guidance provided by the designer on how users can get support for issues they encounter.
- Designers provide technical assistance and support to help users effectively use the product.

15.
Concepts: collaborative learning, share design knowledge and experiences
- Users or designers engage in collaborative learning experiences.
- Users or designers share design-related knowledge, experiences, and support each other.

16.
Concepts: encourage community discussion, encourage interaction and future questions
- Designers encourage users to discuss issues or suggestions within the community group.
- Designers or participants encourage users to engage, ask questions, and provide input for ongoing discussions and updates.

17.
Concepts: advise on development approach, prioritize and suggest using feedback
- Users advise designers on the development approach or priorities.
- Designers prioritize software development based on user feedback and suggestions.

18.
Concepts: soliciting user feedback, inquiring user input for future iterations, invite and incorporate feature feedback
- Designers seek feedback or suggestions to inform design decisions.
- Designers solicit user input for future software iterations.
- Designers invite and include user feedback for new features or improvements.

19.
Concepts: responding to feedback, react to and acknowledge feedback
- Designers actively respond to feedback, queries, or suggestions from users.
- Designers react to user feedback and discuss planned improvements based on the feedback.

20.
Concepts: inquiring roles and needs, gather information and build rapport
- Designers ask users about their roles and specific needs to tailor responses or solutions.
- Designers seek information about users' contexts and build rapport by asking about backgrounds.

21.
Concepts: discuss and consider compatibility, mention and discuss compatibility issues
- Participants discuss software compatibility with different systems and consider future compatibility.
- Designers mention compatibility issues and discuss platform limitations of the software.

22.
Concepts: compare feature complexities, discuss feature development complexity
- Comparing the complexities and challenges of different features or tasks.
- Designers discuss the development process and complexity of specific features.

23.
Concepts: explaining benefits, explain and justify suggestions
- Users explain how potential features or improvements provide educational benefits.
- Users explain their suggestions by providing reasons and potential benefits.

24.
Concepts: explain feature functions, component functionality
- Designers provide detailed explanations and examples of how features work.
- A designer directly mentions the functionality of a specific component and describes its purpose.

25.
Concepts: request new features, expand platform scope
- Users request new features or additional tools related to the Physics Lab.
- User requesting the addition of specific physics experiments to the platform.

26.
Concepts: eliciting feedback, seeking community input
- Soliciting feedback or suggestions from the community in order to iteratively improve the project.
- Community members or designers actively seek feedback or suggestions on project aspects.

27.
Concepts: seek information and ask questions, inquire and clarify software versions
- Users ask questions to gain knowledge or seek technical information about the software.
- Users inquire about specific software versions and clarify platform specifications.

28.
Concepts: providing specific feedback, express and highlight needs
- Users or designers provide specific feedback or mention prompts based on feedback.
- Users express needs for specific features or usability improvements and provide feedback.
===
---
Definitions for each code (28 in total):
1.
Concepts: user identification, question and confirm identity
Relationship: N/A
Criteria: Designers interact with users and confirm their roles to provide context.
Phrase: Confirm user identity

2.
Concepts: provide educational context, share teaching identity and background
Relationship: N/A
Criteria: Users discuss their teaching environments, experiences, and identities.
Phrase: Share educational context

3.
Concepts: approving software, compliment features and design
Relationship: N/A
Criteria: Users express satisfaction with the software and compliment its design and features.
Phrase: Compliment software design

4.
Concepts: acknowledgment, community gratitude
Relationship: N/A
Criteria: Participants thank other community members for their support or contributions.
Phrase: Express community gratitude

5.
Concepts: user reactions, expressing emotions
Relationship: N/A
Criteria: Users express their reactions or emotions using emojis or non-verbal indicators.
Phrase: Express emotional reactions

6.
Concepts: encouragement, encouraging feedback
Relationship: N/A
Criteria: Users offer encouragement and provide positive feedback to motivate further contributions.
Phrase: Encourage feedback

7.
Concepts: promise features and ongoing updates, managing update and feature expectations
Relationship: N/A
Criteria: Designers promise new features or updates and set expectations about their timelines.
Phrase: Manage update expectations

8.
Concepts: express concern, anticipate updates and inquire timelines
Relationship: N/A
Criteria: Users express concern about update status and ask about development timelines.
Phrase: Inquire update timelines

9.
Concepts: confirm and communicate release schedules, communicate updates and version information
Relationship: N/A
Criteria: Designers inform users about release schedules, updates, and version details.
Phrase: Communicate release information

10.
Concepts: version information, providing version update notes
Relationship: N/A
Criteria: Designers provide information on available software versions and detailed update notes.
Phrase: Provide version notes

11.
Concepts: sharing development updates, discuss update timelines and progress
Relationship: N/A
Criteria: Designers share status updates and plans for future software developments.
Phrase: Share development progress

12.
Concepts: announce features and updates, announcing development and update plans
Relationship: N/A
Criteria: Designers announce new features, updates, and provide resources to the community.
Phrase: Announce new features

13.
Concepts: list and plan feature development, discuss future plans and features
Relationship: N/A
Criteria: Participants list and discuss planned features, ongoing projects, and future developments.
Phrase: Discuss future feature plans

14.
Concepts: problem solving, providing technical support
Relationship: N/A
Criteria: Designers provide technical assistance and guidance for resolving user issues.
Phrase: Offer technical support

15.
Concepts: collaborative learning, share design knowledge and experiences
Relationship: N/A
Criteria: Users or designers engage in collaborative learning and share design knowledge and experiences.
Phrase: Share design knowledge

16.
Concepts: encourage community discussion, encourage interaction and future questions
Relationship: N/A
Criteria: Designers or participants encourage community interaction, discussions, and future questions.
Phrase: Promote community interaction

17.
Concepts: advise on development approach, prioritize and suggest using feedback
Relationship: N/A
Criteria: Users advise designers on development priorities and suggest based on feedback.
Phrase: Prioritize development feedback

18.
Concepts: soliciting user feedback, inquiring user input for future iterations, invite and incorporate feature feedback
Relationship: N/A
Criteria: Designers solicit user feedback and input for future software iterations and features.
Phrase: Solicit user feedback

19.
Concepts: responding to feedback, react to and acknowledge feedback
Relationship: N/A
Criteria: Designers respond to user feedback and discuss planned improvements.
Phrase: Acknowledge user feedback

20.
Concepts: inquiring roles and needs, gather information and build rapport
Relationship: N/A
Criteria: Designers ask users about their roles and needs to gather information and build rapport.
Phrase: Inquire user roles

21.
Concepts: discuss and consider compatibility, mention and discuss compatibility issues
Relationship: N/A
Criteria: Participants discuss software compatibility and consider future platform limitations.
Phrase: Discuss compatibility issues

22.
Concepts: compare feature complexities, discuss feature development complexity
Relationship: N/A
Criteria: Designers discuss the complexities and challenges involved in developing specific features.
Phrase: Discuss feature complexity

23.
Concepts: explaining benefits, explain and justify suggestions
Relationship: N/A
Criteria: Users explain the potential benefits of features or improvements based on suggestions.
Phrase: Justify feature suggestions

24.
Concepts: explain feature functions, component functionality
Relationship: N/A
Criteria: Designers provide detailed explanations of feature functions and specific component purposes.
Phrase: Explain feature functions

25.
Concepts: request new features, expand platform scope
Relationship: N/A
Criteria: Users request new features or additional tools and expansions related to the Physics Lab platform.
Phrase: Request new features

26.
Concepts: eliciting feedback, seeking community input
Relationship: N/A
Criteria: Community members or designers seek feedback or suggestions to improve the project iteratively.
Phrase: Seek community feedback

27.
Concepts: seek information and ask questions, inquire and clarify software versions
Relationship: N/A
Criteria: Users ask questions to gain information about software versions and clarify platform details.
Phrase: Inquire software details

28.
Concepts: providing specific feedback, express and highlight needs
Relationship: N/A
Criteria: Users provide specific feedback and express needs for features or usability improvements.
Phrase: Highlight user needs