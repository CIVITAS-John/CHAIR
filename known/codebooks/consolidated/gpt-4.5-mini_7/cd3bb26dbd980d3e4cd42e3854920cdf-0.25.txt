You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (17 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
17. 
Concepts: {Repeat the input 17}
Relationship: {What is logical relationship between concepts in code 17, or N/A if not applicable}
Criteria: {Who did what, and how for code 17}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: list bug fixes, list software features
- Designers list new features and bug fixes in the software update and provide a detailed overview of the new features and bug fixes in the software update.
- Designers list new components and features included in the software update and upcoming features that will be included in the software.

2.
Concepts: provide community updates, announce software updates
- Designers provide updates or announcements about the software and announce future updates and solicit user input on desired features.
- Designers announce the release of a new version of the software, inform users about the availability of new software versions or updates, and notify the community about the release of a new software version and its updates.

3.
Concepts: announce new features, describe product updates
- Designers announce new features and updates in a version release note and provide detailed notes on version updates, including new features and improvements.
- Designers communicate details about a significant update to the product and inform users about changes to component functionality in upcoming updates.

4.
Concepts: confirm version updates, provide update timelines
- Designer communicated details about a version update and its expected timeline and confirmed the timeline for upcoming updates and releases.
- A designer informs the community about the expected timing of an Android update and provides a timeline for the release of an Android version update.

5.
Concepts: highlight progress, share development updates
- The designer highlights the significant progress made in software updates and updates the community on the progress of software releases and updates.
- The designer shared visual updates related to the software's development and shared detailed information about updates and new features in the software.

6.
Concepts: planned updates, make update announcements
- Information shared by designers about upcoming features or updates.
- Designers make announcements regarding updates and development plans.

7.
Concepts: plan product improvements, plan future design
- Designers discuss plans for future updates and improvements to the software.
- Designers share plans for future design initiatives or features and outline future plans or considerations for software development.

8.
Concepts: gather detailed requirements, inquire about user needs
- Designer requests detailed feedback or requirements from users.
- Designers inquire about specific user requirements or preferences for the software and seek input or clarification from users to better understand their needs.

9.
Concepts: asking for future help, gather user input
- The designer indicates a willingness to seek user input for future development stages.
- The designer plans to gather user opinions before further development and seeks user input for specific technical aspects and future iterations.

10.
Concepts: ask questions for clarification, ask clarification questions
- Users and designers ask questions to gather information or clarify aspects of the software or its usage.
- The designer asks users to clarify the problems they are experiencing with the application and asked users about their experiences to identify issues with the software.

11.
Concepts: follow-up, ask follow-up questions
- Users or designers engage in a dialogue to clarify or confirm details about software compatibility or requirements.
- A designer followed up with users to clarify issues they encountered and sought clarification on user preferences or requirements to ensure proper understanding.

12.
Concepts: discuss feature adjustments, discuss feature improvements
- Designer discussed the need for adjustments in software features.
- Designers discuss improvements to features based on user feedback.

13.
Concepts: share success stories, compliment student engagement
- Users describe successful experiences using the software in educational settings and express positive feedback about the software's functionality and effectiveness.
- Users share positive feedback about the software's impact on student engagement and describe positive reactions from students regarding the applicationâ€™s effectiveness in class.

14.
Concepts: appreciate designers' work, express gratitude
- A user expresses appreciation for the designer's work and effort and acknowledges the designer's efforts and expresses gratitude.
- Instances where users express thanks or appreciation for the work done by the designers or other community members and express support, encouragement, or appreciation for the designers' efforts.

15.
Concepts: express need for documentation, request user manual
- A user expresses a need for documentation or user manuals related to the application.
- Users request a user manual to assist with understanding and using the software and reiterate their request for a user manual to better understand the software.

16.
Concepts: provide user feedback, suggest new features
- Users provide feedback or suggestions about the software's features and improvements and provide specific feedback regarding an aspect of the software.
- Users suggest new features that could improve the software's functionality and suggest specific features or improvements for the software based on their experiences.

17.
Concepts: solicit user suggestions, seek user feedback
- The designer invites users to share suggestions and requirements for the software.
- Designers actively seek and request feedback from users to improve software, invite users to provide feedback, and prompt users to share suggestions for improvement.
===
---
Definitions for each code (17 in total):
1.
Concepts: list bug fixes, list software features  
Relationship: Both concepts involve designers detailing updates to the software, focusing on improvements and corrections.  
Criteria: Designers list new features and bug fixes in the software update and provide a detailed overview of these updates.  
Phrase: Document software updates.

2.
Concepts: provide community updates, announce software updates  
Relationship: Both concepts involve communication from designers to the community regarding software changes and future plans.  
Criteria: Designers provide updates or announcements about the software and solicit user input on desired features.  
Phrase: Communicate software changes.

3.
Concepts: announce new features, describe product updates  
Relationship: Both concepts focus on informing users about enhancements and modifications in the software.  
Criteria: Designers announce new features and provide detailed notes on version updates.  
Phrase: Inform about product enhancements.

4.
Concepts: confirm version updates, provide update timelines  
Relationship: Both concepts involve designers communicating the status and timing of software updates to the community.  
Criteria: Designers confirm the timeline for upcoming updates and inform the community about expected timing.  
Phrase: Communicate update timelines.

5.
Concepts: highlight progress, share development updates  
Relationship: Both concepts involve sharing information about the status and advancements in software development.  
Criteria: Designers highlight significant progress made in software updates and share detailed information about new features.  
Phrase: Share development progress.

6.
Concepts: planned updates, make update announcements  
Relationship: Both concepts involve designers communicating future plans regarding software updates.  
Criteria: Designers share information about upcoming features or updates and make announcements regarding development plans.  
Phrase: Announce future updates.

7.
Concepts: plan product improvements, plan future design  
Relationship: Both concepts involve designers discussing future enhancements and design initiatives for the software.  
Criteria: Designers discuss plans for future updates and outline considerations for software development.  
Phrase: Outline future improvements.

8.
Concepts: gather detailed requirements, inquire about user needs  
Relationship: Both concepts focus on understanding user needs to inform software development.  
Criteria: Designers request detailed feedback from users and inquire about specific user requirements.  
Phrase: Collect user requirements.

9.
Concepts: asking for future help, gather user input  
Relationship: Both concepts involve designers seeking user input for future development stages.  
Criteria: Designers indicate a willingness to seek user input and plan to gather opinions before further development.  
Phrase: Seek user input.

10.
Concepts: ask questions for clarification, ask clarification questions  
Relationship: Both concepts involve communication aimed at clarifying issues related to the software.  
Criteria: Users and designers ask questions to gather information or clarify aspects of the software.  
Phrase: Clarify software issues.

11.
Concepts: follow-up, ask follow-up questions  
Relationship: Both concepts involve ongoing dialogue to ensure understanding of user experiences and software requirements.  
Criteria: Designers follow up with users to clarify issues and preferences.  
Phrase: Engage in follow-up discussions.

12.
Concepts: discuss feature adjustments, discuss feature improvements  
Relationship: Both concepts involve conversations about modifying software features based on user feedback.  
Criteria: Designers discuss the need for adjustments and improvements to software features.  
Phrase: Evaluate feature enhancements.

13.
Concepts: share success stories, compliment student engagement  
Relationship: Both concepts involve users providing positive feedback about their experiences with the software.  
Criteria: Users describe successful experiences and express positive feedback about the software's effectiveness.  
Phrase: Share positive experiences.

14.
Concepts: appreciate designers' work, express gratitude  
Relationship: Both concepts involve users acknowledging and expressing thanks for the efforts of designers.  
Criteria: Users express appreciation for the designer's work and acknowledge their efforts.  
Phrase: Express gratitude.

15.
Concepts: express need for documentation, request user manual  
Relationship: Both concepts involve users seeking additional resources to better understand the software.  
Criteria: Users express a need for documentation or user manuals related to the application.  
Phrase: Request user documentation.

16.
Concepts: provide user feedback, suggest new features  
Relationship: Both concepts involve users offering insights and suggestions to improve the software.  
Criteria: Users provide feedback or suggestions about the software's features and improvements.  
Phrase: Offer user suggestions.

17.
Concepts: solicit user suggestions, seek user feedback  
Relationship: Both concepts involve designers actively requesting input from users to enhance the software.  
Criteria: Designers invite users to share suggestions and actively seek feedback for improvement.  
Phrase: Request user feedback.
---