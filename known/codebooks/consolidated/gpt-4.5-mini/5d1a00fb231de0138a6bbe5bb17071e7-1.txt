You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (50 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
50. 
Concepts: {Repeat the input 50}
Relationship: {What is logical relationship between concepts in code 50, or N/A if not applicable}
Criteria: {Who did what, and how for code 50}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: use non-verbal communication, use emojis to express emotions
- Users express themselves through non-verbal symbols such as emojis in communication.
- Users use emojis to contribute emotional context and expressions within discussions.

2.
Concepts: confirm finding information, acknowledge receipt of information
- A user acknowledges the receipt of information or files that were shared.
- Users express acknowledgment of received information or requests from others.

3.
Concepts: share positive feedback, software effectiveness
- Users share positive feedback regarding the software's impact on students.
- Users express satisfaction with the performance of the software during educational use.

4.
Concepts: compare with similar apps, comparative feedback
- Users compare the software with similar applications to highlight advantages.
- Users provide evaluations of the software by comparing it to similar tools, highlighting practical versus impractical features.

5.
Concepts: praise the software, provide positive reviews
- Users express positive evaluations of the software.
- Users express positive opinions about the software's usefulness.

6.
Concepts: evaluate usability, gauge user satisfaction
- Users comment on how user-friendly and practical the software is.
- Users express satisfaction with the software’s functionality and usability.

7.
Concepts: acknowledgment, acknowledge efforts
- Users acknowledge and commend efforts made by designers while providing specific feedback or requests.
- Users express gratitude for the efforts made by designers and fellow community members.

8.
Concepts: acknowledge craftsmanship, appreciate craftsmanship
- Users acknowledge and appreciate skills or dedication to craft within the community.
- Users express admiration for the quality of work and dedication evident in the development.

9.
Concepts: inquire about update timelines, engage with development process
- Users inquire about timelines for future updates or enhancements.
- User inquires about the timing of an update, indicating engagement with the development process.

10.
Concepts: seek further guidance, request user manuals
- Users repeat requests for additional guidance in the form of a user manual.
- Users request manuals or documentation to better comprehend software functionalities.

11.
Concepts: seek usage support, request assistance instructions, technical support request
- Users express their needs for clarity or guidance regarding software usage.
- Users ask for help regarding software usage and interactions.
- Users request assistance or guidance on technical aspects or features of the software.

12.
Concepts: make user inquiries, ask usage questions
- Users make inquiries about software usage and functionalities.
- Users seek instructions for effectively utilizing specific software features.

13.
Concepts: ask technical questions, show interest in technical details
- Users ask technical questions about the software, revealing areas of interest.
- Users express a desire for in-depth technical information regarding specific software versions or functionalities.

14.
Concepts: identify user roles, inquire about user identity
- Designers inquire about users' roles to gain insight into their perspectives.
- Designers seek information about users’ professional backgrounds to guide discussions.

15.
Concepts: list new features, list upcoming features
- Designers list various new improvements and features from recent updates or revisions.
- Designers outline features expected to be included in future software updates.

16.
Concepts: explain upcoming software features, announce new software features
- A designer explains forthcoming features and improvements in the application.
- A designer announces new features added to the software in a specific version update, detailing version specifics and enhancements.

17.
Concepts: announce software updates, notify about software updates, announce software version updates, inform about software updates
- Designers provide information regarding upcoming software updates and new features.
- Designers inform the community about the release and availability of new software versions.
- A designer announces updated software versions, informs users about changes, and specifies their availability.
- Designers inform users about software updates and provide descriptions of the changes made.

18.
Concepts: share visual updates, preview upcoming software updates
- Designers share images or visual materials illustrating upcoming software changes.
- The designer provides information and visuals related to upcoming features or changes.

19.
Concepts: provide version update details, provide version update information
- Designers provide summaries detailing new features and updates associated with version releases.
- Designers share updates on software versions and their current status in the app distribution process.

20.
Concepts: make community announcements, announce plans to the community
- Designers provide updates or announcements about the software to the community.
- Designers announce their plans for updates and community involvement processes.

21.
Concepts: provide update schedules, share planned software updates, discuss update timelines
- Designers provide an estimated timeline for future software updates.
- Designers share information about upcoming features and the timelines for future updates.
- The designer discusses timelines for software updates and planned development phases.

22.
Concepts: provide a feature roadmap, outline development priorities
- Designers outline priorities for completing various software sections.
- Designers outline priorities and sequences for software development tasks.

23.
Concepts: development update, provide technical updates
- Information shared by designers about the current status, updates, and future plans for the Physics Lab software.
- Designers provide information about updates or changes to the Physics Lab software and its functionalities.

24.
Concepts: plan future updates, plan for feature development, outline future plans
- Designers present plans for updates and enhancements for the software going forward.
- Designers describe current developments and future plans for new software features.
- Designers outline future paths for software development and design considerations.

25.
Concepts: confirm feature updates, confirm future implementation
- Designers confirm specific updates and their expected timelines to users.
- Designers confirm existing or anticipated features and updates as part of their commitment to users.

26.
Concepts: feature implementation, respond to feature requests
- Designer indicates the intention to implement a requested feature in the next update.
- Designers indicate willingness to include requested features in upcoming updates.

27.
Concepts: clarify version type, give more information about the version uploaded
- Designers clarify details about the version of the software currently being discussed or in use.
- Designers clarify the specifics about the version of software currently available in the community.

28.
Concepts: highlight feature stability, explain feature importance
- Designers note features that are crucial for ensuring software stability over time.
- Designer explains the significance of certain features in maintaining software stability.

29.
Concepts: plan for updates, discuss future plans
- Designers discuss future update plans influenced by user feedback and priorities.
- Designers discuss future compatibility and development considerations based on user needs.

30.
Concepts: opinion gathering, plan for iterative feedback
- Designers convey plans to gather feedback before starting significant new developments.
- Designers discuss intentions to gather user feedback before finalizing development changes.

31.
Concepts: accept user suggestions, acknowledge implementation of feedback
- Designers acknowledge and commit to incorporating user suggestions into future software updates.
- Designers acknowledge user suggestions and confirm plans to implement improvements.

32.
Concepts: appreciation of feedback, acknowledge user feedback
- Designers acknowledge and express gratitude for constructive feedback from users.
- Designers affirmatively acknowledge user input, demonstrating attentiveness.

33.
Concepts: provide design suggestions, share potential solutions
- Users offer insights on desired future features and functionalities.
- Designer describes design intents that aim to support user functionality based on collected feedback.

34.
Concepts: gather detailed requirements, inquire about user requests
- Designers seek detailed input from users to refine features or requirements.
- Designers seek input or clarification to better understand user requests and needs.

35.
Concepts: inquire about user problems, gather user experience feedback
- The designer seeks information about difficulties users may have encountered.
- Designers ask users to identify any issues they faced during usage to gather insights for improvements.

36.
Concepts: seek user input, encourage user feedback, solicit user feedback
- Designers seek and encourage user suggestions and feedback for future enhancements.
- Designers actively encourage users to provide suggestions or feedback.
- Designers actively solicit user opinions on features or improvements.

37.
Concepts: invite user feedback, invite feature requests
- Designers invite user feedback and suggestions for improvements in the software.
- Designers invite users to suggest enhancements or features to the software.

38.
Concepts: involve users in design, invite user participation
- Designers actively involve users in the design process through feedback or testing.
- Designers encourage users to contribute ideas or feedback during the project phase.

39.
Concepts: offer solutions to users, commit to providing a solution
- Designers provide solutions or instructions to address user questions or issues.
- Designers express intent to provide support or solutions to users based on their needs and questions.

40.
Concepts: apologize for disturbances, show consideration through apology, apologies and politeness
- Designers apologize for any inconveniences caused due to their communication or actions.
- Designers convey apologies to users for any inconvenience during communications.
- Expressions of politeness, apologies, or acknowledgment of potential inconvenience by the designers.

41.
Concepts: ensure proper operation, provide usage instructions
- Designers instruct users on necessary steps for the proper operation of software components.
- The designer illustrates how to operate application components by providing usage instructions to users.

42.
Concepts: provide feature explanations, explain software functionality
- The designers offer clarifications and examples regarding how particular features operate and their benefits.
- The designer describes new component capabilities and highlights specific feature functionalities with examples.

43.
Concepts: physics concepts, submit feature requests
- Users request specific demonstrations or features related to physics concepts within the software.
- Users submit requests for new physics-related features within the application.

44.
Concepts: user need, emphasize usability needs
- Users indicate needs or requirements that influence software development or usage.
- Users articulate usability needs while explaining their feature requests.

45.
Concepts: suggest educational features, suggest educational enhancements
- Users propose features that would strengthen the software's educational effectiveness.
- User requests enhancements that could improve educational delivery using the software.

46.
Concepts: suggest practical use case, suggest alternative solutions
- Users suggest practical applications for enhancing the software's usability.
- Users present alternative methods or solutions to enhance the effectiveness of software usage.

47.
Concepts: compatibility assurance, confirm system compatibility
- Developer assures compatibility of software with certain hardware or systems.
- Designers confirm the software's compatibility status with various operating systems.

48.
Concepts: discuss input methods
- Developer initiates a discussion about methods for input within the software.
- Designers consider and discuss input methods relevant to data entry and usability within the software.

49.
Concepts: manage user expectations
- Designers set realistic timelines and limitations regarding the software's capabilities and future developments to users.
- Designers communicate realistic expectations around software features and updates.

50.
Concepts: gather user input
- Designers seek opinions from users regarding widely used practices or conventions in their respective fields.
- Designers indicate plans to gather user input before progressing with project stages.
===
---
Definitions for each code (50 in total):
1.
Concepts: use non-verbal communication, use emojis to express emotions
Relationship: Non-verbal communication is complemented by emojis, which enhance emotional expression.
Criteria: Users express themselves and contribute emotional context through non-verbal symbols like emojis.
Phrase: Express emotions through non-verbal symbols.

2.
Concepts: confirm finding information, acknowledge receipt of information
Relationship: Confirmation of finding information inherently includes acknowledging receipt of said information.
Criteria: A user acknowledges and confirms the receipt of information shared in discussions.
Phrase: Acknowledge receipt of information.

3.
Concepts: share positive feedback, software effectiveness
Relationship: Positive feedback directly relates to the assessment of software effectiveness.
Criteria: Users provide positive evaluations regarding the software's impact on educational outcomes.
Phrase: Share positive evaluations of software effectiveness.

4.
Concepts: compare with similar apps, comparative feedback
Relationship: Comparative feedback results from contrasting the software with other applications.
Criteria: Users provide evaluations highlighting advantages found in comparisons with similar tools.
Phrase: Compare software with similar applications.

5.
Concepts: praise the software, provide positive reviews
Relationship: Praising the software generates positive reviews reflecting users' satisfaction.
Criteria: Users express positive evaluations and opinions about the software's usefulness.
Phrase: Provide positive evaluations of the software.

6.
Concepts: evaluate usability, gauge user satisfaction
Relationship: Evaluating usability involves gauging users' satisfaction with the software's functionality.
Criteria: Users provide comments focused on user-friendliness and satisfaction with usability.
Phrase: Evaluate software usability and satisfaction.

7.
Concepts: acknowledgment, acknowledge efforts
Relationship: Acknowledgment of efforts involves recognizing the contributions made by others.
Criteria: Users commend and express gratitude for the efforts of designers and community members.
Phrase: Acknowledge efforts and contributions.

8.
Concepts: acknowledge craftsmanship, appreciate craftsmanship
Relationship: Acknowledgment of craftsmanship reflects a deeper appreciation for the quality of work.
Criteria: Users recognize skills and dedication within the community's development efforts.
Phrase: Appreciate and acknowledge craftsmanship.

9.
Concepts: inquire about update timelines, engage with development process
Relationship: Inquiring about timelines indicates a level of engagement with the development process.
Criteria: Users inquire about future update timelines, showing interest in the development.
Phrase: Inquire about update timelines.

10.
Concepts: seek further guidance, request user manuals
Relationship: Seeking guidance often includes requests for manuals or documentation for clarity.
Criteria: Users request user manuals to enhance understanding of software functionalities.
Phrase: Request additional guidance and manuals.

11.
Concepts: seek usage support, request assistance instructions, technical support request
Relationship: Requests for usage support encompass various forms of guidance on technical issues.
Criteria: Users express needs for clarity and assistance regarding software interactions and usage.
Phrase: Request assistance and usage support.

12.
Concepts: make community inquiries, ask usage questions
Relationship: Inquiries regarding software usage naturally lead to asking detailed usage questions.
Criteria: Users make inquiries about functionalities, seeking effective utilization of the software.
Phrase: Ask questions about software usage.

13.
Concepts: ask technical questions, show interest in technical details
Relationship: Asking technical questions reflects an interest in deeper technical aspects of the software.
Criteria: Users express a desire for detailed information about specific software functionalities.
Phrase: Inquire about technical details.

14.
Concepts: identify user roles, inquire about user identity
Relationship: Identifying user roles necessitates inquiries to better understand perspectives.
Criteria: Designers seek information on users' roles to facilitate relevant discussions.
Phrase: Inquire about user roles and identity.

15.
Concepts: list new features, list upcoming features
Relationship: Listing new features entails detailing both recently added and expected features.
Criteria: Designers enumerate current improvements along with anticipated features for users.
Phrase: List new and upcoming features.

16.
Concepts: explain upcoming software features, announce new software features
Relationship: Explaining and announcing features share the goal of informing users of enhancements.
Criteria: Designers articulate forthcoming software features, detailing specifics of updates.
Phrase: Announce and explain new features.

17.
Concepts: announce software updates, notify about software updates, announce software version updates, inform about software updates
Relationship: Announcements about updates inherently include notifications to users regarding version changes.
Criteria: Designers provide comprehensive information about upcoming software updates and versions.
Phrase: Inform users about software updates.

18.
Concepts: share visual updates, preview upcoming software updates
Relationship: Sharing visuals serves to enhance the understanding of upcoming software changes.
Criteria: Designers provide visual representations related to upcoming feature updates.
Phrase: Preview upcoming software updates visually.

19.
Concepts: provide version update details, provide version update information
Relationship: Providing version details is directly related to conveying essential update information.
Criteria: Designers share summaries of new features associated with software version releases.
Phrase: Share version update details.

20.
Concepts: make community announcements, announce plans to the community
Relationship: Community announcements are integral to keeping members informed about plans.
Criteria: Designers deliver updates and announcements about the software to the community.
Phrase: Make announcements to the community.

21.
Concepts: provide update schedules, share planned software updates, discuss update timelines
Relationship: Sharing update schedules involves discussing planned updates and their timelines.
Criteria: Designers provide estimated timelines for upcoming software updates and features.
Phrase: Discuss and share update schedules.

22.
Concepts: provide a feature roadmap, outline development priorities
Relationship: Outlining development priorities corresponds with providing a roadmap for software features.
Criteria: Designers delineate priorities for software section completions and developments.
Phrase: Outline development priorities and roadmaps.

23.
Concepts: development update, provide technical updates
Relationship: Technical updates are part of the overall development status reporting.
Criteria: Designers offer insights on current statuses, updates, and future plans for the software.
Phrase: Provide development and technical updates.

24.
Concepts: plan future updates, plan for feature development, outline future plans
Relationship: Planning for updates includes outlining future developments and feature additions.
Criteria: Designers articulate plans for software enhancements and future features.
Phrase: Plan and outline future updates.

25.
Concepts: confirm feature updates, confirm future implementation
Relationship: Confirming existing features correlates with anticipating the implementation of new features.
Criteria: Designers affirm specific updates and their expected timelines for users.
Phrase: Confirm future feature implementations.

26.
Concepts: feature implementation, respond to feature requests
Relationship: Responding to requests inherently involves considerations for future feature implementations.
Criteria: Designers indicate the intention to include requested features in upcoming updates.
Phrase: Respond to feature requests and considerations.

27.
Concepts: clarify version type, give more information about the version uploaded
Relationship: Clarification about version types is necessary for understanding current software use.
Criteria: Designers explain specifics about software versions currently available in the community.
Phrase: Clarify details of the software version.

28.
Concepts: highlight feature stability, explain feature importance
Relationship: Emphasizing stability informs users about critical features and their significance.
Criteria: Designers note and explain crucial features for maintaining the software's stability.
Phrase: Explain the importance of feature stability.

29.
Concepts: plan for updates, discuss future plans
Relationship: Planning for updates is a crucial part of discussing future software paths.
Criteria: Designers discuss upcoming update plans influenced by user feedback and priorities.
Phrase: Discuss plans for future updates.

30.
Concepts: opinion gathering, plan for iterative feedback
Relationship: Gathering opinions is vital for establishing an iterative feedback process.
Criteria: Designers express intentions to seek user feedback before significant developments begin.
Phrase: Gather opinions for feedback planning.

31.
Concepts: accept user suggestions, acknowledge implementation of feedback
Relationship: Accepting suggestions connects with acknowledging their incorporation into future updates.
Criteria: Designers express commitment to implementing user suggestions in software updates.
Phrase: Acknowledge and accept user suggestions.

32.
Concepts: appreciation of feedback, acknowledge user feedback
Relationship: Appreciation involves recognizing and valuing the feedback provided by users.
Criteria: Designers express gratitude and attentiveness towards constructive user feedback.
Phrase: Appreciate and acknowledge user feedback.

33.
Concepts: provide design suggestions, share potential solutions
Relationship: Providing design suggestions correlates with sharing solutions based on feedback.
Criteria: Users offer insights for desired software features, and designers share intended functionalities.
Phrase: Provide and share design suggestions.

34.
Concepts: gather detailed requirements, inquire about user requests
Relationship: Gathering requirements necessitates inquiries to fully understand user needs.
Criteria: Designers seek detailed clarification on user requests to refine software features.
Phrase: Inquire and gather detailed user requirements.

35.
Concepts: inquire about user problems, gather user experience feedback
Relationship: Inquiring about problems is critical to collecting comprehensive user experience feedback.
Criteria: Designers ask users about difficulties faced to gather insights for software improvements.
Phrase: Gather user experience feedback on issues.

36.
Concepts: seek user input, encourage user feedback, solicit user feedback
Relationship: Seeking user input involves actively encouraging feedback and suggestions.
Criteria: Designers encourage users to provide their thoughts and suggestions for enhancements.
Phrase: Solicit and seek user input.

37.
Concepts: invite user feedback, invite feature requests
Relationship: Inviting feedback encompasses suggesting enhancements and feature requests from users.
Criteria: Designers actively invite users to suggest improvements and features for software.
Phrase: Invite users to provide feedback and requests.

38.
Concepts: involve users in design, invite user participation
Relationship: Involving users in design is directly related to inviting their participation and feedback.
Criteria: Designers encourage user contributions during the design and testing phases of development.
Phrase: Involve users in design processes.

39.
Concepts: offer solutions to users, commit to providing a solution
Relationship: Offering solutions encompasses a commitment to addressing user questions or issues.
Criteria: Designers provide solutions and express their intent to support users' inquiries.
Phrase: Offer and commit to solutions for users.

40.
Concepts: apologize for disturbances, show consideration through apology, apologies and politeness
Relationship: Apologies represent a form of politeness and consideration for user experiences.
Criteria: Designers express apologies for any inconvenience caused during communication.
Phrase: Apologize for disturbances and inconveniences.

41.
Concepts: ensure proper operation, provide usage instructions
Relationship: Ensuring proper operation involves providing specific usage instructions to users.
Criteria: Designers instruct users on how to operate the software components effectively.
Phrase: Provide instructions for proper operation.

42.
Concepts: provide feature explanations, explain software functionality
Relationship: Providing explanations is crucial to understanding the functionalities of software features.
Criteria: Designers clarify how particular features operate and their benefits to users.
Phrase: Explain software functionalities and features.

43.
Concepts: physics concepts, submit feature requests
Relationship: Submitting requests for features often relates to specific physics demonstrations or concepts.
Criteria: Users request features that align with specific physics concepts relevant to the software.
Phrase: Submit feature requests related to physics concepts.

44.
Concepts: user need, emphasize usability needs
Relationship: User needs often prompt discussions emphasizing the necessity for usability considerations.
Criteria: Users articulate their requirements, which guide software development and usability.
Phrase: Emphasize usability and user needs.

45.
Concepts: suggest educational features, suggest educational enhancements
Relationship: Suggesting features and enhancements aligns with improving educational effectiveness.
Criteria: Users propose enhancements that could strengthen the software's educational delivery.
Phrase: Suggest educational enhancements and features.

46.
Concepts: suggest practical use case, suggest alternative solutions
Relationship: Suggesting practical use cases may involve offering alternative approaches to enhance usability.
Criteria: Users present practical applications and alternative solutions to improve software effectiveness.
Phrase: Suggest practical use cases and solutions.

47.
Concepts: compatibility assurance, confirm system compatibility
Relationship: Confirming system compatibility addresses concerns related to software functionality on different platforms.
Criteria: Developers assure and confirm the compatibility of the software with various systems.
Phrase: Confirm system compatibility assurances.

48.
Concepts: discuss input methods
Relationship: Discussing input methods relates to exploring usability aspects of data entry within the software.
Criteria: Designers engage in discussions regarding input methods relevant to the software.
Phrase: Initiate discussions on input methods.

49.
Concepts: manage user expectations
Relationship: Managing expectations includes setting realistic timelines and limits on software capabilities.
Criteria: Designers communicate well-defined user expectations regarding software features and updates.
Phrase: Manage expectations about software capabilities.

50.
Concepts: gather user input
Relationship: Gathering user input is essential for understanding practices in respective fields.
Criteria: Designers seek opinions from users to inform project stages and developments.
Phrase: Gather user input for project development.