You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (12 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
12. 
Concepts: {Repeat the input 12}
Relationship: {What is logical relationship between concepts in code 12, or N/A if not applicable}
Criteria: {Who did what, and how for code 12}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: confirm collaboration, confirm understanding
- Designers confirm collaboration and engage in planning with users.
- Users and designers confirm and express understanding of each other's needs.

2.
Concepts: explain development process, confirm and discuss compatibility, outline technical requirements
- The designer explains the theoretical compatibility of the application with certain systems.
- Designers confirm and discuss software compatibility with various systems for user clarity.
- The designer provides and considers system and technical requirements for software compatibility.

3.
Concepts: acknowledge limitations, discuss limitations and solutions
- The designer identifies and explains the limitations encountered by the team and the platform.
- Designers discuss limitations of solutions and potential workarounds.

4.
Concepts: provide usage guidance, ensure proper operation
- Designers offer detailed guidance on software features and functionalities.
- Designers provide instructions to ensure users can operate the software correctly.

5.
Concepts: clarify feature functionality, clarify touch screen functionality
- The designer provides technical details and clarifies the functionality of features.
- The designer provides technical clarifications regarding touch screen features.

6.
Concepts: highlight progress made, reassure users about progress
- The designer emphasizes the extent of progress made in software updates.
- Designers assure users that updates are ongoing and express commitment to improvements.

7.
Concepts: consider future updates, strategize software updates
- Designers discuss possible future updates while considering their impact on compatibility.
- Designers discuss ongoing research and timelines for future features and updates to keep users informed and outline plans for future updates based on user feedback.

8.
Concepts: confirm user identity, community member identification
- Users confirm their roles and identities during discussions.
- A user confirms their participation in the community.

9.
Concepts: educational focus, highlight educational benefits
- Emphasis on the educational value and applications of the product.
- Designers describe ideal uses of features and their educational benefits.

10.
Concepts: request new features, make detailed feature requests
- Users request specific physics concepts and features to be included in the software.
- A user makes a detailed request for specific features in the software.

11.
Concepts: request assistance, seek usage guidance
- Users request assistance and seek clarification on software versions.
- Users seek information and request guidance on using the software.

12.
Concepts: inquire about updates, ask technical questions
- Users ask questions regarding software updates and features.
- Users ask specific and technical questions about the platform's features and updates.
===
---
Definitions for each code (12 in total):
1.
Concepts: confirm collaboration, confirm understanding  
Relationship: Both concepts involve mutual acknowledgment and communication between designers and users.  
Criteria: Designers engage in collaborative planning with users while confirming mutual understanding of needs.  
Phrase: Confirm collaboration and understanding.

2.
Concepts: explain development process, confirm and discuss compatibility, outline technical requirements  
Relationship: These concepts are interconnected as they all pertain to ensuring clarity and compatibility in the development process.  
Criteria: Designers explain the development process and confirm compatibility while outlining technical requirements for users.  
Phrase: Explain development and confirm compatibility.

3.
Concepts: acknowledge limitations, discuss limitations and solutions  
Relationship: Both concepts focus on recognizing challenges and exploring potential solutions.  
Criteria: Designers identify limitations and engage in discussions about possible solutions.  
Phrase: Acknowledge limitations and discuss solutions.

4.
Concepts: provide usage guidance, ensure proper operation  
Relationship: These concepts are related as they both aim to enhance user experience through guidance.  
Criteria: Designers provide detailed usage guidance to ensure correct operation of the software.  
Phrase: Provide guidance and ensure operation.

5.
Concepts: clarify feature functionality, clarify touch screen functionality  
Relationship: Both concepts involve providing clarity on different aspects of the software's functionality.  
Criteria: The designer clarifies the functionality of features, including touch screen capabilities.  
Phrase: Clarify functionality.

6.
Concepts: highlight progress made, reassure users about progress  
Relationship: These concepts are linked through the communication of progress and reassurance to users.  
Criteria: Designers highlight progress in updates and reassure users of ongoing improvements.  
Phrase: Highlight progress and reassure users.

7.
Concepts: consider future updates, strategize software updates  
Relationship: Both concepts involve planning and foresight regarding software development.  
Criteria: Designers consider and strategize future updates based on user feedback and compatibility.  
Phrase: Consider and strategize updates.

8.
Concepts: confirm user identity, community member identification  
Relationship: These concepts are related as they both involve the recognition of individuals within the community.  
Criteria: Users confirm their identities and roles within the community during discussions.  
Phrase: Confirm identity and membership.

9.
Concepts: educational focus, highlight educational benefits  
Relationship: Both concepts emphasize the importance of education in the context of the software.  
Criteria: Designers emphasize the educational value and applications of the product.  
Phrase: Highlight educational focus and benefits.

10.
Concepts: request new features, make detailed feature requests  
Relationship: These concepts are connected through the act of users expressing their needs for software enhancements.  
Criteria: Users request specific features and make detailed requests for inclusion in the software.  
Phrase: Request and detail features.

11.
Concepts: request assistance, seek usage guidance  
Relationship: Both concepts involve users seeking help and clarification regarding the software.  
Criteria: Users request assistance and seek guidance on using the software effectively.  
Phrase: Request assistance and seek guidance.

12.
Concepts: inquire about updates, ask technical questions  
Relationship: These concepts are related as they both involve users seeking information about the software.  
Criteria: Users inquire about updates and ask specific technical questions regarding features.  
Phrase: Inquire about updates and ask questions.
---