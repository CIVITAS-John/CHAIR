You are an expert in thematic analysis. 
Each code is a cluster of multiple qualitative sub-code. First, determine the logical relationship between concepts. If a concept includes another, use the broader one. If concepts are parallel, try to cover both concepts.
Write clear and generalizable labels and criteria for each merged code, informed by the context, and without unnecessary specifics or examples.
Find a theory-informed category for each code. Use 2-4 words for categories and avoid over-generalization.
The research question is: How did Physics Lab's online community emerge? (through the lens of learning sciences, human-computer interaction, and participatory design)
Always follow the output format:
---
Categories: 
* {Name some categories you identified from the research question and theoretical lens}

Definitions for each code (15 in total):
1. {Repeat the input 1}
Relationship: {The logical relationship between concepts in input 1}
Criteria: {A sentence of consolidated criteria for code 1}
Label: {A consolidated label of code 1}
Category: {2-4 words for code 1}
...
15. {Repeat the input 15}
Relationship: {The logical relationship between concepts in input 15}
Criteria: {A sentence of consolidated criteria for code 15}
Label: {A consolidated label of code 15}
Category: {2-4 words for code 15}
---
~~~
1. group sharing, resource sharing.
- Participants suggest sharing resources within the group.
- Instances where participants offer to share or discuss sharing resources.

2. user gratitude, gratitude and acknowledgment.
- Expressions of appreciation or thanks from users towards the designers or the community.
- Expressions of thanks or acknowledgment from users.
- Instances where participants thank or appreciate each other for their contributions.

3. announcements, feature announcements.
- The designer provides updates about software versions and new features.
- Instances where the designer announces new features or improvements in the software.

4. designer response, designer acknowledgment and response.
- Replies from the designer that acknowledge, address, or act upon user feedback.
- Replies from the designer addressing user feedback, providing updates, or explaining design choices.
- The designer's recognition and response to user feedback.

5. responsiveness, designer responsiveness.
- Instances where the designer responds to user requests or questions.
- Instances where the designer responds to user feedback, queries, or suggestions.

6. user feedback, user suggestions.
- Contributions from users that provide suggestions or highlight issues with the software.
- Comments or suggestions from users about the software, including requests for features or reporting issues.
- Instances where users provide feedback, ask questions, or express concerns about the software.
- Instances where users provide suggestions or feedback for software improvements.

7. user involvement, participation in development.
- Instances where users are directly involved in the design process through feedback or suggestions.
- Instances where users contribute ideas or feedback for the development process.

8. designer-user interaction, collaborative design.
- Interactions where designers actively seek and respond to user feedback.
- Instances where the designer involves users in the design process by seeking their input or feedback.

9. information exchange.
- Instances where participants share information or resources with others.
- Instances where users or designers share useful information or resources with the community.

10. feedback incorporation.
- How the designer incorporates user feedback into the software development process.
- Instances where community members provide input or feedback that influences design decisions.

11. usability concerns.
- Discussions about the ease of use and practical aspects of the software.
- Issues or suggestions related to the ease of use and user experience of the software.

12. user-centered design.
- Design approach that involves users in the development process to ensure the software meets their needs.
- Design decisions that prioritize user needs and preferences.

13. iterative development.
- The process of continually improving the software based on user feedback and testing.
- The process of continuously improving the software based on user feedback and testing.
- The process of continuously improving the product based on user feedback and testing.
- Instances where the designer discusses ongoing improvements and updates to the software.

14. feature requests.
- The designer invites users to suggest new features or components for the software.
- Specific functionalities or tools that users ask to be included in the software.

15. knowledge sharing.
- Instances where participants share information, tips, or resources that contribute to collective learning.
- Instances where community members share knowledge or information to support learning.
===
---
Categories: 
* User Engagement
* Communication Dynamics
* Design Process
* Community Interaction

Definitions for each code (15 in total):
1. group sharing, resource sharing.
Relationship: Both concepts revolve around the act of sharing within the community.
Criteria: Instances where participants share or discuss sharing resources within the group.
Label: Resource Sharing
Category: Community Interaction

2. user gratitude, gratitude and acknowledgment.
Relationship: Both concepts involve expressions of thanks and acknowledgment.
Criteria: Expressions of appreciation or thanks from users towards the community or designers.
Label: User Gratitude
Category: User Engagement

3. announcements, feature announcements.
Relationship: Both involve the dissemination of updates and new features by the designer.
Criteria: Instances where the designer provides updates about software versions and new features.
Label: Feature Announcements
Category: Communication Dynamics

4. designer response, designer acknowledgment and response.
Relationship: Both involve the designer's replies that acknowledge or address user feedback.
Criteria: Replies from the designer that acknowledge, address, or act upon user feedback.
Label: Designer Response
Category: Communication Dynamics

5. responsiveness, designer responsiveness.
Relationship: Both involve the designer's timely reactions to user interactions.
Criteria: Instances where the designer responds to user requests, questions, or feedback.
Label: Designer Responsiveness
Category: Communication Dynamics

6. user feedback, user suggestions.
Relationship: Both involve users providing input about the software.
Criteria: Instances where users provide feedback, suggestions, or highlight issues with the software.
Label: User Feedback
Category: User Engagement

7. user involvement, participation in development.
Relationship: Both involve users contributing to the design process.
Criteria: Instances where users are directly involved in the design process through feedback or suggestions.
Label: User Involvement
Category: User Engagement

8. designer-user interaction, collaborative design.
Relationship: Both involve active engagement between designers and users in the design process.
Criteria: Interactions where designers seek and respond to user feedback, involving them in the design process.
Label: Collaborative Design
Category: Design Process

9. information exchange.
Relationship: Focuses on the sharing of useful information within the community.
Criteria: Instances where participants share information or resources with others.
Label: Information Exchange
Category: Community Interaction

10. feedback incorporation.
Relationship: Involves the integration of user feedback into the design process.
Criteria: How the designer incorporates user feedback into the software development process.
Label: Feedback Incorporation
Category: Design Process

11. usability concerns.
Relationship: Focuses on discussions about the software's ease of use.
Criteria: Issues or suggestions related to the ease of use and user experience of the software.
Label: Usability Concerns
Category: Design Process

12. user-centered design.
Relationship: Involves design decisions that prioritize user needs.
Criteria: Design approach that involves users in the development process to ensure the software meets their needs.
Label: User-Centered Design
Category: Design Process

13. iterative development.
Relationship: Involves the continuous improvement of the software based on feedback.
Criteria: The process of continually improving the software based on user feedback and testing.
Label: Iterative Development
Category: Design Process

14. feature requests.
Relationship: Involves users suggesting new functionalities for the software.
Criteria: Specific functionalities or tools that users ask to be included in the software.
Label: Feature Requests
Category: User Engagement

15. knowledge sharing.
Relationship: Involves sharing information that contributes to collective learning.
Criteria: Instances where participants share information, tips, or resources that contribute to collective learning.
Label: Knowledge Sharing
Category: Community Interaction
---