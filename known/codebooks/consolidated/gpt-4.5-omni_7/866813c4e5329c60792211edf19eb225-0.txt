You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (13 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
13. 
Concepts: {Repeat the input 13}
Relationship: {What is logical relationship between concepts in code 13, or N/A if not applicable}
Criteria: {Who did what, and how for code 13}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: critiquing ai limitations, criticizing ai's unpredictability
- Users critique the limited options and flexibility in AI interfaces, expressing dissatisfaction with the constraints.
- Users note the AI's varied feedback and criticize it for providing inconsistent and non-deterministic responses.

2.
Concepts: emphasizing expertise for debugging, highlighting prerequisite knowledge
- Users emphasize the need for practice and experience to effectively use AI for debugging and coding tasks.
- Users suggest the need for prerequisite knowledge and preparatory exercises before relying on AI for debugging.

3.
Concepts: ai misunderstanding, identifying gaps in ai code
- Identifying AI misunderstandings in code generation.
- Users note that AI-generated code can be incomplete and identify missing code structures or elements.

4.
Concepts: compares ai code with initial code, evaluating ai-generated code
- Users compare AI-generated code with their initial code to evaluate its quality.
- Users review, interact with, and evaluate AI-generated code to understand, fix errors, and integrate it into their models.

5.
Concepts: utilizing ai for coding enhancement, collaborating with ai for optimization
- Users value AI feedback for code optimization and use AI for code analysis and feedback to optimize, debug, and verify their code.
- Users use AI as a collaborative partner in programming tasks and collaborate with AI for code optimization and learning.

6.
Concepts: highlighting iterative development, iteratively building models with ai
- Users describe and highlight their iterative development process with AI.
- Users describe their process of iteratively building models and how AI fits into their established practices.

7.
Concepts: imagining ai as a peer programmer, discussing ai in peer programming
- Users imagine AI as a pair programmer that questions their actions.
- Users compare peer programming with solo work and suggest AI could play a supportive role similar to peer programming.

8.
Concepts: values context-specific help, suggesting customized ai documentation
- The user values context-specific help and discusses the potential for AI to translate jargon between different user groups.
- Users suggest AI could help with contextual and customized documentation and note its ability to translate jargon for different user groups.

9.
Concepts: finding ai easy to use, appreciating clear ai explanations
- Users describe the AI system as straightforward and intuitive, finding the interface helpful for clarifying parameters and tasks.
- Users find non-technical explanations helpful and appreciate AI's ability to interpret and infer needs from the context of their input.

10.
Concepts: valuing readable ai code, emphasizing code readability
- Users prefer and appreciate AI-generated code that is readable and well-documented.
- Users discuss AI's adherence to code conventions and emphasize the importance of readability and usability in AI-generated code.

11.
Concepts: refining ai interactions, experimenting with ai queries
- Users refine their prompts, queries, interactions, and tasks based on AI's feedback to get more accurate responses.
- Users test AI's capabilities with specific prompts and experiment with different queries and commands to improve responses.

12.
Concepts: recognizing ai errors, manually fixing ai errors
- Users recognize and react to AI errors and reason through AI-generated errors, including plotting errors.
- Users interpret and manually fix AI-generated errors without relying on AI explanations.

13.
Concepts: accepting ai limitations, appreciating ai solutions despite limitations
- Users accept and note the current limitations of AI, such as handling long code pieces and verifying external information.
- Users acknowledge AI's mistakes and limitations but still see value in its generated solutions.
===
---
Definitions for each code (13 in total):
1.
Concepts: critiquing ai limitations, criticizing ai's unpredictability
Relationship: Both concepts involve users expressing dissatisfaction with AI's performance.
Criteria: Users critique the limited options and flexibility in AI interfaces and criticize the AI for providing inconsistent and non-deterministic responses.
Phrase: Critiquing AI's limitations and unpredictability

2.
Concepts: emphasizing expertise for debugging, highlighting prerequisite knowledge
Relationship: Both concepts focus on the necessity of user knowledge and experience for effective AI use.
Criteria: Users emphasize the need for practice and experience, as well as prerequisite knowledge, to effectively use AI for debugging and coding tasks.
Phrase: Emphasizing expertise and prerequisite knowledge for debugging

3.
Concepts: ai misunderstanding, identifying gaps in ai code
Relationship: Both concepts involve users identifying issues in AI-generated code.
Criteria: Users identify AI misunderstandings in code generation and note that AI-generated code can be incomplete, identifying missing code structures or elements.
Phrase: Identifying AI misunderstandings and gaps in code

4.
Concepts: compares ai code with initial code, evaluating ai-generated code
Relationship: Both concepts involve users assessing AI-generated code against their own.
Criteria: Users compare AI-generated code with their initial code to evaluate its quality and review, interact with, and integrate it into their models.
Phrase: Comparing and evaluating AI-generated code

5.
Concepts: utilizing ai for coding enhancement, collaborating with ai for optimization
Relationship: Both concepts involve users working with AI to improve their code.
Criteria: Users value AI feedback for code optimization and use AI as a collaborative partner in programming tasks to optimize, debug, and verify their code.
Phrase: Utilizing and collaborating with AI for coding enhancement

6.
Concepts: highlighting iterative development, iteratively building models with ai
Relationship: Both concepts describe an iterative process involving AI.
Criteria: Users describe and highlight their iterative development process with AI and how they iteratively build models incorporating AI.
Phrase: Highlighting iterative development with AI

7.
Concepts: imagining ai as a peer programmer, discussing ai in peer programming
Relationship: Both concepts involve users viewing AI as a supportive programming partner.
Criteria: Users imagine AI as a pair programmer that questions their actions and compare peer programming with solo work, suggesting AI could play a supportive role.
Phrase: Imagining AI as a peer programmer

8.
Concepts: values context-specific help, suggesting customized ai documentation
Relationship: Both concepts involve users seeking tailored assistance from AI.
Criteria: Users value context-specific help and suggest AI could provide customized documentation and translate jargon for different user groups.
Phrase: Valuing and suggesting customized AI documentation

9.
Concepts: finding ai easy to use, appreciating clear ai explanations
Relationship: Both concepts involve users' positive experiences with AI's usability and clarity.
Criteria: Users describe the AI system as straightforward and intuitive, appreciating its ability to provide clear explanations and interpret needs from context.
Phrase: Finding AI easy to use and appreciating clear explanations

10.
Concepts: valuing readable ai code, emphasizing code readability
Relationship: Both concepts involve users' preference for readable and well-documented AI-generated code.
Criteria: Users prefer and appreciate AI-generated code that is readable and well-documented, emphasizing the importance of readability and usability.
Phrase: Valuing readable and well-documented AI code

11.
Concepts: refining ai interactions, experimenting with ai queries
Relationship: Both concepts involve users adjusting their interactions with AI to improve outcomes.
Criteria: Users refine their prompts and queries based on AI's feedback and experiment with different queries and commands to improve responses.
Phrase: Refining and experimenting with AI interactions

12.
Concepts: recognizing ai errors, manually fixing ai errors
Relationship: Both concepts involve users identifying and correcting AI errors.
Criteria: Users recognize and react to AI errors, interpreting and manually fixing them without relying on AI explanations.
Phrase: Recognizing and manually fixing AI errors

13.
Concepts: accepting ai limitations, appreciating ai solutions despite limitations
Relationship: Both concepts involve users acknowledging AI's limitations while still finding value in its solutions.
Criteria: Users accept and note the current limitations of AI but still appreciate the value of its generated solutions.
Phrase: Accepting AI limitations and appreciating solutions despite them
---