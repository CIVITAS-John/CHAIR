You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (25 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
25. 
Concepts: {Repeat the input 25}
Relationship: {What is logical relationship between concepts in code 25, or N/A if not applicable}
Criteria: {Who did what, and how for code 25}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: discuss update planning, discussing update processes
- Designers discuss the planning and timing of an upcoming update.
- Designers discuss the process, frequency, and internal iterations of software updates.

2.
Concepts: describing updates, inform users about updates
- Designers describe and introduce the content, scope, and magnitude of updates.
- Designers communicate and engage users with information about upcoming updates and new features.

3.
Concepts: preview updates, prepare users for significant changes
- Designers preview upcoming updates.
- Designers preparing users for significant changes or updates.

4.
Concepts: discussing features, discussing feature development
- Designers discuss specific features, design choices, and feature flexibility.
- Designers discuss the expansion and development of new features.

5.
Concepts: committing to future updates, commit to continuous improvement
- Designers promise and commit to future updates and feature additions.
- Designers commit to and emphasize continuous software improvement.

6.
Concepts: maintain user engagement, encouraging participation
- Designers maintain user engagement by seeking their input.
- Designers invite questions and encourage user participation.

7.
Concepts: gathering feedback, creating a feedback loop
- Designers gather and consider user feedback for future updates.
- Designers solicit and incorporate user feedback into design decisions and address the feedback process.

8.
Concepts: request user feedback, responding to user feedback
- Designers encourage and request users to provide feedback and report issues.
- Designers respond to user queries, feedback, or suggestions.

9.
Concepts: sharing images, sharing community resources
- A user or designer shares an image within the community.
- Users and designers refer to shared resources within the community, involving instances where designers or users share resources such as download links or development plans.

10.
Concepts: discussing educational context, inquiring about teaching background
- Designers show interest and discuss users' educational contexts.
- Designers inquire about users' teaching levels and backgrounds.

11.
Concepts: addressing limitations, discussing technical constraints
- Designers discuss and acknowledge software limitations.
- Technical considerations or challenges in software development, or instances where technical limitations or requirements are discussed.

12.
Concepts: discussing compatibility, suggest checking compatibility
- Designers discuss and confirm future compatibility and system requirements.
- Designers mention potential updates and suggest checking system compatibility.

13.
Concepts: explaining features, explain task and feature complexity
- Designers explain features and illustrate their usage.
- Designers explain the complexity of tasks and features.

14.
Concepts: explaining design principles, explain development process and artifacts
- Designers explain design principles, goals, and rationale.
- Designers explain the development process and technical artifacts.

15.
Concepts: providing software information, inform about simulation capability
- Designers provide information about the software and its versions.
- Designers inform users about the simulation capabilities of the software.

16.
Concepts: designing for usability, discuss user interface design
- Designers consider usability and user experience in their design.
- Designers discuss visual and functional aspects of the user interface and usability.

17.
Concepts: educational tools, highlight educational tools
- A user or designer discusses educational tools or features for teaching.
- Designers highlighting educational tools and their functionalities.

18.
Concepts: praising software, compare favorably to other software
- Users give positive reviews and praise software features.
- Users compare the software favorably to other similar applications or software.

19.
Concepts: frustration, expressing frustration
- Users or designers express frustration with certain aspects of the software or its use.
- Users express frustration and describe limitations of their systems.

20.
Concepts: reciprocate greeting, exchanging greetings
- A participant reciprocates a greeting.
- Participants greet and exchange greetings within the community.

21.
Concepts: requesting new features, requesting additional features
- Users request new features and suggest expanding software capabilities.
- Users express their needs and request the inclusion of specific or additional features in the software.

22.
Concepts: suggesting improvements, suggesting new features
- Users propose usability improvements and feature refinements.
- Users suggest new features, design improvements, and provide feedback or suggestions for the software's development.

23.
Concepts: technical question, seeking technical help
- Users ask technical questions about downloading and using the software.
- Users seek and request technical help with software usage.

24.
Concepts: expressing agreement, acknowledging and approving input
- Users confirm or agree with statements or instructions, or agree with or confirm a statement or idea.
- A participant acknowledges input from another participant, expresses approval or acknowledgment, often using emojis, or shows understanding of another's statement or action.

25.
Concepts: providing feedback
- Users provide feedback, suggestions, or questions about the software and its development process.
- Users provide specific feedback and encourage community feedback.
===
---
Definitions for each code (25 in total):
1.
Concepts: discuss update planning, discussing update processes
Relationship: Both concepts involve discussions about updates.
Criteria: Designers discuss the planning, timing, process, frequency, and internal iterations of upcoming updates.
Phrase: Discussing update planning and processes

2.
Concepts: describing updates, inform users about updates
Relationship: Both concepts involve communicating information about updates to users.
Criteria: Designers describe and introduce the content, scope, and magnitude of updates while engaging users with information about upcoming updates and new features.
Phrase: Informing users about updates

3.
Concepts: preview updates, prepare users for significant changes
Relationship: Both concepts involve preparing users for upcoming updates.
Criteria: Designers preview upcoming updates and prepare users for significant changes or updates.
Phrase: Preparing users for updates

4.
Concepts: discussing features, discussing feature development
Relationship: Both concepts involve discussions about software features.
Criteria: Designers discuss specific features, design choices, feature flexibility, and the expansion and development of new features.
Phrase: Discussing feature development

5.
Concepts: committing to future updates, commit to continuous improvement
Relationship: Both concepts involve commitments to future actions.
Criteria: Designers promise and commit to future updates and feature additions while emphasizing continuous software improvement.
Phrase: Committing to future updates and improvements

6.
Concepts: maintain user engagement, encouraging participation
Relationship: Both concepts involve engaging users.
Criteria: Designers maintain user engagement by seeking their input and encouraging their participation.
Phrase: Encouraging user engagement

7.
Concepts: gathering feedback, creating a feedback loop
Relationship: Both concepts involve feedback processes.
Criteria: Designers gather and consider user feedback for future updates and incorporate it into design decisions, creating a feedback loop.
Phrase: Creating a feedback loop

8.
Concepts: request user feedback, responding to user feedback
Relationship: Both concepts involve interactions with user feedback.
Criteria: Designers encourage users to provide feedback and report issues, and they respond to user queries, feedback, or suggestions.
Phrase: Interacting with user feedback

9.
Concepts: sharing images, sharing community resources
Relationship: Both concepts involve sharing within the community.
Criteria: Users or designers share images and refer to shared resources within the community, such as download links or development plans.
Phrase: Sharing community resources

10.
Concepts: discussing educational context, inquiring about teaching background
Relationship: Both concepts involve discussions about users' educational backgrounds.
Criteria: Designers show interest in and discuss users' educational contexts and inquire about their teaching levels and backgrounds.
Phrase: Discussing educational contexts

11.
Concepts: addressing limitations, discussing technical constraints
Relationship: Both concepts involve acknowledging software limitations.
Criteria: Designers discuss and acknowledge software limitations and technical considerations or challenges in software development.
Phrase: Addressing technical constraints

12.
Concepts: discussing compatibility, suggest checking compatibility
Relationship: Both concepts involve compatibility issues.
Criteria: Designers discuss and confirm future compatibility and system requirements and suggest checking system compatibility.
Phrase: Discussing software compatibility

13.
Concepts: explaining features, explain task and feature complexity
Relationship: Both concepts involve explanations of software aspects.
Criteria: Designers explain features, illustrate their usage, and explain the complexity of tasks and features.
Phrase: Explaining software features

14.
Concepts: explaining design principles, explain development process and artifacts
Relationship: Both concepts involve explanations of design and development.
Criteria: Designers explain design principles, goals, and rationale, as well as the development process and technical artifacts.
Phrase: Explaining design and development

15.
Concepts: providing software information, inform about simulation capability
Relationship: Both concepts involve providing information about the software.
Criteria: Designers provide information about the software and its versions and inform users about the simulation capabilities of the software.
Phrase: Providing software information

16.
Concepts: designing for usability, discuss user interface design
Relationship: Both concepts involve considerations of usability and design.
Criteria: Designers consider usability and user experience in their design and discuss visual and functional aspects of the user interface.
Phrase: Discussing usability and interface design

17.
Concepts: educational tools, highlight educational tools
Relationship: Both concepts involve discussions about educational tools.
Criteria: Users or designers discuss and highlight educational tools or features for teaching and their functionalities.
Phrase: Highlighting educational tools

18.
Concepts: praising software, compare favorably to other software
Relationship: Both concepts involve positive feedback about the software.
Criteria: Users give positive reviews and praise software features, comparing it favorably to other similar applications.
Phrase: Praising the software

19.
Concepts: frustration, expressing frustration
Relationship: Both concepts involve expressions of frustration.
Criteria: Users or designers express frustration with certain aspects of the software or its use and describe limitations of their systems.
Phrase: Expressing frustration

20.
Concepts: reciprocate greeting, exchanging greetings
Relationship: Both concepts involve social interactions within the community.
Criteria: Participants greet and exchange greetings within the community.
Phrase: Exchanging greetings

21.
Concepts: requesting new features, requesting additional features
Relationship: Both concepts involve user requests for new features.
Criteria: Users request new features and suggest expanding software capabilities.
Phrase: Requesting new features

22.
Concepts: suggesting improvements, suggesting new features
Relationship: Both concepts involve user suggestions for software improvements.
Criteria: Users propose usability improvements, feature refinements, and suggest new features for the software's development.
Phrase: Suggesting software improvements

23.
Concepts: technical question, seeking technical help
Relationship: Both concepts involve seeking technical assistance.
Criteria: Users ask technical questions about downloading and using the software and seek technical help with software usage.
Phrase: Seeking technical help

24.
Concepts: expressing agreement, acknowledging and approving input
Relationship: Both concepts involve expressions of agreement or acknowledgment.
Criteria: Users confirm or agree with statements or instructions and acknowledge input from other participants, often using emojis.
Phrase: Acknowledging input

25.
Concepts: providing feedback
Relationship: N/A
Criteria: Users provide feedback, suggestions, or questions about the software and its development process, encouraging community feedback.
Phrase: Providing feedback
---