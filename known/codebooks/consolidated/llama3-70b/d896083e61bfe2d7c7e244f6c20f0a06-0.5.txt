You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes a list of concepts and definitions. Do not attempt to merge codes now.
Determine the logical relationship between concepts. If a concept includes another, use the broader one. If concepts are parallel, try to cover both concepts.
Write clear and generalizable labels and criteria for each code, informed by the context, and without unnecessary specifics or examples.
The research question is: How did Physics Lab's online community emerge? (through the lens of learning sciences, human-computer interaction, and participatory design)
Always follow the output format:
---
Definitions for each code (8 in total):
1. {Repeat the input 1}
Relationship: {The logical relationship between concepts in input 1}
Criteria: {A sentence of consolidated criteria for code 1}
Label: {A consolidated label of code 1}
...
8. {Repeat the input 8}
Relationship: {The logical relationship between concepts in input 8}
Criteria: {A sentence of consolidated criteria for code 8}
Label: {A consolidated label of code 8}
---
~~~
1. timeline, timeline provision
- Refers to specific points in time, schedules, or announcements.
- The quote provides information about the schedule or timeline of a task or feature.

2. software evaluation, personal experience and software evaluation
- Evaluates, assesses, or compares software applications or tools.
- Sharing personal experiences with the software or expressing opinions or evaluations.

3. problem analysis, problem-solving
- Confirming, identifying, or analyzing a problem or issue.
- Discussions or mentions of problem-solving or educational applications within the online community

4. improvement, future improvement opinion
- Refers to any mention of making improvements to the Physics Lab online community or its features.
- Expressing an opinion on the desirability or necessity of future improvements.

5. simulation features, interactive simulation
- Features, functionalities, or capabilities of simulations.
- Refers to interactive simulations, models, or demonstrations used for learning and experimentation.

6. accessibility, software accessibility
- Concerns, features, or adaptations that facilitate accessibility or inclusivity.
- Refers to the availability or accessibility of software applications or platforms.

7. software usage, software functionality
- Using, operating, or interacting with software or platforms
- Functionalities or capabilities of a software application, including its usability and performance.

8. notation flexibility, notation systems
- Ability to use multiple notation systems or conventions.
- Examples or illustrations of notation systems or symbols, engaging in discussions or debates.
===
Here are the definitions for each code:

---
1. timeline, timeline provision
Relationship: Inclusive (timeline provision is a specific type of timeline)
Criteria: Refers to specific points in time, schedules, or announcements related to the online community.
Label: Timeline and Scheduling

2. software evaluation, personal experience and software evaluation
Relationship: Overlapping (personal experience informs software evaluation)
Criteria: Evaluates, assesses, or compares software applications or tools, including personal experiences and opinions.
Label: Software Evaluation and Experience

3. problem analysis, problem-solving
Relationship: Inclusive (problem-solving is a response to problem analysis)
Criteria: Identifies, analyzes, or discusses problems or issues, including educational applications and solutions.
Label: Problem Identification and Solution

4. improvement, future improvement opinion
Relationship: Inclusive (future improvement opinion is a type of improvement)
Criteria: Refers to any mention of making improvements to the online community or its features, including opinions on desirability or necessity.
Label: Improvement and Future Development

5. simulation features, interactive simulation
Relationship: Inclusive (interactive simulation is a type of simulation feature)
Criteria: Refers to features, functionalities, or capabilities of simulations, including interactive models and demonstrations.
Label: Simulation Features and Interactivity

6. accessibility, software accessibility
Relationship: Inclusive (software accessibility is a type of accessibility)
Criteria: Concerns, features, or adaptations that facilitate accessibility or inclusivity, including software availability.
Label: Accessibility and Inclusivity

7. software usage, software functionality
Relationship: Overlapping (software functionality informs software usage)
Criteria: Using, operating, or interacting with software or platforms, including functionalities and capabilities.
Label: Software Usage and Functionality

8. notation flexibility, notation systems
Relationship: Inclusive (notation systems are a type of notation flexibility)
Criteria: Refers to the ability to use multiple notation systems or conventions, including examples and discussions.
Label: Notation Flexibility and Systems