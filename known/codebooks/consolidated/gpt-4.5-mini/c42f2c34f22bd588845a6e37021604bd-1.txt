You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (25 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
25. 
Concepts: {Repeat the input 25}
Relationship: {What is logical relationship between concepts in code 25, or N/A if not applicable}
Criteria: {Who did what, and how for code 25}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: confirmation/agreement of collaboration, confirm mutual agreement on design concepts
- Designer discusses the need to gather input before moving forward with collaborative projects.
- Users and designers confirm mutual understanding and agreement on discussed ideas.

2.
Concepts: foster collaborative problem-solving discussions, propose solutions through troubleshooting insights
- Designers promote discussions to collaboratively address issues and challenges.
- Designers involve users in troubleshooting discussions and solutions.

3.
Concepts: expressive, express emotions through non-verbal symbols
- Users display emotion or express feelings to illustrate their engagement with the community.
- Users express themselves and contribute emotional context through non-verbal symbols like emojis.

4.
Concepts: share teaching experiences, disclose backgrounds to enrich discussions, establish credibility by sharing teaching experience
- Users provide insights from their teaching backgrounds to enhance community discussions.
- Users share personal or professional backgrounds to enhance community discussions.
- Users share their educational backgrounds to affirm their authority in community discussions.

5.
Concepts: initiate interaction, initiate greetings to enhance community engagement
- Users introduce themselves to foster engagement within the community.
- Community members initiate interactions by greeting each other, fostering engagement and connection.

6.
Concepts: engage in positive interactions, validate contributions through affirmation
- Users respond affirmatively to statements, facilitating positive interactions within the community.
- Users validate points made by others, contributing to a supportive discussion environment.

7.
Concepts: express appreciation for designers, demonstrate mutual appreciation
- Users express appreciation for the designer's dedication and quality of work.
- Users and designers express gratitude and appreciation towards each other for their contributions.

8.
Concepts: express gratitude for community support, foster community through gratitude and encouragement
- Members acknowledge support and contributions, fostering a culture of appreciation within the community.
- Users express appreciation and encouragement that help cultivate a supportive community atmosphere.

9.
Concepts: express appreciation for software features, evaluate software usability and satisfaction
- Users convey gratitude and satisfaction regarding specific functionalities of the software.
- Users share feedback highlighting the user-friendliness and effectiveness of the software.

10.
Concepts: explain network limitations affecting usage, discuss technical constraints affecting education
- Users discuss the effects of limited internet access on software availability in classrooms.
- Users discuss technical challenges affecting software implementation in educational settings.

11.
Concepts: share educational contexts to illustrate usage, contextualize software use through shared experiences
- Users provide insights into their educational contexts to clarify software application experiences.
- Users describe contexts for software use, reflecting on its functionality and usability.

12.
Concepts: recount past experiences impacting usage, reflect on past experiences for insights
- Users recount past experiences that influence their current engagement and software usage.
- Designers elaborate on past experiences pertinent to software features to provide context.

13.
Concepts: classroom application, propose enhancements for educational software
- Users propose functionalities or enhancements that would improve classroom application and usability of the software.
- Users propose new features to enhance the softwareâ€™s educational functionalities.

14.
Concepts: community need, describe school-specific needs
- Users highlight the need for features that simplify their teaching practices or enhance the user interaction with the software's functionalities.
- Users detail their specific school-related needs impacting software functionality.

15.
Concepts: communicate software status updates, provide updates on development progress
- Designers communicate ongoing progress and updates regarding software development.
- Designers keep users informed about timelines and updates for software development.

16.
Concepts: share update schedules, preview upcoming software updates visually
- Designers provide schedules and timelines for forthcoming software updates and features.
- Designers provide visual representations related to upcoming feature updates.

17.
Concepts: acknowledge feedback from users, adapt designs to align with user feedback
- Designers validate and highlight the impact of user feedback on software development.
- Designers adjust software functionalities based on user feedback to meet their needs.

18.
Concepts: clarifying platform details, clarify limitations of the software
- Designers offer contextual platform information about particular software versions to assist community users wisely.
- Designers inform users about software limitations and resolutions related to specific platforms.

19.
Concepts: provide clarifications in response to inquiries, provide technical clarifications on functionalities
- Designers respond to inquiries and seek clarifications to assist users effectively.
- Designers provide explanations of technical features and functionalities to users.

20.
Concepts: confirming system compatibility, consider compatibility aspects for software performance
- Designers convey assurances supporting compatibility while addressing specifics surrounding proposed systems needed by software.
- Designers speculate on and acknowledge compatibility issues affecting software functionalities.

21.
Concepts: user guidance, feature guidance
- Designer provides a list of features or instructions for using the software effectively.
- Designers instruct users on necessary steps for operating features or tools.

22.
Concepts: share usability tips to enhance interaction, highlight usability through design principles
- Designers offer effective usage tips and design insights to improve user engagement.
- Designers communicate principles that enhance software user-friendliness and usability.

23.
Concepts: experimental simulations in electricity, mention research to enhance simulation features
- Designers emphasize the development of simulations specifically related to electrical experiments, articulating future functionality.
- Designers discuss research aimed at enhancing functionalities related to physical concepts in the software.

24.
Concepts: development goals, communicate development plans
- Developer outlines plans and targets for future software capabilities or enhancements.
- Designers articulate their intentions for software enhancements and future direction.

25.
Concepts: explaining the development process, explain complexities in software development
- A designer articulates focus sequences within the development workflow and compatibility timelines aligned with hardware specs.
- Designers clarify development complexities and timelines related to feature releases.
===
---
Definitions for each code (25 in total):
1.
Concepts: confirmation/agreement of collaboration, confirm mutual agreement on design concepts
Relationship: The concepts are interrelated as both pertain to the process of ensuring understanding and alignment among collaborators.
Criteria: Designers and users confirm mutual understanding and agreement on design concepts before proceeding with collaborative projects.
Phrase: Confirm mutual collaboration.

2.
Concepts: foster collaborative problem-solving discussions, propose solutions through troubleshooting insights
Relationship: Both concepts emphasize the importance of teamwork and shared insights in addressing challenges.
Criteria: Designers promote discussions to collaboratively troubleshoot issues and propose solutions involving users.
Phrase: Facilitate collaborative troubleshooting.

3.
Concepts: expressive, express emotions through non-verbal symbols
Relationship: The concepts correlate with the idea of communicating feelings, enhancing user engagement through emotional expression.
Criteria: Users express emotions and convey feelings using non-verbal symbols like emojis within the community.
Phrase: Convey emotions expressively.

4.
Concepts: share teaching experiences, disclose backgrounds to enrich discussions, establish credibility by sharing teaching experience
Relationship: The concepts are interconnected as they emphasize the value of personal experience in enhancing discussions and establishing authority.
Criteria: Users enrich discussions by sharing their diverse teaching backgrounds and experiences to establish credibility.
Phrase: Share teaching backgrounds.

5.
Concepts: initiate interaction, initiate greetings to enhance community engagement
Relationship: Both concepts focus on starting interactions that promote engagement and connection within the community.
Criteria: Community members initiate greetings to foster engagement and facilitate interaction among users.
Phrase: Initiate community interactions.

6.
Concepts: engage in positive interactions, validate contributions through affirmation
Relationship: The concepts support one another as positive interactions stem from the validation of contributions made by users.
Criteria: Users affirm statements to create a supportive atmosphere through positive interactions within the community.
Phrase: Validate contributions positively.

7.
Concepts: express appreciation for designers, demonstrate mutual appreciation
Relationship: Both concepts highlight the reciprocal nature of appreciation between users and designers.
Criteria: Users express gratitude for the designer's efforts while designers appreciate users' contributions within the community.
Phrase: Foster mutual appreciation.

8.
Concepts: express gratitude for community support, foster community through gratitude and encouragement
Relationship: The concepts are related as expressing gratitude contributes to building a supportive community environment.
Criteria: Members acknowledge and appreciate contributions to foster a culture of encouragement and support within the community.
Phrase: Cultivate gratitude in the community.

9.
Concepts: express appreciation for software features, evaluate software usability and satisfaction
Relationship: The concepts connect as feedback on usability often involves expressions of appreciation for particular software functionalities.
Criteria: Users convey gratitude regarding the usability of software features while providing evaluation feedback.
Phrase: Evaluate software satisfaction.

10.
Concepts: explain network limitations affecting usage, discuss technical constraints affecting education
Relationship: Both concepts relate to identifying and discussing challenges that hinder effective software use in educational contexts.
Criteria: Users discuss how limited internet access and technical constraints affect software usage in education.
Phrase: Discuss technical constraints.

11.
Concepts: share educational contexts to illustrate usage, contextualize software use through shared experiences
Relationship: The concepts are tied as sharing experiences enriches understanding of software application in specific educational settings.
Criteria: Users contextualize software use by sharing their educational experiences to enhance understanding.
Phrase: Contextualize usage experiences.

12.
Concepts: recount past experiences impacting usage, reflect on past experiences for insights
Relationship: The concepts are interrelated as reflections on past experiences provide insights that shape current practices.
Criteria: Users and designers recount and reflect on past experiences that influence current software engagement and usage.
Phrase: Reflect on past experiences.

13.
Concepts: classroom application, propose enhancements for educational software
Relationship: Both concepts are connected as enhancing classroom application often requires proposing new functionalities for software.
Criteria: Users propose enhancements to improve the software's educational functionalities and classroom application.
Phrase: Propose software enhancements.

14.
Concepts: community need, describe school-specific needs
Relationship: The concepts are related as users identify specific needs stemming from their unique teaching environments.
Criteria: Users articulate their school-specific needs to highlight features that would enhance their teaching practices.
Phrase: Identify community needs.

15.
Concepts: communicate software status updates, provide updates on development progress
Relationship: Both concepts emphasize the importance of clear communication regarding the ongoing development of the software.
Criteria: Designers communicate ongoing progress and status updates about the software development cycle to users.
Phrase: Provide status updates.

16.
Concepts: share update schedules, preview upcoming software updates visually
Relationship: The concepts are interrelated as visual previews help users understand upcoming updates through shared schedules.
Criteria: Designers share schedules and visual previews of forthcoming software updates to keep users informed.
Phrase: Share update previews.

17.
Concepts: acknowledge feedback from users, adapt designs to align with user feedback
Relationship: The concepts are tied since acknowledging feedback is essential for adapting and improving software designs based on user input.
Criteria: Designers validate user feedback and adapt software functionalities accordingly to meet user needs.
Phrase: Adapt designs based on feedback.

18.
Concepts: clarifying platform details, clarify limitations of the software
Relationship: The concepts are connected as providing clarity about platform specifications helps users understand software limitations.
Criteria: Designers clarify platform details and limitations to assist users in making informed decisions.
Phrase: Clarify platform specifications.

19.
Concepts: provide clarifications in response to inquiries, provide technical clarifications on functionalities
Relationship: Both concepts relate to enhancing user understanding through effective clarification of inquiries and technical aspects.
Criteria: Designers respond to inquiries and provide detailed technical clarifications on software functionalities.
Phrase: Provide technical clarifications.

20.
Concepts: confirming system compatibility, consider compatibility aspects for software performance
Relationship: The concepts are related as confirming compatibility is essential for understanding software performance in various systems.
Criteria: Designers assure users about compatibility while addressing aspects affecting software performance.
Phrase: Confirm system compatibility.

21.
Concepts: user guidance, feature guidance
Relationship: The concepts connect as providing guidance is crucial for users to operate and utilize software features effectively.
Criteria: Designers provide users with guidance and instructions needed to utilize software features effectively.
Phrase: Provide user guidance.

22.
Concepts: share usability tips to enhance interaction, highlight usability through design principles
Relationship: The concepts are interconnected as usability tips often stem from fundamental design principles aimed at improving user engagement.
Criteria: Designers share effective usability tips and highlight design principles to enhance user interaction with the software.
Phrase: Share usability tips.

23.
Concepts: experimental simulations in electricity, mention research to enhance simulation features
Relationship: The concepts relate as emphasizing simulations requires an understanding of associated research to enhance functionality.
Criteria: Designers discuss research and emphasize the development of simulations related to electrical experiments within the software.
Phrase: Develop experimental simulations.

24.
Concepts: development goals, communicate development plans
Relationship: The concepts are related as clearly communicate future development goals is foundational for successful planning.
Criteria: Designers outline their development goals and plans for future software capabilities and enhancements.
Phrase: Communicate development plans.

25.
Concepts: explaining the development process, explain complexities in software development
Relationship: The concepts are interrelated as understanding the development process helps users appreciate the complexities involved.
Criteria: Designers explain the steps and complexities involved in the development process to inform users effectively.
Phrase: Explain development complexities.
---