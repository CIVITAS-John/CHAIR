You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (8 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
8. 
Concepts: {Repeat the input 8}
Relationship: {What is logical relationship between concepts in code 8, or N/A if not applicable}
Criteria: {Who did what, and how for code 8}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: advocating for convenience, advocating for user convenience
- User advocates for convenience or ease of use in the application.
- User advocates for user convenience or ease of use.

2.
Concepts: emphasizing convenience, prioritizing convenience
- A user emphasizes the importance of convenience in the system.
- User emphasizes the importance of convenience or ease of use.

3.
Concepts: highlighting usability, highlighting convenience
- A user highlights the ease of use or practicality of the software.
- A user highlights the convenience or benefits of a particular feature.

4.
Concepts: providing use cases, describing use case scenario
- A user provides a scenario or example of how they plan to use the software.
- A user describes a scenario or use case for a particular feature.

5.
Concepts: practical applications, highlighting practical application
- User suggests practical use cases or applications for features.
- User highlights the practical application or usefulness of a feature.

6.
Concepts: potential user needs, identifying user needs
- User indicates potential needs or requirements for the software.
- The designer or user identifies a specific need or requirement for the software.
- A designer tries to understand user needs or problems.

7.
Concepts: expressing a need, highlighting user needs, showcasing user needs
- A user expresses a need or desire for a specific feature or functionality in the software.
- User highlights their needs or requirements for the platform.
- The user showcases their needs, often by requesting specific features or functionalities.

8.
Concepts: explaining needs, explaining user needs
- A user or designer explains specific needs or requirements.
- A user explains or describes their needs or requirements.
===
Here are the definitions for each code:

---
1.
Concepts: advocating for convenience, advocating for user convenience
Relationship: The two concepts are synonymous, both referring to promoting or supporting ease of use.
Criteria: Users promote convenience in the application.
Phrase: Advocating for convenience.

2.
Concepts: emphasizing convenience, prioritizing convenience
Relationship: The two concepts convey a sense of importance or weight, highlighting convenience as a significant aspect.
Criteria: Users stress the importance of convenience in the system.
Phrase: Prioritizing convenience.

3.
Concepts: highlighting usability, highlighting convenience
Relationship: The two concepts are related, as usability is an aspect of convenience.
Criteria: Users draw attention to the ease of use or practicality of the software.
Phrase: Highlighting usability.

4.
Concepts: providing use cases, describing use case scenario
Relationship: The two concepts are closely related, as use cases often involve descriptive scenarios.
Criteria: Users provide or describe scenarios for using the software.
Phrase: Providing use cases.

5.
Concepts: practical applications, highlighting practical application
Relationship: The two concepts are synonymous, both referring to the usefulness or applicability of a feature.
Criteria: Users suggest or highlight practical uses of features.
Phrase: Highlighting practical applications.

6.
Concepts: potential user needs, identifying user needs
Relationship: The two concepts are related, as identifying needs involves recognizing or diagnosing potential requirements.
Criteria: Users or designers recognize or diagnose needs or requirements for the software.
Phrase: Identifying user needs.

7.
Concepts: expressing a need, highlighting user needs, showcasing user needs
Relationship: The three concepts convey a sense of communication or expression, where users articulate their requirements.
Criteria: Users express, highlight, or showcase their needs or requirements for the platform.
Phrase: Expressing user needs.

8.
Concepts: explaining needs, explaining user needs
Relationship: The two concepts are synonymous, both referring to providing clarification or detail about needs.
Criteria: Users or designers clarify or describe their needs or requirements.
Phrase: Explaining user needs.