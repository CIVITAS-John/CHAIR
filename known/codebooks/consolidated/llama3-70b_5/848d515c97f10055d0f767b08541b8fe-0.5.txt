You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (20 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
20. 
Concepts: {Repeat the input 20}
Relationship: {What is logical relationship between concepts in code 20, or N/A if not applicable}
Criteria: {Who did what, and how for code 20}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: reflects on ai limitations, notes ai's limitations
- The participant reflects on or acknowledges AI's limitations in error handling or output.
- The participant notes AI's limitations or acknowledges AI's limitations in efficiency or potential for errors.

2.
Concepts: suggests ai support for scope understanding, highlighting conceptual understanding needs
- Interviewees suggest AI support for understanding scope and context in NetLogo.
- Participant highlights the need for AI to support learning of conceptual understanding, such as the "scope" concept in NetLogo.

3.
Concepts: defining a clear task goal, defining a clear task for ai
- Participant clearly defines a task or problem to be solved.
- Participant defines a clear task or objective for AI to accomplish.

4.
Concepts: sets up task, setting up ai tasks
- Sets up tasks and parameters for AI-driven assistance.
- Participant sets up new tasks or prompts for AI to work on.

5.
Concepts: specifying clear coding tasks, requesting specific coding tasks
- Participant specifies clear coding tasks for the AI to perform.
- Participant requests specific coding tasks from AI.

6.
Concepts: critiques ai limitations, critiques current limitations of ai in debugging
- The participant critiques AI's limitations in code verification or error detection.
- The participant critiques current limitations of AI in debugging, such as the inability to check code with external information.

7.
Concepts: proposes code fixes, requests code modifications
- Participants propose own fixes and identify necessary adjustments to AI-generated code.
- Participants ask AI to modify code for specific changes.

8.
Concepts: copies ai-generated code, selectively adopts ai-generated code
- Participants decide to copy and paste AI-generated code.
- Participants selectively copy and adopt AI-generated code.

9.
Concepts: seeks code clarification, engages in targeted questioning
- Participants seek clarification to understand AI-generated code better.
- The participant engages in targeted questioning to clarify specific aspects of AI-generated code.

10.
Concepts: evaluating ai-generated code, analyzing ai-generated code
- Participant evaluates or reviews AI-generated code.
- Participant reads and evaluates AI-generated code in detail.

11.
Concepts: requesting ai verification, emphasizes code verification
- Participants request AI verification of code and seek assurance in outputs.
- Participants highlight the need for verification, testing, and review of AI-generated code.

12.
Concepts: identifies ai errors, interprets ai's errors
- Participants identify and analyze AI-generated errors.
- The participant interprets and analyzes AI's errors.

13.
Concepts: identifies potential bugs, identifies ai feedback bugs
- Participants identify potential bugs in the system's output.
- Participants identify bugs in AI feedback and error messaging.

14.
Concepts: expresses need for linting, calls for linting features
- Participants express the need for linting and emphasize conceptual error identification.
- Participants call for linting features in NetLogo, such as identifying conceptual errors.

15.
Concepts: debugs code independently, takes debugging initiative
- Participants debug and troubleshoot code independently.
- Participants take initiative to debug and fix code independently.

16.
Concepts: utilizes ai for debugging, use ai for troubleshooting
- Participants utilize AI for debugging and seek help.
- Participants use AI for troubleshooting and reflect on its capabilities.

17.
Concepts: describes iterative debugging, references past experience
- Participants describe iterative debugging and problem-solving experiences with AI.
- Participants reference past experiences with AI-driven interfaces, including debugging and error fixing.

18.
Concepts: praises ai debugging, highlights ai debugging
- Participants praise and acknowledge AI's debugging capabilities.
- Participants highlight improved debugging and AI's debugging capabilities.

19.
Concepts: note ai's improved troubleshooting, praise ai's troubleshooting capabilities
- Participants note AI's improved troubleshooting capabilities.
- Participants praise AI's troubleshooting capabilities and recognize its problem-solving capabilities.

20.
Concepts: relies on ai-generated code
- Completely relies on AI-generated code due to situational constraints.
- Participants rely on AI for code structures and adapt to practical needs.
===
Here are the definitions for each code:

---
1.
Concepts: reflects on ai limitations, notes ai's limitations
Relationship: The concepts are related as they both involve acknowledging AI's limitations, but one is more general (reflecting on limitations) and the other is more specific (noting limitations in error handling or efficiency).
Criteria: Participants acknowledge AI's limitations in error handling, efficiency, or potential for errors.
Phrase: Reflects on AI limitations.

2.
Concepts: suggests ai support for scope understanding, highlighting conceptual understanding needs
Relationship: The concepts are related as they both involve seeking AI support for understanding, with one focusing on scope and context and the other on conceptual understanding.
Criteria: Participants suggest AI support for understanding scope, context, and conceptual understanding in NetLogo.
Phrase: Suggests AI support for understanding.

3.
Concepts: defining a clear task goal, defining a clear task for ai
Relationship: The concepts are related as they both involve defining a task, with one focusing on the goal and the other on the task for AI.
Criteria: Participants define a clear task or objective for AI to accomplish.
Phrase: Defines a clear task.

4.
Concepts: sets up task, setting up ai tasks
Relationship: The concepts are related as they both involve setting up tasks, with one being more general and the other specific to AI tasks.
Criteria: Participants set up tasks and parameters for AI-driven assistance.
Phrase: Sets up AI tasks.

5.
Concepts: specifying clear coding tasks, requesting specific coding tasks
Relationship: The concepts are related as they both involve specifying coding tasks, with one focusing on clarity and the other on specificity.
Criteria: Participants specify clear and specific coding tasks for AI to perform.
Phrase: Specifies coding tasks.

6.
Concepts: critiques ai limitations, critiques current limitations of ai in debugging
Relationship: The concepts are related as they both involve critiquing AI limitations, with one being more general and the other specific to debugging.
Criteria: Participants critique AI's limitations in code verification, error detection, and debugging.
Phrase: Critiques AI limitations.

7.
Concepts: proposes code fixes, requests code modifications
Relationship: The concepts are related as they both involve seeking changes to AI-generated code, with one focusing on proposing fixes and the other on requesting modifications.
Criteria: Participants propose fixes and request modifications to AI-generated code.
Phrase: Proposes code fixes.

8.
Concepts: copies ai-generated code, selectively adopts ai-generated code
Relationship: The concepts are related as they both involve using AI-generated code, with one focusing on copying and the other on selective adoption.
Criteria: Participants copy and selectively adopt AI-generated code.
Phrase: Adopts AI-generated code.

9.
Concepts: seeks code clarification, engages in targeted questioning
Relationship: The concepts are related as they both involve seeking understanding of AI-generated code, with one focusing on clarification and the other on targeted questioning.
Criteria: Participants seek clarification and engage in targeted questioning to understand AI-generated code.
Phrase: Seeks code clarification.

10.
Concepts: evaluating ai-generated code, analyzing ai-generated code
Relationship: The concepts are related as they both involve evaluating AI-generated code, with one focusing on evaluation and the other on analysis.
Criteria: Participants evaluate and analyze AI-generated code.
Phrase: Evaluates AI-generated code.

11.
Concepts: requesting ai verification, emphasizes code verification
Relationship: The concepts are related as they both involve seeking verification of AI-generated code, with one focusing on requesting verification and the other on emphasizing its importance.
Criteria: Participants request AI verification and emphasize the need for code verification.
Phrase: Requests AI verification.

12.
Concepts: identifies ai errors, interprets ai's errors
Relationship: The concepts are related as they both involve identifying and analyzing AI-generated errors, with one focusing on identification and the other on interpretation.
Criteria: Participants identify and interpret AI-generated errors.
Phrase: Identifies AI errors.

13.
Concepts: identifies potential bugs, identifies ai feedback bugs
Relationship: The concepts are related as they both involve identifying bugs, with one focusing on potential bugs and the other on AI feedback bugs.
Criteria: Participants identify potential bugs and AI feedback bugs.
Phrase: Identifies bugs.

14.
Concepts: expresses need for linting, calls for linting features
Relationship: The concepts are related as they both involve seeking linting features, with one focusing on expressing the need and the other on calling for features.
Criteria: Participants express the need for linting features and call for conceptual error identification.
Phrase: Calls for linting features.

15.
Concepts: debugs code independently, takes debugging initiative
Relationship: The concepts are related as they both involve taking initiative in debugging, with one focusing on independent debugging and the other on taking initiative.
Criteria: Participants debug code independently and take initiative to fix code.
Phrase: Debugs code independently.

16.
Concepts: utilizes ai for debugging, use ai for troubleshooting
Relationship: The concepts are related as they both involve using AI for debugging and troubleshooting, with one focusing on utilization and the other on usage.
Criteria: Participants utilize AI for debugging and troubleshooting.
Phrase: Utilizes AI for debugging.

17.
Concepts: describes iterative debugging, references past experience
Relationship: The concepts are related as they both involve describing debugging experiences, with one focusing on iterative debugging and the other on past experiences.
Criteria: Participants describe iterative debugging experiences and reference past experiences with AI-driven interfaces.
Phrase: Describes iterative debugging.

18.
Concepts: praises ai debugging, highlights ai debugging
Relationship: The concepts are related as they both involve praising AI's debugging capabilities, with one focusing on praise and the other on highlighting.
Criteria: Participants praise and highlight AI's debugging capabilities.
Phrase: Praises AI debugging.

19.
Concepts: note ai's improved troubleshooting, praise ai's troubleshooting capabilities
Relationship: The concepts are related as they both involve praising AI's troubleshooting capabilities, with one focusing on noting improvements and the other on praising capabilities.
Criteria: Participants note AI's improved troubleshooting capabilities and praise its problem-solving capabilities.
Phrase: Praises AI troubleshooting.

20.
Concepts: relies on ai-generated code
Relationship: N/A
Criteria: Participants rely on AI-generated code due to situational constraints or practical needs.
Phrase: Relies on AI-generated code.