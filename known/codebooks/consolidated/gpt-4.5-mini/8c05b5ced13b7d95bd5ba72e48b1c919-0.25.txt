You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (16 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
16. 
Concepts: {Repeat the input 16}
Relationship: {What is logical relationship between concepts in code 16, or N/A if not applicable}
Criteria: {Who did what, and how for code 16}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: share version details, clarify version details
- Designers share specific details and notes regarding the current software version and updates.
- Designers clarify the type and specifics of the software version within the community.

2.
Concepts: announce software updates, announce software releases
- Designers announce updates and changes to software components based on user input.
- Designers announce new features and version updates to inform users about software changes.

3.
Concepts: provide status updates, communicate product updates
- Designers provide status updates and communicate progress on software releases.
- Designers provide updates on the current status and future plans for the software.

4.
Concepts: outline future plans, discuss future directions
- Designers outline and share future plans for software development based on user needs.
- Designers discuss future planning and directions that may influence software development.

5.
Concepts: address technical constraints, discuss software limitations
- Designers discuss technical limitations or requirements affecting the software.
- Designers explain and acknowledge limitations of features or solutions within the software.

6.
Concepts: apologize for inconveniences, apologies and politeness
- Designers apologize for any disturbances or inconveniences experienced by users.
- Expressions of politeness, apologies, or acknowledgment of potential inconvenience by the designers.

7.
Concepts: request user manual, express need for documentation
- Users request and reiterate their need for a user manual to assist with software usage.
- Users express the need for documentation or a user manual for the app.

8.
Concepts: request information, request technical support
- Users request specific information or assistance regarding the software's functionalities.
- Users request assistance or technical support for software usage.

9.
Concepts: suggest new features, import/export functionality
- Users suggest new features and enhancements to improve the software's educational utility.
- Users suggest functionalities that would enhance the software's usability in educational settings.

10.
Concepts: share user experiences, share positive experiences
- Users share their teaching experiences and the impact of the software on their practices.
- Users share positive experiences and feedback regarding the software's effectiveness in classrooms.

11.
Concepts: reassure users, resolve user concerns
- Designers reassure users regarding feature availability and respond to their inquiries.
- The designer addresses user concerns and provides reassurance about software improvements.

12.
Concepts: gather user feedback, solicit user suggestions
- Designers gather user input and feedback to enhance the software's design.
- Designers solicit user feedback and suggestions for future software iterations.

13.
Concepts: invite user feedback, invite user participation, feature request invitation
- Designers invite and encourage users to provide feedback and suggestions for improvements.
- Designer invites users to participate in the development process or provide input.
- Designers invite users to suggest new features or improvements.

14.
Concepts: promote community engagement, encourage community participation
- Designers foster active participation and communication among community members.
- Designers encourage community participation and contributions to the design process.

15.
Concepts: express positive feedback, appreciate software features
- Users express positive feedback and satisfaction regarding the software's usability and features.
- Users appreciate the software's features and express gratitude for feedback on updates.

16.
Concepts: appreciate community support, appreciate designers' efforts
- Users express support and appreciation for designers' efforts, and vice versa.
- Users express gratitude and appreciation for the efforts of designers and others in the community.
===
---
Definitions for each code (16 in total):
1.
Concepts: share version details, clarify version details  
Relationship: Both concepts involve communication about software versions, with sharing being more about dissemination and clarifying focusing on understanding.  
Criteria: Designers share specific details and notes regarding the current software version and clarify the type and specifics of the software version within the community.  
Phrase: Communicate version specifics.

2.
Concepts: announce software updates, announce software releases  
Relationship: Both concepts involve informing users about changes, with updates focusing on modifications and releases on new versions.  
Criteria: Designers announce updates and changes to software components and new features to inform users about software changes.  
Phrase: Inform about software changes.

3.
Concepts: provide status updates, communicate product updates  
Relationship: Both concepts involve sharing information about the software's progress and current state.  
Criteria: Designers provide status updates and communicate progress on software releases and future plans for the software.  
Phrase: Update on software progress.

4.
Concepts: outline future plans, discuss future directions  
Relationship: Both concepts involve planning for the software's development trajectory based on user needs.  
Criteria: Designers outline and share future plans for software development and discuss future planning that may influence it.  
Phrase: Plan for future development.

5.
Concepts: address technical constraints, discuss software limitations  
Relationship: Both concepts involve recognizing and explaining the boundaries of the software's capabilities.  
Criteria: Designers discuss technical limitations affecting the software and explain limitations of features or solutions.  
Phrase: Explain software limitations.

6.
Concepts: apologize for inconveniences, apologies and politeness  
Relationship: Both concepts involve acknowledging user discomfort and expressing regret.  
Criteria: Designers apologize for any disturbances experienced by users and express politeness or acknowledgment of potential inconvenience.  
Phrase: Acknowledge user inconvenience.

7.
Concepts: request user manual, express need for documentation  
Relationship: Both concepts involve users seeking guidance on software usage through documentation.  
Criteria: Users request and reiterate their need for a user manual to assist with software usage.  
Phrase: Seek documentation assistance.

8.
Concepts: request information, request technical support  
Relationship: Both concepts involve users seeking help or information regarding the software.  
Criteria: Users request specific information or assistance regarding the software's functionalities.  
Phrase: Seek technical assistance.

9.
Concepts: suggest new features, import/export functionality  
Relationship: Both concepts involve users proposing enhancements to improve software usability.  
Criteria: Users suggest new features and functionalities that would enhance the software's educational utility.  
Phrase: Propose software enhancements.

10.
Concepts: share user experiences, share positive experiences  
Relationship: Both concepts involve users communicating their experiences with the software, with a focus on positive outcomes.  
Criteria: Users share their teaching experiences and positive feedback regarding the software's effectiveness.  
Phrase: Share positive feedback.

11.
Concepts: reassure users, resolve user concerns  
Relationship: Both concepts involve addressing user inquiries and providing comfort regarding software features.  
Criteria: Designers reassure users regarding feature availability and address their concerns.  
Phrase: Address user concerns.

12.
Concepts: gather user feedback, solicit user suggestions  
Relationship: Both concepts involve collecting input from users to inform software design.  
Criteria: Designers gather user input and feedback to enhance the software's design and solicit suggestions for future iterations.  
Phrase: Collect user feedback.

13.
Concepts: invite user feedback, invite user participation, feature request invitation  
Relationship: All concepts involve encouraging users to contribute their thoughts and suggestions for improvements.  
Criteria: Designers invite users to provide feedback and participate in the development process.  
Phrase: Encourage user contributions.

14.
Concepts: promote community engagement, encourage community participation  
Relationship: Both concepts involve fostering active involvement and communication among community members.  
Criteria: Designers foster active participation and encourage contributions to the design process.  
Phrase: Foster community involvement.

15.
Concepts: express positive feedback, appreciate software features  
Relationship: Both concepts involve users communicating their satisfaction and gratitude regarding the software.  
Criteria: Users express positive feedback and appreciation for the software's usability and features.  
Phrase: Communicate software appreciation.

16.
Concepts: appreciate community support, appreciate designers' efforts  
Relationship: Both concepts involve mutual recognition and gratitude between users and designers.  
Criteria: Users express support and appreciation for designers' efforts and vice versa.  
Phrase: Acknowledge mutual appreciation.  
---