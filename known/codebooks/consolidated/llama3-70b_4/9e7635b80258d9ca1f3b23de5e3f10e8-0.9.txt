You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (16 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
16. 
Concepts: {Repeat the input 16}
Relationship: {What is logical relationship between concepts in code 16, or N/A if not applicable}
Criteria: {Who did what, and how for code 16}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: advocating for convenience, advocating for user convenience
- User advocates for convenience or ease of use in the application.
- User advocates for user convenience or ease of use.

2.
Concepts: emphasizing convenience, prioritizing convenience
- A user emphasizes the importance of convenience in the system.
- User emphasizes the importance of convenience or ease of use.

3.
Concepts: highlighting usability, highlighting convenience
- A user highlights the ease of use or practicality of the software.
- A user highlights the convenience or benefits of a particular feature.

4.
Concepts: providing use cases, describing use case scenario
- A user provides a scenario or example of how they plan to use the software.
- A user describes a scenario or use case for a particular feature.

5.
Concepts: practical applications, highlighting practical application
- User suggests practical use cases or applications for features.
- User highlights the practical application or usefulness of a feature.

6.
Concepts: potential user needs, identifying user needs
- User indicates potential needs or requirements for the software.
- The designer or user identifies a specific need or requirement for the software.
- A designer tries to understand user needs or problems.

7.
Concepts: expressing a need, highlighting user needs, showcasing user needs
- A user expresses a need or desire for a specific feature or functionality in the software.
- User highlights their needs or requirements for the platform.
- The user showcases their needs, often by requesting specific features or functionalities.

8.
Concepts: explaining needs, explaining user needs
- A user or designer explains specific needs or requirements.
- A user explains or describes their needs or requirements.

9.
Concepts: expanding scope, expanding platform scope, expanding development scope
- User suggests expanding the scope or features of the application.
- User suggests expanding the platform's scope to include new experiments or features.
- User suggests expanding the platform's development scope to include new areas.

10.
Concepts: suggesting features, proposing new features
- Suggesting new features, ideas, or improvements for Physics Lab.
- Proposing or suggesting new features or simulations for Physics Lab.

11.
Concepts: request, proposing specific physics simulation features, feature requests
- Users make requests or suggestions for new features or improvements in Physics Lab.
- A user proposes or requests specific features or functionalities related to physics simulations or demonstrations.
- A user requests additional features in the Physics Lab.
- A user suggests or requests the expansion of experiments or features.
- Requesting additional features, experiments, or functionalities.

12.
Concepts: requesting features, making detailed feature requests, making feature requests, requesting new features, making requests
- A user requests specific features or functionalities.
- User requests a specific feature or version.
- A user makes a detailed request for a feature or functionality.
- A user requests a new feature or functionality.
- Requesting or suggesting new features or functionalities.
- Users expressing specific requests or ideas for features or improvements in Physics Lab.
- A user requests the inclusion of a specific feature or experiment type.
- User makes a specific request or suggestion for a feature or improvement.

13.
Concepts: inquiring about features, inquiring about new features
- A user inquires about the possibility of including a specific feature or experiment.
- Inquiring about the possibility of including new features or experiments.

14.
Concepts: responding to feedback, acknowledge feedback, reacting to feedback
- Responding to user feedback or suggestions
- Responding to or acknowledging user feedback or suggestions.
- Responses or reactions to user feedback or suggestions.
- Designer takes feedback or responds to user input.

15.
Concepts: specific feedback, providing input, providing specific input
- A user provides specific feedback or suggestions.
- A user provides input or feedback on a specific aspect of the design or functionality.
- Providing specific input or suggestions for a feature or design.

16.
Concepts: influencing development, contributing to product development
- User attempts to influence the development of the software.
- A user contributes to the development of the software by providing feedback or suggestions.
===
Here are the definitions for each code:

---
1.
Concepts: advocating for convenience, advocating for user convenience
Relationship: The two concepts are synonymous, both emphasizing the importance of ease of use in the application.
Criteria: Users advocate for convenience or ease of use in the application.
Phrase: Advocating for convenience.

2.
Concepts: emphasizing convenience, prioritizing convenience
Relationship: The two concepts are closely related, with emphasizing convenience highlighting its importance and prioritizing convenience indicating its precedence.
Criteria: Users emphasize the importance of convenience in the system.
Phrase: Emphasizing convenience.

3.
Concepts: highlighting usability, highlighting convenience
Relationship: The two concepts are related, with usability encompassing convenience as a key aspect.
Criteria: Users highlight the ease of use or practicality of the software.
Phrase: Highlighting usability.

4.
Concepts: providing use cases, describing use case scenario
Relationship: The two concepts are synonymous, both referring to the provision of examples or scenarios of software usage.
Criteria: Users provide scenarios or examples of how they plan to use the software.
Phrase: Providing use cases.

5.
Concepts: practical applications, highlighting practical application
Relationship: The two concepts are closely related, with practical applications referring to the uses of a feature and highlighting practical application emphasizing its usefulness.
Criteria: Users suggest practical use cases or applications for features.
Phrase: Highlighting practical applications.

6.
Concepts: potential user needs, identifying user needs
Relationship: The two concepts are related, with potential user needs referring to possible requirements and identifying user needs referring to the process of understanding those needs.
Criteria: Users indicate potential needs or requirements for the software.
Phrase: Identifying user needs.

7.
Concepts: expressing a need, highlighting user needs, showcasing user needs
Relationship: The three concepts are synonymous, all referring to the communication of user requirements.
Criteria: Users express needs or desires for specific features or functionality in the software.
Phrase: Expressing needs.

8.
Concepts: explaining needs, explaining user needs
Relationship: The two concepts are synonymous, both referring to the clarification of user requirements.
Criteria: Users explain specific needs or requirements.
Phrase: Explaining needs.

9.
Concepts: expanding scope, expanding platform scope, expanding development scope
Relationship: The three concepts are related, with expanding scope referring to the enlargement of the application's features, expanding platform scope referring to the inclusion of new experiments, and expanding development scope referring to the inclusion of new areas.
Criteria: Users suggest expanding the scope or features of the application.
Phrase: Expanding scope.

10.
Concepts: suggesting features, proposing new features
Relationship: The two concepts are synonymous, both referring to the recommendation of new ideas or improvements.
Criteria: Users suggest new features, ideas, or improvements for Physics Lab.
Phrase: Suggesting features.

11.
Concepts: request, proposing specific physics simulation features, feature requests
Relationship: The three concepts are related, with request referring to the general solicitation of new features, proposing specific physics simulation features referring to the suggestion of specific ideas, and feature requests referring to the solicitation of new functionalities.
Criteria: Users make requests or suggestions for new features or improvements in Physics Lab.
Phrase: Requesting features.

12.
Concepts: requesting features, making detailed feature requests, making feature requests, requesting new features, making requests
Relationship: The five concepts are synonymous, all referring to the solicitation of new features or functionalities.
Criteria: Users request specific features or functionalities.
Phrase: Requesting features.

13.
Concepts: inquiring about features, inquiring about new features
Relationship: The two concepts are synonymous, both referring to the questioning of possible feature inclusion.
Criteria: Users inquire about the possibility of including a specific feature or experiment.
Phrase: Inquiring about features.

14.
Concepts: responding to feedback, acknowledge feedback, reacting to feedback
Relationship: The three concepts are related, with responding to feedback referring to the provision of a response, acknowledging feedback referring to the recognition of user input, and reacting to feedback referring to the general response to user suggestions.
Criteria: Responding to user feedback or suggestions.
Phrase: Responding to feedback.

15.
Concepts: specific feedback, providing input, providing specific input
Relationship: The three concepts are related, with specific feedback referring to the provision of detailed suggestions, providing input referring to the general provision of user feedback, and providing specific input referring to the clarification of user suggestions.
Criteria: Users provide specific feedback or suggestions.
Phrase: Providing feedback.

16.
Concepts: influencing development, contributing to product development
Relationship: The two concepts are related, with influencing development referring to the attempt to shape the software's development and contributing to product development referring to the provision of feedback or suggestions that inform development decisions.
Criteria: Users attempt to influence the development of the software.
Phrase: Influencing development.