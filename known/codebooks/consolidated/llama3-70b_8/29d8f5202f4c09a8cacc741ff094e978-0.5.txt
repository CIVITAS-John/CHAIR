You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (32 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
32. 
Concepts: {Repeat the input 32}
Relationship: {What is logical relationship between concepts in code 32, or N/A if not applicable}
Criteria: {Who did what, and how for code 32}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: feature development justification, justifying development priorities
- A designer justifies the development of a feature.
- Designers explain the rationale behind development priorities and justify design choices or decisions.

2.
Concepts: explaining options, clarifying options
- Designers explain available options or features.
- A designer or administrator clarifies options or possibilities for a feature or aspect of the software.

3.
Concepts: explaining existing design, explaining differences
- A designer explains the existing design or functionality of the software.
- Designers explain differences between versions, features, or functionalities of the software.

4.
Concepts: design principles, providing theoretical explanations
- Designers explain or discuss the underlying principles or philosophies of the platform.
- Designers explain theoretical concepts or principles underlying the software.

5.
Concepts: introduce feature functions, demonstrating functionality
- The designer introduces new feature functions or explains how to use them.
- Designers demonstrate the functionality of a feature or tool and explain its purpose or functionality, describing features and functionality.

6.
Concepts: explaining simulation details, providing technical explanations
- Designers explain simulation details or mechanics.
- Designers provide technical details or explanations about the Physics Lab's features or functionality.

7.
Concepts: concept elaboration, providing information
- Designer elaborates or explains a concept or feature.
- Designers provide additional information or clarification about a topic or feature.

8.
Concepts: offering assistance, supporting user experience
- Designers offer support or resources to users and provide personalized support or assistance.
- A designer provides support or guidance to enhance the user experience.

9.
Concepts: educating users, explaining usage
- Designers educate users on a specific topic or feature.
- Designers explain how to use the software or a specific feature and provide context or background information.

10.
Concepts: reiterates bidirectional conversion, explaining bidirectional conversion
- Designer explains or reiterates the concept of bidirectional conversion.
- Explaining the concept of bidirectional conversion between physical and circuit diagrams.

11.
Concepts: providing examples, using visual aids, sharing visual aids
- Designers provide examples to illustrate a point.
- Using visual aids such as images to demonstrate or explain a concept or feature.
- Designers share visual aids to illustrate a point or concept.

12.
Concepts: communicating through images, facilitating user input through visuals
- Designer communicates through images or visual aids.
- Designer facilitates user input through visual aids or images.

13.
Concepts: promoting ideal components, highlighting ideal components
- A person promotes or highlights ideal components or features.
- Designer highlights ideal components or features.

14.
Concepts: conceptual connection, describing diagram connections
- A designer explains the connection between two concepts or diagrams.
- The speaker describes or explains the connections or relationships between diagrams or components.

15.
Concepts: optimize circuit diagram, presenting circuit diagrams
- The designer discusses optimizing a circuit diagram layout.
- A designer presents a circuit diagram and asks for confirmation or feedback.

16.
Concepts: prioritizing user experience, specifies details for user experience
- A designer prioritizes user experience and designs for intuitive use.
- Designer specifies details to enhance user experience.

17.
Concepts: describing user interactions, considering user experience and implications
- Designers describe how users interact with the platform or its features.
- A designer considers how users will experience or interact with a feature and its implications.

18.
Concepts: user-centric design, emphasizing user-centric design
- Designing software or features with user-friendliness and intuitiveness in mind.
- The designer describes a user-centered design approach.

19.
Concepts: usability design, emphasizing usability
- Design considerations for user-friendliness and ease of use.
- Emphasizing the importance of usability in the software design.

20.
Concepts: balance user needs, aligning with user needs
- The designer aims to balance different user needs.
- Aligning design or functionality with user needs or requirements.

21.
Concepts: inferring user needs, gathering requirements
- Designer infers or identifies user needs or requirements.
- A designer seeks specific requirements or information from users.

22.
Concepts: assessing usability, evaluate software
- Evaluation of the platform's usability, practicality, or convenience.
- A user evaluates the usability or practicality of the software and provides feedback on its effectiveness.

23.
Concepts: promoting convenience, promoting usability
- Promoting convenience or ease of use in the software.
- Emphasis on making the platform easy to use, intuitive, or user-friendly.

24.
Concepts: advocate for convenience, emphasizing user convenience
- Users advocate for features that would make the experience more convenient.
- A user emphasizes the importance of user convenience or ease of use.

25.
Concepts: improving usability, accessibility enhancement
- A user or designer aims to improve the user interface or user experience.
- A designer or user suggests making the tool more accessible to users.

26.
Concepts: advocating for users, advocating for accessibility
- Advocacy for user needs, preferences, or requirements.
- Advocating for features or improvements that promote accessibility or inclusivity.

27.
Concepts: valuing quality, valuing craftsmanship
- Expressing values of quality and craftsmanship in software development.
- User expresses a value related to craftsmanship.

28.
Concepts: setting standards, setting new standards
- Establishing or maintaining high standards for design, functionality, or quality.
- A designer sets new standards or expectations for the software or its features.

29.
Concepts: emphasizing quality, valuing design quality
- A designer emphasizes and prioritizes quality.
- User values design quality or attention to detail.

30.
Concepts: long-term stability, highlighting feature importance
- The designer mentions a feature that will ensure long-term stability.
- Designers highlight a feature for long-term stability.

31.
Concepts: component adjustment, adjusting component properties
- Removing or adjusting idealized components
- Adjustments, updates, or changes made to component properties or features.

32.
Concepts: component introduction, introducing component customization
- Introducing or discussing versatile components
- The speaker introduces or describes the ability to customize components or features.
===
Here are the definitions for each code:

---
1.
Concepts: feature development justification, justifying development priorities
Relationship: The designer's justification is the reason behind the development priorities.
Criteria: Designers justify the development of features and explain their priorities.
Phrase: Justifying development priorities.

2.
Concepts: explaining options, clarifying options
Relationship: Explaining options leads to clarifying them.
Criteria: Designers explain and clarify available options or features.
Phrase: Explaining options.

3.
Concepts: explaining existing design, explaining differences
Relationship: Explaining the existing design helps to explain differences.
Criteria: Designers explain the existing design and differences between versions or features.
Phrase: Explaining design and differences.

4.
Concepts: design principles, providing theoretical explanations
Relationship: Design principles are the foundation for theoretical explanations.
Criteria: Designers explain the underlying principles and theoretical concepts of the software.
Phrase: Explaining design principles.

5.
Concepts: introduce feature functions, demonstrating functionality
Relationship: Introducing feature functions involves demonstrating their functionality.
Criteria: Designers introduce new feature functions and demonstrate their purpose or functionality.
Phrase: Demonstrating feature functions.

6.
Concepts: explaining simulation details, providing technical explanations
Relationship: Explaining simulation details involves providing technical explanations.
Criteria: Designers explain simulation details and provide technical explanations about the software's features.
Phrase: Explaining simulation details.

7.
Concepts: concept elaboration, providing information
Relationship: Concept elaboration involves providing additional information.
Criteria: Designers elaborate on concepts and provide additional information or clarification.
Phrase: Elaborating on concepts.

8.
Concepts: offering assistance, supporting user experience
Relationship: Offering assistance supports the user experience.
Criteria: Designers offer support and resources to users to enhance their experience.
Phrase: Supporting user experience.

9.
Concepts: educating users, explaining usage
Relationship: Educating users involves explaining how to use the software.
Criteria: Designers educate users on specific topics or features and explain their usage.
Phrase: Educating users.

10.
Concepts: reiterates bidirectional conversion, explaining bidirectional conversion
Relationship: Reiterating bidirectional conversion involves explaining the concept.
Criteria: Designers explain and reiterate the concept of bidirectional conversion.
Phrase: Explaining bidirectional conversion.

11.
Concepts: providing examples, using visual aids, sharing visual aids
Relationship: Providing examples involves using and sharing visual aids.
Criteria: Designers provide examples and use visual aids to illustrate points or concepts.
Phrase: Providing examples.

12.
Concepts: communicating through images, facilitating user input through visuals
Relationship: Communicating through images facilitates user input.
Criteria: Designers communicate through images and facilitate user input through visual aids.
Phrase: Communicating through images.

13.
Concepts: promoting ideal components, highlighting ideal components
Relationship: Promoting ideal components involves highlighting them.
Criteria: Designers promote and highlight ideal components or features.
Phrase: Highlighting ideal components.

14.
Concepts: conceptual connection, describing diagram connections
Relationship: Explaining conceptual connections involves describing diagram connections.
Criteria: Designers explain the connections between concepts or diagrams.
Phrase: Explaining conceptual connections.

15.
Concepts: optimize circuit diagram, presenting circuit diagrams
Relationship: Optimizing circuit diagrams involves presenting them.
Criteria: Designers discuss optimizing circuit diagram layouts and present them.
Phrase: Presenting circuit diagrams.

16.
Concepts: prioritizing user experience, specifies details for user experience
Relationship: Prioritizing user experience involves specifying details.
Criteria: Designers prioritize user experience and specify details to enhance it.
Phrase: Prioritizing user experience.

17.
Concepts: describing user interactions, considering user experience and implications
Relationship: Describing user interactions involves considering their experience and implications.
Criteria: Designers describe user interactions and consider their experience and implications.
Phrase: Describing user interactions.

18.
Concepts: user-centric design, emphasizing user-centric design
Relationship: User-centric design emphasizes user-friendliness.
Criteria: Designers design with user-friendliness in mind and emphasize user-centric design.
Phrase: Emphasizing user-centric design.

19.
Concepts: usability design, emphasizing usability
Relationship: Usability design emphasizes ease of use.
Criteria: Designers consider usability and emphasize ease of use in software design.
Phrase: Emphasizing usability.

20.
Concepts: balance user needs, aligning with user needs
Relationship: Balancing user needs involves aligning with them.
Criteria: Designers balance different user needs and align design with user requirements.
Phrase: Balancing user needs.

21.
Concepts: inferring user needs, gathering requirements
Relationship: Inferring user needs involves gathering requirements.
Criteria: Designers infer user needs and gather specific requirements or information.
Phrase: Gathering user requirements.

22.
Concepts: assessing usability, evaluate software
Relationship: Assessing usability involves evaluating the software.
Criteria: Users evaluate the software's usability and provide feedback on its effectiveness.
Phrase: Evaluating software usability.

23.
Concepts: promoting convenience, promoting usability
Relationship: Promoting convenience involves promoting usability.
Criteria: Designers promote convenience and usability in the software.
Phrase: Promoting convenience.

24.
Concepts: advocate for convenience, emphasizing user convenience
Relationship: Advocating for convenience involves emphasizing user convenience.
Criteria: Users advocate for features that promote convenience and emphasize its importance.
Phrase: Advocating for convenience.

25.
Concepts: improving usability, accessibility enhancement
Relationship: Improving usability involves enhancing accessibility.
Criteria: Designers aim to improve the user interface and enhance accessibility.
Phrase: Improving usability.

26.
Concepts: advocating for users, advocating for accessibility
Relationship: Advocating for users involves advocating for accessibility.
Criteria: Users advocate for their needs and promote accessibility or inclusivity.
Phrase: Advocating for users.

27.
Concepts: valuing quality, valuing craftsmanship
Relationship: Valuing quality involves valuing craftsmanship.
Criteria: Users express values related to quality and craftsmanship in software development.
Phrase: Valuing quality.

28.
Concepts: setting standards, setting new standards
Relationship: Setting standards involves setting new expectations.
Criteria: Designers establish or maintain high standards for design, functionality, or quality.
Phrase: Setting standards.

29.
Concepts: emphasizing quality, valuing design quality
Relationship: Emphasizing quality involves valuing design quality.
Criteria: Designers emphasize and prioritize quality, and users value design quality.
Phrase: Emphasizing quality.

30.
Concepts: long-term stability, highlighting feature importance
Relationship: Highlighting feature importance involves ensuring long-term stability.
Criteria: Designers highlight features that ensure long-term stability.
Phrase: Highlighting feature importance.

31.
Concepts: component adjustment, adjusting component properties
Relationship: Adjusting component properties involves making changes.
Criteria: Designers adjust or update component properties or features.
Phrase: Adjusting component properties.

32.
Concepts: component introduction, introducing component customization
Relationship: Introducing component customization involves introducing new components.
Criteria: Designers introduce or describe the ability to customize components or features.
Phrase: Introducing component customization.