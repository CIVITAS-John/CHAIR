You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (12 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
12. 
Concepts: {Repeat the input 12}
Relationship: {What is logical relationship between concepts in code 12, or N/A if not applicable}
Criteria: {Who did what, and how for code 12}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: seeking confirmation, verifies understanding
- Designers seek confirmation or validation of design decisions.
- A designer seeks confirmation of understanding or agreement.

2.
Concepts: recognizing user needs, assessing user needs
- Designers recognize or acknowledge user needs or requirements.
- Designers assess user needs, requirements, or preferences, considering user needs.

3.
Concepts: offering solutions, suggesting alternative solutions
- Designers or users offer or share potential solutions or workarounds to problems or issues.
- Designers or users consider or offer alternative designs, approaches, or solutions to problems or design issues.

4.
Concepts: guiding users, facilitating software access
- A designer provides instructions or guidance on how to access or use the software.
- Designers provide resources or information to facilitate user access to the software.

5.
Concepts: notifying about updates, informing about software updates
- Informing users about software updates.
- Designers inform users about updates or releases and the status of upcoming software updates.

6.
Concepts: planning future updates, planning new features
- Designers plan and discuss future updates or developments, sharing ideas and goals.
- Designers plan and discuss future feature development, introducing new functions or features.

7.
Concepts: sharing development updates, sharing future ideas
- Designers share information about the software's development plans.
- Designers share potential future directions or ideas for the software, discussing plans and considerations.

8.
Concepts: building community, providing community support
- A developer or user fosters a sense of community or collaboration.
- A developer or user provides assistance or guidance to others.

9.
Concepts: expressing interest, functionality interest
- Users express interest in specific features, components, or experiments.
- A user expresses interest in a specific feature or functionality.

10.
Concepts: requesting features, requesting convenience features
- Users request specific features or functionalities.
- Users request features that would enhance convenience.

11.
Concepts: highlighting benefits, highlighting feature significance
- Designer highlights benefits, advantages, or value of a feature or system.
- Designers highlight the importance or benefits of specific features or functionalities.

12.
Concepts: complimenting and expressing gratitude, complimenting and appreciating software design
- Users express gratitude and compliment the software or designers.
- Users compliment, praise, and appreciate the software's design and aesthetics.
===
Here are the definitions for each code:

---
1.
Concepts: seeking confirmation, verifies understanding
Relationship: Seeking confirmation is a way to verify understanding, implying a causal relationship.
Criteria: Designers seek validation or confirmation of their understanding from others.
Phrase: Seek validation of understanding.

2.
Concepts: recognizing user needs, assessing user needs
Relationship: Recognizing user needs is a necessary step before assessing them, implying a sequential relationship.
Criteria: Designers acknowledge and evaluate user needs or requirements.
Phrase: Acknowledge and assess user needs.

3.
Concepts: offering solutions, suggesting alternative solutions
Relationship: Offering solutions and suggesting alternative solutions are two related ways to address problems, implying a categorical relationship.
Criteria: Designers or users propose potential solutions or workarounds to problems or issues.
Phrase: Propose solutions or alternatives.

4.
Concepts: guiding users, facilitating software access
Relationship: Guiding users is a way to facilitate software access, implying a causal relationship.
Criteria: Designers provide instruction or resources to enable user access to the software.
Phrase: Facilitate user access through guidance.

5.
Concepts: notifying about updates, informing about software updates
Relationship: Notifying about updates is a way to inform users about software updates, implying a categorical relationship.
Criteria: Designers inform users about software updates or releases.
Phrase: Inform about software updates.

6.
Concepts: planning future updates, planning new features
Relationship: Planning future updates and planning new features are two related aspects of software development, implying a categorical relationship.
Criteria: Designers plan and discuss future software developments or feature additions.
Phrase: Plan software developments.

7.
Concepts: sharing development updates, sharing future ideas
Relationship: Sharing development updates and sharing future ideas are two related ways to communicate plans, implying a categorical relationship.
Criteria: Designers share information about software development plans or future directions.
Phrase: Share development plans.

8.
Concepts: building community, providing community support
Relationship: Building community and providing community support are two related aspects of fostering collaboration, implying a categorical relationship.
Criteria: Developers or users foster a sense of community or collaboration and provide assistance to others.
Phrase: Foster community collaboration.

9.
Concepts: expressing interest, functionality interest
Relationship: Expressing interest is a way to show functionality interest, implying a categorical relationship.
Criteria: Users express interest in specific features, components, or experiments.
Phrase: Express interest in features.

10.
Concepts: requesting features, requesting convenience features
Relationship: Requesting features and requesting convenience features are two related ways to ask for new functionalities, implying a categorical relationship.
Criteria: Users request specific features or functionalities to enhance convenience.
Phrase: Request new features.

11.
Concepts: highlighting benefits, highlighting feature significance
Relationship: Highlighting benefits is a way to highlight feature significance, implying a categorical relationship.
Criteria: Designers emphasize the benefits, advantages, or value of features or systems.
Phrase: Highlight feature benefits.

12.
Concepts: complimenting and expressing gratitude, complimenting and appreciating software design
Relationship: Complimenting and expressing gratitude are two related ways to show appreciation, implying a categorical relationship.
Criteria: Users express gratitude and compliment the software or designers.
Phrase: Express appreciation for software design.