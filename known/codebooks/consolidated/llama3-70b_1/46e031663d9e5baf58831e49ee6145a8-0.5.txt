You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (14 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
14. 
Concepts: {Repeat the input 14}
Relationship: {What is logical relationship between concepts in code 14, or N/A if not applicable}
Criteria: {Who did what, and how for code 14}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: selective code usage, selectively uses ai-generated code
- Selectively uses code generated by LLM-driven interfaces.
- Users use AI-generated code and decide whether to run or modify it.

2.
Concepts: code realization, generates code with ai assistance, task automation
- Realizes code requirements through the AI
- Users generate code with AI assistance and use AI-generated code to complete tasks.
- AI is used to automate tasks, such as writing code.

3.
Concepts: evaluates chatgpt's code, using chatgpt for code analysis
- Evaluates ChatGPT's code and asks for detailed explanations.
- The expert uses AI for code analysis, recognizing its limitations and potential benefits.

4.
Concepts: optimizes code with ai, describes code optimization
- Participants use AI to optimize code.
- The participant describes using ChatGPT for optimizing code or improving coding efficiency.

5.
Concepts: using chatgpt for coding assistance, describes coding process with chatgpt guidance
- Uses LLM-driven interfaces for coding assistance and verification.
- Participants describe their process of writing code manually with the guidance of ChatGPT and building code skeletons before asking for assistance.

6.
Concepts: decides to copy and paste, finds ai-generated code runnable
- Decides to copy and paste code generated by AI.
- Finds AI-generated code runnable and decides to copy and paste it or run it.

7.
Concepts: ai-generated code interaction, customizes ai-generated code
- Participant interacts with AI-generated code.
- The participant customizes the AI-generated code by selectively copying and editing it.

8.
Concepts: uses ai-generated code as reference, refer to the generated code or get a reference?
- The participant uses AI-generated code as a reference for writing own code.
- Participants refer to generated code or seek references to improve their understanding.

9.
Concepts: evaluates ai-generated code, learning through comparison
- Participants assess and compare AI-generated code with other code types.
- Expresses learning or realization through comparing with AI-generated code.

10.
Concepts: quality over speed, appreciation for deliberate model creation
- Prioritizes quality over speed in model creation.
- Values thoughtful model creation and avoiding rushed solutions.

11.
Concepts: comments, documentation and commenting
- Comments on the quality and readability of AI-generated code.
- The interviewee's perception of AI's role in generating well-documented and commented code.

12.
Concepts: usability, providing functional and well-documented code
- ChatGPT provides comments and documentation, making generated code easy to read.
- AI generates well-structured and documented code that is easy to read and understand.

13.
Concepts: maintenance, code complexity
- Discusses the importance of code maintenance and simplicity.
- Discusses the complexity of code and its impact on maintenance.

14.
Concepts: readability, values simplicity in code, appreciates readable code
- Values readability and simplicity in code.
- Participants value simplicity in code.
- Participants appreciate readable code and code commenting.
===
Here are the definitions for each code:

---
1.
Concepts: selective code usage, selectively uses ai-generated code
Relationship: The concepts are related in that they both describe the user's intentional and discerning use of AI-generated code.
Criteria: Participants selectively use AI-generated code to support their work.
Phrase: Selectively uses AI-generated code.

2.
Concepts: code realization, generates code with ai assistance, task automation
Relationship: The concepts are related in that they describe the use of AI to generate code and automate tasks.
Criteria: Participants use AI to generate code and automate tasks.
Phrase: Generates code with AI assistance.

3.
Concepts: evaluates chatgpt's code, using chatgpt for code analysis
Relationship: The concepts are related in that they describe the user's critical evaluation of AI-generated code.
Criteria: Participants evaluate ChatGPT's code and use it for code analysis.
Phrase: Evaluates ChatGPT's code.

4.
Concepts: optimizes code with ai, describes code optimization
Relationship: The concepts are related in that they describe the use of AI to improve code efficiency.
Criteria: Participants use AI to optimize code and describe the process.
Phrase: Optimizes code with AI.

5.
Concepts: using chatgpt for coding assistance, describes coding process with chatgpt guidance
Relationship: The concepts are related in that they describe the user's collaborative coding process with AI.
Criteria: Participants use ChatGPT for coding assistance and describe their process.
Phrase: Uses ChatGPT for coding assistance.

6.
Concepts: decides to copy and paste, finds ai-generated code runnable
Relationship: The concepts are related in that they describe the user's decision to use AI-generated code.
Criteria: Participants decide to copy and paste AI-generated code that is runnable.
Phrase: Copies and pastes AI-generated code.

7.
Concepts: ai-generated code interaction, customizes ai-generated code
Relationship: The concepts are related in that they describe the user's interactive and adaptive use of AI-generated code.
Criteria: Participants interact with and customize AI-generated code.
Phrase: Customizes AI-generated code.

8.
Concepts: uses ai-generated code as reference, refer to the generated code or get a reference?
Relationship: The concepts are related in that they describe the user's use of AI-generated code as a learning resource.
Criteria: Participants use AI-generated code as a reference for writing their own code.
Phrase: Uses AI-generated code as a reference.

9.
Concepts: evaluates ai-generated code, learning through comparison
Relationship: The concepts are related in that they describe the user's critical evaluation of AI-generated code as a learning strategy.
Criteria: Participants evaluate AI-generated code and learn through comparison.
Phrase: Evaluates AI-generated code for learning.

10.
Concepts: quality over speed, appreciation for deliberate model creation
Relationship: The concepts are related in that they describe the user's prioritization of quality over speed in model creation.
Criteria: Participants prioritize quality over speed in model creation.
Phrase: Prioritizes quality over speed.

11.
Concepts: comments, documentation and commenting
Relationship: The concepts are related in that they describe the user's perception of AI-generated code quality and readability.
Criteria: Participants comment on the quality and readability of AI-generated code.
Phrase: Comments on AI-generated code quality.

12.
Concepts: usability, providing functional and well-documented code
Relationship: The concepts are related in that they describe the user's expectation of AI-generated code usability and readability.
Criteria: Participants expect AI-generated code to be functional and well-documented.
Phrase: Expects usable AI-generated code.

13.
Concepts: maintenance, code complexity
Relationship: The concepts are related in that they describe the user's concern for code maintainability and simplicity.
Criteria: Participants discuss the importance of code maintenance and simplicity.
Phrase: Discusses code maintenance and complexity.

14.
Concepts: readability, values simplicity in code, appreciates readable code
Relationship: The concepts are related in that they describe the user's value for code readability and simplicity.
Criteria: Participants value readability and simplicity in code.
Phrase: Values readable code.