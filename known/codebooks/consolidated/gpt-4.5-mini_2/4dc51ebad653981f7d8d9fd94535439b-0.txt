You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (23 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
23. 
Concepts: {Repeat the input 23}
Relationship: {What is logical relationship between concepts in code 23, or N/A if not applicable}
Criteria: {Who did what, and how for code 23}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: product improvement, preview upcoming features
- Designer announces a planned improvement to the software in an upcoming update.
- A designer previews and explains upcoming features and improvements for the software.

2.
Concepts: detail educational benefits, explain feature functions
- The designer explains the educational benefits of a feature being developed for the software.
- Designer introduces new features, explains how they work, and clarifies specific functionalities of the software.

3.
Concepts: announce feature updates, announce new product features
- Instances where designers announce new features, updates, or bug fixes based on user input.
- Designer announces the release of a new version of the product and details new features in version release notes.

4.
Concepts: provide product updates, announce software updates
- Designers share information about the current status and future plans for the software.
- Designers provide updates on changes to software components and announce updates with details about the current application version.

5.
Concepts: collaborate to solve problems, share usability solutions
- Designers and users work together to address issues and improve the product collaboratively.
- Designers share workarounds for known issues encountered by users and work to improve user experience by addressing usability issues.

6.
Concepts: explaining design goals, explain design rationale
- Designers explain their design objectives, focusing on user experience and ease of use.
- Designers explain the principles and rationale behind their design choices, while users and designers provide explanations for decisions or features.

7.
Concepts: discuss system requirements, analyze compatibility issues
- Designers discuss necessary system requirements for the software and confirm compatibility while explaining the development process.
- Designers discuss compatibility issues and suggest potential solutions while identifying challenges related to software compatibility.

8.
Concepts: discuss solution limitations, acknowledge software limitations
- Designers mention limitations of proposed solutions and discuss how they can be addressed.
- A designer acknowledges the limitations of the team in addressing all requests and explains software limitations while addressing user concerns.

9.
Concepts: ensure accuracy, engage in clarification dialogue
- The designer seeks clarification on a specific detail related to the software's functionality.
- Users and designers engage in dialogue to confirm information through follow-up questions.

10.
Concepts: provide feedback and requests, suggest usability improvements
- Users provide specific feedback and express requests for new features to enhance their experience.
- Users suggest features that enhance convenience and usability, offer further suggestions, and propose specific changes for improvement.

11.
Concepts: plan for iterative feedback, engage in iterative development
- Designers outline plans for gathering user opinions before new development.
- Designers discuss updates and continuously improve the product based on user feedback and testing.

12.
Concepts: transparent developer discussion, ensure development transparency
- The designer engages in open discussions about development challenges and solutions.
- A designer maintains transparency about the development process and provides detailed information to the community.

13.
Concepts: share personal interests, share future development directions
- Designers share personal interests that may relate to the development of the application.
- Designers discuss potential future projects and share personal interests while collaboratively discussing opportunities for software development.

14.
Concepts: acknowledge community assistance, compliment community contributions
- Users acknowledge finding useful resources shared within the community and express gratitude for contributions, enhancing community building.
- Users express admiration or approval for ideas or features and appreciation for feedback received in response to updates or suggestions.

15.
Concepts: acknowledge community support, acknowledge community contributions
- Designers express gratitude for community support, while users express appreciation for designers' efforts.
- Users and designers express gratitude for the software and acknowledge contributions and efforts within the community.

16.
Concepts: acknowledgment and implementation, acknowledge user experiences
- Designers acknowledging user feedback and discussing plans to implement suggested features.
- Designers acknowledge user experiences while users express understanding of designers' challenges and affirm user statements.

17.
Concepts: gather user context, clarify user scenarios
- A designer gathers context by asking users about their teaching environment and inquiring about users' experiences or challenges.
- Designers ask clarifying questions about classroom situations and interact with users to clarify their roles in the educational context.

18.
Concepts: consulting community, acknowledging community expertise
- Designers and users consult each other for input on specific technical aspects.
- Designer and users discuss educational standards and practices in the community.

19.
Concepts: user experience, share personal experiences
- Instances where users share their experiences or opinions about using the software.
- Users share stories about their experiences affecting software usage in educational contexts and describe challenges faced.

20.
Concepts: discuss context of use, discuss educational applications
- Users describe the specific contexts in which they use the software and discuss its usability.
- Designers discuss the educational context in which the software is used, while users discuss practical applications in classroom settings.

21.
Concepts: express anticipation, express hope for progress
- Users express eagerness for upcoming updates to the application.
- Users express positive feedback regarding development plans while designers express hope for progress in feature development.

22.
Concepts: seek technical information, request software information
- Users ask questions to seek information or clarification regarding the software's functionality and inquire about technical aspects.
- Users ask questions or request information regarding the use and features of the Physics Lab software and seek assistance with access instructions.

23.
Concepts: offer user support
- Designers encourage users to report any issues they encounter while using the software and ask for clarification on encountered issues.
- Designers offer assistance to users experiencing difficulties and provide technical support and assistance.
===
---
Definitions for each code (23 in total):
1.
Concepts: product improvement, preview upcoming features  
Relationship: The concepts are related as both involve communication from designers about enhancements to the software.  
Criteria: Designers announce planned improvements and preview upcoming features in the software.  
Phrase: Announce software enhancements.

2.
Concepts: detail educational benefits, explain feature functions  
Relationship: The concepts are interconnected as they both focus on educating users about the software's features and their advantages.  
Criteria: Designers explain the educational benefits and functionalities of new features being developed for the software.  
Phrase: Explain feature benefits.

3.
Concepts: announce feature updates, announce new product features  
Relationship: Both concepts involve communication from designers regarding new features and updates based on user feedback.  
Criteria: Designers announce new features and updates, detailing changes based on user input.  
Phrase: Announce new features.

4.
Concepts: provide product updates, announce software updates  
Relationship: The concepts are related as they both involve sharing information about the software's status and updates.  
Criteria: Designers provide updates on the software's current status and announce upcoming changes.  
Phrase: Provide software updates.

5.
Concepts: collaborate to solve problems, share usability solutions  
Relationship: The concepts are linked as they both emphasize teamwork between designers and users to enhance the product.  
Criteria: Designers and users collaborate to address issues and share solutions for usability improvements.  
Phrase: Collaborate on usability.

6.
Concepts: explaining design goals, explain design rationale  
Relationship: The concepts are related as they both involve designers communicating their intentions and reasoning behind design choices.  
Criteria: Designers explain their design goals and the rationale behind their choices to users.  
Phrase: Explain design intentions.

7.
Concepts: discuss system requirements, analyze compatibility issues  
Relationship: The concepts are connected as they both involve discussions about the software's technical requirements and compatibility.  
Criteria: Designers discuss system requirements and analyze compatibility issues during development.  
Phrase: Discuss technical requirements.

8.
Concepts: discuss solution limitations, acknowledge software limitations  
Relationship: The concepts are related as they both involve recognizing and addressing the constraints of the software and proposed solutions.  
Criteria: Designers discuss and acknowledge the limitations of solutions and the software itself.  
Phrase: Acknowledge limitations.

9.
Concepts: ensure accuracy, engage in clarification dialogue  
Relationship: The concepts are linked as they both focus on confirming information and ensuring clarity in communication.  
Criteria: Designers and users engage in dialogue to seek clarification and ensure accuracy of information.  
Phrase: Clarify information.

10.
Concepts: provide feedback and requests, suggest usability improvements  
Relationship: The concepts are related as they both involve users expressing their needs and suggestions for enhancing the software.  
Criteria: Users provide feedback and suggest improvements to enhance usability.  
Phrase: Suggest usability enhancements.

11.
Concepts: plan for iterative feedback, engage in iterative development  
Relationship: The concepts are interconnected as they both emphasize the importance of user feedback in the development process.  
Criteria: Designers plan for gathering user feedback and engage in iterative development based on that feedback.  
Phrase: Engage in iterative development.

12.
Concepts: transparent developer discussion, ensure development transparency  
Relationship: The concepts are related as they both focus on maintaining openness about the development process.  
Criteria: Designers engage in open discussions and maintain transparency about development challenges and solutions.  
Phrase: Maintain development transparency.

13.
Concepts: share personal interests, share future development directions  
Relationship: The concepts are linked as they both involve designers discussing their interests and potential future projects.  
Criteria: Designers share personal interests and discuss future directions for software development.  
Phrase: Discuss future directions.

14.
Concepts: acknowledge community assistance, compliment community contributions  
Relationship: The concepts are related as they both involve recognizing and appreciating the contributions of the community.  
Criteria: Users acknowledge and express gratitude for the resources and contributions shared within the community.  
Phrase: Acknowledge community contributions.

15.
Concepts: acknowledge community support, acknowledge community contributions  
Relationship: The concepts are interconnected as they both involve mutual appreciation between designers and users for their efforts.  
Criteria: Designers and users express gratitude for each other's support and contributions to the community.  
Phrase: Acknowledge community support.

16.
Concepts: acknowledgment and implementation, acknowledge user experiences  
Relationship: The concepts are related as they both involve recognizing user feedback and experiences in the development process.  
Criteria: Designers acknowledge user feedback and experiences while discussing plans for implementation.  
Phrase: Acknowledge user feedback.

17.
Concepts: gather user context, clarify user scenarios  
Relationship: The concepts are linked as they both involve understanding user experiences and contexts to inform design decisions.  
Criteria: Designers gather context and clarify user scenarios to better understand their needs.  
Phrase: Clarify user context.

18.
Concepts: consulting community, acknowledging community expertise  
Relationship: The concepts are related as they both emphasize the importance of community input and expertise in the development process.  
Criteria: Designers and users consult each other for input and acknowledge the community's expertise.  
Phrase: Consult community expertise.

19.
Concepts: user experience, share personal experiences  
Relationship: The concepts are interconnected as they both focus on users sharing their experiences with the software.  
Criteria: Users share their experiences and opinions about using the software in educational contexts.  
Phrase: Share user experiences.

20.
Concepts: discuss context of use, discuss educational applications  
Relationship: The concepts are related as they both involve discussions about how the software is used in educational settings.  
Criteria: Users and designers discuss the context of use and practical applications of the software in education.  
Phrase: Discuss educational applications.

21.
Concepts: express anticipation, express hope for progress  
Relationship: The concepts are linked as they both involve users expressing positive expectations for future updates.  
Criteria: Users express eagerness and hope for progress regarding upcoming updates to the application.  
Phrase: Express anticipation for updates.

22.
Concepts: seek technical information, request software information  
Relationship: The concepts are related as they both involve users seeking clarification and information about the software's functionality.  
Criteria: Users ask questions and request information regarding the software's features and technical aspects.  
Phrase: Request technical information.

23.
Concepts: offer user support  
Relationship: N/A  
Criteria: Designers encourage users to report issues and offer assistance for difficulties encountered while using the software.  
Phrase: Offer user assistance.
---