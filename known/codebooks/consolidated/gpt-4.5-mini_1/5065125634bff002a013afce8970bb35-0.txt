You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (15 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
15. 
Concepts: {Repeat the input 15}
Relationship: {What is logical relationship between concepts in code 15, or N/A if not applicable}
Criteria: {Who did what, and how for code 15}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: internal update, provide updates on software changes
- Designer provides updates on changes to existing features in the software.
- Designers provide updates on the current status and future plans for the software.

2.
Concepts: announce software updates, announce version updates
- Designers announce updates and new releases of the software.
- Designers inform users about version updates and their release timelines.

3.
Concepts: outline future updates, outline future plans
- Designers outline the schedule for future updates and releases.
- Designers outline future considerations and planned updates for the software.

4.
Concepts: maintain transparency, ensure development transparency
- A designer maintains transparency about the development process with the community.
- Designers provide detailed information about development processes and challenges.

5.
Concepts: self-rebuttal, reflect on past software experiences
- Designers reflect on past experiences with the software, often sharing insights or lessons learned.
- Designers elaborate on past experiences related to software usage.

6.
Concepts: clarification, clarify version type
- Designers clarify points of confusion or uncertainty in discussions.
- Designers clarify the version being discussed while users seek clarification on it.

7.
Concepts: inquire about recent updates, inquire about upcoming software updates
- Users express interest in recent changes or updates to the software.
- Users inquire about the status and timing of upcoming software updates.

8.
Concepts: teacher, share teaching experiences
- A user identifies themselves as a teacher and discusses their teaching experience and needs.
- Users share their teaching background to inform their questions or discussions.

9.
Concepts: inquire about user's professional role, ask about user's professional background
- Designers inquire about users' professional roles to understand their context.
- Designers ask users about their professional background to better understand their needs.

10.
Concepts: ask follow-up questions, ask clarifying questions
- Users or designers ask follow-up questions to confirm or clarify information.
- Designers pose questions to clarify design requirements and user preferences.

11.
Concepts: acknowledge inconvenience, apologies and politeness
- Designers apologize for any disturbances or inconveniences caused by their actions.
- Expressions of politeness, apologies, or acknowledgment of potential inconvenience by the designers.

12.
Concepts: take user feedback, accept user suggestions
- Designers take user feedback into account and seek input for future help.
- Designers acknowledge and accept user suggestions for future updates.

13.
Concepts: encourage in-group discussion, promote open communication
- Designers encourage users to discuss problems and ask questions openly.
- Designers encourage open communication about user experiences, inviting feedback on any issues encountered.

14.
Concepts: gather community input, promise to invite feedback from everyone in the group
- Designers gather community input and promise future consultations before decisions.
- The designer promises to seek feedback from the community before making decisions.

15.
Concepts: appreciate support from users, express gratitude for contributions
- Users express support, encouragement, or appreciation for the designers' efforts.
- Users express gratitude or acknowledgment for the designers' work.
===
---
Definitions for each code (15 in total):
1.
Concepts: internal update, provide updates on software changes
Relationship: The concepts are related as they both involve the designer's role in communicating changes to the software.
Criteria: Designers provide updates on changes to existing features and the current status and future plans for the software.
Phrase: Provide software updates.

2.
Concepts: announce software updates, announce version updates
Relationship: Both concepts involve the act of informing users about new software releases and version changes.
Criteria: Designers announce updates and new releases, informing users about version updates and their release timelines.
Phrase: Announce software updates.

3.
Concepts: outline future updates, outline future plans
Relationship: The concepts are connected as they both pertain to planning and scheduling future software developments.
Criteria: Designers outline the schedule for future updates and considerations for the software.
Phrase: Outline future updates.

4.
Concepts: maintain transparency, ensure development transparency
Relationship: Both concepts emphasize the importance of clear communication regarding the development process.
Criteria: Designers maintain transparency about the development process and provide detailed information about challenges.
Phrase: Maintain development transparency.

5.
Concepts: self-rebuttal, reflect on past software experiences
Relationship: The concepts are related as they both involve designers reflecting on their past experiences to inform future actions.
Criteria: Designers reflect on past experiences with the software, sharing insights or lessons learned.
Phrase: Reflect on past experiences.

6.
Concepts: clarification, clarify version type
Relationship: The concepts are linked as they both involve the act of making information clearer for users.
Criteria: Designers clarify points of confusion and specify the version being discussed while users seek clarification.
Phrase: Clarify information.

7.
Concepts: inquire about recent updates, inquire about upcoming software updates
Relationship: Both concepts involve users seeking information about the software's current and future status.
Criteria: Users express interest in recent changes and inquire about the timing of upcoming software updates.
Phrase: Inquire about updates.

8.
Concepts: teacher, share teaching experiences
Relationship: The concepts are related as they both involve users identifying their professional background to inform discussions.
Criteria: Users identify themselves as teachers and share their teaching experiences and needs.
Phrase: Share teaching experiences.

9.
Concepts: inquire about user's professional role, ask about user's professional background
Relationship: Both concepts involve designers seeking to understand users' professional contexts to tailor their support.
Criteria: Designers inquire about users' professional roles and backgrounds to better understand their needs.
Phrase: Inquire about professional roles.

10.
Concepts: ask follow-up questions, ask clarifying questions
Relationship: The concepts are connected as they both involve seeking additional information to enhance understanding.
Criteria: Users or designers ask follow-up and clarifying questions to confirm or clarify information.
Phrase: Ask clarifying questions.

11.
Concepts: acknowledge inconvenience, apologies and politeness
Relationship: Both concepts emphasize the importance of politeness and acknowledgment in communication.
Criteria: Designers apologize for any disturbances and express politeness or acknowledgment of potential inconvenience.
Phrase: Acknowledge inconvenience.

12.
Concepts: take user feedback, accept user suggestions
Relationship: The concepts are related as they both involve designers valuing and incorporating user input.
Criteria: Designers take user feedback into account and accept suggestions for future updates.
Phrase: Accept user feedback.

13.
Concepts: encourage in-group discussion, promote open communication
Relationship: Both concepts focus on fostering a collaborative and open environment for discussion.
Criteria: Designers encourage users to discuss problems and invite open communication about experiences.
Phrase: Promote open communication.

14.
Concepts: gather community input, promise to invite feedback from everyone in the group
Relationship: The concepts are linked as they both involve soliciting input from the community for decision-making.
Criteria: Designers gather community input and promise to seek feedback before making decisions.
Phrase: Gather community input.

15.
Concepts: appreciate support from users, express gratitude for contributions
Relationship: Both concepts involve users expressing appreciation for the efforts of designers.
Criteria: Users express support and gratitude for the designers' work and contributions.
Phrase: Appreciate user support.
---