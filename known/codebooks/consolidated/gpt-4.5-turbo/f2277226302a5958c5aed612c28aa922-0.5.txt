You are an expert in thematic analysis. 
Each code is a cluster of multiple qualitative sub-code. First, determine the logical relationship between concepts. If a concept includes another, use the broader one. If concepts are parallel, try to cover both concepts.
Write clear and generalizable labels and criteria for each merged code, informed by the context, and without unnecessary specifics or examples.
Find a theory-informed category for each code. Use 2-4 words for categories and avoid over-generalization.
The research question is: How did Physics Lab's online community emerge? (through the lens of learning sciences, human-computer interaction, and participatory design)
Always follow the output format:
---
Categories: 
* {Name some categories you identified from the research question and theoretical lens}

Definitions for each code (10 in total):
1. {Repeat the input 1}
Relationship: {The logical relationship between concepts in input 1}
Criteria: {A sentence of consolidated criteria for code 1}
Label: {A consolidated label of code 1}
Category: {2-4 words for code 1}
...
10. {Repeat the input 10}
Relationship: {The logical relationship between concepts in input 10}
Criteria: {A sentence of consolidated criteria for code 10}
Label: {A consolidated label of code 10}
Category: {2-4 words for code 10}
---
~~~
1. feature prioritization, development prioritization.
- Discussions or mentions of how features or sections are prioritized in the development process.
- Discussions related to how the development of different features or sections of the tool is prioritized.

2. usability concerns.
- Mentions of usability issues or enhancements that reflect the ongoing improvement of the tool's design.
- Points in the conversation where participants discuss difficulties or solutions related to the use of the online platform's features.

3. request for feedback.
- Instances where the designer asks for suggestions or feedback from the users to improve the software.
- Instances where the designer or other members actively seek feedback or suggestions from the community.
- Instances where the designer asks for user input or feedback on app features or updates.
- Instances where the designer explicitly asks for or refers to community feedback to improve the tool.

4. information sharing.
- Exchanges where information about the tool's updates, how to access it, or how to use it are shared.
- Instances where users or designers provide information or solutions to queries posted by other members.

5. update announcements.
- Statements where new updates or changes in the software are communicated to the community.
- Information shared by the designer about upcoming updates, releases, and enhancements.

6. technical support.
- Exchanges that involve providing assistance or guidance on technical aspects of the platform.
- Exchanges that provide guidance or solutions related to technical issues with the app.

7. feature updates.
- Designer communicates upcoming changes or updates in the software features.
- Information about new or upcoming features in the app.

8. compatibility issues.
- Discussions related to software compatibility with different systems or hardware.
- Discussions or concerns related to the software's compatibility with different systems or versions.

9. positive feedback.
- Positive remarks made by users about the software that indicate satisfaction or specific strengths.
- Instances where community members express approval or enthusiasm for design choices or updates.

10. user feedback.
- Direct comments or suggestions from users about software features or performance.
- Instances where users provide specific feedback or requests related to the software’s features and usability.
===
---
Categories: 
* Development Prioritization
* Usability Improvement
* Community Engagement
* Information Dissemination
* Technical Assistance
* System Compatibility
* User Satisfaction

Definitions for each code (10 in total):
1. feature prioritization, development prioritization.
Relationship: Parallel concepts that both address the ordering of tasks in development.
Criteria: Discussions that focus on determining the importance and sequence of feature development within the software project.
Label: Development Task Prioritization
Category: Development Prioritization

2. usability concerns.
Relationship: Parallel concepts centered around the ease of use and design efficiency of the tool.
Criteria: Discussions that identify, analyze, or propose solutions to enhance the user experience and interaction with the platform.
Label: Usability Enhancement Discussions
Category: Usability Improvement

3. request for feedback.
Relationship: Overlapping concepts where feedback is solicited to refine the tool.
Criteria: Instances where designers or community members actively seek and discuss feedback to enhance the tool’s functionality or user experience.
Label: Feedback Solicitation
Category: Community Engagement

4. information sharing.
Relationship: Parallel concepts involving the dissemination of knowledge about the tool.
Criteria: Exchanges that involve providing or receiving detailed information about the tool's functionality, updates, or usage.
Label: Knowledge Sharing
Category: Information Dissemination

5. update announcements.
Relationship: Parallel concepts focused on communicating new developments.
Criteria: Official communications from developers about new or upcoming changes to the tool that are shared with the community.
Label: Update Communications
Category: Information Dissemination

6. technical support.
Relationship: Parallel concepts that involve assisting users with technical problems.
Criteria: Interactions aimed at resolving technical issues faced by users, enhancing their ability to utilize the platform effectively.
Label: Technical Assistance
Category: Technical Assistance

7. feature updates.
Relationship: Subset of update announcements specifically focused on features.
Criteria: Specific announcements related to new features or significant modifications to existing features within the tool.
Label: Feature-Specific Updates
Category: Information Dissemination

8. compatibility issues.
Relationship: Parallel concepts concerning the tool’s operation across various environments.
Criteria: Discussions that address and seek solutions for the tool’s functionality across different hardware or software environments.
Label: Compatibility Discussions
Category: System Compatibility

9. positive feedback.
Relationship: Subset of user feedback focusing on positive aspects.
Criteria: Expressions of satisfaction or commendation from users regarding the tool’s features or performance.
Label: Positive User Feedback
Category: User Satisfaction

10. user feedback.
Relationship: Broader concept encompassing all types of feedback from users.
Criteria: Direct user insights or suggestions that address specific aspects of the software’s usability or functionality.
Label: User Feedback
Category: Community Engagement
---