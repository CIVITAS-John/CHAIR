You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (15 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
15. 
Concepts: {Repeat the input 15}
Relationship: {What is logical relationship between concepts in code 15, or N/A if not applicable}
Criteria: {Who did what, and how for code 15}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: announce upcoming updates, announce planned updates
- Designers announce updates and seek user input.
- Designers mention and announce planned feature updates.

2.
Concepts: announce software updates, provide product updates
- Designers announce new versions, releases, and updates of the software.
- Designers inform users and communicate updates and changes in software components.

3.
Concepts: share visual updates, preview future updates
- Designers share visual previews or updates with the community.
- Designers share previews of upcoming updates and features.

4.
Concepts: plan future updates, plan future developments
- Designers engage in project planning and discuss future updates.
- Designers share and plan future developments and priorities.

5.
Concepts: provide usability feedback, suggest usability improvements
- Users provide feedback and suggestions for software improvement.
- Users suggest design and usability improvements.

6.
Concepts: followup question, ask follow-up questions
- Follow-up questions to gather more information.
- Designers ask follow-up questions to gain more insight.

7.
Concepts: solicit user feedback, involve users in design, gather user experience feedback
- Designers ask users to provide suggestions and feedback.
- Designers seek and gather user input and feedback.
- Designers solicit user feedback on their experiences with the software.

8.
Concepts: respond to user feedback, acknowledge user feedback
- Designers respond to user feedback and inquiries.
- Designers acknowledge user feedback and experiences.

9.
Concepts: express gratitude, user support appreciation
- Users express appreciation for designers' efforts.
- A designer appreciates the support from users.

10.
Concepts: show appreciation, appreciate community support
- Users show appreciation for help or support.
- Users appreciate and acknowledge community support.

11.
Concepts: appreciate features, share positive feedback
- Users compliment and appreciate software features.
- Users share positive feedback and praise about the software.

12.
Concepts: express with emojis, expressive communication
- Users express feelings or responses with emojis.
- Users and designers use emojis and informal language to express emotions or reactions.

13.
Concepts: confirm compatibility, compatibility check suggestion
- Designers confirm the software's compatibility with specific systems or devices.
- Designers suggest checking system compatibility for the software.

14.
Concepts: explain software limitations, acknowledging limitations
- Designers explain system and software limitations.
- A designer acknowledges potential limitations of the software compatibility.

15.
Concepts: resource request, request documentation
- Users request access to resources like a user manual.
- Users request a user manual or additional documentation.
===
---
Definitions for each code (15 in total):
1.
Concepts: announce upcoming updates, announce planned updates
Relationship: Both concepts involve communication about future changes.
Criteria: Designers announce and seek input on planned feature updates.
Phrase: Announcing future updates

2.
Concepts: announce software updates, provide product updates
Relationship: Both concepts involve informing users about current changes.
Criteria: Designers inform users about new software versions and updates.
Phrase: Communicating current updates

3.
Concepts: share visual updates, preview future updates
Relationship: Both concepts involve visual communication of upcoming features.
Criteria: Designers share visual previews of future updates with the community.
Phrase: Previewing updates visually

4.
Concepts: plan future updates, plan future developments
Relationship: Both concepts involve strategic planning for future changes.
Criteria: Designers plan and discuss future updates and developments.
Phrase: Planning future enhancements

5.
Concepts: provide usability feedback, suggest usability improvements
Relationship: Both concepts involve user input on improving usability.
Criteria: Users provide feedback and suggest usability improvements.
Phrase: Suggesting usability improvements

6.
Concepts: followup question, ask follow-up questions
Relationship: Both concepts involve seeking additional information.
Criteria: Designers ask follow-up questions to gain more insight.
Phrase: Seeking further information

7.
Concepts: solicit user feedback, involve users in design, gather user experience feedback
Relationship: All concepts involve actively gathering user input.
Criteria: Designers solicit and gather user feedback on their experiences.
Phrase: Collecting user feedback

8.
Concepts: respond to user feedback, acknowledge user feedback
Relationship: Both concepts involve reacting to user input.
Criteria: Designers respond to and acknowledge user feedback.
Phrase: Addressing user feedback

9.
Concepts: express gratitude, user support appreciation
Relationship: Both concepts involve showing thankfulness.
Criteria: Users and designers express appreciation for each other's support.
Phrase: Expressing gratitude

10.
Concepts: show appreciation, appreciate community support
Relationship: Both concepts involve recognition of community contributions.
Criteria: Users show and appreciate community support.
Phrase: Acknowledging community support

11.
Concepts: appreciate features, share positive feedback
Relationship: Both concepts involve positive user reactions to the software.
Criteria: Users share positive feedback and appreciation for software features.
Phrase: Sharing positive feedback

12.
Concepts: express with emojis, expressive communication
Relationship: Both concepts involve informal, emotional communication.
Criteria: Users and designers use emojis to express feelings or reactions.
Phrase: Using expressive emojis

13.
Concepts: confirm compatibility, compatibility check suggestion
Relationship: Both concepts involve verifying system compatibility.
Criteria: Designers confirm and suggest checking software compatibility.
Phrase: Verifying software compatibility

14.
Concepts: explain software limitations, acknowledging limitations
Relationship: Both concepts involve recognizing constraints.
Criteria: Designers explain and acknowledge software limitations.
Phrase: Acknowledging software constraints

15.
Concepts: resource request, request documentation
Relationship: Both concepts involve asking for informational resources.
Criteria: Users request access to documentation or manuals.
Phrase: Requesting documentation resources
---