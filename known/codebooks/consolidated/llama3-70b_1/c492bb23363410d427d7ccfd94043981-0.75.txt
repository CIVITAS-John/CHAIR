You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (20 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
20. 
Concepts: {Repeat the input 20}
Relationship: {What is logical relationship between concepts in code 20, or N/A if not applicable}
Criteria: {Who did what, and how for code 20}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: notes incomplete code generation, identifies outdated or incomplete code
- AI-driven interfaces generate incomplete code, lacking external verification.
- The participant identifies instances where LLM-driven interfaces generate outdated code or missing elements.

2.
Concepts: identifies design issues, identifies feature gaps in ai assistance
- Users identify design or usability issues with AI-driven interfaces, citing bugs or errors.
- Users identify feature gaps in AI-driven interfaces, experiencing limitations in assistance.

3.
Concepts: notes incomplete ai responses, finds explanation option insufficient
- Users note AI responses may be incomplete or missing information, citing limited understanding.
- The participant expresses dissatisfaction with the explanation option provided by the AI.

4.
Concepts: values ai's debugging ability, emphasizes debugging practice
- Users appreciate and value AI's debugging capability, including unit testing and error checking.
- Participants emphasize the importance of debugging practice, valuing debugging and unit testing.

5.
Concepts: user exercises, demonstrates self-reliance in debugging
- Believes users need practice in debugging their own code.
- Participants demonstrate self-reliance in fixing errors, trying to debug code themselves.

6.
Concepts: calls for better error messaging, suggests error handling improvements
- Users call for better error messaging, highlighting the importance of user-friendly feedback.
- Users suggest improving error management by providing one error message at a time.

7.
Concepts: enhances error resolution capabilities, enhances error handling and troubleshooting
- AI-driven interfaces enhance error resolution capabilities, noting their ability to resolve errors.
- AI-driven interfaces need to handle, clarify, and troubleshoot errors effectively.

8.
Concepts: identifies conceptual errors, calls for conceptual error detection
- Participants identify conceptual errors, requiring human effort for debugging.
- The participant calls for conceptual error detection, beyond syntax mistakes.

9.
Concepts: prefer readable and maintainable code, value readability for maintenance
- Participants prefer readable code and value maintainable code.
- Participants write code in a simple, maintainable way, valuing code readability for maintenance purposes.

10.
Concepts: error verification, requests verification of ai-generated code
- Verifying errors and bugs in code, including asking AI to check for reserved words
- Users request verification, seeking error-free code or output.

11.
Concepts: manual coding, prefers manual debugging
- Participants prefer to write code manually, using AI-generated code as a reference.
- Participants prefer hands-on debugging, choosing not to use AI assistance.

12.
Concepts: uses ai for syntax support, forgets syntax and uses a reference
- The participant uses AI to recall syntax and relies on AI for syntax support.
- The participant forgets syntax and uses a dictionary or AI-generated code as a reference.

13.
Concepts: optimizes code with ai assistance, uses ai-generated code for expedited tasks
- Participants use AI for optimization, highlighting iterative improvement.
- Participants use AI-generated code, adapting code based on suggestions.

14.
Concepts: discuss proper help seeking practices, emphasizes the importance of documentation and proper practices for seeking help
- Participants reflect on proper practices for seeking help online.
- Participants emphasize the importance of proper documentation and online help-seeking practices.

15.
Concepts: net logo limitations, critique netlogo's limitations
- Identifying limitations of NetLogo, such as lack of smart code editors
- Participants critique NetLogo's lack of smart code editors and unhelpful error messages.

16.
Concepts: self-assessment, express confidence in netlogo skills
- The participant assesses their own abilities and confidence in using NetLogo.
- Participants express confidence in their NetLogo skills and acknowledge their competence.

17.
Concepts: shares programming experience, emphasizes extensive programming experience
- Participants share their programming experience, providing historical context.
- Participants share extensive programming experience, emphasizing credibility and experience.

18.
Concepts: emphasizes the need for expertise, emphasizes the importance of expertise and experience
- The participant emphasizes the need for expertise when working with AI-generated code.
- The participant emphasizes the importance of prerequisite knowledge and expertise when working with AI.

19.
Concepts: critiquing existing learning processes and advocating for ai support, critiques current technical documentation and imagines ai improving the learning process
- The participant critiques existing learning processes and advocates for AI support.
- Participants critique traditional documentation and imagine AI improving the learning process.

20.
Concepts: critiques novices' high expectations and challenges, highlights differing expectations between novices and experts
- The participant critiques novices' high expectations from AI and highlights the challenge of asking the right question.
- The participant expresses differing expectations for AI-driven interfaces between novices and experts.
===
Here are the definitions for each code:

---
1.
Concepts: notes incomplete code generation, identifies outdated or incomplete code
Relationship: The two concepts are related as they both describe limitations of AI-driven interfaces in generating complete and up-to-date code.
Criteria: Users identify instances where AI-driven interfaces generate incomplete or outdated code.
Phrase: Identifying code generation limitations.

2.
Concepts: identifies design issues, identifies feature gaps in ai assistance
Relationship: The two concepts are related as they both describe limitations of AI-driven interfaces in terms of design and features.
Criteria: Users identify design issues and feature gaps in AI-driven interfaces.
Phrase: Identifying AI assistance limitations.

3.
Concepts: notes incomplete ai responses, finds explanation option insufficient
Relationship: The two concepts are related as they both describe limitations of AI-driven interfaces in providing complete and sufficient information.
Criteria: Users note incomplete AI responses and find explanation options insufficient.
Phrase: Evaluating AI response completeness.

4.
Concepts: values ai's debugging ability, emphasizes debugging practice
Relationship: The two concepts are related as they both highlight the importance of debugging in AI-driven interfaces.
Criteria: Users value AI's debugging ability and emphasize the importance of debugging practice.
Phrase: Valuing AI debugging capabilities.

5.
Concepts: user exercises, demonstrates self-reliance in debugging
Relationship: The two concepts are related as they both describe users' self-reliance in debugging their own code.
Criteria: Users exercise self-reliance in debugging their own code.
Phrase: Demonstrating self-reliance in debugging.

6.
Concepts: calls for better error messaging, suggests error handling improvements
Relationship: The two concepts are related as they both describe users' needs for improved error handling in AI-driven interfaces.
Criteria: Users call for better error messaging and suggest error handling improvements.
Phrase: Advocating for improved error handling.

7.
Concepts: enhances error resolution capabilities, enhances error handling and troubleshooting
Relationship: The two concepts are related as they both describe the importance of error resolution and handling in AI-driven interfaces.
Criteria: AI-driven interfaces enhance error resolution capabilities and handle errors effectively.
Phrase: Enhancing error resolution capabilities.

8.
Concepts: identifies conceptual errors, calls for conceptual error detection
Relationship: The two concepts are related as they both describe the importance of detecting conceptual errors in AI-driven interfaces.
Criteria: Users identify conceptual errors and call for conceptual error detection.
Phrase: Identifying conceptual errors.

9.
Concepts: prefer readable and maintainable code, value readability for maintenance
Relationship: The two concepts are related as they both describe users' preferences for readable and maintainable code.
Criteria: Users prefer readable and maintainable code, valuing readability for maintenance purposes.
Phrase: Valuing code readability.

10.
Concepts: error verification, requests verification of ai-generated code
Relationship: The two concepts are related as they both describe users' needs for verifying errors in AI-generated code.
Criteria: Users verify errors and request verification of AI-generated code.
Phrase: Requesting error verification.

11.
Concepts: manual coding, prefers manual debugging
Relationship: The two concepts are related as they both describe users' preferences for manual coding and debugging.
Criteria: Users prefer manual coding and debugging.
Phrase: Preferring manual coding and debugging.

12.
Concepts: uses ai for syntax support, forgets syntax and uses a reference
Relationship: The two concepts are related as they both describe users' reliance on AI for syntax support.
Criteria: Users use AI for syntax support and forget syntax, using a reference.
Phrase: Relying on AI for syntax support.

13.
Concepts: optimizes code with ai assistance, uses ai-generated code for expedited tasks
Relationship: The two concepts are related as they both describe users' use of AI assistance for optimizing code.
Criteria: Users optimize code with AI assistance and use AI-generated code for expedited tasks.
Phrase: Optimizing code with AI assistance.

14.
Concepts: discuss proper help seeking practices, emphasizes the importance of documentation and proper practices for seeking help
Relationship: The two concepts are related as they both describe users' awareness of proper help-seeking practices.
Criteria: Users discuss proper help-seeking practices and emphasize the importance of documentation.
Phrase: Emphasizing proper help-seeking practices.

15.
Concepts: net logo limitations, critique netlogo's limitations
Relationship: The two concepts are related as they both describe limitations of NetLogo.
Criteria: Users identify limitations of NetLogo.
Phrase: Critiquing NetLogo's limitations.

16.
Concepts: self-assessment, express confidence in netlogo skills
Relationship: The two concepts are related as they both describe users' self-assessment of their NetLogo skills.
Criteria: Users assess their own NetLogo skills and express confidence.
Phrase: Expressing confidence in NetLogo skills.

17.
Concepts: shares programming experience, emphasizes extensive programming experience
Relationship: The two concepts are related as they both describe users' sharing of their programming experience.
Criteria: Users share their programming experience, emphasizing credibility and experience.
Phrase: Sharing programming experience.

18.
Concepts: emphasizes the need for expertise, emphasizes the importance of expertise and experience
Relationship: The two concepts are related as they both describe the importance of expertise and experience.
Criteria: Users emphasize the need for expertise and experience when working with AI-generated code.
Phrase: Emphasizing the importance of expertise.

19.
Concepts: critiquing existing learning processes and advocating for ai support, critiques current technical documentation and imagines ai improving the learning process
Relationship: The two concepts are related as they both describe users' critiques of existing learning processes and advocacy for AI support.
Criteria: Users critique existing learning processes and advocate for AI support, imagining AI improving the learning process.
Phrase: Advocating for AI-driven learning processes.

20.
Concepts: critiques novices' high expectations and challenges, highlights differing expectations between novices and experts
Relationship: The two concepts are related as they both describe users' critiques of novices' high expectations and differing expectations between novices and experts.
Criteria: Users critique novices' high expectations and highlight differing expectations between novices and experts.
Phrase: Critiquing novices' expectations.