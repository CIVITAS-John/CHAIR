You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (32 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
32. 
Concepts: {Repeat the input 32}
Relationship: {What is logical relationship between concepts in code 32, or N/A if not applicable}
Criteria: {Who did what, and how for code 32}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: gratitude, expressing gratitude
- Expressing gratitude or appreciation towards others.
- Expressing gratitude or appreciation to the community.

2.
Concepts: politeness, displaying etiquette
- Expressing politeness or courtesy in communication.
- User displays etiquette or politeness in their message.

3.
Concepts: feature appreciation, appreciation of features
- Expressing appreciation or admiration for a feature or idea.
- User expresses appreciation or gratitude for a feature or the platform.

4.
Concepts: recognition of effort, appreciation for effort, demonstrate appreciation
- Instances where users acknowledge and appreciate the efforts of the designers.
- User expresses appreciation or admiration for the designer's dedication or effort.
- A user expresses gratitude or appreciation for the designer's work or efforts.

5.
Concepts: community building, express gratitude, gratitude and acknowledgment
- A user or designer expresses gratitude or appreciation.
- Instances where users express thanks or appreciation for the work done by the designers or other community members.
- Instances where users or designers express gratitude or acknowledge contributions.
- Users expressing gratitude or acknowledgment for the designers' work.
- Expressions of gratitude and recognition of user contributions.

6.
Concepts: appreciation of feedback, appreciate support from users
- The designer expresses appreciation for user feedback or suggestions.
- A designer expresses gratitude or appreciation for user support, feedback, or encouragement.

7.
Concepts: user satisfaction, user satisfaction with software features, software effectiveness
- A user expresses satisfaction or praise for the software.
- A user expresses satisfaction or praise for the software or its features.
- A user expresses satisfaction or effectiveness of the software.

8.
Concepts: praising software, compliments the software, complimenting the software, positive, positive feedback
- User praises software.
- A user expresses a positive opinion about the software, highlighting a specific feature or aspect.
- User compliments or praises the software's features or design.
- A user expresses a positive sentiment or opinion about the software or its features.
- A user provides positive feedback or praise for the software.

9.
Concepts: comparative feedback, comparison to similar apps, compare with other software
- A user compares the software to others, highlighting its strengths and weaknesses.
- A user compares the software to similar applications.
- Comparisons or evaluations of the software with other similar products.

10.
Concepts: software usability, usability and practicality
- A user comments on the practicality or usability of the software.
- User comments on the ease of use and practicality of the software.

11.
Concepts: technical support, technical support and guidance
- Instances where designers or users provide technical assistance or address technical issues.
- Instances where designers provide technical support or information about the software.
- Instances where designers provide technical support or guidance to users.

12.
Concepts: help offering, user support
- A designer offers help or support to a user.
- Assistance and support provided by designers to help users effectively use the product.

13.
Concepts: usage instructions, usage instruction
- Designer provides instructions on how to use a feature.
- The designer provides instructions or guidance on how to use a feature or functionality.

14.
Concepts: feature guidance, user guidance
- The designer provides guidance on how to use a feature or functionality.
- The designer provides guidance or instructions on how to use a feature or functionality.

15.
Concepts: component adjustments, feature adjustment
- Designer discusses adjustments or changes to component properties or behaviors.
- A designer discusses or mentions adjustments, refinements, or tweaks to a feature or component.

16.
Concepts: feature optimization, emphasize optimization
- The designer mentions optimizing or refining a feature or functionality.
- The designer emphasizes the importance of optimizing a specific aspect of the software.

17.
Concepts: set user expectations, manage user expectations
- The designer sets user expectations about the software development or release.
- A designer sets realistic expectations or manages user expectations about the software's capabilities, timelines, or limitations.

18.
Concepts: explain focus areas, explain current focus
- The designer explains the focus areas or priorities of the software development.
- The designer explains the current focus or priority of the development team.

19.
Concepts: design intention, design goal explanation
- A designer explains the intention or design philosophy behind the app.
- A designer explains the design goals or philosophy behind the software.

20.
Concepts: explanation, feature explanation, functionality explanation
- The designer provides an explanation or clarification about the software.
- A designer explains or clarifies the functionality or features of the software.
- Designer explains how a feature works.

21.
Concepts: feature details, technical detail
- Designer provides details about a feature.
- Designer provides technical details or specifications about a system or feature.

22.
Concepts: give examples of feature, give an example of the feature's functions
- Designer provides examples or demonstrations of a feature or concept.
- The designer provides an example or illustration of a feature's functions or capabilities.

23.
Concepts: discussing usability, discuss usability
- Designer discusses usability.
- The designer discusses the usability of the software, including suggestions for improvement.

24.
Concepts: touch screen functionality, inform about touch screens
- Designer discusses touch screen functionality or limitations.
- Designer informs users about touch screen capabilities or limitations.

25.
Concepts: input methods, discuss input methods
- A designer discusses or explores different input methods or options for the software.
- Designer or user discusses input methods or options.

26.
Concepts: simulation details, simulated experiment
- Designer explains details about a simulation.
- Designer discusses a simulated experiment feature.

27.
Concepts: context of use, usability and context of use
- Instances where users describe the specific contexts in which they use the software.
- Discussions about how the software is used in different contexts and its usability.

28.
Concepts: technical consideration, consider technical requirements
- The designer considers or discusses technical aspects or limitations of the software or its development.
- Considerations or discussions about technical requirements or limitations.

29.
Concepts: technical constraints, highlight technical constraints
- Instances where technical limitations or requirements are discussed.
- Instances where limitations or constraints of the software are mentioned.
- A user or designer highlights technical constraints, limitations, or challenges.

30.
Concepts: explain limitation, platform limitation
- Designer explains a limitation or constraint of the platform.
- Designer mentions a limitation or restriction of a platform or system.

31.
Concepts: explain current version's limitation, talk about limitation of the solution
- The designer explains the limitations or constraints of the current software version.
- A designer highlights limitations or constraints of the current solution or feature.

32.
Concepts: compatibility assurance, confirm compatibility
- Designer assures compatibility with specific devices or systems.
- The designer confirms or verifies compatibility with a specific system or device.
===
Here are the definitions for each code:

---
1.
Concepts: gratitude, expressing gratitude
Relationship: Expressing gratitude is a way to show appreciation.
Criteria: Users express gratitude or appreciation towards others or the community.
Phrase: Express gratitude.

2.
Concepts: politeness, displaying etiquette
Relationship: Politeness is a form of etiquette in communication.
Criteria: Users display politeness or courtesy in their messages.
Phrase: Display politeness.

3.
Concepts: feature appreciation, appreciation of features
Relationship: Appreciation is a positive sentiment towards features.
Criteria: Users express appreciation or admiration for a feature or the platform.
Phrase: Appreciate features.

4.
Concepts: recognition of effort, appreciation for effort, demonstrate appreciation
Relationship: Recognition of effort is a form of appreciation.
Criteria: Users express appreciation or admiration for the designers' dedication or effort.
Phrase: Recognize effort.

5.
Concepts: community building, express gratitude, gratitude and acknowledgment
Relationship: Expressing gratitude is a way to build community.
Criteria: Users or designers express gratitude or appreciation for contributions.
Phrase: Build community.

6.
Concepts: appreciation of feedback, appreciate support from users
Relationship: Appreciation is a response to feedback or support.
Criteria: Designers express appreciation for user feedback or support.
Phrase: Appreciate feedback.

7.
Concepts: user satisfaction, user satisfaction with software features, software effectiveness
Relationship: Satisfaction is a result of effective software features.
Criteria: Users express satisfaction or praise for the software or its features.
Phrase: Express satisfaction.

8.
Concepts: praising software, compliments the software, complimenting the software, positive, positive feedback
Relationship: Praising is a form of positive feedback.
Criteria: Users express a positive opinion about the software or its features.
Phrase: Praise software.

9.
Concepts: comparative feedback, comparison to similar apps, compare with other software
Relationship: Comparative feedback involves comparing software.
Criteria: Users compare the software to others, highlighting strengths and weaknesses.
Phrase: Compare software.

10.
Concepts: software usability, usability and practicality
Relationship: Usability is a aspect of practicality.
Criteria: Users comment on the practicality or usability of the software.
Phrase: Discuss usability.

11.
Concepts: technical support, technical support and guidance
Relationship: Technical support involves providing guidance.
Criteria: Designers or users provide technical assistance or address technical issues.
Phrase: Provide support.

12.
Concepts: help offering, user support
Relationship: Offering help is a form of user support.
Criteria: Designers offer help or support to users.
Phrase: Offer help.

13.
Concepts: usage instructions, usage instruction
Relationship: Instructions are a form of guidance.
Criteria: Designers provide instructions on how to use a feature.
Phrase: Provide instructions.

14.
Concepts: feature guidance, user guidance
Relationship: Guidance is a form of support.
Criteria: Designers provide guidance on how to use a feature or functionality.
Phrase: Provide guidance.

15.
Concepts: component adjustments, feature adjustment
Relationship: Adjustments are made to components or features.
Criteria: Designers discuss adjustments or changes to component properties or behaviors.
Phrase: Discuss adjustments.

16.
Concepts: feature optimization, emphasize optimization
Relationship: Optimization is a goal of feature development.
Criteria: Designers mention optimizing or refining a feature or functionality.
Phrase: Emphasize optimization.

17.
Concepts: set user expectations, manage user expectations
Relationship: Setting expectations is a way to manage them.
Criteria: Designers set realistic expectations or manage user expectations about the software.
Phrase: Set expectations.

18.
Concepts: explain focus areas, explain current focus
Relationship: Explaining focus areas is a way to set expectations.
Criteria: Designers explain the focus areas or priorities of the software development.
Phrase: Explain focus.

19.
Concepts: design intention, design goal explanation
Relationship: Intention is a goal of design.
Criteria: Designers explain the intention or design philosophy behind the app.
Phrase: Explain design intention.

20.
Concepts: explanation, feature explanation, functionality explanation
Relationship: Explanation is a form of clarification.
Criteria: Designers provide an explanation or clarification about the software.
Phrase: Provide explanation.

21.
Concepts: feature details, technical detail
Relationship: Details are a form of explanation.
Criteria: Designers provide details about a feature.
Phrase: Provide details.

22.
Concepts: give examples of feature, give an example of the feature's functions
Relationship: Examples illustrate feature functions.
Criteria: Designers provide examples or demonstrations of a feature or concept.
Phrase: Provide examples.

23.
Concepts: discussing usability, discuss usability
Relationship: Discussing usability is a form of explanation.
Criteria: Designers discuss the usability of the software, including suggestions for improvement.
Phrase: Discuss usability.

24.
Concepts: touch screen functionality, inform about touch screens
Relationship: Informing about touch screens is a form of explanation.
Criteria: Designers discuss touch screen functionality or limitations.
Phrase: Inform about touch screens.

25.
Concepts: input methods, discuss input methods
Relationship: Discussing input methods is a form of explanation.
Criteria: Designers or users discuss input methods or options.
Phrase: Discuss input methods.

26.
Concepts: simulation details, simulated experiment
Relationship: Details are a form of explanation.
Criteria: Designers explain details about a simulation.
Phrase: Explain simulation.

27.
Concepts: context of use, usability and context of use
Relationship: Context of use affects usability.
Criteria: Users describe the specific contexts in which they use the software.
Phrase: Discuss context of use.

28.
Concepts: technical consideration, consider technical requirements
Relationship: Technical considerations involve requirements.
Criteria: Designers consider or discuss technical aspects or limitations of the software or its development.
Phrase: Consider technical requirements.

29.
Concepts: technical constraints, highlight technical constraints
Relationship: Constraints are a form of limitation.
Criteria: Designers or users highlight technical constraints, limitations, or challenges.
Phrase: Highlight constraints.

30.
Concepts: explain limitation, platform limitation
Relationship: Explaining limitations is a form of clarification.
Criteria: Designers explain a limitation or constraint of the platform.
Phrase: Explain limitations.

31.
Concepts: explain current version's limitation, talk about limitation of the solution
Relationship: Explaining limitations is a form of clarification.
Criteria: Designers explain the limitations or constraints of the current software version.
Phrase: Explain limitations.

32.
Concepts: compatibility assurance, confirm compatibility
Relationship: Assurance involves confirmation.
Criteria: Designers assure compatibility with specific devices or systems.
Phrase: Assure compatibility.