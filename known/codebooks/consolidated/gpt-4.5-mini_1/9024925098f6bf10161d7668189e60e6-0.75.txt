You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (23 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
23. 
Concepts: {Repeat the input 23}
Relationship: {What is logical relationship between concepts in code 23, or N/A if not applicable}
Criteria: {Who did what, and how for code 23}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: announce updates, announce software releases
- Designers announce product updates and specific software component updates.
- Designers announce software releases and updates.

2.
Concepts: communicate upcoming plans, communicate software update details
- Designers share information about upcoming features and internal updates clearly.
- Designers communicate and confirm important details about upcoming software updates, providing comprehensive information that summarizes the extent and nature of these changes.

3.
Concepts: share development plans, share and discuss future plans
- Designers share development plans and discuss future development opportunities.
- Designers share and discuss potential future plans and long-term developments.

4.
Concepts: list updates and fixes, discuss update process
- Designers list updates and fixes while discussing potential future updates.
- Designers discuss the update process and outline software release schedules.

5.
Concepts: design refinement, engage in iterative development
- Designers express the need for refinement in the software's design.
- Designers discuss updates and improvements as part of a continuous refinement process.

6.
Concepts: ask technical questions, engage in troubleshooting
- Users ask technical questions and report technical issues encountered.
- User engages in troubleshooting discussions regarding technical issues.

7.
Concepts: user guidance, provide usage instructions
- Designer provides detailed guidance on new software features and functionalities.
- Designers provide step-by-step instructions for using specific software features.

8.
Concepts: clarify compatibility issues, confirm system compatibility
- Designers clarify compatibility issues and respond to community questions.
- Designers confirm compatibility and suggest checking system compatibility for updates.

9.
Concepts: user interaction, discuss usability issues
- Designers discussing technical aspects or interactions related to the app's functionality.
- Designers address and discuss usability issues to improve user experience.

10.
Concepts: express interest in software, engage with the development process
- Users express interest in the software and inquire about updates.
- Users express interest in and inquire about the development process of the platform.

11.
Concepts: confirm understanding, validate user requests
- Designers and users confirm understanding and validate contributions.
- Designers validate user requests and visually confirm information.

12.
Concepts: confirm update completion, provide brief confirmations
- Users confirm and acknowledge the resolution of updates.
- Users provide brief confirmations and confirm understanding of information.

13.
Concepts: confirm teacher role, confirm professional identity
- Users confirm their role as teachers and identify themselves within the community.
- Users confirm their professional identities and establish credibility in discussions.

14.
Concepts: discuss technical constraints, acknowledge and explain software limitations
- Users discuss limitations and requirements related to the software.
- Designers acknowledge software compatibility issues and explain limitations affecting software performance.

15.
Concepts: ease of use, express user satisfaction
- Discussions related to the ease of use and user-friendliness of the software.
- Users compliment the softwareâ€™s ease of use and specific features.

16.
Concepts: express user appreciation, engage in positive interactions
- Users express appreciation and gratitude for help shared by others.
- Users engage positively with one another through supportive remarks and expressions of gratitude.

17.
Concepts: enthusiasm, express anticipation for updates
- Users and designers express excitement or positivity about ideas or support for ongoing projects.
- Users express anticipation and respond positively to information about updates.

18.
Concepts: propose potential solutions, suggest design enhancements
- Designers propose potential solutions and enhancements based on user input.
- Designers suggest alternative features based on user input while users propose enhancements.

19.
Concepts: integrate user feedback, ensure enhancement based on feedback
- User feedback is solicited and incorporated into design decisions.
- Designers mention the incorporation of user feedback into software design.

20.
Concepts: implement user suggestions, acknowledge and consider feedback
- Designers acknowledge user feedback and discuss plans for implementation.
- Designers acknowledge feature needs based on user input and consider usability feedback.

21.
Concepts: ask follow-up questions, encourage elaboration and follow-up
- Designers ask follow-up questions to clarify user experiences and gather feedback.
- Designers encourage users to elaborate on their needs and invite further inquiries.

22.
Concepts: engages in dialogue, engage in direct communication
- Users and designers pose questions and seek clarifications regarding features and processes being discussed.
- Designers and users engage in direct conversations to clarify features and feedback.

23.
Concepts: collects user insights, gather and identify community input
- Designers inquire about user roles and gather detailed requirements to inform potential software enhancements.
- Designers gather input from users and identify community needs for functionalities.
===
---
Definitions for each code (23 in total):
1. 
Concepts: announce updates, announce software releases  
Relationship: Both concepts involve designers sharing information about changes in the software.  
Criteria: Designers announce product updates and specific software component updates, including software releases.  
Phrase: Announce software updates.  

2.  
Concepts: communicate upcoming plans, communicate software update details  
Relationship: Both concepts involve sharing information about future software and details of updates.  
Criteria: Designers share information about upcoming features and internal updates, confirming important details about software updates.  
Phrase: Communicate software update plans.  

3.  
Concepts: share development plans, share and discuss future plans  
Relationship: Both concepts involve exchanging ideas and information about future development efforts.  
Criteria: Designers share and discuss development plans and long-term opportunities for growth.  
Phrase: Share future development plans.  

4.  
Concepts: list updates and fixes, discuss update process  
Relationship: Both concepts are concerned with the software update lifecycle and its transparency.  
Criteria: Designers list updates and fixes while outlining the update process and software release schedules.  
Phrase: Discuss software updates and processes.  

5.  
Concepts: design refinement, engage in iterative development  
Relationship: Both concepts relate to the continuous improvement of the software design.  
Criteria: Designers express the need for refinement and engage in discussions about iterative development and improvements.  
Phrase: Engage in design refinement.  

6.  
Concepts: ask technical questions, engage in troubleshooting  
Relationship: Both concepts involve users seeking assistance with technical issues.  
Criteria: Users ask technical questions and engage in troubleshooting discussions regarding encountered issues.  
Phrase: Engage in troubleshooting discussions.  

7.  
Concepts: user guidance, provide usage instructions  
Relationship: Both concepts focus on helping users understand and utilize the software effectively.  
Criteria: Designers provide detailed guidance and step-by-step instructions for software features.  
Phrase: Provide user guidance.  

8.  
Concepts: clarify compatibility issues, confirm system compatibility  
Relationship: Both concepts aim to ensure users understand software compatibility with their systems.  
Criteria: Designers clarify compatibility issues and confirm system requirements for updates.  
Phrase: Clarify software compatibility.  

9.  
Concepts: user interaction, discuss usability issues  
Relationship: Both concepts pertain to evaluating the software's functionality from a user perspective.  
Criteria: Designers discuss technical interactions and address usability issues to enhance user experience.  
Phrase: Discuss usability issues.  

10.  
Concepts: express interest in software, engage with the development process  
Relationship: Both concepts involve users showing curiosity and involvement in the software's evolution.  
Criteria: Users express interest in the software and inquire about its development process.  
Phrase: Express interest in development.  

11.  
Concepts: confirm understanding, validate user requests  
Relationship: Both concepts emphasize the importance of communication clarity and acknowledgement in interactions.  
Criteria: Designers and users confirm understanding and validate user contributions and requests.  
Phrase: Validate user contributions.  

12.  
Concepts: confirm update completion, provide brief confirmations  
Relationship: Both concepts relate to acknowledging the status of updates shared in the community.  
Criteria: Users confirm the completion of updates and provide brief acknowledgments of information.  
Phrase: Confirm update completion.  

13.  
Concepts: confirm teacher role, confirm professional identity  
Relationship: Both concepts involve users establishing their identities within the community.  
Criteria: Users confirm their roles as teachers and establish their professional identities in discussions.  
Phrase: Confirm professional identity.  

14.  
Concepts: discuss technical constraints, acknowledge and explain software limitations  
Relationship: Both concepts deal with understanding and communicating the limitations of the software.  
Criteria: Users discuss technical constraints while designers acknowledge and explain software limitations.  
Phrase: Discuss software limitations.  

15.  
Concepts: ease of use, express user satisfaction  
Relationship: Both concepts relate to user responses to the software's functionality and usability.  
Criteria: Users discuss the ease of use of the software and express satisfaction with its features.  
Phrase: Express user satisfaction.  

16.  
Concepts: express user appreciation, engage in positive interactions  
Relationship: Both concepts emphasize the supportive nature of user interactions within the community.  
Criteria: Users express appreciation for help received and engage positively with each other.  
Phrase: Engage in positive interactions.  

17.  
Concepts: enthusiasm, express anticipation for updates  
Relationship: Both concepts show users' emotional responses and positive outlook towards future developments.  
Criteria: Users and designers express enthusiasm and anticipation for updates and ongoing projects.  
Phrase: Express anticipation for updates.  

18.  
Concepts: propose potential solutions, suggest design enhancements  
Relationship: Both concepts involve generating ideas for improving the software based on user input.  
Criteria: Designers propose solutions and enhancements while users suggest alternative features.  
Phrase: Propose design enhancements.  

19.  
Concepts: integrate user feedback, ensure enhancement based on feedback  
Relationship: Both concepts focus on incorporating user insights into the design process.  
Criteria: User feedback is solicited and integrated into design decisions for improvements.  
Phrase: Integrate user feedback.  

20.  
Concepts: implement user suggestions, acknowledge and consider feedback  
Relationship: Both concepts involve recognizing user input and planning for its inclusion in future updates.  
Criteria: Designers acknowledge user feedback and discuss plans for implementation.  
Phrase: Acknowledge user feedback.  

21.  
Concepts: ask follow-up questions, encourage elaboration and follow-up  
Relationship: Both concepts relate to enhancing communication through inquiry for better understanding.  
Criteria: Designers ask follow-up questions and encourage users to elaborate on their experiences.  
Phrase: Ask follow-up questions.  

22.  
Concepts: engages in dialogue, engage in direct communication  
Relationship: Both concepts involve interactive discussions to clarify and explore features and feedback.  
Criteria: Users and designers engage in dialogue and direct communication for better understanding.  
Phrase: Engage in dialogue.  

23.  
Concepts: collects user insights, gather and identify community input  
Relationship: Both concepts pertain to understanding the needs and requirements of the user community.  
Criteria: Designers collect user insights and identify community input to inform software enhancements.  
Phrase: Gather community input.  
---