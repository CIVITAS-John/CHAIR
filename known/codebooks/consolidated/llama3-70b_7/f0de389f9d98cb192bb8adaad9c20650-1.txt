You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (10 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
10. 
Concepts: {Repeat the input 10}
Relationship: {What is logical relationship between concepts in code 10, or N/A if not applicable}
Criteria: {Who did what, and how for code 10}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: seek efficiency, emphasize optimization
- The designer seeks to simplify or improve the user experience.
- The designer or user mentions refining or perfecting a design or function to make it more efficient or effective.

2.
Concepts: usage guidance, functionality explanation
- A community member provides instructions on how to use something.
- A community member explains how something works or its functionality.

3.
Concepts: user tips, offer special tips
- A user or designer shares helpful tips or advice for using the software.
- The designer provides tips or tricks for using the platform, often accompanied by new feature announcements.

4.
Concepts: feature stability, long-term stability
- Discussing the stability or long-term viability of platform features
- A designer mentions the long-term benefits or stability of a feature.

5.
Concepts: component functionality, addressing functionality, explain feature functionality, providing examples of feature functions
- A designer mentions a specific component and its functionality.
- A designer addresses or explains a specific feature or functionality.
- The designer explains a feature, concept, or functionality in the Physics Lab software.
- A designer provides an example to demonstrate the feature's functions or benefits.

6.
Concepts: explain feature complexity, compare feature complexities
- A designer mentions the complexity of a feature or task.
- Comparing the complexity or difficulty of features

7.
Concepts: explain simulation details, detail simulated experiment assessment
- A community member explains details about a simulation or experiment.
- Designer details or explains the assessment of simulated experiments.

8.
Concepts: explain version type, provide version information
- Designer explains or clarifies the type of software version (e.g., PC version).
- A designer provides detailed information about a specific version of the software.

9.
Concepts: update clarification, adding more specific information and criteria to the answer
- A designer clarifies or updates information about the software.
- A designer provides additional information or clarifies specific details about a software feature or functionality.

10.
Concepts: technical clarification, provide technical information, explaning technical artifacts
- Clarifying technical details or concepts
- Providing specific details about technical aspects of the platform
- Explaining technical terms or concepts
===
Here are the definitions for each code:

---
1.
Concepts: seek efficiency, emphasize optimization
Relationship: These concepts are related as they both focus on improving the user experience, with efficiency referring to simplifying or streamlining processes and optimization referring to refining or perfecting them.
Criteria: Designers seek to simplify or refine designs or functions to make them more efficient or effective.
Phrase: Refine for efficiency.

2.
Concepts: usage guidance, functionality explanation
Relationship: These concepts are related as they both provide information to help users understand how to use the software or platform, with guidance referring to instructions and explanation referring to the underlying functionality.
Criteria: Community members provide instructions or explanations on how to use or understand something.
Phrase: Provide usage guidance.

3.
Concepts: user tips, offer special tips
Relationship: These concepts are related as they both involve sharing advice or helpful information to facilitate better use of the software or platform.
Criteria: Users or designers share helpful tips or advice for using the software or platform.
Phrase: Share user tips.

4.
Concepts: feature stability, long-term stability
Relationship: These concepts are related as they both refer to the durability or longevity of platform features, with stability referring to the current state and long-term stability referring to the future prospects.
Criteria: Designers discuss the stability or long-term viability of platform features.
Phrase: Ensure feature stability.

5.
Concepts: component functionality, addressing functionality, explain feature functionality, providing examples of feature functions
Relationship: These concepts are related as they all involve explaining or describing the functionality of specific components or features of the platform.
Criteria: Designers explain or describe the functionality of specific components or features, often with examples.
Phrase: Explain feature functionality.

6.
Concepts: explain feature complexity, compare feature complexities
Relationship: These concepts are related as they both involve discussing the level of difficulty or intricacy of features or tasks, with explanation focusing on individual features and comparison focusing on relative complexities.
Criteria: Designers explain or compare the complexity of features or tasks.
Phrase: Explain feature complexity.

7.
Concepts: explain simulation details, detail simulated experiment assessment
Relationship: These concepts are related as they both involve providing information about simulations or experiments, with explanation focusing on details and assessment focusing on evaluation.
Criteria: Community members explain details about simulations or experiments, including assessments or evaluations.
Phrase: Explain simulation details.

8.
Concepts: explain version type, provide version information
Relationship: These concepts are related as they both involve providing information about specific versions of the software, with explanation focusing on the type and information focusing on details.
Criteria: Designers explain or provide information about specific versions of the software.
Phrase: Explain version information.

9.
Concepts: update clarification, adding more specific information and criteria to the answer
Relationship: These concepts are related as they both involve providing additional or clarifying information to enhance understanding, with update focusing on new information and clarification focusing on refining existing information.
Criteria: Designers clarify or update information about the software or its features.
Phrase: Clarify software information.

10.
Concepts: technical clarification, provide technical information, explaining technical artifacts
Relationship: These concepts are related as they all involve providing information or explanations about technical aspects of the platform, with clarification focusing on resolving misunderstandings, information focusing on details, and artifacts focusing on specific technical components.
Criteria: Designers clarify or provide technical information about the platform or its components.
Phrase: Clarify technical information.