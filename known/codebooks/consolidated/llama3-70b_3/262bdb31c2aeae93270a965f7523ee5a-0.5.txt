You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (32 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
32. 
Concepts: {Repeat the input 32}
Relationship: {What is logical relationship between concepts in code 32, or N/A if not applicable}
Criteria: {Who did what, and how for code 32}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: prefer immediate fixes, wanting immediate fix options
- Participants prefer immediate fixes to errors without explanations.
- Participants want immediate fix options after error identification.

2.
Concepts: choose to fix problems, chooses problem-solving, prioritizing problem-solving
- Participants choose to fix problems rather than seeking explanations.
- Chooses to focus on problem-solving rather than seeking explanations.
- Participants prioritize fixing problems rather than showing explanations.

3.
Concepts: practical solutions, focusing on practical solutions
- Valuing practical solutions over explanations
- The interviewee focuses on finding practical solutions rather than understanding explanations.

4.
Concepts: doing one's own work, emphasizing personal effort before seeking help, importance of personal effort
- E01 emphasizes doing one's own work.
- Interviewee emphasizes the importance of personal effort before seeking help, encouraging novices to do their own work.
- Emphasizing the importance of doing one's own work

5.
Concepts: personal effort and clear communication, ways for debugging: seek online support
- Interviewee emphasizes personal effort and clear communication when seeking online help.
- Interviewee reflects on proper practices to seek online help, such as doing their own work and clearly describing what they need or tried.

6.
Concepts: resolve errors independently, independent problem solving
- Participants try to resolve errors independently before seeking help.
- The participant attempts to solve problems independently before seeking AI assistance.

7.
Concepts: independent problem-solving, encouraging clear communication and independent problem-solving
- Advocating for independent problem-solving efforts.
- The participant encourages clear communication, independent problem-solving efforts, and responsible help-seeking behavior.

8.
Concepts: fixing netlogo mistakes, fixing common netlogo mistakes independently
- Fixes NetLogo mistakes on their own.
- Interviewee fixes common NetLogo mistakes independently.

9.
Concepts: preferring self-sufficiency, prioritizing self-reliance in error fixing
- Participant prefers self-sufficiency, trying to fix errors in AI-generated code on their own.
- Interviewee prioritizes self-reliance in fixing errors.

10.
Concepts: collaboration and feedback, valuing the importance of feedback in the learning process
- Values collaboration and feedback, recognizing the importance of shared knowledge and learning.
- Values the importance of feedback in the learning process.

11.
Concepts: reflects on undocumented knowledge, oral tradition in software development
- Reflects on undocumented knowledge and oral tradition in software development.
- Recognizing the importance of oral tradition in software development

12.
Concepts: knowledge in pieces, interviewee reflecting on knowledge in pieces
- The participant reflects on the fragmented nature of knowledge, which is not always documented.
- Reflecting on knowledge generation and sustenance in oral tradition.

13.
Concepts: prior experience, sharing prior programming experience, interviewee's prior experiences in computer programming
- The participant hints at their depth of knowledge and experience in computer programming.
- Participants share and reflect on their extensive programming experience in various languages.
- Reflecting on prior experiences in computer programming.

14.
Concepts: possessing multilingual programming expertise, demonstrating diverse language knowledge
- Participants have expertise in multiple programming languages.
- The participant demonstrates diverse language knowledge and prior experiences in computer programming.

15.
Concepts: showcasing expertise, humility in expertise
- Showcases expertise and willingness to assist others.
- Displays humility and a willingness to help others despite being an expert.

16.
Concepts: as an expert, expert perspective
- Speaking from the perspective of an expert with extensive experience.
- Providing an expert's perspective on learning and practice

17.
Concepts: expert evaluation of ai output, evaluation on output and made a decision based on expertise
- The participant applies their personal expertise to evaluate AI output and identify errors.
- Evaluates AI output and makes decisions based on expertise.

18.
Concepts: identifying knowledge gaps, identifying gaps in knowledge transfer
- Noting knowledge gaps
- Identifying gaps in knowledge transfer and oral tradition.

19.
Concepts: need for clear problem descriptions, highlighting need for explicit problem conceptualization
- The user highlights the need for clear and concise problem descriptions.
- Interviewee highlights the need for explicit problem conceptualization, such as writing clear instructions for AI.

20.
Concepts: need for design outlines, importance of practice and design outlines
- The interviewee highlights the need for design outlines in programming.
- Emphasizing the importance of practice and design outlines in programming.

21.
Concepts: need for expert-friendly features, desiring fine-tuned expert-oriented design
- The participant notes the need for expert-friendly features or design.
- Participants recognize the need for fine-tuning AI design for experts.

22.
Concepts: importance of user expertise, recognizing the need for expertise
- Emphasizing the importance of user expertise in understanding errors
- Recognizing the need for expertise to understand and fix errors

23.
Concepts: ai-assisted syntax reminders, using ai for syntax recall
- Using the AI-driven interface as a reference for syntax reminders.
- Participants use AI to recall syntax, and they forget syntax and use AI for assistance.

24.
Concepts: need for context retention, needing system support for learning reminders
- Identifies the need for context retention in learning tools and systems.
- Participants need system support for reminders to aid in learning and retention.

25.
Concepts: reflecting on fragmented learning, in fragmented time blocks and need support from the system, needing system support for recalling previous work
- Professionals reflect on fragmented learning patterns and need system support for learning continuity.
- Expressing the need for support from the system to remind them where they were in their learning process
- Professionals need system support to recall previous work due to fragmentary learning patterns.

26.
Concepts: highlights need for reminders, need for fragmented learning support
- The interviewee highlights the need for reminders or support in fragmented learning.
- Interviewee highlights the need for systems that support learning in short, fragmented time blocks.

27.
Concepts: describing fragmented learning patterns, describes fragmented learning sessions
- Describing fragmented learning patterns
- Describing fragmented learning sessions and the need for AI support.

28.
Concepts: time constraints for experts, balancing expertise and time constraints
- Acknowledging the challenge of not having much time to spend on any single programming language as an expert.
- Balances expertise across multiple programming languages with time constraints, highlighting the need for efficient learning tools.

29.
Concepts: describes expert's fragmented learning, knowing many languages but does not have much time for each one
- Participant describes their own fragmented learning process, bouncing between different languages and not having much time for each one.
- Knows many languages but lacks time to master each one.

30.
Concepts: rely on ai output under time constraints, adapting to time constraints with ai-generated code
- Participants rely on AI output under time constraints.
- Participants utilize AI-generated code fully and adapt to time constraints using AI-generated code.

31.
Concepts: facing time constraints, compromising on code quality
- Facing time constraints and prioritizing efficiency in coding tasks
- The participant compromises on code quality due to time constraints.

32.
Concepts: prioritizing core concepts, prioritizing core concepts vs. extensions
- Prioritizing core concepts over extensions.
- Interviewee prioritizes core concepts over extensions, suggesting AI could save time for learning new extensions.
===
Here are the definitions for each code:

---
1.
Concepts: prefer immediate fixes, wanting immediate fix options
Relationship: The concepts are related in that they both describe a preference for quick solutions to errors.
Criteria: Participants prefer to resolve errors quickly without seeking explanations.
Phrase: Preferring immediate fixes.

2.
Concepts: choose to fix problems, chooses problem-solving, prioritizing problem-solving
Relationship: The concepts are related in that they all describe a focus on solving problems over seeking explanations.
Criteria: Participants prioritize fixing problems over seeking explanations.
Phrase: Choosing problem-solving.

3.
Concepts: practical solutions, focusing on practical solutions
Relationship: The concepts are related in that they both describe a focus on finding practical solutions.
Criteria: Participants value practical solutions over explanations.
Phrase: Focusing on practical solutions.

4.
Concepts: doing one's own work, emphasizing personal effort before seeking help, importance of personal effort
Relationship: The concepts are related in that they all describe the importance of personal effort in problem-solving.
Criteria: Participants emphasize the importance of doing their own work before seeking help.
Phrase: Emphasizing personal effort.

5.
Concepts: personal effort and clear communication, ways for debugging: seek online support
Relationship: The concepts are related in that they both describe the importance of personal effort and clear communication in seeking help.
Criteria: Participants emphasize personal effort and clear communication when seeking online help.
Phrase: Emphasizing personal effort and clear communication.

6.
Concepts: resolve errors independently, independent problem solving
Relationship: The concepts are related in that they both describe a preference for independent problem-solving.
Criteria: Participants try to resolve errors independently before seeking help.
Phrase: Resolving errors independently.

7.
Concepts: independent problem-solving, encouraging clear communication and independent problem-solving
Relationship: The concepts are related in that they both describe the importance of independent problem-solving and clear communication.
Criteria: Participants encourage clear communication and independent problem-solving efforts.
Phrase: Encouraging independent problem-solving.

8.
Concepts: fixing netlogo mistakes, fixing common netlogo mistakes independently
Relationship: The concepts are related in that they both describe fixing NetLogo mistakes independently.
Criteria: Participants fix common NetLogo mistakes independently.
Phrase: Fixing NetLogo mistakes independently.

9.
Concepts: preferring self-sufficiency, prioritizing self-reliance in error fixing
Relationship: The concepts are related in that they both describe a preference for self-sufficiency in error fixing.
Criteria: Participants prefer self-sufficiency, trying to fix errors in AI-generated code on their own.
Phrase: Preferring self-sufficiency.

10.
Concepts: collaboration and feedback, valuing the importance of feedback in the learning process
Relationship: The concepts are related in that they both describe the importance of collaboration and feedback in learning.
Criteria: Participants value collaboration and feedback, recognizing the importance of shared knowledge and learning.
Phrase: Valuing collaboration and feedback.

11.
Concepts: reflects on undocumented knowledge, oral tradition in software development
Relationship: The concepts are related in that they both describe the importance of undocumented knowledge and oral tradition in software development.
Criteria: Participants reflect on undocumented knowledge and oral tradition in software development.
Phrase: Reflecting on undocumented knowledge.

12.
Concepts: knowledge in pieces, interviewee reflecting on knowledge in pieces
Relationship: The concepts are related in that they both describe the fragmented nature of knowledge.
Criteria: Participants reflect on the fragmented nature of knowledge, which is not always documented.
Phrase: Reflecting on fragmented knowledge.

13.
Concepts: prior experience, sharing prior programming experience, interviewee's prior experiences in computer programming
Relationship: The concepts are related in that they all describe the importance of prior experience in computer programming.
Criteria: Participants share and reflect on their extensive programming experience in various languages.
Phrase: Sharing prior experience.

14.
Concepts: possessing multilingual programming expertise, demonstrating diverse language knowledge
Relationship: The concepts are related in that they both describe the possession of multilingual programming expertise.
Criteria: Participants have expertise in multiple programming languages.
Phrase: Possessing multilingual expertise.

15.
Concepts: showcasing expertise, humility in expertise
Relationship: The concepts are related in that they both describe the display of expertise with humility.
Criteria: Participants showcase expertise and willingness to assist others.
Phrase: Showcasing expertise with humility.

16.
Concepts: as an expert, expert perspective
Relationship: The concepts are related in that they both describe speaking from the perspective of an expert.
Criteria: Participants speak from the perspective of an expert with extensive experience.
Phrase: Speaking as an expert.

17.
Concepts: expert evaluation of ai output, evaluation on output and made a decision based on expertise
Relationship: The concepts are related in that they both describe the evaluation of AI output based on expertise.
Criteria: Participants apply their personal expertise to evaluate AI output and identify errors.
Phrase: Evaluating AI output with expertise.

18.
Concepts: identifying knowledge gaps, identifying gaps in knowledge transfer
Relationship: The concepts are related in that they both describe identifying gaps in knowledge.
Criteria: Participants note knowledge gaps and identify gaps in knowledge transfer and oral tradition.
Phrase: Identifying knowledge gaps.

19.
Concepts: need for clear problem descriptions, highlighting need for explicit problem conceptualization
Relationship: The concepts are related in that they both describe the need for clear problem descriptions.
Criteria: Participants highlight the need for clear and concise problem descriptions.
Phrase: Highlighting the need for clear problem descriptions.

20.
Concepts: need for design outlines, importance of practice and design outlines
Relationship: The concepts are related in that they both describe the importance of design outlines in programming.
Criteria: Participants emphasize the importance of practice and design outlines in programming.
Phrase: Emphasizing the importance of design outlines.

21.
Concepts: need for expert-friendly features, desiring fine-tuned expert-oriented design
Relationship: The concepts are related in that they both describe the need for expert-friendly features.
Criteria: Participants recognize the need for fine-tuning AI design for experts.
Phrase: Desiring expert-friendly features.

22.
Concepts: importance of user expertise, recognizing the need for expertise
Relationship: The concepts are related in that they both describe the importance of user expertise.
Criteria: Participants emphasize the importance of user expertise in understanding errors.
Phrase: Emphasizing the importance of user expertise.

23.
Concepts: ai-assisted syntax reminders, using ai for syntax recall
Relationship: The concepts are related in that they both describe using AI for syntax reminders.
Criteria: Participants use AI to recall syntax and forget syntax and use AI for assistance.
Phrase: Using AI for syntax reminders.

24.
Concepts: need for context retention, needing system support for learning reminders
Relationship: The concepts are related in that they both describe the need for context retention in learning.
Criteria: Participants identify the need for context retention in learning tools and systems.
Phrase: Needing context retention.

25.
Concepts: reflecting on fragmented learning, in fragmented time blocks and need support from the system, needing system support for recalling previous work
Relationship: The concepts are related in that they all describe the need for system support in fragmented learning.
Criteria: Professionals reflect on fragmented learning patterns and need system support for learning continuity.
Phrase: Reflecting on fragmented learning.

26.
Concepts: highlights need for reminders, need for fragmented learning support
Relationship: The concepts are related in that they both describe the need for reminders and support in fragmented learning.
Criteria: Participants highlight the need for reminders or support in fragmented learning.
Phrase: Highlighting the need for reminders.

27.
Concepts: describing fragmented learning patterns, describes fragmented learning sessions
Relationship: The concepts are related in that they both describe fragmented learning patterns.
Criteria: Participants describe fragmented learning patterns and the need for AI support.
Phrase: Describing fragmented learning patterns.

28.
Concepts: time constraints for experts, balancing expertise and time constraints
Relationship: The concepts are related in that they both describe the challenge of balancing expertise and time constraints.
Criteria: Participants acknowledge the challenge of not having much time to spend on any single programming language as an expert.
Phrase: Balancing expertise and time constraints.

29.
Concepts: describes expert's fragmented learning, knowing many languages but does not have much time for each one
Relationship: The concepts are related in that they both describe the fragmented learning process of experts.
Criteria: Participants describe their own fragmented learning process, bouncing between different languages and not having much time for each one.
Phrase: Describing expert's fragmented learning.

30.
Concepts: rely on ai output under time constraints, adapting to time constraints with ai-generated code
Relationship: The concepts are related in that they both describe relying on AI output under time constraints.
Criteria: Participants rely on AI output under time constraints and adapt to time constraints using AI-generated code.
Phrase: Relying on AI output under time constraints.

31.
Concepts: facing time constraints, compromising on code quality
Relationship: The concepts are related in that they both describe the challenge of facing time constraints in coding tasks.
Criteria: Participants face time constraints and prioritize efficiency in coding tasks, compromising on code quality.
Phrase: Facing time constraints and compromising on code quality.

32.
Concepts: prioritizing core concepts, prioritizing core concepts vs. extensions
Relationship: The concepts are related in that they both describe prioritizing core concepts over extensions.
Criteria: Participants prioritize core concepts over extensions, suggesting AI could save time for learning new extensions.
Phrase: Prioritizing core concepts.