You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (19 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
19. 
Concepts: {Repeat the input 19}
Relationship: {What is logical relationship between concepts in code 19, or N/A if not applicable}
Criteria: {Who did what, and how for code 19}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: clarifying system requirements, specifying system requirements
- A designer clarifies system requirements or compatibility.
- A designer or user specifies system requirements or compatibility issues.

2.
Concepts: addressing compatibility issues, considering compatibility issues
- A designer addresses or discusses compatibility issues.
- A designer considers compatibility issues, including XP compatibility.

3.
Concepts: managing limitations, acknowledging limitations
- The designer acknowledges or works around limitations or constraints.
- A designer acknowledges or discusses limitations of the design or functionality.

4.
Concepts: addressing limitations, explaining system limitations, describing software limitations
- A designer addresses or clarifies limitations of the software.
- A designer explains limitations or constraints of the system, design, or functionality.
- A designer explains or describes limitations or constraints of the software or platform.

5.
Concepts: frustration with platform limitations, expressing frustration with limitations
- A designer expresses frustration or limitation with the current platform or tool.
- A designer expresses frustration or dissatisfaction with current design limitations.

6.
Concepts: highlighting constraints, highlighting limitations
- A user or designer highlights limitations or constraints.
- A user highlights or explains limitations or constraints.

7.
Concepts: identifying usability concerns, highlighting ui challenges, highlighting accessibility concerns
- A user highlights potential usability concerns or issues.
- A user identifies or discusses potential user interface challenges or issues.
- A user highlights accessibility concerns or issues.

8.
Concepts: offering guidance
- Offers of guidance, advice, or tutorials on how to use the software.
- The designer offers advice or guidance on how to approach a task or project.

9.
Concepts: providing technical explanation
- The speaker provides a technical explanation or justification.
- The designer explains or provides specific technical details about a feature or component.
- The designer provides specific details or technical specifications about a product or feature.

10.
Concepts: inquiring about classroom context
- Asking about the physical environment of the classroom, specifically internet access.
- Designer inquires about the classroom environment or infrastructure.

11.
Concepts: confirming system compatibility
- A designer confirms system compatibility.
- A user confirms or suggests system compatibility.

12.
Concepts: providing download instructions
- Designer provides instructions on how to download the application.
- A user requests instructions on how to download a software or component, and someone provides those instructions.

13.
Concepts: seeking help or support
- Requesting help or assistance from others.
- A user expresses a need for help or asks for clarification.

14.
Concepts: discussing technical requirements
- Discussing the technical requirements or limitations of the software, including internet access and security measures.
- A designer discusses technical requirements or explores compatibility options.

15.
Concepts: suggesting alternative designs
- The speaker suggests alternative design approaches for specific scenarios.
- Users suggest alternative approaches or designs.

16.
Concepts: providing development insights
- Designer provides insights into the development process or upcoming updates.
- Designer provides insights into the development process or timeline.

17.
Concepts: asking questions
- User asks a question about the app or its features.
- Users or designers ask questions.

18.
Concepts: seeking design confirmation
- Designer seeks confirmation on using both left and right side placements.
- A designer seeks confirmation on using multiple design options or approaches.

19.
Concepts: informing users of updates
- Informing users about a specific update, often platform-specific.
- Designer informs users or community members about updates or changes.
===
Here are the definitions for each code:

---
1.
Concepts: clarifying system requirements, specifying system requirements
Relationship: Clarifying and specifying are related as they both involve understanding and defining system requirements.
Criteria: Designers or users clarify or specify system requirements or compatibility issues.
Phrase: Clarify system requirements.

2.
Concepts: addressing compatibility issues, considering compatibility issues
Relationship: Addressing and considering are related as they both involve dealing with compatibility issues.
Criteria: Designers address or consider compatibility issues, including XP compatibility.
Phrase: Address compatibility issues.

3.
Concepts: managing limitations, acknowledging limitations
Relationship: Managing and acknowledging are related as they both involve recognizing and working with limitations.
Criteria: Designers acknowledge or work around limitations or constraints.
Phrase: Acknowledge limitations.

4.
Concepts: addressing limitations, explaining system limitations, describing software limitations
Relationship: Addressing, explaining, and describing are related as they all involve clarifying limitations.
Criteria: Designers address, explain, or describe limitations of the software, system, or design.
Phrase: Explain limitations.

5.
Concepts: frustration with platform limitations, expressing frustration with limitations
Relationship: Frustration and expressing are related as they both involve emotional responses to limitations.
Criteria: Designers express frustration or dissatisfaction with current platform or design limitations.
Phrase: Express frustration.

6.
Concepts: highlighting constraints, highlighting limitations
Relationship: Highlighting constraints and limitations are related as they both involve drawing attention to limitations.
Criteria: Users or designers highlight limitations or constraints.
Phrase: Highlight limitations.

7.
Concepts: identifying usability concerns, highlighting ui challenges, highlighting accessibility concerns
Relationship: Identifying, highlighting, and highlighting are related as they all involve recognizing and drawing attention to concerns.
Criteria: Users identify or highlight potential usability, UI, or accessibility concerns or issues.
Phrase: Identify concerns.

8.
Concepts: offering guidance
Relationship: N/A
Criteria: Designers offer guidance, advice, or tutorials on how to use the software.
Phrase: Offer guidance.

9.
Concepts: providing technical explanation
Relationship: N/A
Criteria: Designers provide technical explanations or justifications about features or components.
Phrase: Provide technical explanations.

10.
Concepts: inquiring about classroom context
Relationship: N/A
Criteria: Designers inquire about the classroom environment or infrastructure.
Phrase: Inquire about classroom context.

11.
Concepts: confirming system compatibility
Relationship: N/A
Criteria: Designers or users confirm system compatibility.
Phrase: Confirm compatibility.

12.
Concepts: providing download instructions
Relationship: N/A
Criteria: Designers provide instructions on how to download the application.
Phrase: Provide download instructions.

13.
Concepts: seeking help or support
Relationship: N/A
Criteria: Users request help or assistance from others.
Phrase: Seek help.

14.
Concepts: discussing technical requirements
Relationship: N/A
Criteria: Designers discuss technical requirements or explore compatibility options.
Phrase: Discuss technical requirements.

15.
Concepts: suggesting alternative designs
Relationship: N/A
Criteria: Users or designers suggest alternative design approaches for specific scenarios.
Phrase: Suggest alternative designs.

16.
Concepts: providing development insights
Relationship: N/A
Criteria: Designers provide insights into the development process or upcoming updates.
Phrase: Provide development insights.

17.
Concepts: asking questions
Relationship: N/A
Criteria: Users or designers ask questions about the app or its features.
Phrase: Ask questions.

18.
Concepts: seeking design confirmation
Relationship: N/A
Criteria: Designers seek confirmation on using multiple design options or approaches.
Phrase: Seek design confirmation.

19.
Concepts: informing users of updates
Relationship: N/A
Criteria: Designers inform users or community members about updates or changes.
Phrase: Inform users of updates.