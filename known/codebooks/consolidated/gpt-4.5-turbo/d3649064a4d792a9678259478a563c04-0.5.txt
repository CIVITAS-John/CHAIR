You are an expert in thematic analysis. 
Each code is a cluster of multiple qualitative sub-code. First, determine the logical relationship between concepts. If a concept includes another, use the broader one. If concepts are parallel, try to cover both concepts.
Write clear and generalizable labels and criteria for each merged code, informed by the context, and without unnecessary specifics or examples.
Find a theory-informed category for each code. Use 2-4 words for categories and avoid over-generalization.
The research question is: How did Physics Lab's online community emerge? (through the lens of learning sciences, human-computer interaction, and participatory design)
Always follow the output format:
---
Categories: 
* {Name some categories you identified from the research question and theoretical lens}

Definitions for each code (10 in total):
1. {Repeat the input 1}
Relationship: {The logical relationship between concepts in input 1}
Criteria: {A sentence of consolidated criteria for code 1}
Label: {A consolidated label of code 1}
Category: {2-4 words for code 1}
...
10. {Repeat the input 10}
Relationship: {The logical relationship between concepts in input 10}
Criteria: {A sentence of consolidated criteria for code 10}
Label: {A consolidated label of code 10}
Category: {2-4 words for code 10}
---
~~~
1. feature updates, feature announcements.
- Designer communicates upcoming changes or updates in the software features.
- Information about new or upcoming features in the app.
- Announcements from the designer detailing new or upcoming features in the software.

2. feature prioritization, development prioritization.
- Discussions or mentions of how features or sections are prioritized in the development process.
- Discussions related to how the development of different features or sections of the tool is prioritized.

3. usability concerns.
- Mentions of usability issues or enhancements that reflect the ongoing improvement of the tool's design.
- Points in the conversation where participants discuss difficulties or solutions related to the use of the online platform's features.

4. request for feedback.
- Instances where the designer asks for suggestions or feedback from the users to improve the software.
- Instances where the designer or other members actively seek feedback or suggestions from the community.
- Instances where the designer asks for user input or feedback on app features or updates.
- Instances where the designer explicitly asks for or refers to community feedback to improve the tool.

5. information sharing.
- Exchanges where information about the tool's updates, how to access it, or how to use it are shared.
- Instances where users or designers provide information or solutions to queries posted by other members.

6. update announcements.
- Statements where new updates or changes in the software are communicated to the community.
- Information shared by the designer about upcoming updates, releases, and enhancements.

7. technical support.
- Exchanges that involve providing assistance or guidance on technical aspects of the platform.
- Exchanges that provide guidance or solutions related to technical issues with the app.

8. compatibility issues.
- Discussions related to software compatibility with different systems or hardware.
- Discussions or concerns related to the software's compatibility with different systems or versions.

9. positive feedback.
- Positive remarks made by users about the software that indicate satisfaction or specific strengths.
- Instances where community members express approval or enthusiasm for design choices or updates.

10. user feedback.
- Direct comments or suggestions from users about software features or performance.
- Instances where users provide specific feedback or requests related to the softwareâ€™s features and usability.
===
---
Categories: 
* Feature Communication
* Development Management
* User Interaction
* Technical Assistance
* Community Feedback

Definitions for each code (10 in total):
1. feature updates, feature announcements.
Relationship: Concepts are synonymous, both relate to communicating new software features.
Criteria: Instances where new or updated features are announced by the designer to the community.
Label: Feature Announcements
Category: Feature Communication

2. feature prioritization, development prioritization.
Relationship: Concepts are synonymous, both involve the decision-making process in software development.
Criteria: Discussions that focus on the decision-making process regarding which software features or sections to develop or enhance first.
Label: Development Prioritization
Category: Development Management

3. usability concerns.
Relationship: Concepts are synonymous, focusing on usability issues and improvements.
Criteria: Discussions that identify and propose solutions for usability issues within the software.
Label: Usability Improvement Discussions
Category: User Interaction

4. request for feedback.
Relationship: Concepts are synonymous, all about soliciting community input on software.
Criteria: Instances where designers seek input, suggestions, or feedback from users to enhance the software.
Label: Feedback Solicitation
Category: Community Feedback

5. information sharing.
Relationship: Concepts are synonymous, both involve dissemination of knowledge about the software.
Criteria: Exchanges where information about the software's functionality, updates, or usage is shared among community members.
Label: Information Exchange
Category: User Interaction

6. update announcements.
Relationship: Concepts are synonymous with feature updates, focusing on communicating software changes.
Criteria: Announcements regarding new software updates, changes, or enhancements shared with the community.
Label: Update Announcements
Category: Feature Communication

7. technical support.
Relationship: Concepts are synonymous, both involve assisting users with technical issues.
Criteria: Exchanges where technical guidance or solutions are provided to address issues users face with the software.
Label: Technical Assistance
Category: Technical Assistance

8. compatibility issues.
Relationship: Concepts are synonymous, both involve discussing how the software interacts with various systems.
Criteria: Discussions that address the software's ability to function across different systems or hardware setups.
Label: Compatibility Discussions
Category: User Interaction

9. positive feedback.
Relationship: Concepts are synonymous, both about positive user reactions to the software.
Criteria: Instances where users express satisfaction, approval, or enthusiasm for the software and its features.
Label: Positive User Feedback
Category: Community Feedback

10. user feedback.
Relationship: Concepts are synonymous, both involve direct user input on software functionality.
Criteria: Direct suggestions, comments, or criticisms from users about the software's features or usability.
Label: User Feedback
Category: Community Feedback
---