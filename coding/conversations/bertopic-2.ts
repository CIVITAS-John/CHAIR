import * as File from "fs";
import { BertopicTopics, CodedThread, Conversation, Message } from "../../utils/schema.js";
import { BuildMessagePrompt, ConversationAnalyzer } from "./conversations.js";
import { PythonShell } from "python-shell";
import chalk from "chalk";
import { CodingNotes, ResearchQuestion } from "../../constants.js";
import { RequestLLMWithCache } from "../../utils/llms.js";
import { HumanMessage, SystemMessage } from "@langchain/core/messages";

/** BertopicAnalyzer2: Conduct the first-round bertopic coding of the conversations. */
// Differece from BertopicAnalyzer1: The prompt specifically asks for a verb phrase.
// Authored by John Chen.
export default class BertopicAnalyzer2 extends ConversationAnalyzer {
    /** Name: The name of the analyzer. */
    public Name = "bertopic-2";
    /** BaseTemperature: The base temperature for the LLM. */
    public BaseTemperature = 0.5;
    /** Codes: The codes generated by Bertopic. */
    private Codes: Record<string, string> = {};
    /** GetChunkSize: Get the chunk size and cursor movement for the LLM. */
    // Return value: [Chunk size, Cursor movement]
    public GetChunkSize(_Recommended: number, Remaining: number) {
        return Remaining;
    }
    /** BatchPreprocess: Preprocess the conversations in batch. */
    public async BatchPreprocess(Conversations: Conversation[], _Analyzed: CodedThread[]): Promise<void> {
        // Write the messages into the file.
        const Messages = Conversations.flatMap((Conversation) => {
            if (!Conversation.AllItems) {
                throw new Error("The conversation does not contain any messages.");
            }
            return Conversation.AllItems.filter((Message) => Message.Content.length > 0 && (!Message.Chunk || Message.Chunk === Conversation.ID));
        });
        const Content = Messages.map((Message) => BuildMessagePrompt(Message, undefined, undefined, true).replaceAll("\n", " "));
        File.writeFileSync("./known/bertopic.temp.json", JSON.stringify(Content));
        // Run the Python script
        let Topics: BertopicTopics = {};
        await PythonShell.run("coding/conversations/bertopic_impl.py", {
            args: [Messages.length.toString()],
            parser: (Message) => {
                if (Message.startsWith("{")) {
                    console.log(chalk.blue(Message));
                    Topics = JSON.parse(Message) as BertopicTopics;
                } else {
                    console.log(chalk.gray(Message));
                }
            },
        });
        // Generate a label and definition for each topic
        for (const Topic of Object.values(Topics)) {
            const IDs = Topic.IDs.sort((A, B) => Topic.Probabilities[B] - Topic.Probabilities[A]);
            // Maximum 5 examples sorted by probabilities
            const Examples = IDs.slice(0, 5).map((ID) => Messages[ID]);
            // Build the prompt
            const Prompt = `
You are an expert in thematic analysis with grounded theory, working on open coding.
You identified a topic from the input quotes. Each quote is independent from another.
${ResearchQuestion}
${CodingNotes}

Always follow the output format:
===
Thought: {What is the most common theme among the input quotes? Do not over-interpret the data.}
Phrase: {A single verb phrase that faithfully describes the topic}
===`.trim();
            // Find 5 keywords from the topic
            const Keywords = Topic.Keywords.slice(0, 5);
            // Request the LLM
            const Response = await RequestLLMWithCache(
                [
                    new SystemMessage(Prompt),
                    new HumanMessage(
                        `Quotes:
${Examples.map((Message) => `- ${BuildMessagePrompt(Message, undefined, undefined, true)}`).join("\n")}
Keywords: ${Keywords.join(", ")}`.trim(),
                    ),
                ],
                `messaging-groups/${this.Name}`,
                this.BaseTemperature,
                false,
            );
            // Parse the response
            let Phrase = "";
            const Lines = Response.split("\n");
            for (const _Line of Lines) {
                const Line = _Line.trim();
                if (Line.startsWith("Phrase:")) {
                    Phrase = Line.slice(7).trim().toLowerCase();
                    if (Phrase.endsWith(".")) {
                        Phrase = Phrase.slice(0, -1);
                    }
                }
            }
            // Assign messages to the topic
            for (const ID of IDs) {
                this.Codes[Messages[ID].ID] = Phrase;
            }
        }
    }
    /** ParseResponse: Parse the response from the LLM. */
    public ParseResponse(
        _Analysis: CodedThread,
        _Lines: string[],
        Subunits: Message[],
        _ChunkStart: number,
        _Iteration: number,
    ): Promise<Record<number, string>> {
        const Results: Record<number, string> = {};
        for (let I = 0; I < Subunits.length; I++) {
            let Code = this.Codes[Subunits[I].ID] ?? "";
            // Sometimes, the code ends with a period
            if (Code.endsWith(".")) {
                Code = Code.slice(0, -1);
            }
            // Sometimes, the code is inside a quote
            if (Code.startsWith('"') && Code.endsWith('"')) {
                Code = Code.slice(1, -1);
            }
            Results[I + 1] = Code;
        }
        return Promise.resolve(Results);
    }
}
