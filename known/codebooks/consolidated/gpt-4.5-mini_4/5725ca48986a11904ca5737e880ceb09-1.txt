You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (12 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
12. 
Concepts: {Repeat the input 12}
Relationship: {What is logical relationship between concepts in code 12, or N/A if not applicable}
Criteria: {Who did what, and how for code 12}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: facilitate dialogue and feedback, propose solutions and initiate discussions
- Designers emphasize the importance of open communication during discussions, encouraging users to voice concerns.
- Designers facilitate discussions by proposing new ideas and encouraging user feedback on features to address needs.

2.
Concepts: respond to user feedback, acknowledge and appreciate feedback
- Designers actively respond to both feedback and inquiries raised by users.
- Designers acknowledge user feedback and express appreciation for it.

3.
Concepts: real time communication, engage and clarify community roles
- Designers prompt interaction and clarify roles within the community through direct questions.
- Designers interact with users to clarify their roles and establish a deeper rapport to inform their contributions.

4.
Concepts: express agreement, confirm community participation
- Users and designers express approval or agreement on points discussed within the community.
- Community members confirm understanding in discussions while indicating user needs in alignment with shared content.

5.
Concepts: share development timelines, share timelines and manage updates
- Designers share updates regarding their development plans and communicate detailed timelines around feature development stages.
- Designers detail timelines for upcoming software updates and engage users in discussions regarding the update strategy.

6.
Concepts: preview upcoming features, sharing future development insights
- Designers communicate details about forthcoming software updates and features to the community.
- Designers reveal and share insights regarding the anticipated future developments and directions of the software.

7.
Concepts: inform about updates, reaffirm and announce software updates
- Developers notify the community about new features and detailed updates regarding software versions.
- Designers reaffirm the upcoming software update schedule and announce updates to keep the community informed.

8.
Concepts: communicate progress, highlight progress and updates
- Updates users on the progress and timeline regarding the release of different software versions.
- Designers communicate the extent of updates and significant improvements being made to the software.

9.
Concepts: clarify existing feature, clarify enhancements and explain needs
- Designers clarify the functionalities of existing software features to enhance user understanding.
- Designers articulate plans for future improvements while explaining necessity in ongoing feature development.

10.
Concepts: elaboration, explain software features
- Designers provide additional details or anecdotes to clarify functionalities or experiences relating to the software.
- Designers introduce specific software features and elaborate on their functionalities while sharing developments.

11.
Concepts: user guidance, provide guidance and instructions
- A designer explains new features and usage instructions for the software to users.
- Designers deliver updates and detailed instructions helping users navigate and utilize software features.

12.
Concepts: request additional experiments, suggest educational enhancements
- User requests additional types of experiments to be considered for inclusion in the software.
- User requests enhancements that cater to various educational demonstrations and experiments.
===
---
Definitions for each code (12 in total):
1.
Concepts: facilitate dialogue and feedback, propose solutions and initiate discussions  
Relationship: The concepts are interrelated as facilitating dialogue fosters an environment for proposing solutions and initiating discussions.  
Criteria: Designers facilitate open communication and feedback sessions, allowing users to voice concerns and share solutions.  
Phrase: Facilitate discussions and feedback.

2.
Concepts: respond to user feedback, acknowledge and appreciate feedback  
Relationship: Responding to feedback involves acknowledging it, creating a cycle of appreciation that encourages further user participation.  
Criteria: Designers actively acknowledge and respond to user feedback, expressing appreciation to enhance community engagement.  
Phrase: Acknowledge and respond to feedback.

3.
Concepts: real-time communication, engage and clarify community roles  
Relationship: Real-time communication allows for engagement, which is essential to clarify roles within the community.  
Criteria: Designers engage in real-time communication to clarify community roles and foster user participation through direct queries.  
Phrase: Engage and clarify roles.

4.
Concepts: express agreement, confirm community participation  
Relationship: Expressing agreement helps to reinforce community participation and mutual understanding among members.  
Criteria: Community members and designers express agreement and confirm participation, indicating alignment with shared discussions.  
Phrase: Confirm and express agreement.

5.
Concepts: share development timelines, share timelines and manage updates  
Relationship: Sharing development timelines informs the community about update management, establishing transparency in the process.  
Criteria: Designers share timelines and updates regarding software features and development plans to keep users informed.  
Phrase: Share and manage timelines.

6.
Concepts: preview upcoming features, sharing future development insights  
Relationship: Previewing features supports sharing insights about future developments, helping users anticipate changes.  
Criteria: Designers communicate details and insights about forthcoming software updates and future development plans to the community.  
Phrase: Share insights on future developments.

7.
Concepts: inform about updates, reaffirm and announce software updates  
Relationship: Informing about updates is closely tied to reaffirming and announcing them, ensuring community awareness.  
Criteria: Developers notify the community about new features while reaffirming the update schedule and announcements.  
Phrase: Announce and inform about updates.

8.
Concepts: communicate progress, highlight progress and updates  
Relationship: Communicating progress inherently involves highlighting notable updates and milestones within the development process.  
Criteria: Designers communicate progress on software releases while highlighting key updates to the community.  
Phrase: Communicate and highlight progress.

9.
Concepts: clarify existing feature, clarify enhancements and explain needs  
Relationship: Clarifying existing features is necessary to explain enhancements, ensuring users understand their functionalities and needs.  
Criteria: Designers clarify features and articulate the necessity of ongoing improvements to enhance user understanding.  
Phrase: Clarify features and enhancements.

10.
Concepts: elaboration, explain software features  
Relationship: Elaboration entails a deeper explanation of software features, making functionalities clearer to users.  
Criteria: Designers elaborate on specific software features, providing detailed explanations and development anecdotes for better understanding.  
Phrase: Elaborate on software features.

11.
Concepts: user guidance, provide guidance and instructions  
Relationship: User guidance involves providing specific instructions to help navigate software features effectively.  
Criteria: Designers deliver guidance and detailed instructions to support users in navigating new software functionalities.  
Phrase: Provide guidance and instructions.

12.
Concepts: request additional experiments, suggest educational enhancements  
Relationship: User requests for experiments inherently suggest potential enhancements for educational purposes, fostering innovation in the software.  
Criteria: Users request new experiments and suggest enhancements to improve educational content within the software.  
Phrase: Request and suggest enhancements.  
---