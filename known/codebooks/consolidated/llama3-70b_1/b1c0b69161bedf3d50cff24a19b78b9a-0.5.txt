You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (32 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
32. 
Concepts: {Repeat the input 32}
Relationship: {What is logical relationship between concepts in code 32, or N/A if not applicable}
Criteria: {Who did what, and how for code 32}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: purpose clarification, explain feature purpose
- Clarifying the purpose or goal of a feature or design.
- Designers explain the purpose or context of a feature or tool to users.

2.
Concepts: demonstrating software, demonstrating software value
- A designer illustrates the capabilities or potential of the software.
- Designer highlights the value or benefits of the software.

3.
Concepts: clarifying features, explaining features
- A designer clarifies or explains a feature or functionality.
- A designer provides details about a feature or functionality.

4.
Concepts: explaining technical details, providing technical explanations
- A designer explains technical details or concepts.
- Designers explain technical possibilities or capabilities of a system or tool.

5.
Concepts: clarifying system capabilities, clarifying system requirements
- The designer clarifies the capabilities or limitations of the software.
- Designers clarify or provide additional information about system requirements.

6.
Concepts: clarifying version details, providing version details
- A designer clarifies version details.
- A designer provides detailed information about the software's version, features, or updates.

7.
Concepts: promoting bidirectional conversion, demonstrating bidirectional conversion
- Designer promotes bidirectional conversion.
- A designer explains the concept of bidirectional conversion.

8.
Concepts: highlighting ideal components, promoting ideal components
- A designer highlights ideal components or features.
- The designer promotes ideal components, highlighting their features and benefits.

9.
Concepts: simplifying design, complexity reduction
- Designer simplifies or streamlines design elements.
- Designer aims to reduce the complexity of a feature or functionality.

10.
Concepts: promoting convenience, advocating for convenience
- Users promote or emphasize convenience or ease of use.
- Users advocate for convenience or ease of use.

11.
Concepts: promoting ease of use, emphasizes convenience in problem solving
- Designer promotes ease of use.
- The designer emphasizes the convenience or ease of use of a feature or solution.

12.
Concepts: emphasizing benefits, highlighting long-term benefits
- A designer highlights or emphasizes the benefits of a feature or system.
- A designer highlights the long-term benefits of a feature.

13.
Concepts: promoting features, highlighting functionality
- A designer promotes or highlights a specific feature or functionality.
- A designer highlights the functionality or features of the application.

14.
Concepts: emphasizing impact, highlighting significance
- A designer emphasizes the significance or impact of an update or feature.
- A designer highlights the importance or significance of a particular update, feature, or change.

15.
Concepts: emphasizing importance, explaining feature importance
- A designer emphasizes the importance of a particular task or feature.
- A designer explains the importance of a feature.

16.
Concepts: offering alternatives, offering compromise
- An alternative solution or approach is offered to resolve an issue.
- A compromise or alternative solution is offered to resolve an issue or meet a need.

17.
Concepts: proposing solutions, offering solutions
- A designer proposes a design idea or solution.
- A designer offers a solution or workaround to a problem.

18.
Concepts: explaining workarounds, sharing workarounds
- A designer explains a workaround for an issue.
- A designer shares a workaround or solution to a specific issue or problem.

19.
Concepts: suggest system compatibility, express system compatibility concerns
- A user suggests or implies system compatibility.
- A user expresses concern about system compatibility.

20.
Concepts: clarify system compatibility, provide system compatibility info
- Information is provided about system compatibility.
- Designer provides information about system compatibility or requirements.

21.
Concepts: confirm system compatibility, confirm technical compatibility
- Designers confirm system compatibility.
- A designer confirms technical compatibility.

22.
Concepts: theorize about compatibility, discuss theoretical compatibility
- A designer theorizes about compatibility.
- A designer discusses theoretical system compatibility.

23.
Concepts: discuss software limitations, explain technical limitations
- A designer or user discusses software limitations.
- A user or designer explains technical limitations.

24.
Concepts: explain limitations, explaining constraints
- A speaker explains limitations or constraints.
- A designer explains or justifies limitations.
- Explaining or describing constraints or limitations.

25.
Concepts: addressing concerns, addressing potential issues
- A designer addresses a concern or worry.
- A designer addresses potential issues or problems.

26.
Concepts: share design challenges, discussing ui challenges
- A designer shares design challenges.
- A designer highlights or discusses challenges with the user interface or design.

27.
Concepts: difficulty in development, explain development complexity
- The designer expresses difficulty or complexity in development.
- A designer explains development complexity or challenges.

28.
Concepts: acknowledge limitations, recognizing limitation in previous statement
- A designer acknowledges limitations.
- The designer acknowledges or corrects a previous statement, recognizing its limitations.

29.
Concepts: suggesting manual adjustments, allowing manual adjustments, highlighting manual adjustments
- Suggesting manual adjustments or customization options.
- Acknowledging the ability to customize or adjust the layout or design.
- A designer mentions a feature or option that can be manually adjusted or customized.

30.
Concepts: showing independence, demonstrating self-reliance
- A user expresses independence or self-sufficiency in finding resources.
- A user demonstrates independence or self-reliance.

31.
Concepts: suggesting new features, making feature requests
- Users suggest or request new features or functionalities.
- Users make requests or suggestions for new features or developments.

32.
Concepts: feature suggestion, propose another feature
- Suggesting new features or functionalities
- User proposes a new feature
===
Here are the definitions for each code:

---
1.
Concepts: purpose clarification, explain feature purpose
Relationship: The concepts are related as they both involve designers clarifying the purpose of a feature or design.
Criteria: Designers clarify the purpose or goal of a feature or design to users.
Phrase: Explaining feature purpose.

2.
Concepts: demonstrating software, demonstrating software value
Relationship: The concepts are related as they both involve designers showcasing the capabilities or benefits of the software.
Criteria: Designers illustrate the capabilities or potential of the software and highlight its value or benefits.
Phrase: Demonstrating software value.

3.
Concepts: clarifying features, explaining features
Relationship: The concepts are related as they both involve designers providing details about a feature or functionality.
Criteria: Designers clarify or explain a feature or functionality to users.
Phrase: Explaining features.

4.
Concepts: explaining technical details, providing technical explanations
Relationship: The concepts are related as they both involve designers explaining technical aspects of the software.
Criteria: Designers explain technical details or concepts to users.
Phrase: Providing technical explanations.

5.
Concepts: clarifying system capabilities, clarifying system requirements
Relationship: The concepts are related as they both involve designers providing information about the software's capabilities or requirements.
Criteria: Designers clarify the capabilities or limitations of the software and provide additional information about system requirements.
Phrase: Clarifying system capabilities.

6.
Concepts: clarifying version details, providing version details
Relationship: The concepts are related as they both involve designers providing information about the software's version.
Criteria: Designers clarify version details and provide detailed information about the software's version, features, or updates.
Phrase: Providing version details.

7.
Concepts: promoting bidirectional conversion, demonstrating bidirectional conversion
Relationship: The concepts are related as they both involve designers showcasing the concept of bidirectional conversion.
Criteria: Designers promote and explain the concept of bidirectional conversion.
Phrase: Promoting bidirectional conversion.

8.
Concepts: highlighting ideal components, promoting ideal components
Relationship: The concepts are related as they both involve designers highlighting the benefits of ideal components.
Criteria: Designers highlight and promote ideal components, highlighting their features and benefits.
Phrase: Promoting ideal components.

9.
Concepts: simplifying design, complexity reduction
Relationship: The concepts are related as they both involve designers making design elements more accessible.
Criteria: Designers simplify or streamline design elements to reduce complexity.
Phrase: Simplifying design.

10.
Concepts: promoting convenience, advocating for convenience
Relationship: The concepts are related as they both involve users emphasizing the importance of convenience.
Criteria: Users promote or emphasize convenience or ease of use.
Phrase: Advocating for convenience.

11.
Concepts: promoting ease of use, emphasizes convenience in problem solving
Relationship: The concepts are related as they both involve designers promoting ease of use.
Criteria: Designers promote ease of use and emphasize the convenience of a feature or solution.
Phrase: Promoting ease of use.

12.
Concepts: emphasizing benefits, highlighting long-term benefits
Relationship: The concepts are related as they both involve designers highlighting the benefits of a feature or system.
Criteria: Designers highlight or emphasize the benefits of a feature or system, including long-term benefits.
Phrase: Highlighting benefits.

13.
Concepts: promoting features, highlighting functionality
Relationship: The concepts are related as they both involve designers promoting a feature or functionality.
Criteria: Designers promote or highlight a specific feature or functionality.
Phrase: Promoting features.

14.
Concepts: emphasizing impact, highlighting significance
Relationship: The concepts are related as they both involve designers emphasizing the importance of an update or feature.
Criteria: Designers emphasize the significance or impact of an update or feature.
Phrase: Highlighting significance.

15.
Concepts: emphasizing importance, explaining feature importance
Relationship: The concepts are related as they both involve designers explaining the importance of a feature.
Criteria: Designers emphasize the importance of a particular task or feature and explain its importance.
Phrase: Explaining feature importance.

16.
Concepts: offering alternatives, offering compromise
Relationship: The concepts are related as they both involve designers offering alternative solutions.
Criteria: Designers offer alternative solutions or compromises to resolve an issue.
Phrase: Offering alternatives.

17.
Concepts: proposing solutions, offering solutions
Relationship: The concepts are related as they both involve designers proposing design ideas or solutions.
Criteria: Designers propose design ideas or solutions to a problem.
Phrase: Proposing solutions.

18.
Concepts: explaining workarounds, sharing workarounds
Relationship: The concepts are related as they both involve designers explaining or sharing workarounds.
Criteria: Designers explain or share a workaround or solution to a specific issue or problem.
Phrase: Explaining workarounds.

19.
Concepts: suggest system compatibility, express system compatibility concerns
Relationship: The concepts are related as they both involve users discussing system compatibility.
Criteria: Users suggest or express concerns about system compatibility.
Phrase: Expressing system compatibility concerns.

20.
Concepts: clarify system compatibility, provide system compatibility info
Relationship: The concepts are related as they both involve designers providing information about system compatibility.
Criteria: Designers provide information about system compatibility or requirements.
Phrase: Providing system compatibility info.

21.
Concepts: confirm system compatibility, confirm technical compatibility
Relationship: The concepts are related as they both involve designers confirming system compatibility.
Criteria: Designers confirm system compatibility or technical compatibility.
Phrase: Confirming system compatibility.

22.
Concepts: theorize about compatibility, discuss theoretical compatibility
Relationship: The concepts are related as they both involve designers discussing theoretical system compatibility.
Criteria: Designers theorize about or discuss theoretical system compatibility.
Phrase: Theorizing about compatibility.

23.
Concepts: discuss software limitations, explain technical limitations
Relationship: The concepts are related as they both involve designers discussing software limitations.
Criteria: Designers discuss software limitations and explain technical limitations.
Phrase: Discussing software limitations.

24.
Concepts: explain limitations, explaining constraints
Relationship: The concepts are related as they both involve designers explaining limitations or constraints.
Criteria: Designers explain limitations or constraints.
Phrase: Explaining limitations.

25.
Concepts: addressing concerns, addressing potential issues
Relationship: The concepts are related as they both involve designers addressing user concerns or potential issues.
Criteria: Designers address concerns or potential issues.
Phrase: Addressing concerns.

26.
Concepts: share design challenges, discussing ui challenges
Relationship: The concepts are related as they both involve designers discussing design challenges.
Criteria: Designers share design challenges and discuss challenges with the user interface or design.
Phrase: Discussing design challenges.

27.
Concepts: difficulty in development, explain development complexity
Relationship: The concepts are related as they both involve designers discussing development challenges.
Criteria: Designers express difficulty or complexity in development and explain development complexity or challenges.
Phrase: Explaining development complexity.

28.
Concepts: acknowledge limitations, recognizing limitation in previous statement
Relationship: The concepts are related as they both involve designers acknowledging limitations.
Criteria: Designers acknowledge limitations and correct previous statements, recognizing their limitations.
Phrase: Acknowledging limitations.

29.
Concepts: suggesting manual adjustments, allowing manual adjustments, highlighting manual adjustments
Relationship: The concepts are related as they both involve designers suggesting or highlighting manual adjustments.
Criteria: Designers suggest or highlight manual adjustments or customization options.
Phrase: Suggesting manual adjustments.

30.
Concepts: showing independence, demonstrating self-reliance
Relationship: The concepts are related as they both involve users expressing independence or self-sufficiency.
Criteria: Users express independence or self-sufficiency in finding resources.
Phrase: Demonstrating independence.

31.
Concepts: suggesting new features, making feature requests
Relationship: The concepts are related as they both involve users suggesting new features or functionalities.
Criteria: Users suggest or request new features or functionalities.
Phrase: Suggesting new features.

32.
Concepts: feature suggestion, propose another feature
Relationship: The concepts are related as they both involve users suggesting new features or functionalities.
Criteria: Users suggest or propose new features or functionalities.
Phrase: Proposing new features.