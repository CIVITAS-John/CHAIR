You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (14 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
14. 
Concepts: {Repeat the input 14}
Relationship: {What is logical relationship between concepts in code 14, or N/A if not applicable}
Criteria: {Who did what, and how for code 14}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: time constraints for language learning, limited time for language expertise
- Acknowledges time constraints for language learning
- Expert acknowledges limitations in time to spend on each programming language.

2.
Concepts: human limitation: time, dealing with time constraints for each language
- The interviewee expresses time constraints in their work.
- Interviewee mentions the challenge of dealing with time constraints for each language.

3.
Concepts: effort constraints, interviewee's expertise and time constraints
- The participant is constrained by time and effort in learning and using multiple languages.
- The participant is an expert in multiple languages, but lacks the time to spend on each one.

4.
Concepts: relying on ai under time pressure, human-ai: completely rely on ai
- Relies on AI output when facing time constraints.
- Participant completely relies on AI-generated code due to time constraints or other situations.

5.
Concepts: seek ai assistance due to time constraints, human-effort (negative): time constraint
- Participants express time constraints and seek AI assistance to learn new extensions.
- Expressing time constraints and the need for efficient solutions, potentially with AI assistance.

6.
Concepts: importance of tacit knowledge, acknowledging tacit knowledge
- Highlights the importance of tacit knowledge.
- Developers acknowledge the importance of tacit knowledge in software development.

7.
Concepts: notes knowledge gaps, recognizing knowledge gaps in software development
- Recognizing knowledge gaps in software development and the potential of LLM-driven interfaces to address them.
- The participant identifies gaps in knowledge transfer.

8.
Concepts: reflecting on knowledge generation, knowledge generation and sustenance
- The participant reflects on knowledge generation and sustenance.
- Reflecting on the nature of knowledge, including the importance of oral tradition and the need for practice in debugging code.

9.
Concepts: learning in fragmented time blocks, describing fragmented learning sessions
- Describing the need for a system that supports learning in fragmented time blocks.
- Developers describe fragmented learning patterns, where learning occurs in short, disconnected sessions.

10.
Concepts: describing expert's fragmented learning, reflecting on being an expert in multiple languages
- Participant describes expert's fragmented learning, bouncing between different languages.
- The participant reflects on being an expert in multiple languages.

11.
Concepts: cross-language coding experience, diverse language background, exhibiting multilingual expertise
- Mentions experience with coding in other languages.
- Having a diverse language background and prior experiences in computer programming.
- Developers exhibit expertise in multiple programming languages.

12.
Concepts: managing multiple skills, managing multiple languages with limited time
- Participants balance expertise across multiple programming languages with time constraints.
- Developers manage multiple languages with limited time for each.

13.
Concepts: establishing credibility, credibility establishment
- Establishing credibility based on prior experiences and expertise
- The interviewee underscores their credibility as an experienced programmer.

14.
Concepts: reflecting on extensive programming experience, expert's perspective on learning and practice
- Reflects on extensive programming experience and its impact on learning.
- Shares insights and experiences as an expert in multiple programming languages.
===
Here are the definitions for each code:

---
1.
Concepts: time constraints for language learning, limited time for language expertise
Relationship: The concepts are interconnected, as time constraints limit the opportunity to develop language expertise.
Criteria: Experts acknowledge limitations in time to spend on each programming language.
Phrase: Acknowledge time constraints for language expertise.

2.
Concepts: human limitation: time, dealing with time constraints for each language
Relationship: The concepts are causally related, as human limitations in time lead to dealing with time constraints for each language.
Criteria: Interviewees express time constraints in their work and mention the challenge of dealing with time constraints for each language.
Phrase: Express time constraints for each language.

3.
Concepts: effort constraints, interviewee's expertise and time constraints
Relationship: The concepts are interconnected, as effort constraints are influenced by the interviewee's expertise and time constraints.
Criteria: Participants are constrained by time and effort in learning and using multiple languages.
Phrase: Experience effort constraints in learning multiple languages.

4.
Concepts: relying on ai under time pressure, human-ai: completely rely on ai
Relationship: The concepts are causally related, as relying on AI output is a response to time pressure.
Criteria: Participants completely rely on AI-generated code due to time constraints or other situations.
Phrase: Rely on AI under time pressure.

5.
Concepts: seek ai assistance due to time constraints, human-effort (negative): time constraint
Relationship: The concepts are causally related, as seeking AI assistance is a response to time constraints.
Criteria: Participants express time constraints and seek AI assistance to learn new extensions.
Phrase: Seek AI assistance due to time constraints.

6.
Concepts: importance of tacit knowledge, acknowledging tacit knowledge
Relationship: The concepts are synonymous, as acknowledging tacit knowledge implies recognizing its importance.
Criteria: Developers acknowledge the importance of tacit knowledge in software development.
Phrase: Acknowledge the importance of tacit knowledge.

7.
Concepts: notes knowledge gaps, recognizing knowledge gaps in software development
Relationship: The concepts are synonymous, as noting knowledge gaps implies recognizing their existence.
Criteria: Participants identify gaps in knowledge transfer.
Phrase: Recognize knowledge gaps in software development.

8.
Concepts: reflecting on knowledge generation, knowledge generation and sustenance
Relationship: The concepts are interconnected, as reflecting on knowledge generation involves considering its sustenance.
Criteria: Participants reflect on knowledge generation and sustenance.
Phrase: Reflect on knowledge generation and sustenance.

9.
Concepts: learning in fragmented time blocks, describing fragmented learning sessions
Relationship: The concepts are synonymous, as learning in fragmented time blocks implies describing fragmented learning sessions.
Criteria: Developers describe fragmented learning patterns, where learning occurs in short, disconnected sessions.
Phrase: Describe fragmented learning sessions.

10.
Concepts: describing expert's fragmented learning, reflecting on being an expert in multiple languages
Relationship: The concepts are interconnected, as describing expert's fragmented learning involves reflecting on being an expert in multiple languages.
Criteria: Participants reflect on being an expert in multiple languages.
Phrase: Reflect on expert's fragmented learning.

11.
Concepts: cross-language coding experience, diverse language background, exhibiting multilingual expertise
Relationship: The concepts are interconnected, as cross-language coding experience and diverse language background contribute to exhibiting multilingual expertise.
Criteria: Developers exhibit expertise in multiple programming languages.
Phrase: Exhibit multilingual expertise.

12.
Concepts: managing multiple skills, managing multiple languages with limited time
Relationship: The concepts are synonymous, as managing multiple skills implies managing multiple languages with limited time.
Criteria: Participants balance expertise across multiple programming languages with time constraints.
Phrase: Manage multiple languages with limited time.

13.
Concepts: establishing credibility, credibility establishment
Relationship: The concepts are synonymous, as establishing credibility implies credibility establishment.
Criteria: The interviewee underscores their credibility as an experienced programmer.
Phrase: Establish credibility as an experienced programmer.

14.
Concepts: reflecting on extensive programming experience, expert's perspective on learning and practice
Relationship: The concepts are interconnected, as reflecting on extensive programming experience informs the expert's perspective on learning and practice.
Criteria: Participants share insights and experiences as an expert in multiple programming languages.
Phrase: Reflect on extensive programming experience.