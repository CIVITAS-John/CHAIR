You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (20 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
20. 
Concepts: {Repeat the input 20}
Relationship: {What is logical relationship between concepts in code 20, or N/A if not applicable}
Criteria: {Who did what, and how for code 20}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: announce software features, announce community updates
- Designers announce the release of new software features and versions to the community.
- Designers announce important updates relevant to the community and share detailed version information.

2.
Concepts: promise future updates, identify potential future updates
- Designers assure users about future updates and ongoing improvements.
- Designer identifies potential updates that may address specific issues in future iterations.

3.
Concepts: explain release process, prioritize pc version release
- The designer outlines sequences for project completion and explains prioritization for releases.
- A designer prioritizes the release of a particular version of the software, indicating ongoing project management.

4.
Concepts: discuss future plans, communicate ongoing work
- Designers discuss potential future developments and announce plans for consultations.
- Designers communicate ongoing work and future plans for project developments.

5.
Concepts: transparent developer discussion, ensure transparency in development
- Designers engage in transparent discussions about design decisions and software behavior.
- A designer maintains transparency with users, providing detailed information about ongoing work and development processes.

6.
Concepts: share technical knowledge, provide technical information
- Designers share technical information to enhance users' understanding of the software.
- The designer discusses technical aspects required for effective software operation.

7.
Concepts: visual and functional design, discuss usability features
- Discussions about the visual and functional aspects of the software.
- A designer discusses usability concerns and addresses specific functionalities related to software operation.

8.
Concepts: user tips, provide user guidance
- The designer shares detailed features and updates in a structured format.
- A designer provides detailed information about new features and updates to help users.

9.
Concepts: analyze compatibility issues, confirm system compatibility
- The designer analyzes compatibility issues and considers future needs for older systems.
- The designer discusses and confirms compatibility issues with various operating systems and suggests evaluations.

10.
Concepts: design discussion, align with user needs
- The designer holds discussions about design considerations that take into account users' educational needs.
- Designer aligns feature development with user needs and practical applications in education.

11.
Concepts: propose user solutions, reach a conclusion for the solution based on user's response
- The designer addresses potential user problems while prompting discussions for feedback and solutions.
- A designer analyzes user feedback to determine necessary features or solutions.

12.
Concepts: clarify previous statements, seek clarification from users
- The designer clarifies previous statements and seeks further clarification on user requests.
- A designer seeks clarification and confirmation from users regarding previous communications.

13.
Concepts: informal interaction, foster informal communication
- Designers and users engage in casual conversation, fostering a relaxed community atmosphere.
- Instances of casual and non-technical interactions among community members are noted.

14.
Concepts: use non verbal communication, utilize emoji communication
- Use of emojis or other non-verbal forms of communication by users.
- Users include emojis to enhance their inquiries and foster emotional connection.

15.
Concepts: story sharing, explain internet restrictions
- Users share stories related to the restrictions on software use in educational settings.
- Users describe network policies and restrictions affecting software usage in educational settings.

16.
Concepts: share teaching experiences, provide comparative feedback
- Users share past experiences related to the software in an educational context.
- Users give comparative feedback about the software's usability in educational contexts.

17.
Concepts: ask teachers' needs, consult teachers for input
- Designers inquire about the needs and preferences of teachers to tailor the software accordingly.
- The designer asks teachers for input and engages them for insights regarding content.

18.
Concepts: personal connection, build rapport with users
- Users and designers share personal teaching experiences to foster connection and rapport.
- A designer engages users by inquiring about their teaching backgrounds to build rapport.

19.
Concepts: seek version clarification, inquire about platform compatibility
- Users inquire about specific app versions and download options for different platforms.
- Users inquire about the compatibility of the application across various platforms.

20.
Concepts: articulate user needs, explain reasons for the request
- Users express specific needs and provide context for them linked to educational initiatives.
- Users articulate reasons for their feature requests, linking them to specific needs or contexts.
===
---
Definitions for each code (20 in total):
1.
Concepts: announce software features, announce community updates
Relationship: Both concepts involve communication from designers to the community about changes and improvements.
Criteria: Designers announce the release of new software features and important community updates to keep users informed.
Phrase: Announce updates and features.

2.
Concepts: promise future updates, identify potential future updates
Relationship: Both concepts focus on future improvements, with one emphasizing assurance and the other identification of needs.
Criteria: Designers assure users about future updates while identifying potential improvements for future versions.
Phrase: Assure and identify future enhancements.

3.
Concepts: explain release process, prioritize pc version release
Relationship: Both concepts relate to project management, with one focusing on communication and the other on prioritization.
Criteria: The designer explains the release process and prioritizes the software version for effective project management.
Phrase: Explain and prioritize releases.

4.
Concepts: discuss future plans, communicate ongoing work
Relationship: Both concepts involve communication about ongoing and future developments within the project.
Criteria: Designers discuss potential developments and communicate ongoing work to keep the community informed.
Phrase: Discuss future and ongoing work.

5.
Concepts: transparent developer discussion, ensure transparency in development
Relationship: Both concepts emphasize open communication and transparency in the development process.
Criteria: Designers engage in transparent discussions and provide detailed information about ongoing development activities.
Phrase: Ensure transparency in discussions.

6.
Concepts: share technical knowledge, provide technical information
Relationship: Both concepts focus on disseminating technical information to enhance user understanding.
Criteria: Designers share technical knowledge and provide essential information for effective software operation.
Phrase: Share and provide technical information.

7.
Concepts: visual and functional design, discuss usability features
Relationship: Both concepts relate to the design aspects of the software and its usability.
Criteria: Discussions about visual design and functionality address usability features and concerns in the software.
Phrase: Discuss design and usability.

8.
Concepts: user tips, provide user guidance
Relationship: Both concepts focus on aiding users through information sharing and guidance.
Criteria: The designer shares detailed updates and provides guidance to help users understand new features.
Phrase: Provide guidance and tips.

9.
Concepts: analyze compatibility issues, confirm system compatibility
Relationship: Both concepts involve assessing compatibility with various systems and addressing users' needs.
Criteria: The designer analyzes and confirms compatibility issues across operating systems to inform users.
Phrase: Analyze and confirm compatibility.

10.
Concepts: design discussion, align with user needs
Relationship: Both concepts focus on understanding user needs in the design process.
Criteria: The designer holds discussions about design considerations to align them with users' educational needs.
Phrase: Align design with user needs.

11.
Concepts: propose user solutions, reach a conclusion for the solution based on user's response
Relationship: Both concepts involve addressing user issues and incorporating feedback into solutions.
Criteria: The designer proposes potential solutions while analyzing user feedback to refine those solutions.
Phrase: Propose and refine solutions.

12.
Concepts: clarify previous statements, seek clarification from users
Relationship: Both concepts focus on improving communication and understanding between designers and users.
Criteria: The designer clarifies previous statements and seeks further clarification from users to enhance communication.
Phrase: Clarify and seek input.

13.
Concepts: informal interaction, foster informal communication
Relationship: Both concepts involve creating a casual and relaxed community atmosphere.
Criteria: Designers and users engage in casual conversations, fostering informal communication within the community.
Phrase: Foster informal interactions.

14.
Concepts: use non verbal communication, utilize emoji communication
Relationship: Both concepts involve enhancing communication through non-verbal means.
Criteria: Users utilize emojis and other non-verbal forms of communication to enhance inquiries and emotional connections.
Phrase: Utilize non-verbal communication.

15.
Concepts: story sharing, explain internet restrictions
Relationship: Both concepts involve sharing experiences related to the software and its limitations.
Criteria: Users share stories about restrictions on software use in educational settings and describe relevant network policies.
Phrase: Share stories about restrictions.

16.
Concepts: share teaching experiences, provide comparative feedback
Relationship: Both concepts involve sharing practical experiences and feedback regarding software usability.
Criteria: Users share their teaching experiences and provide comparative feedback on the software's effectiveness in education.
Phrase: Share experiences and feedback.

17.
Concepts: ask teachers' needs, consult teachers for input
Relationship: Both concepts focus on gathering insights from teachers to improve the software.
Criteria: Designers inquire about teachers' needs and consult them for input to tailor the software accordingly.
Phrase: Consult teachers for needs.

18.
Concepts: personal connection, build rapport with users
Relationship: Both concepts emphasize the importance of personal relationships in user engagement.
Criteria: Users and designers share personal experiences to build rapport and foster connections.
Phrase: Build rapport and connections.

19.
Concepts: seek version clarification, inquire about platform compatibility
Relationship: Both concepts involve inquiries about software versions and compatibility across platforms.
Criteria: Users inquire about specific app versions and compatibility options for various platforms.
Phrase: Inquire about versions and compatibility.

20.
Concepts: articulate user needs, explain reasons for the request
Relationship: Both concepts involve expressing user needs and the context behind those requests.
Criteria: Users articulate specific needs and explain their reasons linked to educational initiatives.
Phrase: Articulate needs and reasons.