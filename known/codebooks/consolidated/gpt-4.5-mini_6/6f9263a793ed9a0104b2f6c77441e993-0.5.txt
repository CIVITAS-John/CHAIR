You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (5 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
5. 
Concepts: {Repeat the input 5}
Relationship: {What is logical relationship between concepts in code 5, or N/A if not applicable}
Criteria: {Who did what, and how for code 5}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: share update timelines, communicate development timelines
- A designer informs the community about expected timing for specific software updates.
- The designer shares timelines and provides updates on software release progress.

2.
Concepts: design adaptation, commit to user solutions
- Designers identify the necessity for adaptations in design to meet user needs.
- Designers commit to addressing user needs and suggest solutions that cater to those needs.

3.
Concepts: explain design principles and rationale, provide rationale for design decisions
- Designers explain the principles and rationale behind their design choices.
- A designer makes decisions regarding software development and provides rationale for those decisions.

4.
Concepts: request new features, request information
- Users request specific physics concepts or new features for the Physics Lab tool.
- Users ask for specific information or help regarding the use or features of Physics Lab.

5.
Concepts: compare feature complexities, elaborate on feature complexity
- Designers compare the complexities of different software features.
- Designer elaborates on suggestions and clarifies the complexity of tasks related to features.
===
---
Definitions for each code (5 in total):
1. 
Concepts: share update timelines, communicate development timelines
Relationship: Both concepts involve the designer's role in informing the community about the timing and progress of software updates.
Criteria: The designer informs the community about expected timing and shares progress updates for specific software releases.
Phrase: Communicate software update timelines.

2. 
Concepts: design adaptation, commit to user solutions
Relationship: Both concepts focus on the designers' proactive approach to modifying designs and addressing the needs of users.
Criteria: Designers identify necessary adaptations in design and commit to providing solutions that meet user needs.
Phrase: Adapt designs to user needs.

3. 
Concepts: explain design principles and rationale, provide rationale for design decisions
Relationship: Both concepts involve the designer's responsibility to clarify the reasoning behind design choices and decisions.
Criteria: Designers explain the principles and rationale behind their design choices and decisions in software development.
Phrase: Clarify design rationale.

4. 
Concepts: request new features, request information
Relationship: Both concepts involve user engagement with the community by seeking additional features or information related to the Physics Lab tool.
Criteria: Users actively request specific new features or information regarding the use of Physics Lab.
Phrase: Seek feature requests and information.

5. 
Concepts: compare feature complexities, elaborate on feature complexity
Relationship: Both concepts center on the designer's analysis and explanation of the complexities associated with software features.
Criteria: Designers compare and elaborate on the complexities of different software features and related tasks.
Phrase: Analyze feature complexities.
---