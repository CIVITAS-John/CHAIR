You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (41 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
41. 
Concepts: {Repeat the input 41}
Relationship: {What is logical relationship between concepts in code 41, or N/A if not applicable}
Criteria: {Who did what, and how for code 41}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: real time communication, directly communicate with users
- Designer engages in immediate communication with a user to address their inquiry.
- Designers address specific users directly to discuss features and feedback.

2.
Concepts: resolve user concerns, provide technical clarification
- The designer addresses and resolves a user's concern and asks for clarification on issues encountered.
- Designers clarify technical aspects and respond to clarification requests from users.

3.
Concepts: personalized assistance, offering user assistance
- Designer offers personalized help or assistance to users who have specific needs.
- Designers offer help and technical support to users, providing guidance for resolving issues.

4.
Concepts: maintain transparency, provide development transparency
- Designers maintain transparency and communicate openly about project complexities and timelines.
- Designers provide detailed updates about development processes and challenges to keep the community informed.

5.
Concepts: explain complexity, explain delays in development
- Designers explain the complexities involved in software development or updates.
- Designers clarify reasons for delays and acknowledge the complexity of tasks that may hinder progress.

6.
Concepts: apologize for community disturbances, acknowledge timing inconveniences
- Designers acknowledge community norms by apologizing for disturbances.
- Designers express consideration for the community's time and apologize for timing inconveniences.

7.
Concepts: gather user opinions, promise future consultation
- Designers plan to gather user feedback before initiating new project phases.
- Designers promise to gather opinions and invite discussions before new development phases.

8.
Concepts: gather user context, inquire about user backgrounds
- The designer gathers context by asking users about their teaching environments and specific needs.
- Designers ask about usersâ€™ professional and educational backgrounds to enhance contextual understanding.

9.
Concepts: clarify version type, seek version clarification
- Designers clarify the types and statuses of software versions, particularly for testing purposes.
- Users clarify details regarding the software version and seek confirmation on which version is being discussed.

10.
Concepts: share visual references, seek visual confirmation
- Designers share visual references to help clarify or confirm discussion points.
- Users or designers confirm or seek visual identification through images shared.

11.
Concepts: elaboration, propose and elaborate a suggestion
- Designer shares a detailed experience from previous attempts to clarify a process.
- A designer proposes a suggestion based on the context of the discussion and provides a detailed example to clarify it.

12.
Concepts: clarify preference, provide usability feedback on layout
- A user clarifies their preference regarding specific design or functional aspects of the software.
- A user provides feedback on interface layout decisions and discusses preferences regarding functionality based on experience.

13.
Concepts: limitation of the team, discuss addressable limitations
- The designer indicates the limitations faced by the team in development and feedback collection.
- Designers highlight limitations and discuss how these can be addressed or worked around.

14.
Concepts: address platform limitations, explain software limitations
- Designers explain the limitations of the software based on system incompatibilities.
- Designers acknowledge and explain potential technical limitations that users may encounter.

15.
Concepts: confirm system compatibility, analyze system compatibility, diagnose compatibility issues
- Designers confirm the compatibility of specific features with different devices or systems.
- Designers discuss and speculate on compatibility issues with different operating systems and machines.
- Designers analyze and provide a diagnosis for potential compatibility problems affecting the software.

16.
Concepts: system requirements, consider technical requirements
- The designer outlines the necessary system specifications for the software's use.
- Designers discuss necessary technical considerations and requirements for software development.

17.
Concepts: share design thoughts, discuss design adjustments
- Designers share their thoughts on design improvements and discuss the importance of refining features.
- Designers engage in discussions about necessary adjustments and improvements to the software features.

18.
Concepts: provide download instructions, provide download information
- Designers explain how to access or download the software and provide clear instructions.
- The designer shared information about where users could download the software and development plans.

19.
Concepts: discuss usability, discuss input methods
- Designers discuss usability aspects and instructional design principles for ease of use.
- Designers discuss the functionality and implications of different input methods for user experience.

20.
Concepts: cater to user needs, explain and acknowledge feature needs
- The designer highlights the importance of addressing user needs and discusses feature development accordingly.
- The designer explains ongoing efforts to address certain features and acknowledges their necessity based on feedback.

21.
Concepts: enhance usability, address functionality
- Designers emphasize usability and describe ideal use cases to enhance functionality.
- Designers address and describe the functionality of components relevant to user needs.

22.
Concepts: explain design goals, explain design rationale, explain design principles
- Designers explain the intentions behind design choices to minimize user confusion.
- Designers explain the rationale behind user-friendly design choices and development decisions.
- Designers explain the principles guiding their design and development strategies.

23.
Concepts: provide future development plans, share potential future directions, discuss future development directions
- Designers outline and share plans for future developments or project trajectories.
- Designers discuss their personal interests and potential projects that may shape future development directions.
- Designers discuss future development plans and focus areas for software updates.

24.
Concepts: outline development priorities, suggest prioritization of tasks
- Designers prioritize features or topics for development based on community feedback.
- Users recommend a systematic approach to prioritize specific features that will guide the order of task development.

25.
Concepts: express anticipation, engage with development process
- Users express anticipation regarding the status or timeline of updates.
- Users express curiosity about the timing and frequency of future software updates.

26.
Concepts: describe update content, provide development updates
- Designers describe the extent and content of changes in upcoming updates.
- Designers provide updates about the current status, future plans, and changes for the Physics Lab software.

27.
Concepts: answer to a question, suggest future enhancements
- Designer reassures users about the future availability of a feature after final adjustments.
- A designer hints at possible future opportunities for features and assures users of improvements.

28.
Concepts: reciprocate community greetings, acknowledge community support
- Designers acknowledge participants with a friendly greeting.
- Designers express gratitude for community support and initiate ongoing interaction to keep the community engaged.

29.
Concepts: emoji, using expressive communication
- A user included an emoji in their message, indicating a level of expressiveness in communication.
- Users utilize emojis and other non-verbal forms of communication to convey reactions during interactions.

30.
Concepts: confirm user acknowledgment, acknowledge receipt of information
- Users confirm their understanding of previous statements during discussions.
- Users acknowledge receiving information or instructions.

31.
Concepts: review software usability, compare to similar applications
- Users provide reviews and express positive feedback regarding the software's effectiveness.
- Users compare the software favorably against other similar applications, providing comparative feedback.

32.
Concepts: commit to improvements, support and accept a suggestion
- Designers acknowledge user support and commit to incorporating suggested features.
- User supports another's suggestion for improvement, and the designer confirms acceptance of it.

33.
Concepts: confirm collaboration, affirm contributions and feedback
- Designers and users confirm collaborative approaches to feedback gathering.
- Users and designers affirm each other's suggestions and express gratitude for feedback.

34.
Concepts: request specific features, request additional experiments
- Users request new features or enhancements for the Physics Lab tool related to physics experiments.
- Users suggest the inclusion of additional experiments in the software's features.

35.
Concepts: reason for suggestion, suggest convenience and practical use
- User suggests a feature addition based on the needs of modern machines.
- A user suggests features that enhance convenience and practical applications or features for usability.

36.
Concepts: specifics, inquire about compatibility
- Specific inquiries or comments about system compatibility provided by users.
- Users suggest compatible operating systems or inquire about the software's compatibility with different platforms.

37.
Concepts: technical question, inquire about access
- Users ask questions related to accessing, using, or downloading the software.
- Users request guidance on accessing or downloading software versions.

38.
Concepts: provide classroom context, explain internet restrictions
- Users provide context about school policies and discuss restrictions affecting software use.
- Users discuss restrictions on internet access in classrooms and explain institutional limitations.

39.
Concepts: explain common practice, outline network policies
- User explains the common practices or rules regarding technology use in educational settings.
- A user outlines policies regarding network access for educational technology and provides context on software usage.

40.
Concepts: sharing identity per request, share professional background
- A user shares their professional background in education upon request, contributing to the community's understanding.
- Users indicate their professional backgrounds and share personal information to help understand the community's composition.

41.
Concepts: share images, shared experiences and support
- Users and designers share images related to the software or its features during discussions.
- Users and designers sharing experiences and supporting each other in using and improving the software.
===
---
Definitions for each code (41 in total):
1.
Concepts: real time communication, directly communicate with users  
Relationship: Both concepts involve immediate interaction between designers and users to address inquiries and feedback.  
Criteria: Designers engage in immediate communication with users to address their inquiries and discuss features and feedback directly.  
Phrase: Engage in real-time communication.

2.
Concepts: resolve user concerns, provide technical clarification  
Relationship: Both concepts focus on addressing user issues and enhancing understanding through clarification.  
Criteria: Designers address and resolve user concerns by providing technical clarification on issues encountered.  
Phrase: Resolve user concerns.

3.
Concepts: personalized assistance, offering user assistance  
Relationship: These concepts emphasize tailored support provided to users based on their specific needs.  
Criteria: Designers offer personalized assistance and technical support to users, guiding them through issue resolution.  
Phrase: Offer personalized assistance.

4.
Concepts: maintain transparency, provide development transparency  
Relationship: Both concepts involve open communication regarding project progress and challenges.  
Criteria: Designers maintain transparency by communicating openly about project complexities and providing updates on development processes.  
Phrase: Maintain development transparency.

5.
Concepts: explain complexity, explain delays in development  
Relationship: Both concepts relate to clarifying the intricacies of the development process and reasons for progress delays.  
Criteria: Designers explain the complexities of software development and clarify the reasons for any delays encountered.  
Phrase: Explain development complexities.

6.
Concepts: apologize for community disturbances, acknowledge timing inconveniences  
Relationship: Both concepts address the need for consideration and acknowledgment of community norms and timing.  
Criteria: Designers apologize for disturbances and acknowledge any timing inconveniences faced by the community.  
Phrase: Apologize for disturbances.

7.
Concepts: gather user opinions, promise future consultation  
Relationship: Both concepts revolve around the intention to engage with users for feedback and consultation before new developments.  
Criteria: Designers plan to gather user feedback and promise future consultations before initiating new project phases.  
Phrase: Gather user opinions.

8.
Concepts: gather user context, inquire about user backgrounds  
Relationship: Both concepts involve understanding user backgrounds to enhance the relevance of support provided.  
Criteria: Designers gather user context by asking about their teaching environments and professional backgrounds.  
Phrase: Gather user context.

9.
Concepts: clarify version type, seek version clarification  
Relationship: Both concepts focus on understanding and confirming details related to software versions.  
Criteria: Designers clarify the types and statuses of software versions while users seek confirmation on version details.  
Phrase: Clarify software version.

10.
Concepts: share visual references, seek visual confirmation  
Relationship: These concepts involve the use of visual aids to enhance communication and confirm understanding.  
Criteria: Designers share visual references to clarify points, while users seek visual confirmation through shared images.  
Phrase: Share visual references.

11.
Concepts: elaboration, propose and elaborate a suggestion  
Relationship: Both concepts focus on providing detailed explanations or suggestions based on prior experience.  
Criteria: Designers propose suggestions and elaborate on them using detailed examples from prior attempts.  
Phrase: Propose and elaborate suggestions.

12.
Concepts: clarify preference, provide usability feedback on layout  
Relationship: Both concepts emphasize user input regarding design preferences and usability.  
Criteria: Users clarify their layout preferences and provide feedback on interface usability based on their experiences.  
Phrase: Clarify usability preferences.

13.
Concepts: limitation of the team, discuss addressable limitations  
Relationship: Both concepts discuss the constraints faced in development and feedback gathering.  
Criteria: Designers indicate team limitations and discuss potential ways to address or work around these challenges.  
Phrase: Discuss team limitations.

14.
Concepts: address platform limitations, explain software limitations  
Relationship: Both concepts involve understanding and communicating the restrictions of the software and platform compatibility.  
Criteria: Designers explain software limitations and acknowledge potential technical challenges that users may encounter.  
Phrase: Explain software limitations.

15.
Concepts: confirm system compatibility, analyze system compatibility, diagnose compatibility issues  
Relationship: All concepts relate to assessing and confirming compatibility between the software and various systems.  
Criteria: Designers confirm, analyze, and diagnose compatibility issues with different devices and operating systems.  
Phrase: Diagnose compatibility issues.

16.
Concepts: system requirements, consider technical requirements  
Relationship: Both concepts involve outlining and considering the necessary specifications for software use.  
Criteria: Designers outline the system requirements and discuss technical considerations for effective software development.  
Phrase: Outline system requirements.

17.
Concepts: share design thoughts, discuss design adjustments  
Relationship: Both concepts involve sharing insights and making necessary changes to enhance design.  
Criteria: Designers share thoughts on design improvements and engage in discussions about necessary adjustments to features.  
Phrase: Discuss design adjustments.

18.
Concepts: provide download instructions, provide download information  
Relationship: Both concepts focus on informing users about software access and downloading procedures.  
Criteria: Designers explain how to access or download the software and provide clear instructions to users.  
Phrase: Provide download instructions.

19.
Concepts: discuss usability, discuss input methods  
Relationship: Both concepts pertain to evaluating and discussing user experience and interaction methods.  
Criteria: Designers discuss usability aspects and the implications of different input methods for user experience.  
Phrase: Discuss usability aspects.

20.
Concepts: cater to user needs, explain and acknowledge feature needs  
Relationship: Both concepts emphasize the importance of recognizing and addressing user needs in feature development.  
Criteria: Designers highlight the importance of addressing user needs while explaining ongoing efforts to acknowledge feature necessities.  
Phrase: Cater to user needs.

21.
Concepts: enhance usability, address functionality  
Relationship: Both concepts are concerned with improving user experience through enhanced functionality.  
Criteria: Designers emphasize usability and describe functionality to meet user needs effectively.  
Phrase: Enhance usability.

22.
Concepts: explain design goals, explain design rationale, explain design principles  
Relationship: All concepts involve clarifying the intentions and principles guiding design choices.  
Criteria: Designers explain design goals, rationale, and principles to minimize user confusion about their choices.  
Phrase: Explain design rationale.

23.
Concepts: provide future development plans, share potential future directions, discuss future development directions  
Relationship: Both concepts relate to outlining and discussing upcoming development trajectories and focus areas.  
Criteria: Designers outline and share future development plans and discuss potential directions for software updates.  
Phrase: Provide future development plans.

24.
Concepts: outline development priorities, suggest prioritization of tasks  
Relationship: Both concepts involve establishing priorities based on community feedback for effective development.  
Criteria: Designers prioritize development features based on community feedback while users recommend systematic prioritization.  
Phrase: Outline development priorities.

25.
Concepts: express anticipation, engage with development process  
Relationship: Both concepts reflect user interest and engagement regarding the development process and updates.  
Criteria: Users express anticipation about updates and engage with the timeline for future software developments.  
Phrase: Express anticipation.

26.
Concepts: describe update content, provide development updates  
Relationship: Both concepts involve informing users about the specifics of upcoming updates and changes.  
Criteria: Designers describe the content of updates and provide development updates regarding the current status and future plans.  
Phrase: Provide development updates.

27.
Concepts: answer to a question, suggest future enhancements  
Relationship: Both concepts involve responding to user inquiries while hinting at future possibilities.  
Criteria: Designers answer user questions and suggest potential future enhancements based on user feedback.  
Phrase: Suggest future enhancements.

28.
Concepts: reciprocate community greetings, acknowledge community support  
Relationship: Both concepts involve fostering a sense of community through acknowledgment and interaction.  
Criteria: Designers acknowledge community members with greetings and express gratitude for ongoing support.  
Phrase: Acknowledge community support.

29.
Concepts: emoji, using expressive communication  
Relationship: Both concepts emphasize the use of non-verbal cues to enhance communication in the community.  
Criteria: Users utilize emojis and expressive communication to convey reactions and feelings during interactions.  
Phrase: Use expressive communication.

30.
Concepts: confirm user acknowledgment, acknowledge receipt of information  
Relationship: Both concepts highlight the importance of users confirming their understanding of shared information.  
Criteria: Users confirm their understanding of prior statements and acknowledge the receipt of information or instructions.  
Phrase: Confirm user acknowledgment.

31.
Concepts: review software usability, compare to similar applications  
Relationship: Both concepts focus on user evaluations of the software compared to alternatives.  
Criteria: Users provide reviews of software usability and compare it favorably against other similar applications.  
Phrase: Review software usability.

32.
Concepts: commit to improvements, support and accept a suggestion  
Relationship: Both concepts revolve around acknowledgment of user suggestions and commitment to improvement.  
Criteria: Designers commit to incorporating user-supported suggestions for improvements.  
Phrase: Commit to improvements.

33.
Concepts: confirm collaboration, affirm contributions and feedback  
Relationship: Both concepts emphasize collaboration and mutual acknowledgment of contributions in the community.  
Criteria: Designers and users confirm collaborative feedback approaches and affirm each other's contributions.  
Phrase: Confirm collaboration.

34.
Concepts: request specific features, request additional experiments  
Relationship: Both concepts relate to user requests for enhancements to the software.  
Criteria: Users request new features or the inclusion of additional experiments in the Physics Lab tool.  
Phrase: Request specific features.

35.
Concepts: reason for suggestion, suggest convenience and practical use  
Relationship: Both concepts involve proposing user-driven suggestions based on practical needs.  
Criteria: Users suggest features based on the convenience of modern machines and practical usability.  
Phrase: Suggest practical use.

36.
Concepts: specifics, inquire about compatibility  
Relationship: Both concepts focus on detailed inquiries regarding software compatibility with various systems.  
Criteria: Users provide specific inquiries and comments about system compatibility and suggest compatible platforms.  
Phrase: Inquire about compatibility.

37.
Concepts: technical question, inquire about access  
Relationship: Both concepts pertain to user inquiries regarding access and usage of the software.  
Criteria: Users ask technical questions about accessing, using, or downloading the software.  
Phrase: Inquire about access.

38.
Concepts: provide classroom context, explain internet restrictions  
Relationship: Both concepts involve sharing classroom-related limitations that affect software usage.  
Criteria: Users provide context about school policies and discuss internet restrictions affecting software usage.  
Phrase: Provide classroom context.

39.
Concepts: explain common practice, outline network policies  
Relationship: Both concepts relate to sharing knowledge of practices and policies affecting technology use.  
Criteria: Users explain common practices regarding technology use in education and outline network access policies.  
Phrase: Explain common practices.

40.
Concepts: sharing identity per request, share professional background  
Relationship: Both concepts involve sharing personal and professional information to enhance community understanding.  
Criteria: Users share their professional backgrounds upon request to contribute to community knowledge.  
Phrase: Share professional background.

41.
Concepts: share images, shared experiences and support  
Relationship: Both concepts highlight the importance of sharing visuals and experiences to foster community support.  
Criteria: Users and designers share images related to the software while supporting one another in the use and improvement of the software.  
Phrase: Share images and experiences.  
---