You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (32 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
32. 
Concepts: {Repeat the input 32}
Relationship: {What is logical relationship between concepts in code 32, or N/A if not applicable}
Criteria: {Who did what, and how for code 32}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: justify design, explain design
- Justifying design decisions or choices.
- Providing a rationale or explanation for design choices.

2.
Concepts: highlights features, highlights benefits
- Designer highlights a feature or benefit, emphasizing its value to users.
- Designer highlights, explains, or describes the benefits or advantages of a feature or functionality.

3.
Concepts: highlight capabilities, highlighting strengths
- Highlighting the capabilities or features of the software.
- Highlighting the strengths or practicality of the software.

4.
Concepts: experimental details, outlining experimental details
- A designer adds experimental details or features.
- A designer outlines experimental details or features.

5.
Concepts: provides technical details, clarifies technical details
- Designer provides technical specifications or details.
- Designer clarifies or confirms technical details or specifications.

6.
Concepts: explaining technicalities, explains technical features
- Designer explains technicalities.
- Designer explains technical improvements or new features.

7.
Concepts: details features, provides feature details
- Designer details, outlines, or highlights the features or functionalities of the software.
- Designer provides specific details or explanations about the software or its features.

8.
Concepts: demonstrates functionality, illustrates feature functionality
- Designer demonstrates the functionality of a feature or tool by providing examples or explanations of its capabilities.
- Designer illustrates or explains the functionality of a feature by giving an example of how it works.

9.
Concepts: explains functionality, explains component functionality
- Designer explains how a feature or component works.
- Designer addresses or explains the functionality of a feature, providing technical explanations or design details.
- Designer explains or clarifies the functionality or features of a specific component.

10.
Concepts: explains usage, provides instructions
- Designer explains how to use the software or a specific feature, providing instructions or guidelines.
- Designer provides instructions or guidance on how to use a feature or functionality.

11.
Concepts: provides examples, provides visual aids
- Designer provides examples, visual examples, or illustrations to explain a concept or feature.
- Designer shares an image to aid understanding, communicating through visual aids.

12.
Concepts: educates users, promotes understanding
- Designer educates users, facilitating understanding by explaining how to use a feature or component.
- Designer promotes understanding by providing explanations or clarifications about the application's features or functionalities.

13.
Concepts: clarifying version type, informs about software version
- Designer clarifies the type of software version.
- Designer informs about the current software version or clarifies update availability.

14.
Concepts: acknowledge clarification, correcting previous statement
- Designers acknowledge clarification or previous statements.
- Designer corrects or clarifies previous statement.

15.
Concepts: clarifies details, clarifying update details
- Designer provides additional information or clarification on a topic.
- A designer clarifies details about an update.

16.
Concepts: considering limitations, acknowledging limitations
- A designer considers limitations or evaluates implementation constraints.
- A designer acknowledges limitations or constraints of a feature or idea.

17.
Concepts: mentioning technical limitations, communicating technical limitations
- A designer or user mentions technical limitations or highlights constraints.
- Designers communicate technical limitations or constraints directly to users.

18.
Concepts: explaining system limitations, discussing software limitations, explaining design limitations
- A designer explains system limitations or constraints.
- A designer discusses software limitations or explains constraints.
- A designer explains design limitations or clarifies constraints.

19.
Concepts: specifying system compatibility, suggesting system compatibility check
- Designers specify or confirm system compatibility or software compatibility.
- Designer suggests checking the compatibility of the system with certain platforms or devices.

20.
Concepts: addressing compatibility issues, considering technical compatibility
- Designers address compatibility issues or limitations.
- A designer considers technical limitations or compatibility issues.

21.
Concepts: informing system requirements, providing system compatibility information
- Speakers inform or clarify the system requirements for the software.
- Speakers provide information or answer questions about system compatibility.

22.
Concepts: acknowledging diverse user needs, demonstrating awareness of diverse user environments
- Designers acknowledge and respond to diverse user needs and environments.
- Recognizing and accommodating diverse user environments

23.
Concepts: offering workarounds, sharing workarounds
- Designers offer temporary solutions or workarounds for issues.
- Designers share workarounds or temporary solutions to technical issues.

24.
Concepts: weighing design options, considering design options
- A designer weighs design options or trade-offs.
- A designer considers multiple design options or approaches.

25.
Concepts: exploring technical constraints, theorizing technical possibilities
- A designer explores technical constraints or outlines technical possibilities.
- Designers theorize or explore technical possibilities or solutions.

26.
Concepts: suggesting alternative systems, suggesting alternative approaches, offering alternative solutions
- Designers or users suggest alternative solutions or systems.
- Users or designers suggest alternative solutions or approaches.
- Designers or users offer alternative solutions, workarounds, or approaches.

27.
Concepts: adapting to user needs, adapting to user feedback
- A designer adapts to user needs or context by adjusting the design.
- A designer adapts to user feedback or suggestions by demonstrating adaptability.

28.
Concepts: sharing development updates, updating on development progress
- Sharing updates or progress on development.
- Updating on software development progress or timelines.

29.
Concepts: providing status updates, updating on ongoing work
- Status update or progress report is provided.
- Updates or statements about ongoing work or development.

30.
Concepts: discussing feature updates, explaining feature updates
- Speakers discuss or list upcoming features or updates.
- Speakers explain or outline upcoming features or updates.

31.
Concepts: documenting updates, sharing release notes
- Speakers list or document updates or changes to the software.
- Speakers share information about software releases or updates.

32.
Concepts: notifying users of changes, announcing component updates
- Speakers inform users about changes or updates to the software.
- Speakers announce or update components, features, or functionalities.
===
Here are the definitions for each code:

---
1.
Concepts: justify design, explain design
Relationship: The concepts are related as designers provide explanations to justify their design decisions.
Criteria: Designers provide explanations for their design choices.
Phrase: Justifying design decisions.

2.
Concepts: highlights features, highlights benefits
Relationship: The concepts are related as designers highlight features to emphasize their benefits.
Criteria: Designers emphasize the value of features to users.
Phrase: Highlighting features and benefits.

3.
Concepts: highlight capabilities, highlighting strengths
Relationship: The concepts are related as designers highlight the capabilities to demonstrate the strengths of the software.
Criteria: Designers demonstrate the software's capabilities and strengths.
Phrase: Highlighting software capabilities and strengths.

4.
Concepts: experimental details, outlining experimental details
Relationship: The concepts are related as designers provide experimental details to outline new features.
Criteria: Designers add and outline experimental features or details.
Phrase: Outlining experimental details.

5.
Concepts: provides technical details, clarifies technical details
Relationship: The concepts are related as designers provide technical details to clarify specifications.
Criteria: Designers provide and clarify technical specifications.
Phrase: Providing technical details.

6.
Concepts: explaining technicalities, explains technical features
Relationship: The concepts are related as designers explain technicalities to clarify features.
Criteria: Designers explain technical features and improvements.
Phrase: Explaining technical features.

7.
Concepts: details features, provides feature details
Relationship: The concepts are related as designers provide feature details to outline functionalities.
Criteria: Designers provide details about software features and functionalities.
Phrase: Providing feature details.

8.
Concepts: demonstrates functionality, illustrates feature functionality
Relationship: The concepts are related as designers demonstrate functionality to illustrate features.
Criteria: Designers demonstrate and illustrate feature functionality.
Phrase: Demonstrating feature functionality.

9.
Concepts: explains functionality, explains component functionality
Relationship: The concepts are related as designers explain functionality to clarify component features.
Criteria: Designers explain component functionality and features.
Phrase: Explaining functionality.

10.
Concepts: explains usage, provides instructions
Relationship: The concepts are related as designers explain usage to provide instructions.
Criteria: Designers explain software usage and provide instructions.
Phrase: Explaining software usage.

11.
Concepts: provides examples, provides visual aids
Relationship: The concepts are related as designers provide examples to aid understanding through visual aids.
Criteria: Designers provide examples and visual aids to explain concepts.
Phrase: Providing examples and visual aids.

12.
Concepts: educates users, promotes understanding
Relationship: The concepts are related as designers educate users to promote understanding.
Criteria: Designers educate users and promote understanding of features.
Phrase: Educating users.

13.
Concepts: clarifying version type, informs about software version
Relationship: The concepts are related as designers clarify version types to inform about software versions.
Criteria: Designers clarify software versions and inform about updates.
Phrase: Clarifying software versions.

14.
Concepts: acknowledge clarification, correcting previous statement
Relationship: The concepts are related as designers acknowledge clarification to correct previous statements.
Criteria: Designers acknowledge and correct previous statements.
Phrase: Acknowledging and correcting statements.

15.
Concepts: clarifies details, clarifying update details
Relationship: The concepts are related as designers clarify details to provide additional information.
Criteria: Designers provide additional information and clarify details.
Phrase: Clarifying details.

16.
Concepts: considering limitations, acknowledging limitations
Relationship: The concepts are related as designers consider limitations to acknowledge constraints.
Criteria: Designers acknowledge and consider limitations and constraints.
Phrase: Considering limitations.

17.
Concepts: mentioning technical limitations, communicating technical limitations
Relationship: The concepts are related as designers mention technical limitations to communicate constraints.
Criteria: Designers communicate technical limitations and constraints.
Phrase: Communicating technical limitations.

18.
Concepts: explaining system limitations, discussing software limitations, explaining design limitations
Relationship: The concepts are related as designers explain system limitations to discuss software and design constraints.
Criteria: Designers explain system, software, and design limitations.
Phrase: Explaining limitations.

19.
Concepts: specifying system compatibility, suggesting system compatibility check
Relationship: The concepts are related as designers specify system compatibility to suggest checks.
Criteria: Designers specify system compatibility and suggest checks.
Phrase: Specifying system compatibility.

20.
Concepts: addressing compatibility issues, considering technical compatibility
Relationship: The concepts are related as designers address compatibility issues to consider technical limitations.
Criteria: Designers address compatibility issues and consider technical limitations.
Phrase: Addressing compatibility issues.

21.
Concepts: informing system requirements, providing system compatibility information
Relationship: The concepts are related as designers inform system requirements to provide compatibility information.
Criteria: Designers inform system requirements and provide compatibility information.
Phrase: Informing system requirements.

22.
Concepts: acknowledging diverse user needs, demonstrating awareness of diverse user environments
Relationship: The concepts are related as designers acknowledge diverse user needs to demonstrate awareness of environments.
Criteria: Designers acknowledge and respond to diverse user needs and environments.
Phrase: Acknowledging diverse user needs.

23.
Concepts: offering workarounds, sharing workarounds
Relationship: The concepts are related as designers offer workarounds to share temporary solutions.
Criteria: Designers offer and share workarounds for technical issues.
Phrase: Offering workarounds.

24.
Concepts: weighing design options, considering design options
Relationship: The concepts are related as designers weigh design options to consider trade-offs.
Criteria: Designers weigh and consider design options and trade-offs.
Phrase: Weighing design options.

25.
Concepts: exploring technical constraints, theorizing technical possibilities
Relationship: The concepts are related as designers explore technical constraints to theorize possibilities.
Criteria: Designers explore technical constraints and theorize possibilities.
Phrase: Exploring technical constraints.

26.
Concepts: suggesting alternative systems, suggesting alternative approaches, offering alternative solutions
Relationship: The concepts are related as designers suggest alternative systems to offer alternative solutions.
Criteria: Designers suggest alternative systems, approaches, and solutions.
Phrase: Suggesting alternative solutions.

27.
Concepts: adapting to user needs, adapting to user feedback
Relationship: The concepts are related as designers adapt to user needs to respond to feedback.
Criteria: Designers adapt to user needs and feedback.
Phrase: Adapting to user needs.

28.
Concepts: sharing development updates, updating on development progress
Relationship: The concepts are related as designers share updates to provide development progress.
Criteria: Designers share updates and provide development progress.
Phrase: Sharing development updates.

29.
Concepts: providing status updates, updating on ongoing work
Relationship: The concepts are related as designers provide status updates to update on ongoing work.
Criteria: Designers provide status updates and update on ongoing work.
Phrase: Providing status updates.

30.
Concepts: discussing feature updates, explaining feature updates
Relationship: The concepts are related as designers discuss feature updates to explain upcoming changes.
Criteria: Designers discuss and explain upcoming feature updates.
Phrase: Discussing feature updates.

31.
Concepts: documenting updates, sharing release notes
Relationship: The concepts are related as designers document updates to share release notes.
Criteria: Designers document updates and share release notes.
Phrase: Documenting updates.

32.
Concepts: notifying users of changes, announcing component updates
Relationship: The concepts are related as designers notify users of changes to announce component updates.
Criteria: Designers notify users of changes and announce component updates.
Phrase: Notifying users of changes.