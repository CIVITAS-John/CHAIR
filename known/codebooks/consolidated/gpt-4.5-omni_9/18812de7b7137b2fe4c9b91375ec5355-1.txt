You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (26 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
26. 
Concepts: {Repeat the input 26}
Relationship: {What is logical relationship between concepts in code 26, or N/A if not applicable}
Criteria: {Who did what, and how for code 26}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: share update timelines, highlight ongoing updates
- Designers provide specific timelines and visual previews for upcoming updates.
- Designers highlight and show evidence of the ongoing progress of updates.

2.
Concepts: detail update specifics, confirm and detail updates
- Designers provide detailed information about the upcoming or current software versions.
- Designers confirm and provide detailed content about upcoming software updates.

3.
Concepts: schedule software updates, adjust and inform feature changes
- Participants discuss and provide a planned schedule for future software updates.
- Participants discuss required adjustments and inform others about changes to software features.

4.
Concepts: prioritizing development, optimize feature development
- Designers discuss and prioritize the development of specific features.
- Designers discuss their current efforts towards the development and optimization of features.

5.
Concepts: project planning, discuss future development plans
- When plans for future projects or developments are discussed.
- Participants discuss plans and potential directions for future software development.

6.
Concepts: engaging in iterative development, plan iterative feedback
- Designers discuss ongoing updates and refinements based on feedback
- Designers gather feedback or suggestions in a structured way to inform future development before proceeding with certain aspects.

7.
Concepts: inquire about user needs, gather user design feedback
- Designers inquire about the community's needs and preferences, acknowledging how feedback may influence future implementations.
- Designers seek and gather user input for software development, specifically focusing on design and user experience feedback.

8.
Concepts: incorporate user feedback, react to user feedback
- Designers acknowledge feedback and consider it for future changes.
- Designers react to a user's story or feedback by indicating planned updates or changes.

9.
Concepts: user communication, communicate directly
- A designer communicates updates or plans directly to users.
- Designers and users communicate directly regarding feedback and updates.

10.
Concepts: balance user needs, discuss usability enhancements
- Participants consider and discuss efforts to meet user needs in design or functionality.
- Participants discuss and highlight areas in need of usability and interface improvements.

11.
Concepts: giving reasoned suggestions, justify and request features
- Users provide feedback or suggestions with justifications.
- Users explain the necessity and detail specific requests for future features.

12.
Concepts: address technical constraints, providing technical clarifications
- Designers discuss technical constraints and consider hardware limitations within software design.
- Designers clarify technical capabilities or requirements for software or hardware.

13.
Concepts: component functionality, explain software features
- A designer discussing the functionality and utility of a specific component within the software.
- Designers provide examples and detailed explanations of specific technical aspects and software features.

14.
Concepts: transparency, ensuring development transparency
- Being transparent about complexities and delays in development.
- Designers inform the community about development processes, challenges, and progress

15.
Concepts: explain delays, feature complexity
- Designers provide explanations for delays and the complexity involved in tasks.
- A designer indicating that a feature is complex and will delay the release.

16.
Concepts: exchange educational experiences, illustrate classroom success
- Users share their experiences with the software in classroom settings.
- Users describe successful use and positive student reactions to the software in a classroom or instructional setting.

17.
Concepts: school needs, emphasize educational needs
- Discussion around the needs and requirements specific to a school or educational institution.
- Users highlight and emphasize educational needs specific to school initiatives.

18.
Concepts: pose technical inquiries, seek software guidance
- Users ask multiple technical questions about the software's usage and troubleshooting.
- Users request instructions, guidance, or documentation to understand and use particular software features.

19.
Concepts: rationalize design choices, justify actions with reasoning
- Participants justify design decisions by explaining their underlying reasoning and plans.
- Participants provide rationales for their actions or decisions to justify their efforts.

20.
Concepts: question, clarification questions
- Asking questions or clarifications from the community or designers.
- Asking for clarification or problems faced by users.

21.
Concepts: promote information sharing, share problem-solving solutions
- Participants share insights or resources and encourage collective sharing to solve problems or answer questions.
- Participants address issues, offer solutions, and share approaches to potential problems based on feedback.

22.
Concepts: affirm shared focus, confirm collaborative agreements
- Participants agree with and confirm previously discussed areas or statements.
- Participants express agreement and confirm collaborative efforts.

23.
Concepts: identifying roles, identify community members
- Participants identify their roles or expertise within the community
- Participants ask and reveal roles or identities to establish trust or context.

24.
Concepts: appreciate dedication, appreciate craftsmanship
- Users express appreciation for the designer's attention to quality and detail.
- Participants appreciate and compliment specific features or the overall craftsmanship of the software.

25.
Concepts: express appreciation, acknowledge contributions
- Users or designers express gratitude for efforts and contributions made.
- Users validate and express thanks for contributions and support given by others.

26.
Concepts: initiate interaction, welcome new participants
- A community member initiates interaction with a greeting or introductory statement.
- New users introduce themselves and the community reciprocates with greetings and welcomes.
===
---
Definitions for each code (26 in total):
1.
Concepts: share update timelines, highlight ongoing updates
Relationship: Highlights ongoing updates and provides specific timelines.
Criteria: Designers provide specific visual previews and evidence of ongoing update progress.
Phrase: Communicating update timelines

2.
Concepts: detail update specifics, confirm and detail updates
Relationship: Provides detailed and confirmed information about updates.
Criteria: Designers confirm and give detailed content on upcoming or current software versions.
Phrase: Detailing update specifics

3.
Concepts: schedule software updates, adjust and inform feature changes
Relationship: Schedules updates and informs of feature changes.
Criteria: Participants discuss scheduled updates and necessary feature adjustments.
Phrase: Planning and adjusting updates

4.
Concepts: prioritizing development, optimize feature development
Relationship: Prioritizes and optimizes feature development.
Criteria: Designers discuss prioritization and optimization of specific feature developments.
Phrase: Optimizing feature development

5.
Concepts: project planning, discuss future development plans
Relationship: Discusses planning and future development.
Criteria: Participants discuss plans and potential future software development directions.
Phrase: Planning future development

6.
Concepts: engaging in iterative development, plan iterative feedback
Relationship: Iteratively develops based on planned feedback.
Criteria: Designers discuss updates based on structured feedback to inform next development steps.
Phrase: Iterative development planning

7.
Concepts: inquire about user needs, gather user design feedback
Relationship: Inquires and gathers feedback from users.
Criteria: Designers seek user input on design and preferences for future implementations.
Phrase: Gathering user design feedback

8.
Concepts: incorporate user feedback, react to user feedback
Relationship: Acknowledges and reacts to user feedback.
Criteria: Designers consider and react to user feedback for future updates or changes.
Phrase: Responding to user feedback

9.
Concepts: user communication, communicate directly
Relationship: Communicates directly with users.
Criteria: Designers and users engage in direct communication about updates and feedback.
Phrase: Direct user communication

10.
Concepts: balance user needs, discuss usability enhancements
Relationship: Balances and discusses user needs and usability.
Criteria: Participants discuss efforts to meet user needs and highlight usability improvements.
Phrase: Enhancing usability and meeting user needs

11.
Concepts: giving reasoned suggestions, justify and request features
Relationship: Justifies and requests features with reasoning.
Criteria: Users provide and justify feedback or feature requests for future updates.
Phrase: Offering reasoned suggestions

12.
Concepts: address technical constraints, providing technical clarifications
Relationship: Addresses constraints and provides clarifications.
Criteria: Designers discuss constraints and clarify technical capabilities or requirements.
Phrase: Clarifying technical constraints

13.
Concepts: component functionality, explain software features
Relationship: Explains functionality and features.
Criteria: Designers explain specific components and provide examples of software features.
Phrase: Explaining software functionality

14.
Concepts: transparency, ensuring development transparency
Relationship: Ensures and maintains transparency.
Criteria: Designers inform the community about development processes, challenges, and progress.
Phrase: Ensuring development transparency

15.
Concepts: explain delays, feature complexity
Relationship: Explains delays due to complexity.
Criteria: Designers explain the complexity and associated delays of features.
Phrase: Explaining feature delays

16.
Concepts: exchange educational experiences, illustrate classroom success
Relationship: Shares and illustrates experiences and success in education.
Criteria: Users share experiences and describe success in using the software in classroom settings.
Phrase: Sharing educational success

17.
Concepts: school needs, emphasize educational needs
Relationship: Discusses and emphasizes educational needs.
Criteria: Users discuss and highlight needs specific to school or educational initiatives.
Phrase: Highlighting educational needs

18.
Concepts: pose technical inquiries, seek software guidance
Relationship: Inquires and seeks guidance on technical aspects.
Criteria: Users ask technical questions and request guidance or documentation on software use.
Phrase: Seeking software guidance

19.
Concepts: rationalize design choices, justify actions with reasoning
Relationship: Explains and justifies decisions with reasoning.
Criteria: Participants justify design decisions by explaining their rationale and plans.
Phrase: Justifying design choices

20.
Concepts: question, clarification questions
Relationship: Asks questions for clarification.
Criteria: Users ask for clarifications or explanations about problems.
Phrase: Seeking clarification

21.
Concepts: promote information sharing, share problem-solving solutions
Relationship: Shares information and solutions.
Criteria: Participants share insights and resources to collectively solve problems or answer questions.
Phrase: Sharing problem-solving solutions

22.
Concepts: affirm shared focus, confirm collaborative agreements
Relationship: Confirms agreements and shared focus.
Criteria: Participants affirm their agreement and confirm collaborative efforts.
Phrase: Confirming collaborative focus

23.
Concepts: identifying roles, identify community members
Relationship: Identifies roles and community members.
Criteria: Participants reveal their roles or expertise to establish context and trust.
Phrase: Identifying community roles

24.
Concepts: appreciate dedication, appreciate craftsmanship
Relationship: Expresses appreciation for dedication and quality.
Criteria: Users express appreciation for designer's attention to quality and detail in the software.
Phrase: Appreciating craftsmanship

25.
Concepts: express appreciation, acknowledge contributions
Relationship: Expresses and acknowledges appreciation.
Criteria: Users acknowledge and express gratitude for efforts and contributions made.
Phrase: Acknowledging contributions

26.
Concepts: initiate interaction, welcome new participants
Relationship: Initiates and welcomes new interactions.
Criteria: Community members greet new participants with introductions and welcomes.
Phrase: Welcoming new participants
---