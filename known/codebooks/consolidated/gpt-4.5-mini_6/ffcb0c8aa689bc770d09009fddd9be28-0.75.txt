You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (43 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
43. 
Concepts: {Repeat the input 43}
Relationship: {What is logical relationship between concepts in code 43, or N/A if not applicable}
Criteria: {Who did what, and how for code 43}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: co-designing with users, involving users in design
- Designers invite users to contribute and participate actively in the design process.
- Designers involve users in design processes and seek feedback on user experiences.

2.
Concepts: posing design questions, validating user requests
- Designers ask for detailed input on user needs through design-related questions.
- Designers validate user needs and seek confirmation regarding specific queries.

3.
Concepts: inquire about roles, gather contextual information
- Designers inquire about users' roles and backgrounds to better support their needs.
- Designers ask for background information to gather context regarding users' experiences.

4.
Concepts: responding quickly, address inquiries
- Designers provide prompt responses to user requests for information or materials.
- Designers respond to user inquiries and initial questions with accurate and helpful information.

5.
Concepts: align with user needs, balancing user needs
- Designers align software features with user and educational needs.
- Designers seek to accommodate various user needs through suggested solutions.

6.
Concepts: address usability concerns, offer and commit to solutions
- Designers address usability concerns in software design and implementation to resolve user issues.
- Designers provide solutions to user problems and commit to addressing user needs effectively.

7.
Concepts: inquiring about problems, diagnosing software issues
- Designers inquire about specific user issues to identify areas requiring troubleshooting.
- Designers analyze compatibility issues and diagnose software problems based on user inquiries.

8.
Concepts: show consideration, acknowledging timing issues
- Designers apologize and show consideration towards users.
- Designers express regret for communication timing that may disturb users and apologize for any inconvenience caused.

9.
Concepts: managing version releases, share platform-specific updates
- Designers provide timelines for software updates specific to various platforms.
- Designers provide updates specific to software versions across platforms.

10.
Concepts: sharing visual updates, communicating internal updates
- Designers highlight progress made in software updates and share visual information.
- Designers communicate and document internal changes and software updates.

11.
Concepts: community update, announce software improvements
- Instances where designers provide updates or announcements about the software.
- Designers announced and shared updates and improvements to inform users about new software features and version details.

12.
Concepts: highlighting new components, outlining update features
- Designers list new features and adjustments made in recent updates.
- Designers outline and preview specific features included in upcoming software updates.

13.
Concepts: commit to improvement, committing to feature implementation
- Designers express commitment to improving the software based on user feedback and support.
- Designers commit to implementing features in forthcoming software updates.

14.
Concepts: plan future updates, outline development plans
- Designers plan and share their anticipated timelines and considerations for future software updates.
- Designers outline their development plans and the timeline for upcoming software features.

15.
Concepts: directing users to resources, providing access to resources
- Designers provide instructions and direct users to accessible resources or files.
- Designers provide access information regarding resources related to the software.

16.
Concepts: sharing download information, gives a more detailed and specific answer
- Designers provide instructions and information about downloading the software and updates.
- The designer provides specific instructions on how to download the software from group files.

17.
Concepts: specifying system requirements, assessing system compatibility
- Designers specify the necessary system requirements for the software's correct function.
- Designers assess system compatibility requirements and provide guidance based on specifications.

18.
Concepts: providing technical details, discussing technical considerations
- Designers detail technical aspects and adjustments made to software components.
- Designers discuss technical aspects that need consideration for software functionality.

19.
Concepts: introduce new functionalities, propose design ideas and solutions
- Designers address specific functionalities and introduce new feature functions for software applications.
- Designers propose design ideas and potential solutions to enhance software performance.

20.
Concepts: potential update, adjust design features
- Designers identify potential areas for future updates or improvements based on user needs.
- Designers identify the need for adjustments related to design features and functionality.

21.
Concepts: encouraging elaboration, elaborating on suggestions
- Designers encourage users to elaborate on their needs to enhance involvement.
- Designers elaborate on suggestions by providing specific examples or illustrations.

22.
Concepts: explaining design goals, explaining design rationale
- Designers explain their design objectives and how they aim to facilitate user experience.
- Designers explain the rationale behind the software's design for ease of use.

23.
Concepts: simulation enhancement, explaining simulation details
- The designer highlights improvements made to the software's simulation capabilities.
- Designers discuss simulation accuracy and elaborate on how updates will affect performance.

24.
Concepts: teaching, clarifying testing status
- The designer provided context regarding the current testing version of the circuit diagram feature.
- Designers indicate that a version is in the testing phase and clarify its purpose.

25.
Concepts: communicating complexity, communicating design challenges
- Designers explain the complexities involved in software features and compare them.
- Designers communicate the complexity of tasks and obstacles that may delay completion.

26.
Concepts: express approval and compliments, compliment on the app's evolution
- Users express admiration and approval for features or ideas presented in the software.
- Users express positive feedback regarding the progress and development of the application.

27.
Concepts: emphasizing craftsmanship, acknowledge dedication and craftsmanship
- Users reference the importance of quality and craftsmanship in software development.
- Users acknowledge dedication and craftsmanship put into software development.

28.
Concepts: self-solve issues, practice self-help
- Users acknowledge resolving their problems independently through shared resources.
- Users express gratitude for independently accessing shared materials, demonstrating self-sufficiency.

29.
Concepts: resource utilization, acknowledge helpful resources
- A user expressed gratitude for the resources available in the group files.
- Users express gratitude for assistance and acknowledge retrieving relevant community files.

30.
Concepts: maintaining transparency, ensuring development transparency
- Designers engage in open discussions and maintain transparency about software development.
- Designers provided detailed information about development processes to maintain transparency with the community.

31.
Concepts: offering co-designing, promising future consultation, communicating project plans
- Designers communicate intentions to involve the community in the development process through consultations.
- Designers promise to gather community feedback before starting new developments.
- Designers outline plans for future developments and invite feedback from the community.

32.
Concepts: collaborative learning, promoting resource sharing
- Designers promote collaborative learning through shared experiences or resources within the community.
- Designers emphasize the importance of sharing resources and propose group sharing among community members.

33.
Concepts: humor, engage in humorous exchanges
- Users express humor or light-heartedness in their comments or responses.
- Designers express humor and respond to light-hearted comments.

34.
Concepts: provide community context, contextualizing response
- Users contextualize their experiences or needs within institutional developments.
- Users provide context for their comments, often relating to past experiences that shape their needs.

35.
Concepts: discuss user contexts, share personal anecdotes
- Users discuss specific contexts and share experiences using the software.
- Users share personal anecdotes impacting software usage and follow-up on design information.

36.
Concepts: personal connection, build rapport with users
- Users and designers share experiences or ask about teaching backgrounds to create a personal connection.
- Designers build rapport by inquiring about users' teaching backgrounds during interactions.

37.
Concepts: product gap, explain system limitations
- Users articulate gaps in functionality that hinder their desired use of the software.
- Users share experiences about technology limitations impacting software usability.

38.
Concepts: limitation of the team, explaining software limitations
- Designers express the limitations faced by the team in development processes.
- Designers explain and acknowledge potential limitations in software functionality.

39.
Concepts: seek technical support, seek technical assistance
- Users request instructions and seek help regarding the software's features.
- Designer seeks help from the community on a technical issue regarding the software.

40.
Concepts: ask about update status, inquire about platform updates
- Users inquire about upcoming updates and their statuses.
- Users inquire about functionalities or express interest in recent platform developments.

41.
Concepts: make inquiries about software, pose technical inquiries
- Designers and users ask questions to clarify specific software functionalities.
- Users pose questions related to software functionality, indicating areas of interest or potential issues.

42.
Concepts: acknowledge user needs, indicate potential user needs
- Users express the need for specific features, and designers acknowledge these necessities.
- Users affirm or acknowledge queries or statements made in the discussion.

43.
Concepts: propose software enhancements
- Users suggest new features and improvements for the software.
- Users propose the inclusion of additional features or experiments within the software.
===
---
Definitions for each code (43 in total):
1.
Concepts: co-designing with users, involving users in design
Relationship: The concepts are logically related as both involve user participation in the design process, emphasizing active collaboration.
Criteria: Designers invite users to contribute actively and seek feedback throughout the design process.
Phrase: Engaging users in co-design.

2.
Concepts: posing design questions, validating user requests
Relationship: The concepts are linked as both involve communication between designers and users to ensure the design meets user needs.
Criteria: Designers ask detailed questions to gather input and validate user needs through confirmation.
Phrase: Validating user input through inquiries.

3.
Concepts: inquire about roles, gather contextual information
Relationship: These concepts are interconnected as understanding user roles provides context that aids in design adaptations.
Criteria: Designers ask about users' backgrounds and roles to gather relevant contextual information for support.
Phrase: Gathering contextual user information.

4.
Concepts: responding quickly, address inquiries
Relationship: The concepts are related as they both describe the timely and effective response of designers to user inquiries.
Criteria: Designers provide prompt and accurate responses to user requests for information.
Phrase: Addressing user inquiries swiftly.

5.
Concepts: align with user needs, balancing user needs
Relationship: These concepts are related as they both focus on ensuring that design solutions meet the diverse needs of users.
Criteria: Designers align software features with user needs while accommodating various educational requirements.
Phrase: Balancing user needs in design.

6.
Concepts: address usability concerns, offer and commit to solutions
Relationship: The concepts are related as they both involve taking action to resolve user issues regarding usability.
Criteria: Designers address usability concerns and provide solutions while committing to user needs.
Phrase: Resolving usability concerns.

7.
Concepts: inquiring about problems, diagnosing software issues
Relationship: These concepts are logically related, as diagnosing issues requires prior inquiry to understand user problems.
Criteria: Designers inquire about specific issues to diagnose and troubleshoot software problems.
Phrase: Diagnosing user-reported issues.

8.
Concepts: show consideration, acknowledging timing issues
Relationship: The concepts are related as both involve recognizing and addressing the user experience regarding communication.
Criteria: Designers show consideration and apologize for any timing issues that may affect users.
Phrase: Acknowledging timing concerns.

9.
Concepts: managing version releases, share platform-specific updates
Relationship: These concepts are connected as both pertain to the communication of software update timelines across different platforms.
Criteria: Designers provide timelines and updates specific to software versions for various platforms.
Phrase: Sharing version release updates.

10.
Concepts: sharing visual updates, communicating internal updates
Relationship: The concepts are related as they both involve providing information about ongoing changes and progress in software development.
Criteria: Designers highlight progress and share visual documentation of internal updates.
Phrase: Communicating software updates visually.

11.
Concepts: community update, announce software improvements
Relationship: These concepts are interconnected as both involve informing the community about changes and enhancements in the software.
Criteria: Designers provide announcements about software updates and improvements to keep users informed.
Phrase: Announcing community updates.

12.
Concepts: highlighting new components, outlining update features
Relationship: The concepts are related as both involve detailing new features introduced in software updates.
Criteria: Designers list and outline new features and adjustments made in recent updates.
Phrase: Outlining new software features.

13.
Concepts: commit to improvement, committing to feature implementation
Relationship: These concepts are logically related, as commitment to improvement involves implementing user-feedback-driven features.
Criteria: Designers express commitment to improving the software and implementing suggested features.
Phrase: Committing to software enhancements.

14.
Concepts: plan future updates, outline development plans
Relationship: The concepts are interrelated as both involve strategizing and communicating future software development timelines and goals.
Criteria: Designers share anticipated timelines and outline development plans for future updates.
Phrase: Planning future software updates.

15.
Concepts: directing users to resources, providing access to resources
Relationship: These concepts are connected as both relate to assisting users in finding and accessing necessary resources.
Criteria: Designers provide instructions and access information to users regarding relevant resources.
Phrase: Guiding users to resources.

16.
Concepts: sharing download information, gives a more detailed and specific answer
Relationship: The concepts are logically related, as providing detailed download information is essential for user understanding and access.
Criteria: Designers share specific instructions on how to download software and updates.
Phrase: Providing detailed download instructions.

17.
Concepts: specifying system requirements, assessing system compatibility
Relationship: The concepts are related as specifying requirements helps in assessing and ensuring system compatibility.
Criteria: Designers specify necessary system requirements and assess compatibility for proper software function.
Phrase: Specifying system compatibility requirements.

18.
Concepts: providing technical details, discussing technical considerations
Relationship: These concepts are connected as both involve the articulation of technical aspects relevant to software functionality.
Criteria: Designers provide detailed technical information and discuss necessary considerations for software function.
Phrase: Detailing technical aspects.

19.
Concepts: introduce new functionalities, propose design ideas and solutions
Relationship: The concepts are logically related as introducing functionalities often stems from proposed design ideas to improve software.
Criteria: Designers address and introduce new functionalities while proposing ideas for software enhancement.
Phrase: Proposing new software functionalities.

20.
Concepts: potential update, adjust design features
Relationship: These concepts are related as identifying potential updates often involves adjusting existing design features.
Criteria: Designers identify areas for potential updates or improvements based on user feedback.
Phrase: Identifying potential design adjustments.

21.
Concepts: encouraging elaboration, elaborating on suggestions
Relationship: The concepts are logically intertwined as encouraging elaboration fosters a deeper understanding of user needs.
Criteria: Designers encourage users to elaborate on their needs and provide detailed responses to suggestions.
Phrase: Encouraging elaboration of user input.

22.
Concepts: explaining design goals, explaining design rationale
Relationship: These concepts are related as both aim to clarify the purpose and reasoning behind design decisions for users.
Criteria: Designers explain their design objectives and the rationale behind the software's functionality.
Phrase: Clarifying design goals and rationale.

23.
Concepts: simulation enhancement, explaining simulation details
Relationship: The concepts are related as improving simulation capabilities requires detailing the enhancements made.
Criteria: Designers highlight improvements in simulation capabilities and explain their impacts on performance.
Phrase: Enhancing simulation features.

24.
Concepts: teaching, clarifying testing status
Relationship: These concepts are related as providing context about testing phases serves an educational purpose for users.
Criteria: Designers clarify the current testing status of features and provide educational context regarding their use.
Phrase: Teaching about testing phases.

25.
Concepts: communicating complexity, communicating design challenges
Relationship: These concepts are logically connected as explaining complexities helps users understand the challenges faced in design.
Criteria: Designers communicate the complexities and challenges involved in software design.
Phrase: Communicating design complexities.

26.
Concepts: express approval and compliments, compliment on the app's evolution
Relationship: These concepts are connected as both involve user feedback reflecting admiration for software developments.
Criteria: Users express admiration and positive feedback regarding the evolution of the software.
Phrase: Complimenting software evolution.

27.
Concepts: emphasizing craftsmanship, acknowledge dedication and craftsmanship
Relationship: The concepts are related as both emphasize the importance of quality and dedication in the software development process.
Criteria: Users acknowledge the importance of craftsmanship and dedication in software development.
Phrase: Acknowledging craftsmanship in development.

28.
Concepts: self-solve issues, practice self-help
Relationship: These concepts are logically related as users practicing self-help reflects their ability to resolve issues independently.
Criteria: Users acknowledge their ability to resolve problems through shared resources, demonstrating self-sufficiency.
Phrase: Practicing self-help effectively.

29.
Concepts: resource utilization, acknowledge helpful resources
Relationship: The concepts are connected as users recognizing helpful resources indicates effective resource utilization.
Criteria: Users express gratitude for the helpful resources available within the community.
Phrase: Acknowledging useful resources.

30.
Concepts: maintaining transparency, ensuring development transparency
Relationship: These concepts are interrelated as transparency in communication builds trust and understanding among users.
Criteria: Designers engage in discussions and provide detailed information about the development process to maintain transparency.
Phrase: Ensuring transparency in development.

31.
Concepts: offering co-designing, promising future consultation, communicating project plans
Relationship: The concepts are related as both involve actively involving the community in future development processes.
Criteria: Designers communicate intentions to involve the community and promise feedback gathering before new developments.
Phrase: Promising future community involvement.

32.
Concepts: collaborative learning, promoting resource sharing
Relationship: These concepts are logically connected as collaborative learning is often facilitated through sharing resources.
Criteria: Designers promote collaborative learning and emphasize the importance of resource sharing among community members.
Phrase: Promoting collaborative resource sharing.

33.
Concepts: humor, engage in humorous exchanges
Relationship: The concepts are related as humor contributes to building relationships and engagement within the community.
Criteria: Users and designers engage in humorous exchanges to foster a light-hearted atmosphere.
Phrase: Engaging in humor.

34.
Concepts: provide community context, contextualizing response
Relationship: These concepts are related as contextualizing responses enriches user understanding and engagement.
Criteria: Users provide context for their experiences to shape their comments and needs.
Phrase: Contextualizing community responses.

35.
Concepts: discuss user contexts, share personal anecdotes
Relationship: These concepts are logically connected as sharing personal anecdotes adds depth to discussions about user contexts.
Criteria: Users discuss their contexts and share experiences that influence their software usage.
Phrase: Sharing personal experiences.

36.
Concepts: personal connection, build rapport with users
Relationship: The concepts are interrelated as building rapport often stems from establishing personal connections.
Criteria: Users and designers ask about backgrounds to create personal connections and build rapport.
Phrase: Building rapport with users.

37.
Concepts: product gap, explain system limitations
Relationship: The concepts are connected as articulating gaps often requires explaining system limitations that affect usability.
Criteria: Users articulate gaps in functionality and share experiences about technology limitations.
Phrase: Explaining system limitations.

38.
Concepts: limitation of the team, explaining software limitations
Relationship: These concepts are related as explaining team limitations provides context for understanding software constraints.
Criteria: Designers express limitations faced by the team in development and explain software functionality constraints.
Phrase: Acknowledging software limitations.

39.
Concepts: seek technical support, seek technical assistance
Relationship: The concepts are logically connected as both involve users and designers requesting help pertaining to technical issues.
Criteria: Users request technical assistance regarding software features, and designers seek help on technical issues.
Phrase: Seeking technical support.

40.
Concepts: ask about update status, inquire about platform updates
Relationship: These concepts are related as both involve inquiries into the progress of software development and updates.
Criteria: Users inquire about upcoming updates and their statuses related to software functionalities.
Phrase: Inquiring about update statuses.

41.
Concepts: make inquiries about software, pose technical inquiries
Relationship: The concepts are interrelated as both involve asking questions to clarify software functionalities.
Criteria: Designers and users pose inquiries to clarify specific functionalities and issues within the software.
Phrase: Making software inquiries.

42.
Concepts: acknowledge user needs, indicate potential user needs
Relationship: These concepts are logically connected as acknowledging needs helps identify potential future requirements.
Criteria: Users express specific feature needs, and designers acknowledge these requests.
Phrase: Acknowledging user needs.

43.
Concepts: propose software enhancements
Relationship: The concepts are related as proposing enhancements involves suggesting new features or improvements for the software.
Criteria: Users suggest new features and improvements they would like to see in the software.
Phrase: Proposing software improvements.
---