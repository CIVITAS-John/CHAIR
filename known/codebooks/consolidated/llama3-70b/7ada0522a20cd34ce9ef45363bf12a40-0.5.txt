You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another and please do not merge them.
Determine the logical relationship between concepts within each code, such as inclusion, parallel, or intersection.
Write clear and generalizable criteria for each code and do not introduce unnecessary details. Then, write an accurate label for the combined concept.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (9 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Label: {A consolidated label of code 1}
...
9. 
Concepts: {Repeat the input 9}
Relationship: {What is logical relationship between concepts in code 9, or N/A if not applicable}
Criteria: {Who did what, and how for code 9}
Label: {A consolidated label of code 9}
---
~~~
1.
Concepts: illustrating feature examples, illustrating feature functions
- Designer provides examples of a feature
- Designer provides examples of a feature's functions

2.
Concepts: explaining feature mechanism, explaining feature mechanism (refine to avoid duplication)
- A designer explains the process or mechanism of a specific feature, often involving conversion or interaction between different components.
- A designer explains the process or mechanism of a specific feature, often involving conversion or interaction between different components ( duplicate of 6).

3.
Concepts: intuitive design goals, emphasizing intuitive design
- Explanations about design goals, focusing on intuitive user experiences and incorporating user feedback.
- Emphasizing the importance of user-friendly design or intuitive interfaces.

4.
Concepts: raising accessibility concern, suggesting accessibility improvement
- Designer raises a concern about numeric input on touchscreens.
- User suggests an accessibility improvement for touchscreen devices.

5.
Concepts: evaluating software usability., comparative assessment of software usability, comparing software usability.
- Assessing software usability features.
- Comparing the software to other similar applications in terms of usability.
- Comparing software usability to other software.

6.
Concepts: comparing to other software, comparison with other applications
- A user contrasts the software with other comprehensive but inconvenient software.
- A user compares the system or software to other similar products.
- A user compares the software with other applications, highlighting its practicality.

7.
Concepts: praising usability, praising software usability.
- User praises the usability of the software.
- Expressing positive sentiment about software usability.

8.
Concepts: praising software design, praising software development
- User praises the software's design, highlighting its practicality.
- User praises the software, implying it is in active development.

9.
Concepts: praising software, praising software practicality
- Expressing positive opinions or praise about the software.
- User praises the practicality of the software compared to others.
===
Here are the definitions for each code:

---
1.
Concepts: illustrating feature examples, illustrating feature functions
Relationship: Parallel (both concepts describe the designer's actions)
Criteria: A designer provides concrete examples of a feature's functionality or its specific uses.
Label: Providing Feature Illustrations

2.
Concepts: explaining feature mechanism, explaining feature mechanism (refine to avoid duplication)
Relationship: Duplicate (both concepts are identical)
Criteria: A designer explains the underlying process or mechanism of a specific feature.
Label: Explaining Feature Mechanisms

3.
Concepts: intuitive design goals, emphasizing intuitive design
Relationship: Inclusion (emphasizing intuitive design is a part of intuitive design goals)
Criteria: Designers prioritize user-friendly design, seeking to create intuitive interfaces and incorporating user feedback.
Label: Prioritizing Intuitive Design

4.
Concepts: raising accessibility concern, suggesting accessibility improvement
Relationship: Parallel (both concepts relate to accessibility issues)
Criteria: Designers or users identify accessibility concerns and propose solutions for improvement.
Label: Addressing Accessibility Issues

5.
Concepts: evaluating software usability., comparative assessment of software usability, comparing software usability.
Relationship: Inclusion (comparative assessment and comparing are part of evaluating software usability)
Criteria: Users assess the usability features of software, often comparing them to other similar applications.
Label: Evaluating Software Usability

6.
Concepts: comparing to other software, comparison with other applications
Relationship: Parallel (both concepts describe comparing the software to others)
Criteria: Users compare the software to other similar products, highlighting its strengths and weaknesses.
Label: Comparing to Other Software

7.
Concepts: praising usability, praising software usability.
Relationship: Parallel (both concepts describe positive sentiments about usability)
Criteria: Users express positive opinions about the software's usability features.
Label: Praising Software Usability

8.
Concepts: praising software design, praising software development
Relationship: Inclusion (praising software development is a part of praising software design)
Criteria: Users express positive opinions about the software's design, implying ongoing development and improvement.
Label: Praising Software Design

9.
Concepts: praising software, praising software practicality
Relationship: Inclusion (praising software practicality is a part of praising software)
Criteria: Users express overall positive opinions about the software, highlighting its practicality and usefulness.
Label: Praising Software