You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (53 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
53. 
Concepts: {Repeat the input 53}
Relationship: {What is logical relationship between concepts in code 53, or N/A if not applicable}
Criteria: {Who did what, and how for code 53}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: confirm understanding, affirm and acknowledge points
- Users and designers confirm statements through short affirmations in discussions.
- Designers and users acknowledge each other's points or statements in discussions.

2.
Concepts: express acknowledgment, acknowledge receipt of information
- Users provide brief acknowledgments of shared information or requests.
- Users acknowledge receipt of information or resources shared within the group.

3.
Concepts: use non verbal communication, use emojis to express emotions
- Use of emojis or other non-verbal forms of communication by users.
- Users communicate their feelings or reactions through emojis within the conversation.

4.
Concepts: user expression, user reactions
- Users express feelings or emotions through emojis or brief statements.
- Instances where users express their reactions to updates or announcements, often using emojis.

5.
Concepts: acknowledge contributions, express gratitude and acknowledgment
- Users acknowledge and express gratitude for the contributions made by designers or developers.
- Users express thanks and appreciation for the contributions of designers and other community members.

6.
Concepts: issue apologies, apologize for potential interruption
- Designers issue apologies for any inconvenience caused to the community or users.
- Designers apologize for any disruptions caused during community interactions.

7.
Concepts: greet the community, greet and engage the community
- Users initiate conversations in the community by greeting others.
- Users and designers greet the community to initiate conversations and interactions.

8.
Concepts: welcome, reciprocate greetings
- The designer greets users in a friendly manner.
- Designers welcome users and reciprocate greetings to create a welcoming environment.

9.
Concepts: share positive reviews, share positive feedback, share classroom experiences
- Users provide positive reviews and feedback about the software's effectiveness and practicality.
- Users share positive experiences and feedback regarding the software's effectiveness in educational settings.
- Users express positive opinions about the software's performance and effectiveness during classroom use.

10.
Concepts: evaluate practicality, comparative feedback
- Users evaluate the software's practicality and usability compared to other software options.
- Users provide feedback comparing different software, highlighting practicality versus inconvenience.

11.
Concepts: express approval, express user satisfaction
- Users express approval or satisfaction with the software's development or ideas.
- Users express positive feedback and overall satisfaction with the software's functionality and features.

12.
Concepts: appreciate usability, appreciate software features
- Users express their appreciation for the software's practicality and ease of use in various contexts.
- Users express appreciation for specific features or the overall design of the software.

13.
Concepts: proposing design idea, propose design features
- Designers suggest additional features or enhancements needed in the software based on user needs.
- Users propose features that would enhance the software's usability or effectiveness in educational contexts.

14.
Concepts: suggest usability improvements, propose software enhancements
- Users suggest improvements to the software aimed at enhancing usability and convenience.
- Users express desires for potential software enhancements or feature improvements based on their experiences.

15.
Concepts: provide user feedback, offer specific feedback
- Users provide feedback or suggestions about the software's features and development direction.
- Users provide suggestions and specific feedback regarding the software's features and organization.

16.
Concepts: explain reasons for the request, user input/feedback/suggestion with justifications
- Users explain the rationale behind their requests for specific software features.
- A user makes a suggestion for software improvement, providing reasons for its necessity.

17.
Concepts: seek guidance, request user manual
- User requests information about the existence of a user manual.
- Users request a user manual or instructional materials for software usage.

18.
Concepts: platform specification, inquire about platform compatibility
- User inquires about the specifications required for using the software.
- Users ask about the compatibility of the software across different platforms.

19.
Concepts: question for access, inquire about software access
- Users request information on how to access the software or its features.
- Users inquire about the process and information for downloading the software.

20.
Concepts: explain situation, system limitations
- Users describe the limitations of outdated school computer systems affecting software usage.
- A user describes the limitations of the computer system they are using in an educational context.

21.
Concepts: share update timelines, provide android update timeline
- Designers provide timelines for when updates are expected to be released to the community.
- Designer shares a timeline for the release of a specific version.

22.
Concepts: user communication, development timeline
- Designer communicates updates and timelines regarding software releases.
- Designer updates users on the timeline for software development and releases.

23.
Concepts: outline update schedule, outline release schedule
- Designers outline timelines for future software updates and features.
- Designers outline timelines and schedules for upcoming software releases.

24.
Concepts: development update, provide product updates
- Information shared by designers about the current status, updates, and future plans for the Physics Lab software.
- Designers provide information about technical changes or updates to the Physics Lab software.

25.
Concepts: share planned updates, communicate release plans
- Designers share information regarding upcoming features or internal updates.
- Designers communicate their plans for software updates and features clearly.

26.
Concepts: share development updates, share information about current feature development
- Designers share detailed information about software updates and new features to the community.
- Designer informs the community about ongoing feature development efforts.

27.
Concepts: provide status updates, communicate progress updates
- Designers inform users about ongoing research and current status updates regarding development.
- Designers provide updates on the progress of software updates and releases.

28.
Concepts: version update notes, detail version updates
- Designers summarize the key aspects of updates in a version release note format.
- Designers detail and announce the specific changes and updates in a software version.

29.
Concepts: list upcoming features, share feature previews
- Designers list features that will be included in upcoming software releases.
- Designers outline and share previews of anticipated features in upcoming software versions.

30.
Concepts: announce new features, announce upcoming updates, announce software updates
- Designers provide information about new features and updates in upcoming software versions.
- Designers provide announcements about specific features and updates planned for the software.
- Designers announce updates to the software version and highlight new features included.

31.
Concepts: communicate software updates, communicate important announcements
- Designers communicate software version updates and notifications to the community to keep them informed.
- Designers communicate significant community updates and announcements regarding software developments.

32.
Concepts: confirm upcoming updates, inform about software changes
- Designers communicate and confirm the details of upcoming software updates to users.
- Designers inform users about changes and upcoming software updates.

33.
Concepts: plan future updates, announce future plans
- Designers discuss and outline plans for future updates based on community input.
- Designers announce planned updates and seek community input on future improvements.

34.
Concepts: share future plans, discuss future planning
- Designers share plans for future development and feature prioritization.
- Designers discuss future considerations regarding software development and features.

35.
Concepts: confirm compatibility, assure system compatibility
- Designer confirms compatibility of a version or feature.
- Designers provide insights and confirmations about system compatibility for the software.

36.
Concepts: offer user support, provide technical support
- Designers offer assistance and support to users experiencing difficulties with the software.
- Designers provide technical support or guidance to users facing technical issues with the software.

37.
Concepts: offer user tips, provide instructions for updates
- Designers share updates and tips to assist users in utilizing new software features.
- Designers provide updates and instructions to help users effectively utilize the software.

38.
Concepts: give examples of feature, provide feature examples
- The designer gives specific examples of planned features for the software.
- Designers provide examples that illustrate the functions and capabilities of software features.

39.
Concepts: explain component functionality, explain software functionalities
- Designers describe the capabilities and functionalities of specific components within the software.
- Designers provide explanations regarding the software's functionalities and how users can effectively utilize them.

40.
Concepts: explain version type, clarify version types
- A designer clarifying the version of the software being discussed in the group.
- Designers provide clarification regarding the different versions and their types.

41.
Concepts: inquire about classroom setup, inquire about internet availability
- Designers inquire about classroom conditions, such as internet availability, for effective software use.
- Designers inquire about the availability of internet for users to facilitate effective software usage.

42.
Concepts: follow-up on grade level, inquire about user backgrounds
- Designers engage users by asking about their teaching backgrounds to tailor interactions.
- Designers engage with users regarding their teaching backgrounds to tailor discussions.

43.
Concepts: further question, ask follow-up questions
- Designers seek clarification on user preferences or choices in the design process.
- Designers ask follow-up questions to clarify user experiences or specific needs.

44.
Concepts: engage through interest, share personal interests
- Designers express personal interests related to their work to engage the community.
- Designers express personal interests in subjects related to their work to foster engagement.

45.
Concepts: foster community discussion, promote open communication
- Designers encourage open discussions about software-related issues and community input.
- Designers encourage open discussions and communication about issues and suggestions in the community group.

46.
Concepts: invite community participation, encourage community feedback
- Designers invite community members to participate in discussions or suggestions actively.
- Designers actively encourage community participation by inviting users to provide feedback and suggestions for future enhancements.

47.
Concepts: gather user feedback, user feedback and communication, encourage user feedback
- Designers solicit user experiences and feedback during software use to inform improvements.
- Designers encourage open communication about user experiences and challenges with the software.
- Designers encourage users to provide suggestions and feedback for software improvements.

48.
Concepts: solicit user input, solicit user suggestions
- Designers actively seek and solicit user input regarding potential features for future iterations of the software.
- Designers invite users to contribute suggestions or requirements for software improvements and new features.

49.
Concepts: prioritize user feedback, incorporate user feedback
- Designers prioritize user feedback and incorporate it into future software updates.
- Designers indicate how user feedback will influence future software development and updates.

50.
Concepts: promise improvements, appreciate user feedback
- Designers express gratitude for user support and commit to making improvements based on feedback.
- Designers express appreciation for the support and feedback received from users to inform improvements.

51.
Concepts: set user expectations, manage user expectations
- Designers set user expectations about the timelines and processes for software updates.
- Designers manage user expectations regarding software capabilities and timelines.
- Designers set realistic expectations regarding software features and developments.

52.
Concepts: reassurance, reassure about features
- Instances where designers reassure users about the progress and express gratitude or encouragement.
- Designers reassure users about upcoming features and the optimization process.

53.
Concepts: seek community input, promise community consultation
- Designers indicate plans to gather community feedback before making decisions.
- Designers promise to consult the community before making significant decisions.
===
---
Definitions for each code (53 in total):

1.
Concepts: confirm understanding, affirm and acknowledge points  
Relationship: Users and designers validate and recognize each other's contributions during discussions.  
Criteria: Users and designers confirm statements through short affirmations in discussions and acknowledge each other's points in discussions.  
Phrase: Validate and acknowledge contributions.

2.
Concepts: express acknowledgment, acknowledge receipt of information  
Relationship: Users show recognition of shared information and confirm they have received it.  
Criteria: Users provide brief acknowledgments of shared information or requests and acknowledge receipt of information or resources shared within the group.  
Phrase: Acknowledge and confirm information.

3.
Concepts: use non-verbal communication, use emojis to express emotions  
Relationship: Emojis serve as a non-verbal method for users to convey emotions.  
Criteria: Users utilize emojis or other non-verbal forms of communication to express their feelings or reactions within the conversation.  
Phrase: Express emotions through emojis.

4.
Concepts: user expression, user reactions  
Relationship: Users express feelings and reactions, often using emojis as a medium.  
Criteria: Users express feelings or emotions through emojis or brief statements and react to updates or announcements using emojis.  
Phrase: Express feelings and reactions.

5.
Concepts: acknowledge contributions, express gratitude and acknowledgment  
Relationship: Users recognize and appreciate the contributions made by designers or developers.  
Criteria: Users acknowledge and express gratitude for contributions made by designers or developers, thanking community members for their efforts.  
Phrase: Acknowledge and express gratitude.

6.
Concepts: issue apologies, apologize for potential interruption  
Relationship: Designers take responsibility for any disruptions to the community.  
Criteria: Designers issue apologies for any inconvenience or disruptions caused during community interactions.  
Phrase: Apologize for disruptions.

7.
Concepts: greet the community, greet and engage the community  
Relationship: Greetings serve as an initiation for conversations and interactions within the community.  
Criteria: Users and designers initiate conversations by greeting others and engaging the community.  
Phrase: Initiate community engagement.

8.
Concepts: welcome, reciprocate greetings  
Relationship: Designers create a friendly atmosphere through mutual greetings.  
Criteria: Designers greet users in a friendly manner and reciprocate greetings to foster a welcoming environment.  
Phrase: Welcome and reciprocate greetings.

9.
Concepts: share positive reviews, share positive feedback, share classroom experiences  
Relationship: Users convey favorable opinions and experiences regarding the software.  
Criteria: Users provide positive reviews and feedback about the software's effectiveness in educational settings and express positive opinions on its performance.  
Phrase: Share positive experiences and feedback.

10.
Concepts: evaluate practicality, comparative feedback  
Relationship: Users assess the software's practicality in comparison to alternatives.  
Criteria: Users evaluate the software's usability compared to other options and provide feedback highlighting its practicality versus inconvenience.  
Phrase: Evaluate and compare practicality.

11.
Concepts: express approval, express user satisfaction  
Relationship: Users convey their contentment and approval regarding the software.  
Criteria: Users express approval or satisfaction with the software's development and overall functionality.  
Phrase: Express user satisfaction.

12.
Concepts: appreciate usability, appreciate software features  
Relationship: Users recognize the software's practical aspects and specific functionalities.  
Criteria: Users express appreciation for the software's ease of use and specific features in various contexts.  
Phrase: Appreciate usability and features.

13.
Concepts: proposing design idea, propose design features  
Relationship: Designers and users collaborate by suggesting enhancements based on user needs.  
Criteria: Designers suggest additional features based on user input, while users propose features to enhance usability.  
Phrase: Propose design enhancements.

14.
Concepts: suggest usability improvements, propose software enhancements  
Relationship: Users identify areas for improvement to enhance the software experience.  
Criteria: Users suggest improvements aimed at enhancing usability and express desires for potential enhancements.  
Phrase: Suggest usability improvements.

15.
Concepts: provide user feedback, offer specific feedback  
Relationship: Users contribute insights about software features and direction.  
Criteria: Users provide feedback or suggestions about software features and organization.  
Phrase: Provide specific feedback.

16.
Concepts: explain reasons for the request, user input/feedback/suggestion with justifications  
Relationship: Users clarify the rationale behind their feature requests.  
Criteria: Users explain their reasoning for specific software feature requests or suggestions.  
Phrase: Justify user requests.

17.
Concepts: seek guidance, request user manual  
Relationship: Users require assistance to utilize the software effectively.  
Criteria: Users request information about the user manual or instructional materials for software usage.  
Phrase: Request guidance.

18.
Concepts: platform specification, inquire about platform compatibility  
Relationship: Users seek clarity on technical requirements for using the software.  
Criteria: Users inquire about the specifications and compatibility of the software across different platforms.  
Phrase: Inquire about compatibility.

19.
Concepts: question for access, inquire about software access  
Relationship: Users seek information on how to gain access to the software.  
Criteria: Users request information on accessing the software or its features and inquire about downloading processes.  
Phrase: Inquire about software access.

20.
Concepts: explain situation, system limitations  
Relationship: Users describe constraints affecting their software usage.  
Criteria: Users describe limitations of outdated computer systems impacting software usage in educational contexts.  
Phrase: Explain system limitations.

21.
Concepts: share update timelines, provide android update timeline  
Relationship: Designers communicate anticipated schedules for software updates.  
Criteria: Designers provide timelines for expected updates and specific version releases to the community.  
Phrase: Share update timelines.

22.
Concepts: user communication, development timeline  
Relationship: Designers keep users informed about software development progress.  
Criteria: Designers communicate updates and timelines regarding software releases.  
Phrase: Update on development timelines.

23.
Concepts: outline update schedule, outline release schedule  
Relationship: Designers provide structured timelines for future updates.  
Criteria: Designers outline timelines for upcoming software updates and features.  
Phrase: Outline release schedules.

24.
Concepts: development update, provide product updates  
Relationship: Designers inform the community about the status and changes in software development.  
Criteria: Designers share updates regarding the current status and future plans for the software.  
Phrase: Provide development updates.

25.
Concepts: share planned updates, communicate release plans  
Relationship: Designers inform users about future software developments.  
Criteria: Designers share information about upcoming features and internal updates clearly.  
Phrase: Communicate upcoming plans.

26.
Concepts: share development updates, share information about current feature development  
Relationship: Designers relay detailed information about ongoing features to the community.  
Criteria: Designers share detailed information about software updates and new feature development efforts.  
Phrase: Share current development updates.

27.
Concepts: provide status updates, communicate progress updates  
Relationship: Designers keep users informed about ongoing development efforts.  
Criteria: Designers inform users about ongoing research and current status updates regarding development.  
Phrase: Communicate progress updates.

28.
Concepts: version update notes, detail version updates  
Relationship: Designers summarize and detail changes in software updates.  
Criteria: Designers summarize key aspects of updates in release notes and detail specific changes in a software version.  
Phrase: Detail version updates.

29.
Concepts: list upcoming features, share feature previews  
Relationship: Designers keep the community informed about future feature additions.  
Criteria: Designers list features that will be included in upcoming software releases and share previews of anticipated features.  
Phrase: List and preview upcoming features.

30.
Concepts: announce new features, announce upcoming updates, announce software updates  
Relationship: Designers provide critical information about software enhancements.  
Criteria: Designers announce new features and updates planned for the software.  
Phrase: Announce software updates.

31.
Concepts: communicate software updates, communicate important announcements  
Relationship: Designers keep the community well-informed about significant changes and updates.  
Criteria: Designers communicate software updates and significant community announcements regarding developments.  
Phrase: Communicate important updates.

32.
Concepts: confirm upcoming updates, inform about software changes  
Relationship: Designers ensure users are aware of forthcoming updates.  
Criteria: Designers communicate and confirm details of upcoming software updates to users.  
Phrase: Confirm upcoming updates.

33.
Concepts: plan future updates, announce future plans  
Relationship: Designers outline future development based on community feedback.  
Criteria: Designers discuss and announce plans for future updates based on community input.  
Phrase: Plan and announce future updates.

34.
Concepts: share future plans, discuss future planning  
Relationship: Designers communicate their strategic approach to future software development.  
Criteria: Designers share plans for future development and discuss considerations regarding features.  
Phrase: Share and discuss future plans.

35.
Concepts: confirm compatibility, assure system compatibility  
Relationship: Designers provide reassurance regarding software compatibility.  
Criteria: Designers confirm compatibility of a version or feature and provide insights about system compatibility.  
Phrase: Confirm and assure compatibility.

36.
Concepts: offer user support, provide technical support  
Relationship: Designers assist users who encounter difficulties with the software.  
Criteria: Designers offer assistance and technical support to users facing issues with the software.  
Phrase: Provide user support.

37.
Concepts: offer user tips, provide instructions for updates  
Relationship: Designers share guidance to enhance user experience with new features.  
Criteria: Designers share updates and tips to assist users in utilizing new software features effectively.  
Phrase: Provide instructions and tips.

38.
Concepts: give examples of feature, provide feature examples  
Relationship: Designers illustrate software functionalities through specific examples.  
Criteria: Designers give specific examples of planned features and their functions.  
Phrase: Provide feature examples.

39.
Concepts: explain component functionality, explain software functionalities  
Relationship: Designers clarify how specific components work within the software.  
Criteria: Designers describe capabilities and functionalities of components within the software.  
Phrase: Explain software functionalities.

40.
Concepts: explain version type, clarify version types  
Relationship: Designers provide clarity on the distinctions between software versions.  
Criteria: Designers clarify the version of the software being discussed and explain different version types.  
Phrase: Clarify version types.

41.
Concepts: inquire about classroom setup, inquire about internet availability  
Relationship: Designers assess conditions necessary for effective software usage.  
Criteria: Designers inquire about classroom conditions and internet availability to facilitate software use.  
Phrase: Inquire about setup conditions.

42.
Concepts: follow-up on grade level, inquire about user backgrounds  
Relationship: Designers seek to understand user contexts for tailored interactions.  
Criteria: Designers engage users by asking about their teaching backgrounds to tailor discussions.  
Phrase: Inquire about user backgrounds.

43.
Concepts: further question, ask follow-up questions  
Relationship: Designers seek to clarify user preferences and experiences.  
Criteria: Designers ask follow-up questions to clarify user experiences or specific needs.  
Phrase: Ask follow-up questions.

44.
Concepts: engage through interest, share personal interests  
Relationship: Designers foster community engagement through personal connections.  
Criteria: Designers express personal interests related to their work to engage the community.  
Phrase: Share personal interests.

45.
Concepts: foster community discussion, promote open communication  
Relationship: Designers encourage dialogue and input from the community.  
Criteria: Designers encourage open discussions about software-related issues and community input.  
Phrase: Foster community discussions.

46.
Concepts: invite community participation, encourage community feedback  
Relationship: Designers actively seek community involvement in discussions.  
Criteria: Designers invite community members to participate in discussions and provide feedback for enhancements.  
Phrase: Invite community participation.

47.
Concepts: gather user feedback, user feedback and communication, encourage user feedback  
Relationship: Designers solicit and promote user insights for software improvements.  
Criteria: Designers solicit user experiences and encourage communication about challenges and feedback.  
Phrase: Gather and encourage feedback.

48.
Concepts: solicit user input, solicit user suggestions  
Relationship: Designers actively seek contributions for software enhancements.  
Criteria: Designers solicit user input and suggestions regarding potential features for future iterations.  
Phrase: Solicit user input.

49.
Concepts: prioritize user feedback, incorporate user feedback  
Relationship: Designers respond to user insights by integrating them into development.  
Criteria: Designers prioritize and incorporate user feedback into future software updates.  
Phrase: Incorporate user feedback.

50.
Concepts: promise improvements, appreciate user feedback  
Relationship: Designers express gratitude for input while committing to enhancements.  
Criteria: Designers express gratitude for user support and promise improvements based on feedback.  
Phrase: Promise improvements based on feedback.

51.
Concepts: set user expectations, manage user expectations  
Relationship: Designers clarify timelines and capabilities to align user understanding.  
Criteria: Designers set and manage user expectations regarding software updates and features.  
Phrase: Manage user expectations.

52.
Concepts: reassurance, reassure about features  
Relationship: Designers provide encouragement and updates regarding software features.  
Criteria: Designers reassure users about progress and upcoming features.  
Phrase: Reassure about features.

53.
Concepts: seek community input, promise community consultation  
Relationship: Designers commit to involving the community in decision-making.  
Criteria: Designers indicate plans to gather community feedback before making decisions.  
Phrase: Seek community input.  
---