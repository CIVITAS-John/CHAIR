You are an expert in thematic analysis. 
Each code is a cluster of multiple qualitative sub-code. First, determine the logical relationship between concepts. If a concept includes another, use the broader one. If concepts are parallel, try to cover both concepts.
Write clear and generalizable labels and criteria for each merged code, informed by the context, and without unnecessary specifics or examples.
Find a theory-informed category for each code. Use 2-4 words for categories and avoid over-generalization.
The research question is: How did Physics Lab's online community emerge? (through the lens of learning sciences, human-computer interaction, and participatory design)
Always follow the output format:
---
Categories: 
* {Name some categories you identified from the research question and theoretical lens}

Definitions for each code (16 in total):
1. {Repeat the input 1}
Relationship: {The logical relationship between concepts in input 1}
Criteria: {A sentence of consolidated criteria for code 1}
Label: {A consolidated label of code 1}
Category: {2-4 words for code 1}
...
16. {Repeat the input 16}
Relationship: {The logical relationship between concepts in input 16}
Criteria: {A sentence of consolidated criteria for code 16}
Label: {A consolidated label of code 16}
Category: {2-4 words for code 16}
---
~~~
1. group sharing, resource sharing.
- Participants suggest sharing resources within the group.
- Instances where participants offer to share or discuss sharing resources.

2. user gratitude, gratitude and acknowledgment.
- Expressions of appreciation or thanks from users towards the designers or the community.
- Expressions of thanks or acknowledgment from users.
- Instances where participants thank or appreciate each other for their contributions.

3. expressing reactions, use of emojis and images.
- Participants use emojis to express reactions and emotions.
- Participants using emojis or images to communicate or illustrate points.

4. announcements, feature announcements.
- The designer provides updates about software versions and new features.
- Instances where the designer announces new features or improvements in the software.

5. designer response, designer acknowledgment and response.
- Replies from the designer that acknowledge, address, or act upon user feedback.
- Replies from the designer addressing user feedback, providing updates, or explaining design choices.
- The designer's recognition and response to user feedback.

6. responsiveness, designer responsiveness.
- Instances where the designer responds to user requests or questions.
- Instances where the designer responds to user feedback, queries, or suggestions.

7. user feedback, user suggestions.
- Contributions from users that provide suggestions or highlight issues with the software.
- Comments or suggestions from users about the software, including requests for features or reporting issues.
- Instances where users provide feedback, ask questions, or express concerns about the software.
- Instances where users provide suggestions or feedback for software improvements.

8. user involvement, participation in development.
- Instances where users are directly involved in the design process through feedback or suggestions.
- Instances where users contribute ideas or feedback for the development process.

9. designer-user interaction, collaborative design.
- Interactions where designers actively seek and respond to user feedback.
- Instances where the designer involves users in the design process by seeking their input or feedback.

10. information exchange.
- Instances where participants share information or resources with others.
- Instances where users or designers share useful information or resources with the community.

11. feedback incorporation.
- How the designer incorporates user feedback into the software development process.
- Instances where community members provide input or feedback that influences design decisions.

12. usability concerns.
- Discussions about the ease of use and practical aspects of the software.
- Issues or suggestions related to the ease of use and user experience of the software.

13. user-centered design.
- Design approach that involves users in the development process to ensure the software meets their needs.
- Design decisions that prioritize user needs and preferences.

14. iterative development.
- The process of continually improving the software based on user feedback and testing.
- The process of continuously improving the software based on user feedback and testing.
- The process of continuously improving the product based on user feedback and testing.
- Instances where the designer discusses ongoing improvements and updates to the software.

15. feature requests.
- The designer invites users to suggest new features or components for the software.
- Specific functionalities or tools that users ask to be included in the software.

16. knowledge sharing.
- Instances where participants share information, tips, or resources that contribute to collective learning.
- Instances where community members share knowledge or information to support learning.
===
---
Categories:
* Community Dynamics
* User Engagement
* Communication Methods
* Design Process

Definitions for each code (16 in total):

1. group sharing, resource sharing.
Relationship: Both concepts involve sharing resources within the community.
Criteria: Instances where participants offer to share or discuss sharing resources within the group.
Label: Resource Sharing
Category: Community Dynamics

2. user gratitude, gratitude and acknowledgment.
Relationship: Both concepts involve expressions of appreciation or thanks.
Criteria: Instances where participants express appreciation or thanks towards the designers or other community members.
Label: User Gratitude
Category: Community Dynamics

3. expressing reactions, use of emojis and images.
Relationship: Both concepts involve using non-verbal methods to communicate emotions and reactions.
Criteria: Instances where participants use emojis or images to express reactions, emotions, or illustrate points.
Label: Expressive Communication
Category: Communication Methods

4. announcements, feature announcements.
Relationship: Both concepts involve the designer providing updates and information about new features.
Criteria: Instances where the designer announces software updates, new features, or improvements.
Label: Feature Announcements
Category: Communication Methods

5. designer response, designer acknowledgment and response.
Relationship: Both concepts involve the designer's replies to user feedback.
Criteria: Instances where the designer acknowledges, addresses, or acts upon user feedback.
Label: Designer Response
Category: User Engagement

6. responsiveness, designer responsiveness.
Relationship: Both concepts involve the designer's responsiveness to user inputs.
Criteria: Instances where the designer responds to user requests, questions, or feedback.
Label: Designer Responsiveness
Category: User Engagement

7. user feedback, user suggestions.
Relationship: Both concepts involve users providing feedback or suggestions about the software.
Criteria: Instances where users provide feedback, suggestions, or highlight issues with the software.
Label: User Feedback
Category: User Engagement

8. user involvement, participation in development.
Relationship: Both concepts involve users being part of the design process through their contributions.
Criteria: Instances where users are directly involved in the design process by providing feedback or suggestions.
Label: User Involvement
Category: User Engagement

9. designer-user interaction, collaborative design.
Relationship: Both concepts involve interactions where designers seek and respond to user feedback.
Criteria: Instances where designers actively involve users in the design process by seeking and responding to their input.
Label: Collaborative Design
Category: Design Process

10. information exchange.
Relationship: Concept involves the sharing of useful information or resources within the community.
Criteria: Instances where participants share information or resources with others in the community.
Label: Information Exchange
Category: Community Dynamics

11. feedback incorporation.
Relationship: Concept involves how user feedback is integrated into the development process.
Criteria: Instances where user feedback influences design decisions and software development.
Label: Feedback Incorporation
Category: Design Process

12. usability concerns.
Relationship: Concept involves discussions about the ease of use and user experience of the software.
Criteria: Instances where ease of use, practical aspects, and user experience of the software are discussed.
Label: Usability Concerns
Category: Design Process

13. user-centered design.
Relationship: Concept involves design decisions that prioritize user needs and preferences.
Criteria: Instances where the design approach involves users to ensure the software meets their needs.
Label: User-Centered Design
Category: Design Process

14. iterative development.
Relationship: Concept involves the continuous improvement of software based on user feedback and testing.
Criteria: Instances where the designer discusses ongoing improvements and updates to the software.
Label: Iterative Development
Category: Design Process

15. feature requests.
Relationship: Concept involves users suggesting new functionalities or tools for the software.
Criteria: Instances where users suggest new features or components to be included in the software.
Label: Feature Requests
Category: User Engagement

16. knowledge sharing.
Relationship: Concept involves sharing information, tips, or resources that contribute to collective learning.
Criteria: Instances where community members share knowledge or information to support learning.
Label: Knowledge Sharing
Category: Community Dynamics
---