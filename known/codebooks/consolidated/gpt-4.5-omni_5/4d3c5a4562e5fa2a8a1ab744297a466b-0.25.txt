You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (51 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
51. 
Concepts: {Repeat the input 51}
Relationship: {What is logical relationship between concepts in code 51, or N/A if not applicable}
Criteria: {Who did what, and how for code 51}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: discuss update process and frequency, discuss internal updates and iterations
- Designers discuss the process and frequency of software updates.
- Designers discuss internal updates and the iteration process of new software versions.

2.
Concepts: describe and introduce updates, describe update scope and magnitude
- Designers describe and introduce the content or scope of updates.
- Designers describe the scope and magnitude of updates.

3.
Concepts: share development plans, announce development plans
- Designers inform and share information about future development plans.
- Designers make announcements about development plans or updates.

4.
Concepts: set development goals, communicate development priorities
- Designers set and discuss development goals.
- Designers outline development priorities and communicate the process.

5.
Concepts: discuss feature expansion, discuss feature development
- Designers discuss the expansion or addition of new features.
- Designers discuss and share information about feature improvements and development.

6.
Concepts: discuss features and design, discuss feature flexibility
- Discussions about specific features or design choices.
- Designers mention and give examples of feature flexibility.

7.
Concepts: share ongoing research, research and development
- Designers mention and share their ongoing research efforts.
- Designers discussing research and development activities.

8.
Concepts: providing information, provide version information
- Designers provide and share information or facts related to the software and its use.
- Designers explain and provide information about the software version.

9.
Concepts: explain features, illustrate feature usage
- Designers explain the features, functionalities, and new components of the software.
- Designers provide examples, describe usage scenarios, and highlight practical applications.

10.
Concepts: explain design principles, explain design goals and rationale
- Designers discuss and explain the principles guiding the design.
- Designers explain the goals and rationale behind the software design.

11.
Concepts: provide technical support, offer personalized support
- Designers offer and provide technical support.
- Designers offer personalized support and assistance.

12.
Concepts: provide download instructions, provide updates and instructions
- Designers answer questions and provide instructions for downloading the software.
- Designers provide updates, instructions, and download information to help users.

13.
Concepts: user guidance, provide feature guidance
- A designer provides guidance or instructions for using the software.
- A designer provides instructions on how to use a feature or component.

14.
Concepts: consider future compatibility, discuss and confirm compatibility, discuss system requirements and compatibility
- Designers consider and discuss future compatibility requirements.
- Designers theorize, evaluate, and confirm software compatibility.
- Designers discuss system requirements and inform users about compatibility.

15.
Concepts: discuss touch screen functionality, consider implications of touch screen use
- Designers discuss touch screen and on-screen keyboard functionality.
- Designers considering the implications of touch screen use.

16.
Concepts: discuss software limitations, acknowledging limitations
- Designers explain current limitations and discuss why they are addressable.
- Designers acknowledge and address limitations in the software's usability or technical aspects.

17.
Concepts: promise feature realization and addition, commit to future updates and features
- Designers promise the realization and future addition of features.
- Designers commit to future updates, affirm planned features, and acknowledge suggestions.

18.
Concepts: prioritize tasks, respond to feedback
- Designers outline and suggest the prioritization of tasks.
- Designers make decisions and react to feedback regarding task priorities.

19.
Concepts: design for usability, consider usability and user experience
- Designers describe usability features and instructional design approaches.
- Designers consider how features impact usability and user experience.

20.
Concepts: understanding designers' situation, understand and address user needs
- Understanding the designers' situation or constraints.
- Designers try to understand and address user concerns by seeking contextual information.

21.
Concepts: user background, providing background information
- Information provided by users about their professional or personal background, which helps in understanding the community's composition.
- Users provide context for their responses or questions, such as their school's focus, or provide their teaching background or context to give perspective on their views.

22.
Concepts: user role inquiry, identifying user roles
- A user inquires about another user's role or position within the community.
- Instances where users or designers identify their roles within the community, confirm their identity or role, or designers ask users about their identity or role within the community.

23.
Concepts: confirm professional role, confirming teacher identity
- A user confirms their professional role.
- Identifying the role of the user as a teacher, or confirming the identity or role of a teacher.

24.
Concepts: user frustration, describing system limitations
- A user expresses frustration about the outdated computer system at their school.
- A user mentions the outdated state of the computer systems used by teachers, or describes outdated or inadequate school systems.

25.
Concepts: follow-up on grade level, inquiring about teaching background
- A designer inquires about the user's teaching level (middle school or high school).
- A designer asks if the user is a teacher, or designers ask a user about their teaching level to understand their background.

26.
Concepts: show interest in user context, discussing educational context
- A designer shows interest in the user's teaching context.
- A user or designer discusses teaching experience or educational needs, or users and designers discuss the educational context or environment.

27.
Concepts: describing educational needs, expressing school or community needs
- A user describes an educational use case and suggests features, or describes specific educational needs or requests features related to education.
- A user mentions the school's needs or requirements, or expresses a need for specific features to aid in their teaching tasks.

28.
Concepts: conducting follow-up, asking follow-up questions
- Follow-up on a previous discussion or issue, or a user follows up on previously mentioned design information.
- Participants ask follow-up or additional questions to gain more information or clarification, or a participant asks a follow-up question to understand the context or usage scenario better.

29.
Concepts: indirectly addressing questions, providing direct answers
- A designer responds indirectly to a user's question by asking another question or providing a potential solution.
- Users or designers provide direct answers to questions posed by others, involving instances where users ask questions and receive answers from designers or other community members.

30.
Concepts: express comprehension, clarifying design-related questions
- A designer expresses understanding and asks for more detailed information.
- A user and designer engage in a back-and-forth exchange to clarify a question, with the user providing an answer or clarification related to design support.

31.
Concepts: real-time communication, engage in direct communication
- Designers communicate in real-time with users, often asking or answering questions.
- Designers and users engage in informal and direct communication about features and updates.

32.
Concepts: inviting more questions, encourage user participation
- Designers inviting users to ask more questions or report issues.
- Designers ask for future help and encourage discussions or questions.

33.
Concepts: gather user feedback, considering user feedback
- Designers take and plan to gather user feedback for future updates.
- Designers consider and acknowledge user feedback for future updates.

34.
Concepts: propose compromise, propose solutions, suggest alternatives
- Designers proposing a compromise or alternative solution.
- Designers and users offer and suggest potential solutions to problems.
- Designers and users offer and seek alternative suggestions or solutions.

35.
Concepts: greet community, exchanging greetings
- A user greets the community.
- Designers welcome users to the community, or users and designers exchange greetings.

36.
Concepts: encourage in-group discussion, encouraging group communication
- Encouragements for users to discuss issues or suggestions within the group.
- Designers encourage discussion and open communication within the community, or encourage group members to communicate and share their issues.

37.
Concepts: maintaining politeness, demonstrating politeness
- A participant engages in polite social interactions, such as greetings or apologies, maintaining politeness in communication.
- Users or designers express politeness in their communication, or demonstrate polite behavior or social norms within the community.

38.
Concepts: provide detailed answers, elaborating on questions or suggestions
- Participants provide detailed and specific answers to questions.
- Elaborations or clarifications of questions, or detailed explanations or examples provided to clarify suggestions.

39.
Concepts: expressive, using emojis to communicate
- Users and designers use expressive language, including emojis, in their interactions.
- Users use emojis or other non-verbal forms of communication to convey sentiment and emotions.

40.
Concepts: indicate self-help, demonstrating self-sufficiency
- Users acknowledge finding information or files on their own.
- A user acknowledges finding the necessary resources in the group files, or acknowledges the availability of group files.

41.
Concepts: acknowledge feedback, acknowledging resolution and information receipt
- Acknowledgements of user feedback or comments.
- Users acknowledge the resolution of an issue or receipt of information, or acknowledge receipt of information or instructions.

42.
Concepts: seeking software help, requesting technical help
- Users seek information, resources, and help with software usage and access, or express a need for support or guidance on how to use the platform.
- A user requests assistance with technical aspects or functionalities, or asks technical questions about the platform, indicating areas of user interest or potential issues.

43.
Concepts: inquire and anticipate updates, show interest in development progress
- Users inquire about and express anticipation for upcoming updates.
- Users show interest in and respond to information about feature development.

44.
Concepts: requesting new features, suggest expansion to mechanics
- Users request new features or specific experiments for the Physics Lab tool.
- A user suggests expanding the software to include mechanics experiments.

45.
Concepts: provide specific feedback, encouraging community feedback
- Users provide specific feedback or responses to questions or requests.
- Users provide feedback and suggestions, and there are encouragements for community feedback.

46.
Concepts: propose usability improvements, suggest feature refinement
- Users suggest improvements to usability and workflow.
- Users encourage designers and suggest feature categorization and refinement.

47.
Concepts: visual design appreciation, appreciating craftsmanship
- Users appreciate the visual design of the software.
- Users acknowledge the craftsmanship or quality of the software, or appreciate the designers' craftsmanship and dedication to perfection.

48.
Concepts: giving positive reviews, praising software features
- A user provides a positive review or feedback, or compliments the software or ideas.
- Users compliment the visual effects of the software, specifically the 3D effect, or express satisfaction and praise the simulation effects, providing positive feedback about the software's features and quality.

49.
Concepts: emphasize convenience, discussing ease of use
- Users suggest features that would make the software more convenient to use.
- Discussions related to the ease of use and user-friendliness of the software, or user comments on the ease of use and practicality of the software.

50.
Concepts: school implementation, discussing classroom applications
- Users discuss the implementation of the software within their school.
- A participant discusses the application of the software in a classroom setting, or instances where the practical application of the software in educational settings is discussed.

51.
Concepts: shared experiences and support, sharing user experiences
- Users and designers sharing experiences and supporting each other in using and improving the software.
- Users share stories or experiences related to the software or its use, or share their experiences and the positive impact of the software in teaching or learning environments.
===
---
Definitions for each code (51 in total):
1.
Concepts: discuss update process and frequency, discuss internal updates and iterations
Relationship: Both concepts involve discussions about the software update process.
Criteria: Designers discuss the process, frequency, and internal iterations of software updates.
Phrase: Discussing update processes

2.
Concepts: describe and introduce updates, describe update scope and magnitude
Relationship: Both concepts involve describing the content and extent of updates.
Criteria: Designers describe and introduce the content, scope, and magnitude of updates.
Phrase: Describing updates

3.
Concepts: share development plans, announce development plans
Relationship: Both concepts involve communicating future development plans.
Criteria: Designers inform and announce future development plans.
Phrase: Sharing development plans

4.
Concepts: set development goals, communicate development priorities
Relationship: Both concepts involve setting and communicating development objectives.
Criteria: Designers set goals and communicate development priorities.
Phrase: Setting development goals

5.
Concepts: discuss feature expansion, discuss feature development
Relationship: Both concepts involve discussions about feature enhancements.
Criteria: Designers discuss the expansion and development of new features.
Phrase: Discussing feature development

6.
Concepts: discuss features and design, discuss feature flexibility
Relationship: Both concepts involve discussions about software features.
Criteria: Designers discuss specific features, design choices, and feature flexibility.
Phrase: Discussing features

7.
Concepts: share ongoing research, research and development
Relationship: Both concepts involve sharing research activities.
Criteria: Designers share ongoing research and development efforts.
Phrase: Sharing research activities

8.
Concepts: providing information, provide version information
Relationship: Both concepts involve providing information about the software.
Criteria: Designers provide information about the software and its versions.
Phrase: Providing software information

9.
Concepts: explain features, illustrate feature usage
Relationship: Both concepts involve explaining and demonstrating software features.
Criteria: Designers explain features and illustrate their usage.
Phrase: Explaining features

10.
Concepts: explain design principles, explain design goals and rationale
Relationship: Both concepts involve explaining the rationale behind design choices.
Criteria: Designers explain design principles, goals, and rationale.
Phrase: Explaining design principles

11.
Concepts: provide technical support, offer personalized support
Relationship: Both concepts involve offering support to users.
Criteria: Designers provide technical and personalized support.
Phrase: Offering support

12.
Concepts: provide download instructions, provide updates and instructions
Relationship: Both concepts involve providing instructions related to software updates.
Criteria: Designers provide download instructions and update information.
Phrase: Providing instructions

13.
Concepts: user guidance, provide feature guidance
Relationship: Both concepts involve providing guidance on software usage.
Criteria: Designers provide guidance on using the software and its features.
Phrase: Providing user guidance

14.
Concepts: consider future compatibility, discuss and confirm compatibility, discuss system requirements and compatibility
Relationship: All concepts involve discussions about software compatibility.
Criteria: Designers discuss and confirm future compatibility and system requirements.
Phrase: Discussing compatibility

15.
Concepts: discuss touch screen functionality, consider implications of touch screen use
Relationship: Both concepts involve discussions about touch screen functionality.
Criteria: Designers discuss and consider the implications of touch screen use.
Phrase: Discussing touch screen functionality

16.
Concepts: discuss software limitations, acknowledging limitations
Relationship: Both concepts involve addressing software limitations.
Criteria: Designers discuss and acknowledge software limitations.
Phrase: Addressing limitations

17.
Concepts: promise feature realization and addition, commit to future updates and features
Relationship: Both concepts involve commitments to future software enhancements.
Criteria: Designers promise and commit to future updates and feature additions.
Phrase: Committing to future updates

18.
Concepts: prioritize tasks, respond to feedback
Relationship: Both concepts involve task prioritization and feedback response.
Criteria: Designers prioritize tasks and respond to user feedback.
Phrase: Prioritizing tasks

19.
Concepts: design for usability, consider usability and user experience
Relationship: Both concepts involve considerations for usability and user experience.
Criteria: Designers consider usability and user experience in their design.
Phrase: Designing for usability

20.
Concepts: understanding designers' situation, understand and address user needs
Relationship: Both concepts involve understanding and addressing needs.
Criteria: Designers understand their situation and address user needs.
Phrase: Addressing needs

21.
Concepts: user background, providing background information
Relationship: Both concepts involve providing background information.
Criteria: Users provide background information to give context to their responses.
Phrase: Providing background information

22.
Concepts: user role inquiry, identifying user roles
Relationship: Both concepts involve identifying user roles within the community.
Criteria: Users inquire about and identify roles within the community.
Phrase: Identifying user roles

23.
Concepts: confirm professional role, confirming teacher identity
Relationship: Both concepts involve confirming professional identities.
Criteria: Users confirm their professional roles, particularly as teachers.
Phrase: Confirming professional roles

24.
Concepts: user frustration, describing system limitations
Relationship: Both concepts involve expressing frustration about system limitations.
Criteria: Users express frustration and describe limitations of their systems.
Phrase: Expressing frustration

25.
Concepts: follow-up on grade level, inquiring about teaching background
Relationship: Both concepts involve inquiries about teaching backgrounds.
Criteria: Designers inquire about users' teaching levels and backgrounds.
Phrase: Inquiring about teaching background

26.
Concepts: show interest in user context, discussing educational context
Relationship: Both concepts involve discussions about educational contexts.
Criteria: Designers show interest and discuss users' educational contexts.
Phrase: Discussing educational context

27.
Concepts: describing educational needs, expressing school or community needs
Relationship: Both concepts involve expressing educational needs.
Criteria: Users describe and express educational needs and requirements.
Phrase: Expressing educational needs

28.
Concepts: conducting follow-up, asking follow-up questions
Relationship: Both concepts involve follow-up actions.
Criteria: Participants conduct follow-ups and ask additional questions.
Phrase: Conducting follow-ups

29.
Concepts: indirectly addressing questions, providing direct answers
Relationship: Both concepts involve responses to questions.
Criteria: Participants address questions either indirectly or directly.
Phrase: Addressing questions

30.
Concepts: express comprehension, clarifying design-related questions
Relationship: Both concepts involve clarifying questions.
Criteria: Participants express comprehension and clarify design-related questions.
Phrase: Clarifying questions

31.
Concepts: real-time communication, engage in direct communication
Relationship: Both concepts involve direct and real-time communication.
Criteria: Designers and users engage in real-time, direct communication.
Phrase: Engaging in real-time communication

32.
Concepts: inviting more questions, encourage user participation
Relationship: Both concepts involve encouraging user engagement.
Criteria: Designers invite questions and encourage user participation.
Phrase: Encouraging participation

33.
Concepts: gather user feedback, considering user feedback
Relationship: Both concepts involve handling user feedback.
Criteria: Designers gather and consider user feedback for future updates.
Phrase: Gathering feedback

34.
Concepts: propose compromise, propose solutions, suggest alternatives
Relationship: All concepts involve proposing solutions.
Criteria: Participants propose compromises, solutions, and alternatives.
Phrase: Proposing solutions

35.
Concepts: greet community, exchanging greetings
Relationship: Both concepts involve exchanging greetings.
Criteria: Participants greet and exchange greetings within the community.
Phrase: Exchanging greetings

36.
Concepts: encourage in-group discussion, encouraging group communication
Relationship: Both concepts involve encouraging group communication.
Criteria: Participants encourage in-group discussions and communication.
Phrase: Encouraging group communication

37.
Concepts: maintaining politeness, demonstrating politeness
Relationship: Both concepts involve maintaining politeness.
Criteria: Participants engage in and demonstrate politeness in communication.
Phrase: Demonstrating politeness

38.
Concepts: provide detailed answers, elaborating on questions or suggestions
Relationship: Both concepts involve providing detailed responses.
Criteria: Participants provide detailed answers and elaborate on questions or suggestions.
Phrase: Providing detailed responses

39.
Concepts: expressive, using emojis to communicate
Relationship: Both concepts involve expressive communication.
Criteria: Participants use expressive language and emojis to communicate.
Phrase: Using expressive communication

40.
Concepts: indicate self-help, demonstrating self-sufficiency
Relationship: Both concepts involve demonstrating self-sufficiency.
Criteria: Users indicate and demonstrate self-sufficiency in finding resources.
Phrase: Demonstrating self-sufficiency

41.
Concepts: acknowledge feedback, acknowledging resolution and information receipt
Relationship: Both concepts involve acknowledging information.
Criteria: Participants acknowledge feedback, resolution, and receipt of information.
Phrase: Acknowledging information

42.
Concepts: seeking software help, requesting technical help
Relationship: Both concepts involve seeking technical assistance.
Criteria: Users seek and request technical help with software usage.
Phrase: Seeking technical help

43.
Concepts: inquire and anticipate updates, show interest in development progress
Relationship: Both concepts involve interest in software updates.
Criteria: Users inquire about and show interest in development progress and updates.
Phrase: Showing interest in updates

44.
Concepts: requesting new features, suggest expansion to mechanics
Relationship: Both concepts involve requesting new features.
Criteria: Users request new features and suggest expanding software capabilities.
Phrase: Requesting new features

45.
Concepts: provide specific feedback, encouraging community feedback
Relationship: Both concepts involve providing and encouraging feedback.
Criteria: Users provide specific feedback and encourage community feedback.
Phrase: Providing feedback

46.
Concepts: propose usability improvements, suggest feature refinement
Relationship: Both concepts involve suggesting improvements.
Criteria: Users propose usability improvements and feature refinements.
Phrase: Suggesting improvements

47.
Concepts: visual design appreciation, appreciating craftsmanship
Relationship: Both concepts involve appreciation of design quality.
Criteria: Users appreciate the visual design and craftsmanship of the software.
Phrase: Appreciating design quality

48.
Concepts: giving positive reviews, praising software features
Relationship: Both concepts involve positive feedback.
Criteria: Users give positive reviews and praise software features.
Phrase: Praising software

49.
Concepts: emphasize convenience, discussing ease of use
Relationship: Both concepts involve discussing software convenience.
Criteria: Users discuss and emphasize the convenience and ease of use.
Phrase: Emphasizing convenience

50.
Concepts: school implementation, discussing classroom applications
Relationship: Both concepts involve discussing educational applications.
Criteria: Users discuss the implementation and application of the software in schools.
Phrase: Discussing educational applications

51.
Concepts: shared experiences and support, sharing user experiences
Relationship: Both concepts involve sharing experiences.
Criteria: Users and designers share experiences and support each other.
Phrase: Sharing experiences
---