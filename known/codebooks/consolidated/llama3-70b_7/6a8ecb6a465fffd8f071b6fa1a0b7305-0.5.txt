You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (20 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
20. 
Concepts: {Repeat the input 20}
Relationship: {What is logical relationship between concepts in code 20, or N/A if not applicable}
Criteria: {Who did what, and how for code 20}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: preferring manual coding, maintaining control over coding process
- Preferring manual coding over copying AI-generated code.
- Maintaining control over the coding process by writing code manually with AI-generated code as reference.

2.
Concepts: preferring hands-on debugging, preferring to engage actively with the learning process
- Participants do not rely solely on AI, instead taking an active role in debugging and problem-solving, and preferring hands-on debugging.
- The participant prefers to engage actively with the learning process, rather than relying on AI.

3.
Concepts: fixing errors independently, correcting ai code independently
- Participants fix errors independently and interpret AI mistakes.
- Participants correct AI-generated code independently and manually code with AI guidance, demonstrating coding independence.

4.
Concepts: prioritizing self reliance, demonstrating self-reliance
- Prioritizes self-reliance and independence in coding, preferring to fix errors manually.
- Participants attempt to debug code independently, exhibiting confidence in their ability to debug code without AI assistance, and demonstrating self-reliance in coding.

5.
Concepts: focusing on practical solutions, prioritizing problem-solving
- Participants value practical solutions over explanations, focusing on finding solutions to problems.
- Participants prioritize fixing problems over seeking explanations, choosing active problem-solving over explanation or understanding.

6.
Concepts: demonstrating proactive problem-solving, demonstrating problem-solving skills
- Participants express confidence in their own ideas and problem-solving abilities, demonstrating proactive problem-solving.
- Participants demonstrate problem-solving skills and approach, engaging in independent problem-solving, showing self-sufficiency in problem-solving.

7.
Concepts: explore creative solutions, acknowledge unconventional solutions
- Users seek alternative solutions by exploring creative solutions.
- Users acknowledge and are open to unconventional solutions.

8.
Concepts: prioritizing user experience, recognizing users' limited buffer capacity
- Participants prioritize user experience, suggesting that AI-driven systems should provide smaller, more manageable requests to avoid overwhelming users.
- Participants recognize users' limited buffer capacity and cognitive limitations, suggesting that AI should provide smaller, manageable requests to avoid overwhelming users.

9.
Concepts: desiring interface flexibility, expressing desire for more flexible interaction options
- Participants express a desire for more flexibility and control when working with AI-driven interfaces and desire more control over AI interactions.
- Expresses desire for more flexible interaction options

10.
Concepts: seeks easier ai interaction, simplifying tasks
- Seeks simpler AI interaction
- Participants simplify tasks to facilitate AI understanding, prefer straightforward tasks or approaches when working with AI-driven interfaces, and seek to reduce human effort with AI assistance.

11.
Concepts: workflow efficiency, desiring automatic code integration
- Seeks efficiency in workflow, such as automating code generation and integration.
- Desiring automatic code integration for streamlined workflow integration.

12.
Concepts: exploring neural network creation, creating a simple neural network with ai assistance
- Explores the creation of a neural network
- Creating a simple neural network with AI assistance.

13.
Concepts: setting initial tasks for ai assistance, defining an initial task for ai assistance
- Setting initial tasks for AI assistance.
- Defining an initial task for AI assistance.

14.
Concepts: defining a task for chatgpt assistance, setting clear modeling goals for ai assistance
- Defining a task for ChatGPT assistance.
- Describing the task and setting clear modeling goals for AI assistance.

15.
Concepts: setting up parameter fields with ai assistance, dictating parameter fields for ai-generated code
- Setting up parameter fields with AI assistance.
- Participants dictate parameter fields, providing input for AI-generated code.

16.
Concepts: requesting ai assistance
- Participants request AI assistance for specific tasks or problems and seek collaborative assistance from AI, asking for help with their own ideas.
- Participants ask AI for assistance and make specific program requests.

17.
Concepts: valuing efficiency
- Values efficiency in the development process
- Participants value the speed and cost-effectiveness of AI-assisted tasks.

18.
Concepts: suggesting improvements
- Participants suggest improvements for experienced users of AI-driven interfaces, suggesting improvements to AI-driven systems for novice users.
- Participants suggest ways to improve the LLM-driven interface, suggesting improvements for error management in AI-driven interfaces, and identifying potential areas for improvement in AI-driven interfaces.

19.
Concepts: highlighting the need for system support
- Participants describe their fragmented learning experiences and the need for system support, reflecting on how professionals learn in fragments and need support from the system.
- Participants reflect on how knowledge is often fragmented and not well-documented, describing expert-level fragmented learning.

20.
Concepts: evaluate ai output
- Users evaluate AI output by comparing it to human code review and initial code.
- Users evaluate AI output and make decisions based on their expertise.
===
Here are the definitions for each code:

---
1.
Concepts: preferring manual coding, maintaining control over coding process
Relationship: The concepts are related in that manual coding is a means of maintaining control over the coding process.
Criteria: Participants prefer to write code manually, using AI-generated code as a reference, to maintain control over the coding process.
Phrase: Maintaining control through manual coding.

2.
Concepts: preferring hands-on debugging, preferring to engage actively with the learning process
Relationship: The concepts are related in that hands-on debugging is a way to engage actively with the learning process.
Criteria: Participants prefer to take an active role in debugging and problem-solving, rather than relying solely on AI.
Phrase: Engaging actively through hands-on debugging.

3.
Concepts: fixing errors independently, correcting ai code independently
Relationship: The concepts are related in that fixing errors independently involves correcting AI code independently.
Criteria: Participants fix errors independently and correct AI-generated code manually, demonstrating coding independence.
Phrase: Fixing errors independently.

4.
Concepts: prioritizing self reliance, demonstrating self-reliance
Relationship: The concepts are related in that prioritizing self-reliance leads to demonstrating self-reliance.
Criteria: Participants prioritize self-reliance and independence in coding, preferring to fix errors manually.
Phrase: Prioritizing self-reliance.

5.
Concepts: focusing on practical solutions, prioritizing problem-solving
Relationship: The concepts are related in that focusing on practical solutions involves prioritizing problem-solving.
Criteria: Participants value practical solutions over explanations, prioritizing fixing problems over seeking explanations.
Phrase: Prioritizing practical problem-solving.

6.
Concepts: demonstrating proactive problem-solving, demonstrating problem-solving skills
Relationship: The concepts are related in that demonstrating proactive problem-solving involves demonstrating problem-solving skills.
Criteria: Participants express confidence in their own ideas and problem-solving abilities, demonstrating proactive problem-solving.
Phrase: Demonstrating proactive problem-solving.

7.
Concepts: explore creative solutions, acknowledge unconventional solutions
Relationship: The concepts are related in that exploring creative solutions involves acknowledging unconventional solutions.
Criteria: Users seek alternative solutions by exploring creative solutions and acknowledging unconventional solutions.
Phrase: Exploring creative solutions.

8.
Concepts: prioritizing user experience, recognizing users' limited buffer capacity
Relationship: The concepts are related in that prioritizing user experience involves recognizing users' limited buffer capacity.
Criteria: Participants prioritize user experience, recognizing users' limited buffer capacity and cognitive limitations.
Phrase: Prioritizing user-centered design.

9.
Concepts: desiring interface flexibility, expressing desire for more flexible interaction options
Relationship: The concepts are related in that desiring interface flexibility involves expressing a desire for more flexible interaction options.
Criteria: Participants express a desire for more flexibility and control when working with AI-driven interfaces.
Phrase: Desiring interface flexibility.

10.
Concepts: seeks easier ai interaction, simplifying tasks
Relationship: The concepts are related in that seeking easier AI interaction involves simplifying tasks.
Criteria: Participants seek simpler AI interaction, preferring straightforward tasks or approaches when working with AI-driven interfaces.
Phrase: Seeking simpler AI interaction.

11.
Concepts: workflow efficiency, desiring automatic code integration
Relationship: The concepts are related in that workflow efficiency involves desiring automatic code integration.
Criteria: Participants seek efficiency in workflow, desiring automatic code integration for streamlined workflow integration.
Phrase: Seeking workflow efficiency.

12.
Concepts: exploring neural network creation, creating a simple neural network with ai assistance
Relationship: The concepts are related in that exploring neural network creation involves creating a simple neural network with AI assistance.
Criteria: Participants explore the creation of a neural network with AI assistance.
Phrase: Exploring neural network creation.

13.
Concepts: setting initial tasks for ai assistance, defining an initial task for ai assistance
Relationship: The concepts are related in that setting initial tasks for AI assistance involves defining an initial task for AI assistance.
Criteria: Participants set initial tasks for AI assistance, defining an initial task for AI assistance.
Phrase: Setting initial tasks.

14.
Concepts: defining a task for chatgpt assistance, setting clear modeling goals for ai assistance
Relationship: The concepts are related in that defining a task for ChatGPT assistance involves setting clear modeling goals for AI assistance.
Criteria: Participants define a task for ChatGPT assistance, setting clear modeling goals for AI assistance.
Phrase: Defining tasks for AI assistance.

15.
Concepts: setting up parameter fields with ai assistance, dictating parameter fields for ai-generated code
Relationship: The concepts are related in that setting up parameter fields with AI assistance involves dictating parameter fields for AI-generated code.
Criteria: Participants set up parameter fields with AI assistance, dictating parameter fields for AI-generated code.
Phrase: Setting up parameter fields.

16.
Concepts: requesting ai assistance
Relationship: N/A
Criteria: Participants request AI assistance for specific tasks or problems and seek collaborative assistance from AI.
Phrase: Requesting AI assistance.

17.
Concepts: valuing efficiency
Relationship: N/A
Criteria: Participants value the speed and cost-effectiveness of AI-assisted tasks.
Phrase: Valuing efficiency.

18.
Concepts: suggesting improvements
Relationship: N/A
Criteria: Participants suggest improvements for experienced users of AI-driven interfaces, suggesting improvements to AI-driven systems for novice users.
Phrase: Suggesting improvements.

19.
Concepts: highlighting the need for system support
Relationship: N/A
Criteria: Participants describe their fragmented learning experiences and the need for system support, reflecting on how professionals learn in fragments and need support from the system.
Phrase: Highlighting the need for system support.

20.
Concepts: evaluate ai output
Relationship: N/A
Criteria: Users evaluate AI output by comparing it to human code review and initial code, making decisions based on their expertise.
Phrase: Evaluating AI output.