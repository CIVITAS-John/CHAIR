You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (52 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
52. 
Concepts: {Repeat the input 52}
Relationship: {What is logical relationship between concepts in code 52, or N/A if not applicable}
Criteria: {Who did what, and how for code 52}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: express emotions, use emojis for expression
- User expresses emotions or reactions through emojis or informal language.
- A user includes an emoji in their message, reflecting their emotional response.

2.
Concepts: greet the community, reciprocate greetings
- Users and designers greet each other in the community.
- Designers greet community members, contributing to a friendly atmosphere.

3.
Concepts: community interaction, promote community engagement
- Instances of interaction that foster a sense of community among users and designers.
- Designers and users engage in discussions that foster community interaction.

4.
Concepts: acknowledge community support, appreciate community support
- Designer expresses gratitude to the community for their support.
- Instances where users express support, encouragement, or appreciation for the designers' efforts.

5.
Concepts: acknowledge responses, express appreciation for designers, demonstrate gratitude
- A user acknowledges the designer's efforts with gratitude.
- A user expresses appreciation for the designer's efforts and hard work.
- Users express gratitude or acknowledgment for the designers' work.

6.
Concepts: acknowledge receipt, acknowledge communications
- User acknowledges receipt of information or a message.
- Simple acknowledgments made by users in response to communication.

7.
Concepts: acknowledge resolution, confirm update completion
- A user confirms that an issue has been resolved after an update.
- User confirms that an update has been successfully applied.

8.
Concepts: request guidance, inquire about usage instructions
- Requests from users seeking guidance on how to use the application.
- Users seek instructions or guidance on using specific software features.

9.
Concepts: request technical support, express need for support
- Users request assistance regarding the software.
- Users express their need for guidance on using the software.

10.
Concepts: explain technical constraints, share experiences of system limitations
- Users describe the limitations of their school's computer system, indicating potential challenges for software use.
- Users share details about the limitations of their school's computer systems.

11.
Concepts: share positive student feedback, share classroom success stories
- Users describe positive student reactions to the software during class.
- Users express positive feedback regarding the software's effectiveness.
- Users share positive experiences from using the software in classroom settings.

12.
Concepts: discuss context of use, provide situational context
- Users describe the specific contexts in which they use the software.
- Users give context about their situation that impacts the use of the software.

13.
Concepts: share teaching experience, introduce teaching background
- Users share their teaching backgrounds or experiences.
- User shares their teaching experience and background in education.

14.
Concepts: confirm user identity, ask about professional background
- The designer inquires about users' professional backgrounds to inform discussions.
- Designers inquire about users' professional roles for better context in discussions.

15.
Concepts: seek teacher input, ask teachers' needs
- Designers consult teachers for input on specific educational content needed for the software.
- Designers inquire about the needs or preferences of teachers to inform software development.

16.
Concepts: open up plans, outline future plans, plan future updates
- Designers outline their plans for future developments or features that are being considered.
- Designer details future plans for specific functionalities or features.
- The designer outlines plans for future updates and focus areas.

17.
Concepts: confirm future features, confirm feature updates
- Designers confirm that future features or updates will be implemented.
- Designer confirms that an update will be implemented and outlines the timeline.

18.
Concepts: outline release schedule, outline development timeline
- Designers outline the schedule for upcoming software updates and releases.
- The designer outlines the timeline for upcoming software releases.

19.
Concepts: provide progress updates, provide release timeline
- The designer updates the community on the timeline for software releases.
- The designer informs users about the expected timeline for a software version release.

20.
Concepts: outline feature roadmap, outline development priorities
- Designers outline their plans for the sequence of feature development or project tasks.
- Designers outline priorities for future development or feature implementation.

21.
Concepts: maintain transparency, ensure development transparency
- Designer communicates about the progress of the software development transparently.
- Designers provide detailed information about development processes and progress.

22.
Concepts: development update, communicate product updates
- Information shared by designers about the current status, updates, and future plans for the Physics Lab software.
- Designers provide information about updates or technical changes to the Physics Lab software.

23.
Concepts: communicate updates, communicate release plans
- Designers communicate updates, release schedules, or new features to users.
- Designers communicate plans for software updates and their expected timelines.

24.
Concepts: share visual updates, share development updates
- The designer shares visual updates related to software development.
- Designers provide updates on software features and improvements.

25.
Concepts: announce future updates, announce community updates
- Designers communicate upcoming software updates and invite community input on desired features.
- Designers provide updates or announcements about the software to keep the community informed.

26.
Concepts: announce software releases, inform about software availability, notify about version releases
- Designers announce the release of new software versions, detailing the updates included.
- Designers announce software updates and new versions for users.
- The designer informs the community about the release of a new software version.

27.
Concepts: announce software updates, announce version updates
- Designer announces new features included in the software update.
- Designer announces the release of a new version and outlines the updates included.

28.
Concepts: announce component updates, make update announcements
- Designer informs users about upcoming changes in the software.
- The designer makes announcements regarding development plans and updates to the software.

29.
Concepts: detail software updates, version update notes
- Designer details specific updates and enhancements in the software.
- Designers provide detailed notes on updates, features, or changes in the software version.

30.
Concepts: check for updates, inquire about updates
- Users inquire about recent updates to the software.
- Users express curiosity about recent changes or improvements in the software.

31.
Concepts: inquire about update status, inquire about update timelines
- Users inquire about the status of specific software updates.
- Users inquire about the schedule for upcoming software updates.

32.
Concepts: inquire about download process, inquire about download information
- User asks about the process to download the software.
- A user inquires about the availability and location of download options for the software.

33.
Concepts: design thoughts, propose design refinements
- The designer shares thoughts on design improvements or simplifications for the software.
- Designers suggest changes to improve the design or functionality of the software.

34.
Concepts: provide version details, clarify software version
- The designer shares detailed information about the current version of the software.
- Designer clarifies the version of the software being discussed, and users seek clarification.

35.
Concepts: introduce feature functions, explain feature functionalities
- Designers introduce new features or functions of the software, explaining their intended use and benefits.
- The designer provides explanations and elaborates on the functionalities of software features.

36.
Concepts: compare software options, comparative feedback
- Users compare the software favorably to other options based on usability.
- Users provide feedback on software by comparing it to other software, highlighting its practicality or convenience.

37.
Concepts: review software usability, express user satisfaction
- Users provide a positive review of the software's practicality.
- Users express satisfaction with the software's practicality and effectiveness.

38.
Concepts: express approval, appreciate software features
- Users express their approval or positive feelings towards the software or its features.
- Users express appreciation for existing software features and their practical applications.

39.
Concepts: request new features, make detailed feature requests
- Users requested new features or improvements to enhance the product.
- Users express specific functionalities they desire in the software.

40.
Concepts: highlight usability needs, suggest usability improvements, suggest design improvements
- Users suggest enhancements to software usability features.
- Users suggest enhancements to improve the software's usability for teachers.
- Users propose specific design features or functionalities that would enhance usability.

41.
Concepts: provide community feedback, provide suggestions and feedback
- Users provide feedback and suggestions for software improvement.
- Users provide feedback and suggestions to improve the software.

42.
Concepts: accept user suggestions, acknowledge user requests
- The designer agrees to implement user suggestions in upcoming software updates.
- The designer acknowledges user suggestions and commits to implementing them.

43.
Concepts: seek user feedback, encourage user feedback, solicit user suggestions, invite user feedback
- The designer requests feedback from users regarding desired features and improvements.
- The designer encourages users to provide additional suggestions for improvements.
- The designer solicits suggestions from users for further enhancements and improvements.
- The designer invites users to suggest new features or improvements for future updates.

44.
Concepts: engage with community, provide community updates
- Designer engages with the community by asking questions and sharing updates.
- Designer communicates updates and ongoing research to the community.

45.
Concepts: invite user participation, encourage community participation
- Designer invites community members to participate in future discussions or decisions.
- The designer encourages community members to share their thoughts and participate.

46.
Concepts: followup question, ask follow-up questions
- Designer follows up with users to clarify issues they experienced.
- Designers ask follow-up questions to understand user needs better.

47.
Concepts: inquire about user needs, inquire about user requests
- Designers ask users about their specific needs to provide better assistance.
- Designers seek input or clarification from users regarding their requests.

48.
Concepts: resolve user concerns, answer a concern
- The designer responds to alleviate user concerns regarding usability.
- Designers address users' concerns directly, reassuring them about ongoing improvements or features.

49.
Concepts: share potential solutions, propose potential solutions
- Designer shares methods for enhancing user experience based on feedback.
- The designer proposes solutions to potential issues identified by users.

50.
Concepts: troubleshooting, inquire about specific problems
- The designer seeks to understand problems users have experienced with the software.
- The designer asks users to specify issues they have faced with the software.

51.
Concepts: suggest alternative solutions, provide alternative suggestions
- User suggests an alternative solution or method for use.
- The user suggests a more effective method for using the software.

52.
Concepts: acknowledge user feedback
- Designer acknowledges and responds to user feedback and comments.
- Designers responded to user feedback and suggestions to enhance the product.
===
---
Definitions for each code (52 in total):
1.
Concepts: express emotions, use emojis for expression  
Relationship: Users express their feelings through emojis, which serve as a visual representation of their emotional responses.  
Criteria: Users express emotions or reactions through emojis in their messages.  
Phrase: Express emotions using emojis.  

2.
Concepts: greet the community, reciprocate greetings  
Relationship: Greetings exchanged between users and designers foster a welcoming environment.  
Criteria: Users and designers greet each other, contributing to a friendly atmosphere.  
Phrase: Greet and reciprocate greetings.  

3.
Concepts: community interaction, promote community engagement  
Relationship: Interaction between users and designers creates a sense of belonging and encourages active participation.  
Criteria: Users and designers engage in discussions that foster community interaction.  
Phrase: Promote community engagement through interaction.  

4.
Concepts: acknowledge community support, appreciate community support  
Relationship: Expressions of gratitude strengthen the bond between designers and the community.  
Criteria: Designers and users express gratitude and appreciation for each other's support.  
Phrase: Acknowledge and appreciate community support.  

5.
Concepts: acknowledge responses, express appreciation for designers, demonstrate gratitude  
Relationship: Acknowledgment and appreciation of designers' efforts reinforce positive community dynamics.  
Criteria: Users express gratitude and acknowledgment for the designers' work and efforts.  
Phrase: Acknowledge and express appreciation for designers.  

6.
Concepts: acknowledge receipt, acknowledge communications  
Relationship: Acknowledgment of messages indicates engagement and attentiveness in communication.  
Criteria: Users acknowledge receipt of information or messages.  
Phrase: Acknowledge communications.  

7.
Concepts: acknowledge resolution, confirm update completion  
Relationship: Confirmation of resolved issues indicates effective communication and problem-solving.  
Criteria: Users confirm that issues have been resolved after updates.  
Phrase: Confirm resolution of issues.  

8.
Concepts: request guidance, inquire about usage instructions  
Relationship: Seeking guidance reflects users' need for support in using the software effectively.  
Criteria: Users request guidance on how to use the application.  
Phrase: Request guidance on usage.  

9.
Concepts: request technical support, express need for support  
Relationship: Users' requests for support indicate their reliance on the community for assistance.  
Criteria: Users express their need for technical support regarding the software.  
Phrase: Request technical support.  

10.
Concepts: explain technical constraints, share experiences of system limitations  
Relationship: Sharing experiences of limitations provides context for challenges faced by users.  
Criteria: Users describe the limitations of their school's computer systems.  
Phrase: Explain technical constraints.  

11.
Concepts: share positive student feedback, share classroom success stories  
Relationship: Positive feedback and success stories enhance the community's morale and validate the software's effectiveness.  
Criteria: Users share positive experiences and feedback regarding the software's impact in classrooms.  
Phrase: Share positive feedback and success stories.  

12.
Concepts: discuss context of use, provide situational context  
Relationship: Providing context helps others understand how the software is utilized in various settings.  
Criteria: Users describe the specific contexts in which they use the software.  
Phrase: Discuss context of use.  

13.
Concepts: share teaching experience, introduce teaching background  
Relationship: Sharing teaching backgrounds fosters connection and credibility among users.  
Criteria: Users share their teaching experiences and backgrounds.  
Phrase: Share teaching experiences.  

14.
Concepts: confirm user identity, ask about professional background  
Relationship: Inquiring about professional backgrounds helps designers tailor discussions to users' expertise.  
Criteria: Designers inquire about users' professional backgrounds for better context.  
Phrase: Confirm user identity and background.  

15.
Concepts: seek teacher input, ask teachers' needs  
Relationship: Consulting teachers ensures that the software meets educational needs and preferences.  
Criteria: Designers consult teachers for input on educational content for the software.  
Phrase: Seek teacher input on needs.  

16.
Concepts: open up plans, outline future plans, plan future updates  
Relationship: Outlining future plans keeps the community informed and engaged in the development process.  
Criteria: Designers outline their plans for future developments or updates.  
Phrase: Outline future plans and updates.  

17.
Concepts: confirm future features, confirm feature updates  
Relationship: Confirmation of future features builds anticipation and trust within the community.  
Criteria: Designers confirm that future features or updates will be implemented.  
Phrase: Confirm future features.  

18.
Concepts: outline release schedule, outline development timeline  
Relationship: A clear timeline helps manage community expectations regarding software updates.  
Criteria: Designers outline the schedule for upcoming software releases.  
Phrase: Outline release schedule.  

19.
Concepts: provide progress updates, provide release timeline  
Relationship: Regular updates maintain transparency and keep users informed about development progress.  
Criteria: Designers update the community on the timeline for software releases.  
Phrase: Provide progress updates.  

20.
Concepts: outline feature roadmap, outline development priorities  
Relationship: A roadmap clarifies the sequence and priorities of future developments for the community.  
Criteria: Designers outline their plans for feature development and priorities.  
Phrase: Outline feature roadmap.  

21.
Concepts: maintain transparency, ensure development transparency  
Relationship: Transparency in communication fosters trust and accountability within the community.  
Criteria: Designers communicate transparently about the software development progress.  
Phrase: Maintain transparency in development.  

22.
Concepts: development update, communicate product updates  
Relationship: Sharing updates keeps users informed and engaged with the software's evolution.  
Criteria: Designers provide information about current status and future plans for the software.  
Phrase: Communicate development updates.  

23.
Concepts: communicate updates, communicate release plans  
Relationship: Clear communication about updates helps manage user expectations and engagement.  
Criteria: Designers communicate plans for software updates and their timelines.  
Phrase: Communicate updates and release plans.  

24.
Concepts: share visual updates, share development updates  
Relationship: Visual updates enhance understanding and engagement with the software's development.  
Criteria: Designers share visual updates related to software development.  
Phrase: Share visual updates.  

25.
Concepts: announce future updates, announce community updates  
Relationship: Announcements keep the community informed and encourage participation in the development process.  
Criteria: Designers communicate upcoming software updates and invite community input.  
Phrase: Announce future updates.  

26.
Concepts: announce software releases, inform about software availability, notify about version releases  
Relationship: Announcing releases keeps users informed about new versions and their features.  
Criteria: Designers announce the release of new software versions and their updates.  
Phrase: Announce software releases.  

27.
Concepts: announce software updates, announce version updates  
Relationship: Announcements of updates provide users with essential information about new features.  
Criteria: Designers announce new features included in the software update.  
Phrase: Announce software updates.  

28.
Concepts: announce component updates, make update announcements  
Relationship: Announcing component updates informs users about specific changes to the software.  
Criteria: Designers inform users about upcoming changes and developments.  
Phrase: Announce component updates.  

29.
Concepts: detail software updates, version update notes  
Relationship: Detailed notes provide users with clarity about changes and enhancements in the software.  
Criteria: Designers provide detailed notes on updates and features in the software version.  
Phrase: Detail software updates.  

30.
Concepts: check for updates, inquire about updates  
Relationship: Inquiring about updates reflects users' interest in staying informed about software changes.  
Criteria: Users inquire about recent updates to the software.  
Phrase: Check for software updates.  

31.
Concepts: inquire about update status, inquire about update timelines  
Relationship: Inquiries about update status indicate users' desire for timely information regarding software improvements.  
Criteria: Users inquire about the status of specific software updates.  
Phrase: Inquire about update status.  

32.
Concepts: inquire about download process, inquire about download information  
Relationship: Inquiries about the download process indicate users' readiness to access the software.  
Criteria: Users ask about the process to download the software.  
Phrase: Inquire about download process.  

33.
Concepts: design thoughts, propose design refinements  
Relationship: Sharing design thoughts encourages collaboration and improvement of the software.  
Criteria: Designers share thoughts on design improvements for the software.  
Phrase: Propose design refinements.  

34.
Concepts: provide version details, clarify software version  
Relationship: Providing version details helps users understand the current state of the software.  
Criteria: Designers share detailed information about the current version of the software.  
Phrase: Provide version details.  

35.
Concepts: introduce feature functions, explain feature functionalities  
Relationship: Introducing features helps users understand their purpose and usability.  
Criteria: Designers introduce new features and explain their intended use.  
Phrase: Introduce and explain features.  

36.
Concepts: compare software options, comparative feedback  
Relationship: Comparing software options provides insight into its advantages relative to competitors.  
Criteria: Users compare the software favorably to other options based on usability.  
Phrase: Compare software options.  

37.
Concepts: review software usability, express user satisfaction  
Relationship: Positive reviews contribute to the software's reputation and user confidence.  
Criteria: Users provide a positive review of the software's practicality and effectiveness.  
Phrase: Review software usability.  

38.
Concepts: express approval, appreciate software features  
Relationship: Expressing approval reinforces users' positive experiences with the software.  
Criteria: Users express their approval and appreciation for existing software features.  
Phrase: Express approval of features.  

39.
Concepts: request new features, make detailed feature requests  
Relationship: Requests for new features indicate users' desire for enhanced functionality.  
Criteria: Users request new features or improvements to the software.  
Phrase: Request new features.  

40.
Concepts: highlight usability needs, suggest usability improvements, suggest design improvements  
Relationship: Suggestions for improvements indicate users' engagement and desire for a better experience.  
Criteria: Users suggest enhancements to software usability features.  
Phrase: Suggest usability improvements.  

41.
Concepts: provide community feedback, provide suggestions and feedback  
Relationship: Providing feedback encourages a collaborative environment for software improvement.  
Criteria: Users provide feedback and suggestions for software improvement.  
Phrase: Provide community feedback.  

42.
Concepts: accept user suggestions, acknowledge user requests  
Relationship: Acceptance of user suggestions fosters a collaborative development process.  
Criteria: Designers agree to implement user suggestions in upcoming updates.  
Phrase: Accept and acknowledge user suggestions.  

43.
Concepts: seek user feedback, encourage user feedback, solicit user suggestions, invite user feedback  
Relationship: Inviting feedback enhances user involvement in the development process.  
Criteria: Designers request and encourage feedback from users for improvements.  
Phrase: Seek and invite user feedback.  

44.
Concepts: engage with community, provide community updates  
Relationship: Engagement with the community fosters a sense of belonging and collaboration.  
Criteria: Designers engage with the community by sharing updates and asking questions.  
Phrase: Engage with the community.  

45.
Concepts: invite user participation, encourage community participation  
Relationship: Inviting participation encourages community members to contribute to discussions and decisions.  
Criteria: Designers invite and encourage community members to participate.  
Phrase: Invite community participation.  

46.
Concepts: followup question, ask follow-up questions  
Relationship: Follow-up questions help clarify user needs and enhance understanding.  
Criteria: Designers ask follow-up questions to clarify user issues.  
Phrase: Ask follow-up questions.  

47.
Concepts: inquire about user needs, inquire about user requests  
Relationship: Inquiring about user needs ensures that support is tailored to their specific requirements.  
Criteria: Designers ask users about their specific needs and requests.  
Phrase: Inquire about user needs.  

48.
Concepts: resolve user concerns, answer a concern  
Relationship: Addressing user concerns builds trust and confidence in the software.  
Criteria: Designers respond to alleviate user concerns regarding usability.  
Phrase: Resolve user concerns.  

49.
Concepts: share potential solutions, propose potential solutions  
Relationship: Sharing solutions fosters a collaborative approach to addressing user issues.  
Criteria: Designers share and propose methods for enhancing user experience.  
Phrase: Share potential solutions.  

50.
Concepts: troubleshooting, inquire about specific problems  
Relationship: Inquiring about problems helps identify and address user issues effectively.  
Criteria: Designers seek to understand specific problems users have experienced.  
Phrase: Inquire about specific problems.  

51.
Concepts: suggest alternative solutions, provide alternative suggestions  
Relationship: Suggesting alternatives encourages creative problem-solving and user engagement.  
Criteria: Users suggest alternative methods for using the software.  
Phrase: Suggest alternative solutions.  

52.
Concepts: acknowledge user feedback  
Relationship: Acknowledging feedback shows responsiveness and values user contributions.  
Criteria: Designers acknowledge and respond to user feedback and suggestions.  
Phrase: Acknowledge user feedback.  
---