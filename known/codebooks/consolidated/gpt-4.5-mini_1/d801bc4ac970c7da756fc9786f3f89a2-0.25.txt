You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (48 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
48. 
Concepts: {Repeat the input 48}
Relationship: {What is logical relationship between concepts in code 48, or N/A if not applicable}
Criteria: {Who did what, and how for code 48}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: experimental simulations in electricity, enhance simulations and detail experiments
- Designer discusses plans for experimental simulations related to electricity.
- Designers describe enhancements to simulation capabilities and discuss plans for simulated experiments.

2.
Concepts: open up development plans, plan future updates and explain focus
- Designers outline future plans and specific goals for software development.
- Designers outline the planning process for future updates and current priorities in development.

3.
Concepts: promise future consultation, announce collaborative design plans
- Designers indicate plans to seek user input and commit to consulting the group before starting new developments.
- Designers announce intentions to involve community members in future design consultations and considerations.

4.
Concepts: discuss platform-specific updates, clarify and provide version information
- Designers provide platform-specific information and specify the version of the app relevant to that platform.
- Designers clarify the version of the software being discussed and provide additional information about its features.

5.
Concepts: describe potential updates, announce new features and improvements
- Designers mention potential future updates and provide details about the scope of these updates.
- Designers share details about new version features, announce improvements, and introduce the content of upcoming updates.

6.
Concepts: share app release information, communicate progress and ongoing work, discuss release and update processes
- Designers provide information about the app's release status and update the community on the app review process.
- Designers communicate updates on the progress of software releases and ongoing work on specific aspects.
- Designers discuss the status of the software release process and the update schedule for different versions.

7.
Concepts: explain technical details, provide technical clarification
- Designers explain technical specifications and details about the software's features and capabilities.
- Designers clarify technical aspects and provide specifications related to user interface and functionality.

8.
Concepts: explain design rationale, explain the need and rationale
- Designers explain the rationale behind the user-friendly design and the intentions guiding the app's design.
- Designers explain the rationale behind development efforts and clarify decisions or features.

9.
Concepts: component adjustments, discuss feature adjustments
- The designer discusses modifications made to electronic components within the software.
- Designers discuss necessary adjustments to existing features and acknowledge the need for design adaptations.

10.
Concepts: understanding designers' situation, acknowledge user experiences and needs
- Users express understanding or empathy towards the designers' challenges or situations.
- Designers acknowledge user experiences regarding technical issues and the need for specific features based on feedback.

11.
Concepts: seek visual confirmation for clarity, ensure accuracy through clarification
- The designer seeks visual confirmation from users regarding specific items or points.
- The designer seeks clarification on user requests and provides accurate responses to questions.

12.
Concepts: confirm reasoning in discussions, confirm understanding in communication
- The designer confirms users' statements and users affirm the designer's arguments.
- Users and designers confirm their understanding of previous messages.

13.
Concepts: validate user requests, acknowledge feedback and confirm collaboration
- Designers agree to implement user requests in future updates and validate their suggestions.
- Users and designers acknowledge each other's points and confirm plans to implement suggested features.

14.
Concepts: proposing design idea, elaborate on suggestions for clarity, share potential solutions
- Designers suggest potential improvements or additions to the software's features based on user needs.
- Designers elaborate on functionalities and suggestions based on user experiences.
- Designers share potential solutions based on user feedback and relevant information impacting design.

15.
Concepts: explain usability and design goals, address user interface and usability
- Designers emphasize usability and explain design goals aimed at enhancing user experience.
- Designers address user interface issues and discuss potential improvements to usability.

16.
Concepts: offers a diagnose for the problem, confirm software compatibility
- Designer provides a diagnosis regarding software compatibility issues.
- Designers provide specific information and confirm software compatibility with operating systems.

17.
Concepts: analyze system compatibility, consider future compatibility
- Designers discuss compatibility issues with older systems and analyze related problems.
- Designers consider future compatibility issues and suggest checking system compatibility for updates.

18.
Concepts: limitation of the team, discuss limitations and solutions
- The designer discusses the limitations faced by the development team.
- Designers highlight current solution limitations while discussing how they can be addressed.

19.
Concepts: acknowledge and explain limitations, suggesting why it cannot be solved due to system used
- Designers acknowledge potential issues with software compatibility and explain limitations of functionality.
- Designers explain limitations related to system compatibility, helping users understand potential issues.

20.
Concepts: discuss feature complexity, compare feature complexities
- Designers indicate the complexity of features and the time required for their completion.
- Designer compares the complexity of different features in terms of development and stability.

21.
Concepts: provide release timelines, giving a timeline for development
- Designers provide timelines for upcoming updates and releases, including those specific to Android.
- The designer outlines timelines for the development of specific features or experiments.

22.
Concepts: inquire about platform compatibility, provide specifics on compatibility
- Users specify the platform for which they need information and inquire about compatibility.
- A user provides specific details about their operating system compatibility and confirms its functionality.

23.
Concepts: seek version clarification, inquire about software updates
- Users ask for clarification about the app's version or platform availability.
- Users inquire about upcoming updates or the status of the Android version.

24.
Concepts: platform question, ask technical questions
- Users inquire about the platform's functionalities or updates.
- Users ask various technical questions about the platform.

25.
Concepts: new user interaction, ask questions for information
- Users engage with the community by asking questions about the software.
- Users ask questions to seek information or clarification regarding the software and its features.

26.
Concepts: school implementation, describe school initiatives and community context
- User describes their school's initiatives towards modernization.
- Users describe their school's development initiatives and how these relate to their engagement with the software or community.

27.
Concepts: highlight technical issues, discuss limitations of outdated technology
- A user describes a technical issue related to outdated technology in their environment.
- Users comment on and share information about outdated computer systems used in schools.

28.
Concepts: software effectiveness, share user experiences in classrooms
- Users comment on the effectiveness or quality of software features, particularly in educational settings.
- Users describe and share positive experiences from using the software in classrooms.

29.
Concepts: express detailed user needs, articulate educational needs and context
- Users express their needs for specific functionalities and articulate reasons for their requests.
- Users provide context regarding their educational needs and highlight specific requirements related to the software's functionality.

30.
Concepts: contextualization of question, provide context for understanding
- Users provide context for their inquiries based on their experiences.
- A user provides context and explanations regarding situations affecting app usage.

31.
Concepts: acknowledge receipt of messages, acknowledge resolution of issues
- Users acknowledge receipt of information or messages with affirmative responses.
- Users acknowledge receipt of information and indicate that issues have been resolved.

32.
Concepts: establish credibility, share teaching experience
- User shares their teaching experience to establish authority in the community.
- A user identifies as a teacher and shares their teaching experiences with the community.

33.
Concepts: high school, introduce teaching background
- Users specify their teaching experience and background in high school.
- A user identifies their teaching background, including grade levels and experience.

34.
Concepts: confirm teacher identity, sharing identity per request
- A user confirms their role as a teacher during interactions.
- A user shares their teaching background in response to a request for information.

35.
Concepts: acknowledge help and resources, build community through gratitude
- Users express gratitude for help and acknowledge resources shared in the community.
- Users express gratitude and encouragement, contributing to community building.

36.
Concepts: reflect on past experiences, shared experiences and support
- Designers reflect on past experiences with the software and share insights for future use.
- Users and designers sharing experiences and supporting each other in using and improving the software.

37.
Concepts: story sharing, share past incidents for context
- Users share stories or experiences that provide context for discussions.
- Users recount past incidents that have influenced their current practices.

38.
Concepts: real time communication, engage in user interaction
- Designer engages in real-time communication with a user.
- Designers and users engage in direct communication about the app's functionality and features.

39.
Concepts: invite community participation, maintain engagement in the community
- The designer engages users by asking questions and inviting participation.
- The designer shows engagement through affirmative responses and acknowledges user participation.

40.
Concepts: initiate community interaction, welcome users with friendly communication
- Users or designers greet the community, often introducing topics or asking questions.
- The designer greets users and initiates friendly communication.

41.
Concepts: inquire about problems, inquire about design for support
- Designers inquire about specific problems users face and users raise related issues for further discussion.
- Designers inquire about design requirements while users provide answers related to design support.

42.
Concepts: seek context and understand needs, gather user context for tailored design
- Designers ask users for context regarding their experiences and seek to understand their challenges.
- The designer gathers context by inquiring about the user's teaching environment and professional background.

43.
Concepts: user role inquiry, identify community roles
- A designer inquires about the user's role to tailor their response.
- Designers inquire about users' roles, and users identify their roles within the community.

44.
Concepts: query and response, respond to community inquiries
- Instances where users ask questions and receive answers from designers or other community members.
- The designer answers community questions and responds to users' initial inquiries.

45.
Concepts: refine design based on feedback, commit to improvement based on feedback
- Designers express intentions to refine the design and align actions with user feedback for improvements.
- Designers commit to improving the software and prioritize user feedback in future updates.

46.
Concepts: offer further suggestions, provide feedback with justifications
- Users provide further suggestions or confirm the viability of alternative solutions.
- Users suggest features based on their needs and provide justifications for their recommendations.

47.
Concepts: appreciate development plans, express appreciation for software features
- Users express positive feedback regarding the development plans for the software.
- Users express appreciation for the software's features and the developers' efforts.

48.
Concepts: promise ongoing improvements, reassure users about progress
- Designers express gratitude for user support while promising ongoing improvements and future feature implementations.
- Designers reassure users about the progress of updates and express gratitude or encouragement to resolve their concerns.
===
---
Definitions for each code (48 in total):
1.
Concepts: experimental simulations in electricity, enhance simulations and detail experiments
Relationship: The designer discusses plans for experimental simulations while also describing enhancements to simulation capabilities.
Criteria: Designers discuss plans for experimental simulations related to electricity and enhancements to simulation capabilities.
Phrase: Discuss experimental simulations.

2.
Concepts: open up development plans, plan future updates and explain focus
Relationship: Designers outline future plans and specific goals while detailing the planning process for updates.
Criteria: Designers outline future software development plans and current priorities for updates.
Phrase: Outline development plans.

3.
Concepts: promise future consultation, announce collaborative design plans
Relationship: Designers indicate plans to seek user input and announce intentions to involve community members.
Criteria: Designers commit to consulting the group before new developments and announce collaborative design plans.
Phrase: Announce collaborative design.

4.
Concepts: discuss platform-specific updates, clarify and provide version information
Relationship: Designers provide platform-specific information while clarifying the version of the app.
Criteria: Designers clarify the version of the software and provide platform-specific information.
Phrase: Clarify version information.

5.
Concepts: describe potential updates, announce new features and improvements
Relationship: Designers mention potential future updates while providing details about new features.
Criteria: Designers share details about potential updates and announce new features.
Phrase: Announce new features.

6.
Concepts: share app release information, communicate progress and ongoing work, discuss release and update processes
Relationship: Designers provide information about the app's release status and communicate updates on ongoing work.
Criteria: Designers discuss the app's release status and update the community on progress.
Phrase: Communicate release information.

7.
Concepts: explain technical details, provide technical clarification
Relationship: Designers explain technical specifications while clarifying technical aspects.
Criteria: Designers provide technical specifications and clarify software features.
Phrase: Explain technical details.

8.
Concepts: explain design rationale, explain the need and rationale
Relationship: Designers explain the rationale behind the design and the intentions guiding development efforts.
Criteria: Designers clarify the rationale behind design decisions and development efforts.
Phrase: Explain design rationale.

9.
Concepts: component adjustments, discuss feature adjustments
Relationship: Designers discuss modifications made to components while acknowledging necessary feature adjustments.
Criteria: Designers discuss modifications to electronic components and adjustments to existing features.
Phrase: Discuss feature adjustments.

10.
Concepts: understanding designers' situation, acknowledge user experiences and needs
Relationship: Users express understanding towards designers' challenges while designers acknowledge user experiences.
Criteria: Users empathize with designers' situations and designers acknowledge user needs.
Phrase: Acknowledge user experiences.

11.
Concepts: seek visual confirmation for clarity, ensure accuracy through clarification
Relationship: Designers seek visual confirmation from users while also seeking clarification on requests.
Criteria: Designers seek visual confirmation and clarification to ensure accuracy.
Phrase: Seek visual confirmation.

12.
Concepts: confirm reasoning in discussions, confirm understanding in communication
Relationship: Designers and users confirm each other's statements and understanding.
Criteria: Users and designers confirm their understanding of discussions.
Phrase: Confirm understanding.

13.
Concepts: validate user requests, acknowledge feedback and confirm collaboration
Relationship: Designers agree to implement user requests while acknowledging each other's points.
Criteria: Designers validate user requests and confirm collaboration plans.
Phrase: Validate user requests.

14.
Concepts: proposing design idea, elaborate on suggestions for clarity, share potential solutions
Relationship: Designers suggest improvements based on user needs while elaborating on functionalities.
Criteria: Designers propose design ideas and share potential solutions based on feedback.
Phrase: Propose design ideas.

15.
Concepts: explain usability and design goals, address user interface and usability
Relationship: Designers emphasize usability while addressing user interface issues.
Criteria: Designers explain design goals aimed at enhancing user experience and usability.
Phrase: Explain usability goals.

16.
Concepts: offers a diagnose for the problem, confirm software compatibility
Relationship: Designers provide a diagnosis regarding compatibility issues while confirming specific information.
Criteria: Designers diagnose software compatibility issues and confirm compatibility with operating systems.
Phrase: Diagnose compatibility issues.

17.
Concepts: analyze system compatibility, consider future compatibility
Relationship: Designers discuss compatibility issues with older systems while considering future compatibility.
Criteria: Designers analyze current compatibility issues and consider future implications.
Phrase: Analyze system compatibility.

18.
Concepts: limitation of the team, discuss limitations and solutions
Relationship: Designers discuss limitations faced by the team while highlighting current solution limitations.
Criteria: Designers discuss team limitations and potential solutions.
Phrase: Discuss team limitations.

19.
Concepts: acknowledge and explain limitations, suggesting why it cannot be solved due to system used
Relationship: Designers acknowledge potential issues while explaining limitations related to system compatibility.
Criteria: Designers explain limitations of functionality and potential issues.
Phrase: Explain limitations.

20.
Concepts: discuss feature complexity, compare feature complexities
Relationship: Designers indicate the complexity of features while comparing different complexities.
Criteria: Designers discuss and compare the complexity of various features.
Phrase: Compare feature complexities.

21.
Concepts: provide release timelines, giving a timeline for development
Relationship: Designers provide timelines for updates while outlining development timelines.
Criteria: Designers provide timelines for upcoming updates and specific feature developments.
Phrase: Provide release timelines.

22.
Concepts: inquire about platform compatibility, provide specifics on compatibility
Relationship: Users inquire about compatibility while providing specific details about their operating systems.
Criteria: Users ask about platform compatibility and provide specifics.
Phrase: Inquire about compatibility.

23.
Concepts: seek version clarification, inquire about software updates
Relationship: Users ask for clarification about the app's version while inquiring about upcoming updates.
Criteria: Users seek clarification on the app's version and inquire about updates.
Phrase: Seek version clarification.

24.
Concepts: platform question, ask technical questions
Relationship: Users inquire about platform functionalities while asking technical questions.
Criteria: Users ask questions regarding platform functionalities and technical aspects.
Phrase: Ask technical questions.

25.
Concepts: new user interaction, ask questions for information
Relationship: Users engage with the community by asking questions to seek information.
Criteria: Users ask questions to gather information about the software.
Phrase: Engage with questions.

26.
Concepts: school implementation, describe school initiatives and community context
Relationship: Users describe their school's initiatives while relating them to their engagement with the software.
Criteria: Users describe school initiatives and their relevance to community engagement.
Phrase: Describe school initiatives.

27.
Concepts: highlight technical issues, discuss limitations of outdated technology
Relationship: Users describe technical issues related to outdated technology while sharing information about systems.
Criteria: Users highlight technical issues and discuss limitations of outdated technology.
Phrase: Highlight technical issues.

28.
Concepts: software effectiveness, share user experiences in classrooms
Relationship: Users comment on the effectiveness of software features while sharing experiences in educational settings.
Criteria: Users share experiences regarding the software's effectiveness in classrooms.
Phrase: Share user experiences.

29.
Concepts: express detailed user needs, articulate educational needs and context
Relationship: Users express their needs for functionalities while providing context regarding their educational requirements.
Criteria: Users articulate specific needs and educational context for software functionalities.
Phrase: Express user needs.

30.
Concepts: contextualization of question, provide context for understanding
Relationship: Users provide context for their inquiries based on experiences.
Criteria: Users provide context to enhance understanding of their questions.
Phrase: Provide context for understanding.

31.
Concepts: acknowledge receipt of messages, acknowledge resolution of issues
Relationship: Users acknowledge receipt of information while indicating resolution of issues.
Criteria: Users acknowledge receipt of messages and resolution of issues.
Phrase: Acknowledge receipt of messages.

32.
Concepts: establish credibility, share teaching experience
Relationship: Users share their teaching experience to establish authority within the community.
Criteria: Users share their teaching background to establish credibility.
Phrase: Establish credibility.

33.
Concepts: high school, introduce teaching background
Relationship: Users specify their teaching experience in high school while identifying their background.
Criteria: Users introduce their teaching background and experience in high school.
Phrase: Introduce teaching background.

34.
Concepts: confirm teacher identity, sharing identity per request
Relationship: Users confirm their role as a teacher while sharing their background upon request.
Criteria: Users confirm their teacher identity and share relevant background information.
Phrase: Confirm teacher identity.

35.
Concepts: acknowledge help and resources, build community through gratitude
Relationship: Users express gratitude for help while acknowledging resources shared in the community.
Criteria: Users acknowledge help and express gratitude to build community.
Phrase: Build community through gratitude.

36.
Concepts: reflect on past experiences, shared experiences and support
Relationship: Designers reflect on past experiences while users share insights for future use.
Criteria: Users and designers share experiences and support each other.
Phrase: Share experiences and support.

37.
Concepts: story sharing, share past incidents for context
Relationship: Users share stories that provide context for discussions.
Criteria: Users recount past incidents to provide context for current practices.
Phrase: Share past incidents.

38.
Concepts: real time communication, engage in user interaction
Relationship: Designers engage in real-time communication with users about the app's features.
Criteria: Designers and users engage in direct communication regarding functionalities.
Phrase: Engage in real-time communication.

39.
Concepts: invite community participation, maintain engagement in the community
Relationship: Designers engage users by inviting participation while acknowledging user contributions.
Criteria: Designers invite community participation and maintain engagement.
Phrase: Invite community participation.

40.
Concepts: initiate community interaction, welcome users with friendly communication
Relationship: Users or designers greet the community while initiating friendly communication.
Criteria: Designers and users greet the community and introduce discussions.
Phrase: Welcome users.

41.
Concepts: inquire about problems, inquire about design for support
Relationship: Designers inquire about specific problems while users raise related issues.
Criteria: Designers ask about user problems and design requirements for support.
Phrase: Inquire about problems.

42.
Concepts: seek context and understand needs, gather user context for tailored design
Relationship: Designers ask users for context regarding their experiences to understand challenges.
Criteria: Designers gather context by inquiring about users' experiences and needs.
Phrase: Seek user context.

43.
Concepts: user role inquiry, identify community roles
Relationship: Designers inquire about users' roles while users identify their roles within the community.
Criteria: Designers ask about user roles to tailor responses and users identify their roles.
Phrase: Identify community roles.

44.
Concepts: query and response, respond to community inquiries
Relationship: Users ask questions and receive answers from designers or community members.
Criteria: Designers respond to community inquiries and provide answers.
Phrase: Respond to inquiries.

45.
Concepts: refine design based on feedback, commit to improvement based on feedback
Relationship: Designers express intentions to refine the design while committing to user feedback.
Criteria: Designers commit to refining the design based on user feedback.
Phrase: Refine design based on feedback.

46.
Concepts: offer further suggestions, provide feedback with justifications
Relationship: Users provide further suggestions while justifying their recommendations.
Criteria: Users suggest features and provide justifications for their recommendations.
Phrase: Offer further suggestions.

47.
Concepts: appreciate development plans, express appreciation for software features
Relationship: Users express positive feedback regarding development plans while appreciating software features.
Criteria: Users express appreciation for development plans and software features.
Phrase: Appreciate development plans.

48.
Concepts: promise ongoing improvements, reassure users about progress
Relationship: Designers express gratitude for user support while promising ongoing improvements.
Criteria: Designers reassure users about progress and promise ongoing improvements.
Phrase: Promise ongoing improvements.
---