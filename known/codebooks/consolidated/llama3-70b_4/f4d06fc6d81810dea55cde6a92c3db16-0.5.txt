You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (32 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
32. 
Concepts: {Repeat the input 32}
Relationship: {What is logical relationship between concepts in code 32, or N/A if not applicable}
Criteria: {Who did what, and how for code 32}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: core concept prioritization, prioritizing core concepts
- Prioritizing core concepts over extensions when learning new skills or tools.
- The participant prioritizes core concepts over extensions when learning new programming languages.

2.
Concepts: contextualized learning importance, recognizing the importance of context in ai-assisted learning
- Recognizing the importance of contextualized learning
- Emphasizes the importance of context in AI-assisted learning.

3.
Concepts: appreciating thoughtful model creation, appreciating thoughtful model creation approach
- Appreciates thoughtful model creation and best practices.
- The interviewee appreciates a thoughtful model creation approach.

4.
Concepts: ai follows best practices, ai focuses on best practices
- Notes that the AI follows best practices in coding, avoiding ruthless model creation.
- Noting the AI's focus on best practices rather than creating a model quickly.

5.
Concepts: notes adherence to best practices, appreciating adherence to best practices, recognizing adherence to coding standards
- The interviewee notes an AI system's adherence to best practices in coding or modeling.
- The interviewee appreciates an AI system's adherence to best practices in coding or modeling.
- The interviewee recognizes an AI system's adherence to coding standards or best practices.

6.
Concepts: advocating for clear code writing, prioritizing code readability
- The interviewee advocates for clear and straightforward code writing.
- The interviewee prioritizes code readability, advocating for simple and accessible code structures.

7.
Concepts: valuing plain code, importance of code readability and simplicity, importance of code readability and simplicity ( duplicate, refine label)
- Highlighting the advantage of plain code in maintenance, valuing simplicity and readability.
- Values the importance of simple and accessible code for maintenance.
- Emphasizes the importance of code readability and simplicity for future maintenance.

8.
Concepts: valuing code simplicity, easy to maintain code, simplicity of code
- Interviewee values simplicity in code for easier maintenance.
- Participant values or prioritizes easy-to-maintain code, emphasizing the importance of simplicity and clarity.
- The participant values simplicity and clarity in code, making it easier to maintain and understand.

9.
Concepts: preferring plain, accessible code, preferring simple, maintainable code
- The participant prefers plain, accessible code for maintenance.
- Preferring simple, maintainable code over complex or tricky code.

10.
Concepts: quality, importance of maintainable code
- The participant discusses the importance of code quality and maintainability.
- The participant emphasizes the importance of maintainable code.

11.
Concepts: code quality and complexity, discussing code complexity and quality
- The participant discusses code quality and complexity.
- The participant discusses code complexity and quality.

12.
Concepts: importance of code simplicity, discussing code complexity
- Discussing code complexity and quality for maintainability
- The participant discusses code complexity and the importance of simplicity.

13.
Concepts: code quality importance, code validation importance
- Emphasizing the importance of code quality.
- Emphasizing the importance of code validation.

14.
Concepts: establishing credibility, credibility through experience
- Interviewee establishes credibility by sharing prior programming experiences.
- Establishing credibility through prior experiences in computer programming.

15.
Concepts: sharing programming experience, shares extensive programming experience, sharing extensive experience in programming languages
- Sharing prior experiences in computer programming, highlighting expertise.
- Participant shares their extensive programming experience or background in computer programming.
- Sharing extensive experience in various programming languages.

16.
Concepts: prior programming experience, prior experiences in computer programming
- Shares prior experiences or expertise in programming or computer science.
- Reflects on extensive programming experience
- Shares prior experiences in computer programming

17.
Concepts: sharing prior programming experience, prior experience in computer programming
- The interviewee shares their prior experiences in computer programming.
- The participant shares their prior experiences in computer programming.

18.
Concepts: beginner coding challenges, writing large code chunks, challenges in debugging large code chunks
- The participant notes that beginners may write large code chunks, leading to errors.
- The interviewee notes the tendency of beginners to write large chunks of code, leading to errors and difficulties.
- The interviewee notes that beginners often write large chunks of code and struggle to identify and fix errors.

19.
Concepts: challenges for programming novices, notes the challenge of assisting novice programmers based on incomplete information
- Interviewee identifies challenges for programming novices.
- The interviewee notes the challenges of assisting novice programmers, including incomplete information and lack of context.

20.
Concepts: novice debugging needs, novices may lack debugging skills, notes lack of debugging skills
- The participant believes novices need practice in debugging their own code.
- The participant notes that novice programmers may lack debugging skills and may need additional support.
- The participant notes that beginners may lack debugging skills and need practice in debugging their own code.

21.
Concepts: novice struggles, observing beginners' struggles
- The participant reflects on novices' struggles with debugging and design outlines.
- The participant observes that beginners often struggle with conceptual errors in their code.

22.
Concepts: highlights challenges faced by novices, reflects on challenges novices face in programming and debugging
- The participant highlights the challenges faced by novices when working with AI-generated code.
- Reflects on the difficulties that novices may face in programming and debugging with AI assistance.

23.
Concepts: manual ai code integration, manually integrating ai output
- Manually integrating AI-generated code into a program.
- Interviewee decides to manually integrate the AI's output into their code.

24.
Concepts: integrating into the model, integrating ai-generated code
- Integrating AI-generated code into a model
- Integrates AI-generated code into the model.
- Integrating AI-generated code fully into their work.

25.
Concepts: liking automatic code integration, appreciating automatic code integration
- The participant appreciates the ability to automatically integrate AI-generated code into the model.
- Appreciating the automatic integration of generated code into the model.
- The participant appreciates the capability to automatically integrate the AI-generated code.

26.
Concepts: seamless workflow integration, seeking seamless workflow integration
- Desire for seamless integration of AI-generated code into the workflow.
- Seeking seamless workflow integration with AI systems.

27.
Concepts: automatic code integration, wanting automatic code integration
- Desiring automatic code integration into the model.
- The participant wants the ability to automatically integrate generated code into their model.

28.
Concepts: time-sensitive ai usage, time-constrained ai reliance, relying on ai due to time constraints
- Uses the AI-generated code or output due to time constraints or pressure.
- Relying on AI-generated code when facing time constraints.
- Relies on AI due to time constraints.

29.
Concepts: facing time constraints, using ai-generated code under time constraints, adapting to time constraints
- The participant faces time constraints and decides to use the AI-generated code despite limitations.
- The participant uses AI-generated code under time constraints, prioritizing efficiency over understanding.
- The participant adapts to time constraints by using AI-generated code completely.

30.
Concepts: copying and pasting ai output, deciding to copy and paste ai output
- Deciding to copy and paste AI output instead of running it.
- The participant decides to copy and paste AI output without running it.

31.
Concepts: bypassing running option, deciding to copy and paste code
- The participant bypasses the "run" option and instead chooses to copy and paste the generated code.
- The participant decides to copy and paste generated code rather than running it.

32.
Concepts: copying and pasting ai code, copying and pasting ai-generated code
- Deciding to copy and paste AI-generated code.
- Decides to copy and paste AI-generated code.
===
Here are the definitions for each code:

---
1.
Concepts: core concept prioritization, prioritizing core concepts
Relationship: The concepts are related to the idea of prioritizing core concepts over extensions when learning new skills or tools.
Criteria: Participants prioritize core concepts over extensions when learning new programming languages.
Phrase: Prioritizing core concepts.

2.
Concepts: contextualized learning importance, recognizing the importance of context in ai-assisted learning
Relationship: The concepts are related to the idea of recognizing the importance of context in AI-assisted learning.
Criteria: Participants recognize the importance of contextualized learning in AI-assisted learning.
Phrase: Recognizing contextualized learning importance.

3.
Concepts: appreciating thoughtful model creation, appreciating thoughtful model creation approach
Relationship: The concepts are related to the idea of appreciating a thoughtful model creation approach.
Criteria: Participants appreciate thoughtful model creation and best practices.
Phrase: Appreciating thoughtful model creation.

4.
Concepts: ai follows best practices, ai focuses on best practices
Relationship: The concepts are related to the idea of AI following best practices in coding.
Criteria: Participants note that the AI follows best practices in coding, avoiding ruthless model creation.
Phrase: Noting AI's focus on best practices.

5.
Concepts: notes adherence to best practices, appreciating adherence to best practices, recognizing adherence to coding standards
Relationship: The concepts are related to the idea of noting adherence to best practices in coding.
Criteria: Participants note an AI system's adherence to best practices in coding or modeling.
Phrase: Noting adherence to best practices.

6.
Concepts: advocating for clear code writing, prioritizing code readability
Relationship: The concepts are related to the idea of prioritizing code readability.
Criteria: Participants advocate for clear and straightforward code writing, prioritizing code readability.
Phrase: Advocating for clear code writing.

7.
Concepts: valuing plain code, importance of code readability and simplicity, importance of code readability and simplicity (duplicate, refine label)
Relationship: The concepts are related to the idea of valuing simplicity and readability in code.
Criteria: Participants value the importance of simple and accessible code for maintenance.
Phrase: Valuing plain code.

8.
Concepts: valuing code simplicity, easy to maintain code, simplicity of code
Relationship: The concepts are related to the idea of valuing simplicity in code for easier maintenance.
Criteria: Participants value simplicity in code for easier maintenance.
Phrase: Valuing code simplicity.

9.
Concepts: preferring plain, accessible code, preferring simple, maintainable code
Relationship: The concepts are related to the idea of preferring simple and accessible code.
Criteria: Participants prefer plain, accessible code for maintenance.
Phrase: Preferring plain code.

10.
Concepts: quality, importance of maintainable code
Relationship: The concepts are related to the idea of emphasizing the importance of maintainable code.
Criteria: Participants discuss the importance of code quality and maintainability.
Phrase: Emphasizing code quality.

11.
Concepts: code quality and complexity, discussing code complexity and quality
Relationship: The concepts are related to the idea of discussing code quality and complexity.
Criteria: Participants discuss code quality and complexity.
Phrase: Discussing code quality and complexity.

12.
Concepts: importance of code simplicity, discussing code complexity
Relationship: The concepts are related to the idea of discussing code complexity and simplicity.
Criteria: Participants discuss code complexity and the importance of simplicity.
Phrase: Discussing code complexity and simplicity.

13.
Concepts: code quality importance, code validation importance
Relationship: The concepts are related to the idea of emphasizing the importance of code quality and validation.
Criteria: Participants emphasize the importance of code quality and validation.
Phrase: Emphasizing code quality importance.

14.
Concepts: establishing credibility, credibility through experience
Relationship: The concepts are related to the idea of establishing credibility through experience.
Criteria: Participants establish credibility by sharing prior programming experiences.
Phrase: Establishing credibility through experience.

15.
Concepts: sharing programming experience, shares extensive programming experience, sharing extensive experience in programming languages
Relationship: The concepts are related to the idea of sharing prior programming experiences.
Criteria: Participants share their extensive programming experience or background in computer programming.
Phrase: Sharing programming experience.

16.
Concepts: prior programming experience, prior experiences in computer programming
Relationship: The concepts are related to the idea of sharing prior programming experiences.
Criteria: Participants share prior experiences or expertise in programming or computer science.
Phrase: Sharing prior programming experience.

17.
Concepts: sharing prior programming experience, prior experience in computer programming
Relationship: The concepts are related to the idea of sharing prior programming experiences.
Criteria: Participants share their prior experiences in computer programming.
Phrase: Sharing prior programming experience.

18.
Concepts: beginner coding challenges, writing large code chunks, challenges in debugging large code chunks
Relationship: The concepts are related to the idea of noting challenges faced by beginners in coding.
Criteria: Participants note that beginners may write large code chunks, leading to errors.
Phrase: Noting beginner coding challenges.

19.
Concepts: challenges for programming novices, notes the challenge of assisting novice programmers based on incomplete information
Relationship: The concepts are related to the idea of noting challenges faced by novice programmers.
Criteria: Participants identify challenges for programming novices.
Phrase: Noting challenges for programming novices.

20.
Concepts: novice debugging needs, novices may lack debugging skills, notes lack of debugging skills
Relationship: The concepts are related to the idea of noting the need for novice programmers to develop debugging skills.
Criteria: Participants note that novice programmers may lack debugging skills and may need additional support.
Phrase: Noting novice debugging needs.

21.
Concepts: novice struggles, observing beginners' struggles
Relationship: The concepts are related to the idea of observing struggles faced by novice programmers.
Criteria: Participants reflect on novices' struggles with debugging and design outlines.
Phrase: Observing novice struggles.

22.
Concepts: highlights challenges faced by novices, reflects on challenges novices face in programming and debugging
Relationship: The concepts are related to the idea of highlighting challenges faced by novice programmers.
Criteria: Participants highlight the challenges faced by novices when working with AI-generated code.
Phrase: Highlighting challenges faced by novices.

23.
Concepts: manual ai code integration, manually integrating ai output
Relationship: The concepts are related to the idea of manually integrating AI-generated code.
Criteria: Participants manually integrate AI-generated code into their program.
Phrase: Manually integrating AI code.

24.
Concepts: integrating into the model, integrating ai-generated code
Relationship: The concepts are related to the idea of integrating AI-generated code into a model.
Criteria: Participants integrate AI-generated code into a model.
Phrase: Integrating AI-generated code.

25.
Concepts: liking automatic code integration, appreciating automatic code integration
Relationship: The concepts are related to the idea of appreciating automatic code integration.
Criteria: Participants appreciate the ability to automatically integrate AI-generated code into the model.
Phrase: Appreciating automatic code integration.

26.
Concepts: seamless workflow integration, seeking seamless workflow integration
Relationship: The concepts are related to the idea of seeking seamless integration of AI-generated code into the workflow.
Criteria: Participants desire seamless integration of AI-generated code into the workflow.
Phrase: Seeking seamless workflow integration.

27.
Concepts: automatic code integration, wanting automatic code integration
Relationship: The concepts are related to the idea of wanting automatic code integration.
Criteria: Participants want the ability to automatically integrate generated code into their model.
Phrase: Wanting automatic code integration.

28.
Concepts: time-sensitive ai usage, time-constrained ai reliance, relying on ai due to time constraints
Relationship: The concepts are related to the idea of relying on AI-generated code due to time constraints.
Criteria: Participants use AI-generated code or output due to time constraints or pressure.
Phrase: Relying on AI due to time constraints.

29.
Concepts: facing time constraints, using ai-generated code under time constraints, adapting to time constraints
Relationship: The concepts are related to the idea of adapting to time constraints by using AI-generated code.
Criteria: Participants face time constraints and decide to use AI-generated code despite limitations.
Phrase: Adapting to time constraints.

30.
Concepts: copying and pasting ai output, deciding to copy and paste ai output
Relationship: The concepts are related to the idea of deciding to copy and paste AI output.
Criteria: Participants decide to copy and paste AI output instead of running it.
Phrase: Deciding to copy and paste AI output.

31.
Concepts: bypassing running option, deciding to copy and paste code
Relationship: The concepts are related to the idea of deciding to copy and paste generated code.
Criteria: Participants bypass the "run" option and instead choose to copy and paste the generated code.
Phrase: Deciding to copy and paste generated code.

32.
Concepts: copying and pasting ai code, copying and pasting ai-generated code
Relationship: The concepts are related to the idea of copying and pasting AI-generated code.
Criteria: Participants decide to copy and paste AI-generated code.
Phrase: Copying and pasting AI-generated code.