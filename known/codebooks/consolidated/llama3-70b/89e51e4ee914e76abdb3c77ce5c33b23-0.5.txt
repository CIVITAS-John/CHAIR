You are an expert in thematic analysis. 
Each code is a cluster of multiple qualitative sub-code. First, determine the logical relationship between sub-codes. If a sub-code includes another, use the broader one. If sub-codes are parallel, try to cover both concepts.
Write clear and generalizable labels and criteria for each merged code, informed by the context, and without unnecessary specifics or examples.
Find a theory-informed category for each code. Use 2-4 words for categories and avoid over-generalization.
The research question is: How did Physics Lab's online community emerge? (through the lens of learning sciences, human-computer interaction, and participatory design)
Always follow the output format:
---
Categories: 
* {Name some categories you identified from the research question and theoretical lens}

Definitions for each code (32 in total):
1.
Relationship: {The logical relationship between sub-codes in code 1}
Criteria: {A sentence of consolidated criteria 1}
Label: {A consolidated label of code 1}
Category: {2-4 words for code 1}
...
32.
Relationship: {The logical relationship between sub-codes in code 32}
Criteria: {A sentence of consolidated criteria 32}
Label: {A consolidated label of code 32}
Category: {2-4 words for code 32}
---
~~~
1. social courtesy, community etiquette.
- Use of polite expressions and social courtesies during community interactions.
- Adherence to norms of politeness and etiquette in community interactions.

2. participatory process, user involvement.
- Involving community members in the design and decision-making process.
- Involving users in design decision-making processes and community members in the design process.

3. problem solving, issue resolution.
- Solving problems and issues within the community.
- Discussion of solving problems or using the software for problem-solving purposes.
- Resolving issues or providing solutions within the community.

4. role identification, user role identification.
- Identification of user roles within the community.
- Identifying or clarifying user roles within the community.

5. idea appreciation, encouragement and feedback.
- Expresses appreciation, positive sentiment or feedback towards ideas or suggestions.
- Expressions of encouragement or support for an idea, including positive feedback.

6. update acknowledgment, update confirmation.
- Acknowledging that an update has been implemented.
- Records confirmations or acknowledgments that an update has been completed.

7. user acknowledgment, acknowledging user input.
- Involves acknowledgments within user interactions or towards information provided.
- Acknowledges or responds to feedback, suggestions, or input received.

8. emoji, emotional expression through emojis.
- Use of emojis or other visual expressions to convey emotions or reactions.
- Uses emojis or emoticons in the conversation.
- Use of emojis in communication.
- Usage of emojis in communication within the community.
- Use of emojis in communication within the community.
- Use of emojis in messages or posts.
- Use of emojis to emphasize and communicate emotional responses within digital interactions.

9. active listening, listening indication.
- Indicators of attentive or responsive listening in online interactions.
- Indications that one is actively listening or paying attention during an interaction.

10. managing expectations, user expectation management.
- Managing user expectations about features or timelines.
- Setting and managing user expectations regarding project timelines and features.
- Managing and reassuring users about the quality, progress, and expectations of updates.

11. timeline communication, development timeline communication.
- Communicating expected release or completion timelines.
- Communication about the anticipated and actual timelines for development tasks and updates.

12. progress communication, work in progress communication.
- Information and communication about the current state or progress of tasks.
- Indicating ongoing work or communicating progress updates.

13. feature implementation, feature implementation promise.
- Involves plans or promises for adding new features to the software.
- Promises made by developers to implement specific features requested by users.

14. update magnitude, update scale.
- Describing the scale or extent of an update.
- Indications that a software update or release will be substantial or comprehensive in scope.

15. user notification, update notifications.
- Informing users about upcoming changes or updates.
- Confirmations or notifications of updates or changes to the software.

16. property adjustments, component adjustments.
- Descriptions of modifications made to the properties of components and features in the software.
- Statements describing adjustments or changes made to the properties or behavior of software components or features.

17. software enhancements, software and user experience enhancement.
- Enhancements and improvements made to the software to improve functionality and user experience.
- Enhancements aimed at improving user experience and software functionality.

18. software evaluation, comparative evaluation.
- Evaluating or reviewing the software or its features.
- Comparing the software with other tools or software.

19. feature additions, listing new features.
- Descriptions of new features or changes to software capabilities.
- Lists or describes new features or functionality being added.

20. teacher background, user background.
- Provides background information about the user's teaching experience or role.
- Details about users' background and experience in education, including professional roles and histories.

21. experience sharing, teaching experience.
- Sharing personal teaching experiences.
- Descriptions of teaching experience.

22. policy restrictions, school restrictions, school policies.
- Discussing policy restrictions or limitations imposed by the school.
- Restrictions or limitations imposed by schools or educational institutions.
- Pertains to policies or restrictions set by educational institutions on technology usage.

23. student experience, student engagement.
- Describing student engagement levels or experiences with the software.
- Statements indicating student interest or engagement with the software.
- Descriptions or discussions of student engagement or motivation.

24. educational impact, educational impact of software.
- Includes feedback and observations on the educational effectiveness of the software.
- Statements about the positive effects or outcomes of using the software in educational contexts.

25. user suggestions, feature suggestions.
- Suggestions made by users for software improvements.
- Suggestions or ideas from community members for new features, functionalities, or improvements to the software or platform.
- Suggestions and requests for new features to enhance software usability.

26. design simplification, simplification.
- Efforts to simplify complex designs or functionalities.
- Efforts to make the software or platform more straightforward, intuitive, or user-friendly.

27. personalized support, offering personal assistance.
- Offers of personalized support or assistance.
- Offering individual assistance or support to users.

28. designer engagement, designer responsiveness.
- Designer's engagement and responsiveness to user feedback and requests.
- Responsiveness of the designer or development team to community feedback.

29. designer user interaction, user-designer engagement.
- Represents an interaction or exchange between the user and the designer or developer.
- Interactions between users and designers focused on design assistance and information exchange.

30. user needs, user needs expression.
- Statements expressing users' needs or preferences for specific platform features or capabilities.
- Identifying user needs and requirements.
- Expressions of user needs or desires for specific software functionalities.

31. update inquiry, inquiring about updates.
- Inquiries about the status of updates.
- Expressions of curiosity or requests for details about the status or timeline of software updates.
- Questions concerning the timing, availability, or details of new updates or versions within the community.
- Inquiring about any recent updates or changes.

32. download inquiry, software download inquiry.
- Inquiring about or requesting information on how to access or download the software.
- Questions about the procedures or methods for obtaining the software.
===
Here are the categorized codes with relationships, criteria, labels, and categories:

---
Categories:
* Community Building
* Participatory Design
* Communication
* Software Development
* User Experience
* Education
* Support

Definitions for each code:

1.
Relationship: Parallel
Criteria: Expressions of politeness and courtesy in community interactions.
Label: Social Courtesy
Category: Community Building

2.
Relationship: Inclusive
Criteria: Involving users in design and decision-making processes.
Label: Participatory Process
Category: Participatory Design

3.
Relationship: Parallel
Criteria: Solving problems and resolving issues within the community.
Label: Problem Solving
Category: Community Building

4.
Relationship: Inclusive
Criteria: Identifying user roles within the community.
Label: Role Identification
Category: Community Building

5.
Relationship: Parallel
Criteria: Expressions of appreciation, encouragement, or feedback towards ideas.
Label: Idea Appreciation
Category: Community Building

6.
Relationship: Inclusive
Criteria: Acknowledging updates and confirming their implementation.
Label: Update Acknowledgment
Category: Communication

7.
Relationship: Inclusive
Criteria: Acknowledging user input and responding to feedback.
Label: User Acknowledgment
Category: Communication

8.
Relationship: Parallel
Criteria: Using emojis to convey emotions or reactions.
Label: Emotional Expression
Category: Communication

9.
Relationship: Inclusive
Criteria: Indicators of attentive or responsive listening in online interactions.
Label: Active Listening
Category: Communication

10.
Relationship: Inclusive
Criteria: Managing user expectations about features or timelines.
Label: Expectation Management
Category: Software Development

11.
Relationship: Inclusive
Criteria: Communicating expected release or completion timelines.
Label: Timeline Communication
Category: Software Development

12.
Relationship: Inclusive
Criteria: Information about the current state or progress of tasks.
Label: Progress Communication
Category: Software Development

13.
Relationship: Inclusive
Criteria: Plans or promises for adding new features to the software.
Label: Feature Implementation
Category: Software Development

14.
Relationship: Inclusive
Criteria: Describing the scale or extent of an update.
Label: Update Magnitude
Category: Software Development

15.
Relationship: Inclusive
Criteria: Informing users about upcoming changes or updates.
Label: User Notification
Category: Communication

16.
Relationship: Inclusive
Criteria: Descriptions of modifications made to software components and features.
Label: Property Adjustments
Category: Software Development

17.
Relationship: Inclusive
Criteria: Enhancements and improvements made to the software.
Label: Software Enhancements
Category: Software Development

18.
Relationship: Inclusive
Criteria: Evaluating or reviewing the software or its features.
Label: Software Evaluation
Category: User Experience

19.
Relationship: Inclusive
Criteria: Descriptions of new features or changes to software capabilities.
Label: Feature Additions
Category: Software Development

20.
Relationship: Inclusive
Criteria: Providing background information about the user's teaching experience or role.
Label: Teacher Background
Category: Education

21.
Relationship: Inclusive
Criteria: Sharing personal teaching experiences.
Label: Experience Sharing
Category: Education

22.
Relationship: Inclusive
Criteria: Discussing policy restrictions or limitations imposed by the school.
Label: Policy Restrictions
Category: Education

23.
Relationship: Inclusive
Criteria: Describing student engagement levels or experiences with the software.
Label: Student Experience
Category: Education

24.
Relationship: Inclusive
Criteria: Feedback and observations on the educational effectiveness of the software.
Label: Educational Impact
Category: Education

25.
Relationship: Inclusive
Criteria: Suggestions made by users for software improvements.
Label: User Suggestions
Category: Participatory Design

26.
Relationship: Inclusive
Criteria: Efforts to simplify complex designs or functionalities.
Label: Design Simplification
Category: Software Development

27.
Relationship: Inclusive
Criteria: Offers of personalized support or assistance.
Label: Personalized Support
Category: Support

28.
Relationship: Inclusive
Criteria: Designer's engagement and responsiveness to user feedback and requests.
Label: Designer Engagement
Category: Participatory Design

29.
Relationship: Inclusive
Criteria: Interactions between users and designers focused on design assistance and information exchange.
Label: Designer User Interaction
Category: Participatory Design

30.
Relationship: Inclusive
Criteria: Statements expressing users' needs or preferences for specific platform features or capabilities.
Label: User Needs
Category: User Experience

31.
Relationship: Inclusive
Criteria: Inquiries about the status of updates.
Label: Update Inquiry
Category: Communication

32.
Relationship: Inclusive
Criteria: Inquiring about or requesting information on how to access or download the software.
Label: Download Inquiry
Category: Support