You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (20 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
20. 
Concepts: {Repeat the input 20}
Relationship: {What is logical relationship between concepts in code 20, or N/A if not applicable}
Criteria: {Who did what, and how for code 20}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: communicate component updates, communicate software updates
- Designers announce and inform users about updates to software components.
- Designers provide updates and announcements regarding software changes to the community.

2.
Concepts: share update information, announce version details
- Designers announce major updates and share information about changes.
- Designers communicate detailed information regarding version history and updates to the community.

3.
Concepts: share development plans, provide development updates
- Designers share their development plans and progress updates with users.
- Designers share updates regarding the progress and future plans for the software.

4.
Concepts: preview future updates, explain upcoming features
- Designers preview and announce future software updates and features.
- Designers explain new features that will be included in upcoming software versions.

5.
Concepts: plan future updates, discuss update planning
- Designers outline plans for future updates and development phases.
- Designers discuss the planning process for upcoming software updates.

6.
Concepts: engage in dialogue, facilitate user interaction
- Designer and user engage in a back-and-forth exchange to clarify or decide on an issue.
- Designers and users engage in interactive discussions about app functionality.

7.
Concepts: embrace iterative development, iterative development based on user feedback
- Instances where designers discuss updates and improvements based on user feedback are noted.
- A designer commits to implementing updates based on user feedback and requests.

8.
Concepts: commit to improvement, align with user feedback
- Designers commit to enhancing the software based on user feedback and support.
- Designers acknowledge and commit to incorporating user feedback into future updates.

9.
Concepts: gather user feedback, encourage user feedback
- Designers request and gather user feedback to inform future development.
- Designers actively solicit and encourage feedback from users to enhance engagement.

10.
Concepts: propose new features, submit user requests
- Users propose additions to enhance functionality and usability.
- Users submit requests for features that would enhance software usability.

11.
Concepts: suggest new features, solicit user suggestions
- Users and designers exchange suggestions for features and improvements.
- Designers invite users to share their suggestions for new features or improvements.

12.
Concepts: seek usage guidance, request user assistance
- Users ask for guidance and instructions on using specific features of the software.
- Users express a need for clarification and request assistance with the software.

13.
Concepts: ensure proper operation, provide usage instructions
- Designer provides instructions essential for the correct operation of the software or components.
- Designers provide instructions related to the operation and setup of software features.

14.
Concepts: offer assistance, offer ongoing support
- Designer offers assistance and potential solutions to users experiencing issues with the software.
- A designer encourages users to report any problems with the software, ensuring continued assistance.

15.
Concepts: confirmation, affirm contributions
- Users and designers confirm and acknowledge each other's messages or comments.
- Designers affirm users' contributions and confirm understanding of their comments.

16.
Concepts: share positive feedback, appreciate software features
- Users express satisfaction and share positive feedback about the software.
- Users express appreciation for features or progress of the software.

17.
Concepts: acknowledgment and support, recognize community support
- Instances where support and acknowledgment are expressed within the community.
- Instances where users express support or appreciation for the designers' efforts, enhancing community cohesion.

18.
Concepts: classroom environment, technical and infrastructural challenges in educational settings
- Users discuss challenges related to classroom technology usage, highlighting constraints in their educational environments.
- Users and designers discuss challenges related to technology implementation in educational environments, highlighting infrastructural issues.

19.
Concepts: compare software usability, provide comparative feedback
- Users compare the software's usability and effectiveness with alternatives.
- A user makes a comparison related to the software or its features, providing constructive feedback.

20.
Concepts: understand user needs, gather design requirements
- Designers ask users about their needs and preferences to improve the software.
- Designers pose inquiries to gather detailed user requirements for software enhancements.
===
---
Definitions for each code (20 in total):
1. 
Concepts: communicate component updates, communicate software updates  
Relationship: Both concepts involve informing users about changes in the software, focusing on different aspects (components vs. overall software).  
Criteria: Designers announce and inform users about updates to software components and overall software changes.  
Phrase: Inform users about software updates.  

2. 
Concepts: share update information, announce version details  
Relationship: Both concepts involve the dissemination of information regarding software updates, focusing on major changes and detailed version history.  
Criteria: Designers announce major updates and share detailed version information with the community.  
Phrase: Inform the community about version updates.  

3. 
Concepts: share development plans, provide development updates  
Relationship: Both concepts are related to communicating the progress and future direction of software development.  
Criteria: Designers share their development progress and future plans with users.  
Phrase: Communicate development progress.  

4. 
Concepts: preview future updates, explain upcoming features  
Relationship: Both concepts involve informing users about future changes, focusing on updates and new features.  
Criteria: Designers preview and explain future software updates and features to the community.  
Phrase: Preview future software features.  

5. 
Concepts: plan future updates, discuss update planning  
Relationship: Both concepts relate to strategizing future software updates and involve discussions on planning processes.  
Criteria: Designers outline and discuss plans for future software updates.  
Phrase: Outline future update plans.  

6. 
Concepts: engage in dialogue, facilitate user interaction  
Relationship: Both concepts focus on promoting communication and interaction between designers and users.  
Criteria: Designers and users engage in dialogue to clarify issues and enhance app functionality.  
Phrase: Facilitate user interaction.  

7. 
Concepts: embrace iterative development, iterative development based on user feedback  
Relationship: Both concepts emphasize a development approach that incorporates user feedback into the design process.  
Criteria: Designers discuss and implement updates based on user feedback.  
Phrase: Incorporate user feedback into development.  

8. 
Concepts: commit to improvement, align with user feedback  
Relationship: Both concepts focus on the designers' dedication to enhancing the software in line with user needs.  
Criteria: Designers commit to improving the software based on user feedback.  
Phrase: Dedicate to software improvement.  

9. 
Concepts: gather user feedback, encourage user feedback  
Relationship: Both concepts involve soliciting user input to inform future software development.  
Criteria: Designers request and encourage user feedback to enhance engagement.  
Phrase: Solicit user feedback.  

10. 
Concepts: propose new features, submit user requests  
Relationship: Both concepts involve users suggesting enhancements to the software's functionality.  
Criteria: Users propose and submit requests for features to enhance usability.  
Phrase: Propose enhancements to software functionality.  

11. 
Concepts: suggest new features, solicit user suggestions  
Relationship: Both concepts involve the exchange of ideas for software improvements among users and designers.  
Criteria: Users and designers exchange and invite suggestions for new features.  
Phrase: Exchange suggestions for improvements.  

12. 
Concepts: seek usage guidance, request user assistance  
Relationship: Both concepts deal with users seeking help with software features and usage.  
Criteria: Users request guidance and assistance on using specific software features.  
Phrase: Seek assistance for software usage.  

13. 
Concepts: ensure proper operation, provide usage instructions  
Relationship: Both concepts emphasize the importance of providing clear instructions for effective software use.  
Criteria: Designers provide essential instructions for operating the software correctly.  
Phrase: Provide usage instructions.  

14. 
Concepts: offer assistance, offer ongoing support  
Relationship: Both concepts focus on the continuous support provided to users experiencing issues.  
Criteria: Designers offer assistance and encourage users to report problems for ongoing support.  
Phrase: Provide ongoing support.  

15. 
Concepts: confirmation, affirm contributions  
Relationship: Both concepts involve acknowledging and confirming the contributions and communications of users and designers.  
Criteria: Users and designers confirm and acknowledge each other's messages.  
Phrase: Affirm contributions and understanding.  

16. 
Concepts: share positive feedback, appreciate software features  
Relationship: Both concepts focus on users expressing satisfaction with the software's features.  
Criteria: Users share positive feedback and express appreciation for software features.  
Phrase: Share positive feedback on features.  

17. 
Concepts: acknowledgment and support, recognize community support  
Relationship: Both concepts involve expressing support and acknowledgment within the community.  
Criteria: Community members express support and appreciation for designers' efforts.  
Phrase: Recognize community support.  

18. 
Concepts: classroom environment, technical and infrastructural challenges in educational settings  
Relationship: Both concepts highlight discussions around the challenges faced in educational technology use.  
Criteria: Users and designers discuss challenges related to technology implementation in classroom settings.  
Phrase: Discuss educational technology challenges.  

19. 
Concepts: compare software usability, provide comparative feedback  
Relationship: Both concepts involve users evaluating the software in comparison to alternatives and providing feedback.  
Criteria: Users compare the software's usability and effectiveness with alternatives and offer feedback.  
Phrase: Provide comparative feedback on usability.  

20. 
Concepts: understand user needs, gather design requirements  
Relationship: Both concepts focus on gathering insights about user preferences to inform software design.  
Criteria: Designers inquire about user needs and gather requirements for software enhancements.  
Phrase: Gather user requirements for design.  
---