You are an expert in thematic analysis. 
Each code is a cluster of multiple qualitative sub-code. First, determine the logical relationship between concepts. If a concept includes another, use the broader one. If concepts are parallel, try to cover both concepts.
Write clear and generalizable labels and criteria for each merged code, informed by the context, and without unnecessary specifics or examples.
Find a theory-informed category for each code. Use 2-4 words for categories and avoid over-generalization.
The research question is: How did Physics Lab's online community emerge? (through the lens of learning sciences, human-computer interaction, and participatory design)
Always follow the output format:
---
Categories: 
* {Name some categories you identified from the research question and theoretical lens}

Definitions for each code (7 in total):
1. {Repeat the input 1}
Relationship: {The logical relationship between concepts in input 1}
Criteria: {A sentence of consolidated criteria for code 1}
Label: {A consolidated label of code 1}
Category: {2-4 words for code 1}
...
7. {Repeat the input 7}
Relationship: {The logical relationship between concepts in input 7}
Criteria: {A sentence of consolidated criteria for code 7}
Label: {A consolidated label of code 7}
Category: {2-4 words for code 7}
---
~~~
1. software feature: downloading, software access inquiries.
- Mentions of downloading or accessing Physics Lab.
- A user's inquiry about downloading or accessing a specific version of the Physics Lab software.

2. active learning, learning affordances.
- Aspects of the software that encourage active learning, experimentation, or hands-on engagement with physics concepts.
- Features or affordances of the software aimed at facilitating conceptual understanding, visualization, or simulation of physics concepts.

3. user feature requests, incorporating user needs.
- A user's request or suggestion for a specific feature or functionality to be added to the software.
- Quotes that suggest how user needs or feedback are incorporated into the software design.

4. feature planning, feature prioritization.
- Discussions around planned software features and capabilities.
- Discussions or decisions related to prioritizing the development or implementation of certain features or sections.

5. component update, sharing updates.
- Information or announcements about updates or changes to software components or functionality.
- Instances where developers or designers share information about upcoming updates or changes to the software.

6. seeking information, providing information.
- Instances where participants seek information or clarification from others in the community.
- Instances where participants share knowledge, information, or resources with others in the community.

7. emoji usage, image sharing.
- Instances where participants use emojis in their communication, potentially indicating shared norms or practices within the community.
- Instances where participants share images or screenshots, potentially indicating shared norms or practices within the community.
===
---
Categories:
* Community Interactions
* Software Development
* Participatory Design
* Multimedia Usage

Definitions for each code (7 in total):

1. software feature: downloading, software access inquiries.
Relationship: These concepts are parallel, referring to accessing or obtaining the software.
Criteria: Mentions related to downloading, accessing, or inquiring about specific versions of the Physics Lab software.
Label: Software Access
Category: Software Development

2. active learning, learning affordances. 
Relationship: These concepts are closely related, with learning affordances enabling active learning.
Criteria: Features or aspects of the software that promote active engagement, experimentation, or conceptual understanding of physics concepts.
Label: Learning Support Features
Category: Participatory Design

3. user feature requests, incorporating user needs.
Relationship: User feature requests inform how user needs are incorporated into the design.
Criteria: User suggestions for new features or functionality, and indications of how user feedback shapes the software design.
Label: User-Centered Design
Category: Participatory Design

4. feature planning, feature prioritization.
Relationship: Feature prioritization is part of the broader feature planning process.
Criteria: Discussions or decisions around planned software capabilities and the prioritization of feature development.
Label: Feature Roadmap
Category: Software Development

5. component update, sharing updates.
Relationship: Sharing updates is the means of communicating about component updates.
Criteria: Information or announcements regarding updates or changes to software components or functionality.
Label: Update Announcements
Category: Software Development

6. seeking information, providing information.
Relationship: These concepts are parallel ways of exchanging information within the community.
Criteria: Instances where participants ask for or share knowledge, information, or resources with others.
Label: Knowledge Sharing
Category: Community Interactions

7. emoji usage, image sharing.
Relationship: These are parallel forms of multimedia usage within the community.
Criteria: Use of emojis or sharing of images/screenshots, potentially indicating shared norms or practices.
Label: Multimedia Communication
Category: Multimedia Usage
---