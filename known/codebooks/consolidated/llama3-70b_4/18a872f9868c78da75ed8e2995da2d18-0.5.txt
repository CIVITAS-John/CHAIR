You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (23 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
23. 
Concepts: {Repeat the input 23}
Relationship: {What is logical relationship between concepts in code 23, or N/A if not applicable}
Criteria: {Who did what, and how for code 23}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: component property adjustments, inform about component adjustments
- Discussing or implementing changes to component properties or features.
- Informing users about adjustments to component properties or features.

2.
Concepts: emphasizes practicality, emphasizes convenience in problem-solving
- Designer emphasizes the practical benefits of a feature.
- The designer mentions a feature that makes problem-solving more convenient.

3.
Concepts: promotes ease of use, prioritizing user convenience
- Designer promotes ease of use and designs for user-friendliness.
- The designer prioritizes user convenience.

4.
Concepts: promoting features, highlight functionality, encouraging feature exploration
- Designer promotes and demonstrates innovative features of the software.
- A designer highlights or demonstrates feature functions or capabilities, providing previews or examples.
- A designer encourages users to explore software features.

5.
Concepts: customizable components, versatile components
- A designer introduces customizable components.
- A designer introduces a component with multiple features or uses.

6.
Concepts: highlighting user control, acknowledging user control
- A designer highlights user control or customization options.
- The designer acknowledges a user's ability to manually adjust a feature.

7.
Concepts: empowering users, provides flexibility
- A designer empowers users by providing them with control or flexibility.
- Designer provides and demonstrates flexibility in software features.

8.
Concepts: attempts to improve user profile, seeks to improve user experience
- Designer attempts to improve user profile.
- User or designer seeks to improve user experience.

9.
Concepts: recommending changes, propose design improvements, inferring design changes
- Recommendation for design change or improvement
- A designer proposes or offers design ideas or suggestions for improvement.
- Designer infers or implies the need for a design change or update.

10.
Concepts: simplifying design, express intent to simplify design
- Designer considers simplifying design elements and suggests simplification.
- Expressing intent to simplify or improve the design of the software.

11.
Concepts: optimizing auto-generated layout, emphasize quality of auto-generated layout
- Designer suggests improving the auto-generated layout and emphasizes its importance.
- Emphasizing the importance of high-quality auto-generated layouts.

12.
Concepts: optimizing features, highlighting optimization efforts
- A designer mentions optimizing or refining a specific feature or layout.
- Designer acknowledges and highlights optimization efforts.

13.
Concepts: prevents misunderstandings, ensures understanding
- Designer clarifies or prevents misunderstandings.
- Designer ensures or promotes understanding of software features or concepts.

14.
Concepts: refines design features, clarifying existing functionality
- Designer refines or clarifies design features or functionalities.
- A designer clarifies existing functionality or features.

15.
Concepts: reiterates feature explanation, clarifying design choices or questions
- Designer reiterates or emphasizes feature explanations or clarifications.
- Designer clarifies design choices or answers questions about the software.

16.
Concepts: improving component accuracy, demonstrating commitment to accuracy
- The designer aims to improve the accuracy of components or features.
- Designer demonstrates a commitment to accuracy in the software.

17.
Concepts: simplifying complexity, balancing complexity
- Designer explains or simplifies complex information or features.
- Designer balances complexity and comprehensiveness with usability considerations.

18.
Concepts: compares complexity, acknowledging complexity
- Designer compares the complexity of different tasks or features.
- Designer mentions the complexity of a task or release, and acknowledges the complexity of a task or issue.

19.
Concepts: explaining need, acknowledges feature need
- Designer explains the need or purpose behind a feature or update.
- Designer acknowledges the need for a feature or functionality.

20.
Concepts: explains importance, explaining feature benefits or problem-solving functionality, explaining feature importance
- Explains the importance or benefits of a feature or functionality.
- The designer explains the benefits of a specific feature for problem-solving.
- The designer explains the importance of specific features.

21.
Concepts: emphasizes long-term benefits, justifying feature development
- Designer highlights the long-term benefits of a feature or update.
- Designers justify the development of a feature by explaining its long-term benefits

22.
Concepts: discusses long-term stability, focusing on immediate and long-term goals
- Designer discusses or aims for long-term stability.
- The designers focus on both immediate improvements and long-term stability.

23.
Concepts: previewing updates through content introduction
- Designer previews updates by introducing their content to the community.
- Designers provide detailed information about software updates, including previews of changes.
===
Here are the definitions for each code:

---
1.
Concepts: component property adjustments, inform about component adjustments
Relationship: The concepts are related as the adjustment of component properties is the action, and informing users about it is the communication of that action.
Criteria: Designers adjust component properties and inform users about the changes.
Phrase: Informing about component property adjustments.

2.
Concepts: emphasizes practicality, emphasizes convenience in problem-solving
Relationship: The concepts are related as practicality and convenience are both benefits of a design feature.
Criteria: Designers highlight the practical benefits and convenience of a feature in problem-solving.
Phrase: Emphasizing practicality and convenience.

3.
Concepts: promotes ease of use, prioritizing user convenience
Relationship: The concepts are related as promoting ease of use is an action, and prioritizing user convenience is the motivation behind it.
Criteria: Designers promote ease of use and prioritize user convenience.
Phrase: Prioritizing user convenience.

4.
Concepts: promoting features, highlight functionality, encouraging feature exploration
Relationship: The concepts are related as promoting features and highlighting functionality are actions, and encouraging exploration is the desired outcome.
Criteria: Designers promote and demonstrate features, highlighting their functionality, and encourage users to explore.
Phrase: Promoting feature exploration.

5.
Concepts: customizable components, versatile components
Relationship: The concepts are related as customizable components are a type of versatile component.
Criteria: Designers introduce customizable or versatile components.
Phrase: Introducing customizable components.

6.
Concepts: highlighting user control, acknowledging user control
Relationship: The concepts are related as highlighting user control is an action, and acknowledging user control is the recognition of that control.
Criteria: Designers highlight and acknowledge user control or customization options.
Phrase: Highlighting user control.

7.
Concepts: empowering users, provides flexibility
Relationship: The concepts are related as empowering users is the outcome, and providing flexibility is the means to achieve it.
Criteria: Designers empower users by providing flexibility in software features.
Phrase: Empowering users through flexibility.

8.
Concepts: attempts to improve user profile, seeks to improve user experience
Relationship: The concepts are related as improving user profile is a means to improve user experience.
Criteria: Designers attempt to improve user profiles to enhance user experience.
Phrase: Improving user experience.

9.
Concepts: recommending changes, propose design improvements, inferring design changes
Relationship: The concepts are related as recommending changes, proposing improvements, and inferring changes are all actions related to design improvement.
Criteria: Designers recommend changes, propose design improvements, and infer the need for changes.
Phrase: Recommending design improvements.

10.
Concepts: simplifying design, express intent to simplify design
Relationship: The concepts are related as simplifying design is an action, and expressing intent is the motivation behind it.
Criteria: Designers simplify design elements and express intent to simplify.
Phrase: Simplifying design.

11.
Concepts: optimizing auto-generated layout, emphasize quality of auto-generated layout
Relationship: The concepts are related as optimizing auto-generated layout is an action, and emphasizing quality is the motivation behind it.
Criteria: Designers optimize and emphasize the quality of auto-generated layouts.
Phrase: Optimizing auto-generated layouts.

12.
Concepts: optimizing features, highlighting optimization efforts
Relationship: The concepts are related as optimizing features is an action, and highlighting efforts is the communication of that action.
Criteria: Designers optimize features and highlight their optimization efforts.
Phrase: Optimizing features.

13.
Concepts: prevents misunderstandings, ensures understanding
Relationship: The concepts are related as preventing misunderstandings is an action, and ensuring understanding is the desired outcome.
Criteria: Designers clarify or prevent misunderstandings to ensure understanding.
Phrase: Ensuring understanding.

14.
Concepts: refines design features, clarifying existing functionality
Relationship: The concepts are related as refining design features is an action, and clarifying existing functionality is the motivation behind it.
Criteria: Designers refine design features and clarify existing functionality.
Phrase: Refining design features.

15.
Concepts: reiterates feature explanation, clarifying design choices or questions
Relationship: The concepts are related as reiterating feature explanations is an action, and clarifying design choices or questions is the motivation behind it.
Criteria: Designers reiterate feature explanations and clarify design choices or questions.
Phrase: Clarifying design choices.

16.
Concepts: improving component accuracy, demonstrating commitment to accuracy
Relationship: The concepts are related as improving component accuracy is an action, and demonstrating commitment is the motivation behind it.
Criteria: Designers improve component accuracy and demonstrate a commitment to accuracy.
Phrase: Improving component accuracy.

17.
Concepts: simplifying complexity, balancing complexity
Relationship: The concepts are related as simplifying complexity is an action, and balancing complexity is the motivation behind it.
Criteria: Designers simplify complex information and balance complexity with usability considerations.
Phrase: Simplifying complexity.

18.
Concepts: compares complexity, acknowledging complexity
Relationship: The concepts are related as comparing complexity is an action, and acknowledging complexity is the recognition of that complexity.
Criteria: Designers compare and acknowledge the complexity of different tasks or features.
Phrase: Acknowledging complexity.

19.
Concepts: explaining need, acknowledges feature need
Relationship: The concepts are related as explaining need is an action, and acknowledging feature need is the motivation behind it.
Criteria: Designers explain the need or purpose behind a feature or update and acknowledge the need for it.
Phrase: Explaining feature need.

20.
Concepts: explains importance, explaining feature benefits or problem-solving functionality, explaining feature importance
Relationship: The concepts are related as explaining importance, benefits, and problem-solving functionality are all actions related to feature explanation.
Criteria: Designers explain the importance, benefits, and problem-solving functionality of features.
Phrase: Explaining feature importance.

21.
Concepts: emphasizes long-term benefits, justifying feature development
Relationship: The concepts are related as emphasizing long-term benefits is an action, and justifying feature development is the motivation behind it.
Criteria: Designers emphasize long-term benefits and justify feature development.
Phrase: Emphasizing long-term benefits.

22.
Concepts: discusses long-term stability, focusing on immediate and long-term goals
Relationship: The concepts are related as discussing long-term stability is an action, and focusing on immediate and long-term goals is the motivation behind it.
Criteria: Designers discuss long-term stability and focus on both immediate improvements and long-term goals.
Phrase: Focusing on long-term stability.

23.
Concepts: previewing updates through content introduction
Relationship: The concepts are related as previewing updates is an action, and introducing content is the means to achieve it.
Criteria: Designers preview updates by introducing their content to the community.
Phrase: Previewing updates through content introduction.