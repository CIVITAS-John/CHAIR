import * as File from 'fs';
import { CodedThread, Conversation, Message } from '../../utils/schema.js';
import { BuildMessagePrompt, ConversationAnalyzer } from './conversations.js';
import { PythonShell } from 'python-shell';
import chalk from 'chalk';

/** BertopicAnalyzer: Conduct the first-round bertopic coding of the conversations. */
// Authored by John Chen.
export default class BertopicAnalyzer extends ConversationAnalyzer {
    /** Name: The name of the analyzer. */
    public Name: string = "bertopic";
    /** Codes: The codes generated by Bertopic. */
    private Codes: Record<number, string> = {};
    /** BatchPreprocess: Preprocess the conversations in batch. */
    public async BatchPreprocess(Conversations: Conversation[], Analyzed: CodedThread[]): Promise<void> {
        // Write the messages into the file.
        var Messages = Conversations.flatMap(Conversation => 
            Conversation.AllItems!.filter(Message => Message.Content.length > 0 && Message.Chunk == Conversation.ID));
        var Content = Messages.map(Message => BuildMessagePrompt(Message));
        File.writeFileSync("./known/temp.text", Content.join("\n"));
        // Run the Python script
        var Results: Record<number, { ID: number, Topic: string, Probability: number }>;
        await PythonShell.run(`coding/conversations/bertopic-impl.py`, {
            args: [Messages.length.toString()],
            parser: (Message) => {
                if (Message.startsWith("{")) {
                    Results = JSON.parse(Message);
                    for (var Result of Object.values(Results))
                        if (Result.Probability > 0)
                            this.Codes[Result.ID] = Result.Topic;
                    console.log(JSON.stringify(Results, null, 4));
                } else {
                    console.log(chalk.gray(Message));
                }
            }
        });
    }
}