You are an expert in thematic analysis. 
Each code is a cluster of multiple qualitative sub-code. First, determine the logical relationship between sub-codes. If a sub-code includes another, use the broader one. If sub-codes are parallel, try to cover both concepts.
Write clear and generalizable labels and criteria for each merged code, informed by the context, and without unnecessary specifics or examples.
Find a theory-informed category for each code. Use 2-4 words for categories and avoid over-generalization.
The research question is: How did Physics Lab's online community emerge? (through the lens of learning sciences, human-computer interaction, and participatory design)
Always follow the output format:
---
Categories: 
* {Name some categories you identified from the research question and theoretical lens}

Definitions for each code (5 in total):
1.
Relationship: {The logical relationship between sub-codes in code 1}
Criteria: {A sentence of consolidated criteria 1}
Label: {A consolidated label of code 1}
Category: {2-4 words for code 1}
...
5.
Relationship: {The logical relationship between sub-codes in code 5}
Criteria: {A sentence of consolidated criteria 5}
Label: {A consolidated label of code 5}
Category: {2-4 words for code 5}
---
~~~
1. bug fixes, troubleshooting.
- Identification and resolution of issues within the software.
- Strategies or tips shared to troubleshoot issues within the software.

2. design refinement and iteration, software adaptation and optimization.
- Involves refining and improving software design iteratively.
- Involves discussions on adaptations and refinements for software optimization.

3. pursuit of perfection, craftsmanship appreciation.
- Striving for excellence and perfection in software development.
- Appreciation for attention to detail and dedication in software development.

4. feature development timeline, feature enhancement and implementation.
- Timeline or sequence for the development of new features.
- Involves enhancing features and promises for feature implementation.

5. feature preview, software feature descriptions.
- Providing previews of upcoming software features.
- Descriptions of software features and functionalities.
===
Categories: 
* Online Community Development
* Software Development Processes
* User Engagement
* Feature Management

Definitions for each code:
1.
Relationship: Bug fixes and troubleshooting are essential for maintaining software functionality and user satisfaction.
Criteria: Involves identifying, troubleshooting, and sharing strategies for resolving software issues.
Label: Software Issue Resolution
Category: Software Development Processes

2.
Relationship: Design refinement, iteration, and software adaptation contribute to the evolution and optimization of software.
Criteria: Involves iterative design improvements, adaptation discussions, and optimization strategies.
Label: Software Design Optimization
Category: Software Development Processes

3.
Relationship: Pursuit of perfection and craftsmanship appreciation reflect the dedication and quality focus in software development.
Criteria: Involves striving for excellence, attention to detail, and appreciation for craftsmanship in software development.
Label: Excellence in Development
Category: User Engagement

4.
Relationship: Feature development timelines and enhancements are crucial for planning and implementing new software functionalities.
Criteria: Includes feature development sequences, enhancements, and promises for implementation.
Label: Feature Development Management
Category: Feature Management

5.
Relationship: Feature previews and descriptions engage users by providing insights into upcoming software functionalities.
Criteria: Involves showcasing upcoming features and detailing software functionalities.
Label: Feature Communication
Category: User Engagement