You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another and please do not merge them.
Determine the logical relationship between concepts within each code, such as inclusion, parallel, or intersection.
Write clear and generalizable criteria for each code and do not introduce unnecessary details. Then, write an accurate label for the combined concept.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (11 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Label: {A consolidated label of code 1}
...
11. 
Concepts: {Repeat the input 11}
Relationship: {What is logical relationship between concepts in code 11, or N/A if not applicable}
Criteria: {Who did what, and how for code 11}
Label: {A consolidated label of code 11}
---
~~~
1.
Concepts: image sharing, upload image
- Sharing images or visual content related to a software or product.
- User or designer uploads or shares an image, often as part of a conversation.

2.
Concepts: design appreciation, compliments
- User expresses admiration for software design or features.
- A user praises or compliments the app or designer, or provides positive feedback or compliments about the software.

3.
Concepts: request acceptance, express comprehension
- Accepting or agreeing to a request or idea.
- Respondent expresses understanding or clarification of a request or idea.

4.
Concepts: confirmation, solution confirmation
- User confirms or agrees with someone else's statement or diagnosis.
- A user confirms finding a solution or resource.

5.
Concepts: acknowledging input, user request acknowledgement
- Designer responds with a brief acknowledgement or affirmation to user input.
- Acknowledging or recognizing a user's request or feedback.

6.
Concepts: teaching background, teacher's perspective
- User shares their teaching experience or background as an educator.
- User expresses a teacher's perspective or shares educational insights or challenges.

7.
Concepts: encouraging feedback, informed feedback
- User encourages feedback or promotes direct and honest feedback.
- User provides informed feedback with explanations or implies valuable feedback.

8.
Concepts: visual progress updates, development updates
- A designer shares visual updates to illustrate progress or changes.
- A designer shares updates or progress on development, including new features or changes.

9.
Concepts: contextualized inquiry, contextual clarification
- User provides context or background information for a question or issue.
- User provides context for compatibility issues or explains their situation.

10.
Concepts: technical clarification, version and compatibility clarification
- Clarifying technical requirements or specifications for the software, and clarifying system requirements or limitations, and explaining software compatibility.
- A designer addresses compatibility issues, explains version information, or clarifies differences between platforms.

11.
Concepts: usage guidance, providing guidance and anticipating user needs
- A designer provides tips, tutorials, or instructions on how to use a software or feature.
- User provides advice or guidance on how to approach a task, or providing guidance or instructions to users on how to perform a specific task.
===
Here are the definitions for each code:

---
1.
Concepts: image sharing, upload image
Relationship: Inclusion (image sharing includes the act of uploading an image)
Criteria: A user shares or uploads an image related to a software or product, often as part of a conversation.
Label: Visual Content Sharing

2.
Concepts: design appreciation, compliments
Relationship: Parallel (design appreciation and compliments are related but distinct concepts)
Criteria: A user expresses admiration or praise for software design or features.
Label: Positive Feedback

3.
Concepts: request acceptance, express comprehension
Relationship: Intersection (accepting a request implies understanding or clarifying the request)
Criteria: A user accepts or agrees to a request or idea, and/or expresses understanding or clarification of the request.
Label: Request Acknowledgement

4.
Concepts: confirmation, solution confirmation
Relationship: Inclusion (confirmation includes confirming a solution or resource)
Criteria: A user confirms or agrees with someone else's statement or diagnosis, or confirms finding a solution or resource.
Label: Confirmation and Validation

5.
Concepts: acknowledging input, user request acknowledgement
Relationship: Inclusion (acknowledging input includes acknowledging user requests)
Criteria: A designer responds with a brief acknowledgement or affirmation to user input or request.
Label: Input Acknowledgement

6.
Concepts: teaching background, teacher's perspective
Relationship: Inclusion (teaching background includes expressing a teacher's perspective)
Criteria: A user shares their teaching experience or background as an educator, or expresses a teacher's perspective.
Label: Educational Perspective

7.
Concepts: encouraging feedback, informed feedback
Relationship: Inclusion (encouraging feedback includes providing informed feedback)
Criteria: A user encourages feedback or provides informed feedback with explanations or implies valuable feedback.
Label: Feedback Encouragement

8.
Concepts: visual progress updates, development updates
Relationship: Inclusion (visual progress updates include development updates)
Criteria: A designer shares visual updates to illustrate progress or changes, or shares updates on development, including new features or changes.
Label: Progress Updates

9.
Concepts: contextualized inquiry, contextual clarification
Relationship: Inclusion (contextualized inquiry includes providing context for a question or issue)
Criteria: A user provides context or background information for a question or issue, or explains their situation.
Label: Contextual Clarification

10.
Concepts: technical clarification, version and compatibility clarification
Relationship: Inclusion (technical clarification includes clarifying version and compatibility information)
Criteria: A designer clarifies technical requirements or specifications for the software, addresses compatibility issues, explains version information, or clarifies differences between platforms.
Label: Technical Clarification

11.
Concepts: usage guidance, providing guidance and anticipating user needs
Relationship: Inclusion (usage guidance includes providing guidance and anticipating user needs)
Criteria: A designer or user provides tips, tutorials, or instructions on how to use a software or feature, or provides advice or guidance on how to approach a task.
Label: Guidance and Support