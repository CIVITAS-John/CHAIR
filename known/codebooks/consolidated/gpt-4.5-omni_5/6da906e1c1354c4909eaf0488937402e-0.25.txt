You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (24 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
24. 
Concepts: {Repeat the input 24}
Relationship: {What is logical relationship between concepts in code 24, or N/A if not applicable}
Criteria: {Who did what, and how for code 24}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: detailing version updates, communicating technical updates
- Designers provide detailed notes and information about new features, adjustments, and bug fixes in specific versions.
- Designers communicated detailed updates, including new features, release schedules, and bug fixes to users.

2.
Concepts: sharing development updates, providing development updates
- Designers share detailed information about current feature development and progress.
- Designers share information about the status and process of releasing software updates and future plans.

3.
Concepts: explaining delays, discussing feature complexity
- Developers explain delays in updates or feature releases.
- Designers explain the complexity of features or updates and elaborate on the time required for development.

4.
Concepts: seeking context, asking follow-up questions
- Designers seek context or background information from users.
- Designers ask follow-up questions to clarify user needs or scenarios and explain the intention behind these questions.

5.
Concepts: integrating user feedback, implementing a feedback loop
- Instances where user feedback is acknowledged and incorporated into the design process.
- Designers collect, consider, and implement user feedback in design decisions.

6.
Concepts: collaborative planning, collaborating to solve problems
- Designers and users collaboratively discussing and planning the development of the software.
- Instances where users and designers work together to address issues or improve the software.

7.
Concepts: offering user tips, instruction and updates
- Designers offer tips and special information about new features and updates.
- Designers providing updates and instructions to help users understand and use the software effectively.

8.
Concepts: explaining feature details, explaining feature functionality
- Designers explain the details of features or simulations and provide information about technical aspects.
- Designers provide guidance and instructional information about using specific features and explain their functionality.

9.
Concepts: proposing design ideas, suggesting design simplification
- Designers propose new design ideas or solutions to problems.
- Designers share thoughts and suggest simplifications and refinements for designs or features.

10.
Concepts: simulation accuracy, discussing simulated experiments
- Designers discuss the accuracy of simulations.
- Designers discuss simulated experiments and experimental simulations, particularly in electricity.

11.
Concepts: raising feature concerns, discussing product improvements
- Designers raise related issues or concerns during discussions about new features.
- Designers discuss aspects of feature development, potential updates, and ways to improve or optimize features.

12.
Concepts: discussing feature flexibility, discussing interface design
- Designers discuss the flexibility of features or layouts.
- Designers discuss user input methods, layout, visual and functional design decisions, and instructional design approaches.

13.
Concepts: ensuring transparency, transparent developer discussion
- Designers provide detailed information about development processes, challenges, and progress.
- Developers openly discuss technical details and development processes.

14.
Concepts: request, requesting specific features
- Request for specific features or demonstrations.
- Users request specific features or functionalities, including additional experiments, to be added to the software.

15.
Concepts: seeking usage guidance, requesting technical support
- Users ask for guidance or instructions on how to use specific features or versions of the software.
- Users ask technical questions about the platform and request help or instructions on using features.

16.
Concepts: seeking clarification, express comprehension
- Users express uncertainty or seek clarification on specific points.
- Expressing understanding and requesting more information from users.

17.
Concepts: considering system compatibility, addressing system compatibility
- Designers consider the need for compatibility with older operating systems and future compatibility.
- Designers confirm software compatibility with specific systems and provide technical information about system requirements.

18.
Concepts: user reactions, using non-verbal communication
- Instances where users express their reactions to updates or announcements, often using emojis.
- Users express emotions and reactions using emojis or other non-verbal communication.

19.
Concepts: acknowledge help, acknowledging information
- A user expresses gratitude for assistance or information.
- Users acknowledge receipt or understanding of information.

20.
Concepts: greeting the community, expressing community support
- Users or designers greet or welcome the community.
- Users or designers express and acknowledge support for the community.

21.
Concepts: inviting feedback for planning, soliciting user input and feedback
- Designers plan for iterative feedback from the community and promise to gather opinions before starting new projects.
- Designers solicit suggestions and invite users to provide input and feedback for future improvements.

22.
Concepts: identity confirmation, confirming professional role
- A user confirms their identity or role.
- Users or designers confirm a user's identity as a teacher or their professional role.

23.
Concepts: sharing past experiences, sharing professional background
- Users share personal anecdotes or stories to provide context or background information.
- Users share their teaching experience and professional background to establish credibility and context.

24.
Concepts: community context, providing educational context
- Users provide context about the community or institutional environment.
- Users provide context about their teaching environment and technology in educational settings.
===
---
Definitions for each code (24 in total):
1.
Concepts: detailing version updates, communicating technical updates
Relationship: Both involve providing detailed information about software updates.
Criteria: Designers provide detailed notes and communicate updates about new features, adjustments, and bug fixes to users.
Phrase: Communicating detailed version updates

2.
Concepts: sharing development updates, providing development updates
Relationship: Both involve sharing information about the development process.
Criteria: Designers share detailed information about current feature development, progress, and future plans.
Phrase: Sharing development progress

3.
Concepts: explaining delays, discussing feature complexity
Relationship: Both involve providing explanations related to development timelines.
Criteria: Developers explain delays and the complexity of features or updates, elaborating on the time required for development.
Phrase: Explaining development delays

4.
Concepts: seeking context, asking follow-up questions
Relationship: Both involve gathering additional information from users.
Criteria: Designers seek context or background information and ask follow-up questions to clarify user needs or scenarios.
Phrase: Seeking user context

5.
Concepts: integrating user feedback, implementing a feedback loop
Relationship: Both involve incorporating user feedback into the design process.
Criteria: Designers collect, consider, and implement user feedback in design decisions.
Phrase: Incorporating user feedback

6.
Concepts: collaborative planning, collaborating to solve problems
Relationship: Both involve collaboration between designers and users.
Criteria: Designers and users collaboratively discuss, plan, and address issues to improve the software.
Phrase: Collaborating with users

7.
Concepts: offering user tips, instruction and updates
Relationship: Both involve providing guidance and information to users.
Criteria: Designers offer tips, updates, and instructions to help users understand and use the software effectively.
Phrase: Providing user guidance

8.
Concepts: explaining feature details, explaining feature functionality
Relationship: Both involve explaining aspects of software features.
Criteria: Designers explain the details and functionality of features, providing technical and instructional information.
Phrase: Explaining feature functionality

9.
Concepts: proposing design ideas, suggesting design simplification
Relationship: Both involve suggesting improvements or new ideas for design.
Criteria: Designers propose new design ideas and suggest simplifications and refinements for features.
Phrase: Suggesting design improvements

10.
Concepts: simulation accuracy, discussing simulated experiments
Relationship: Both involve discussions about the accuracy and details of simulations.
Criteria: Designers discuss the accuracy of simulations and details of simulated experiments, particularly in electricity.
Phrase: Discussing simulation accuracy

11.
Concepts: raising feature concerns, discussing product improvements
Relationship: Both involve addressing issues and potential improvements in features.
Criteria: Designers raise concerns and discuss aspects of feature development, potential updates, and ways to improve features.
Phrase: Addressing feature concerns

12.
Concepts: discussing feature flexibility, discussing interface design
Relationship: Both involve discussions about the design and flexibility of features.
Criteria: Designers discuss the flexibility of features and interface design, including user input methods and visual design decisions.
Phrase: Discussing design flexibility

13.
Concepts: ensuring transparency, transparent developer discussion
Relationship: Both involve providing open and detailed information about development processes.
Criteria: Designers and developers provide detailed information and openly discuss technical details and development processes.
Phrase: Ensuring development transparency

14.
Concepts: request, requesting specific features
Relationship: Both involve users requesting new features or functionalities.
Criteria: Users request specific features or functionalities, including additional experiments, to be added to the software.
Phrase: Requesting new features

15.
Concepts: seeking usage guidance, requesting technical support
Relationship: Both involve users seeking help or instructions.
Criteria: Users ask for guidance, instructions, and technical support on how to use specific features or versions of the software.
Phrase: Seeking technical support

16.
Concepts: seeking clarification, express comprehension
Relationship: Both involve users seeking and expressing understanding.
Criteria: Users express uncertainty, seek clarification, and request more information to understand specific points.
Phrase: Seeking clarification

17.
Concepts: considering system compatibility, addressing system compatibility
Relationship: Both involve ensuring software compatibility with different systems.
Criteria: Designers consider and confirm software compatibility with older and specific systems, providing technical information about requirements.
Phrase: Ensuring system compatibility

18.
Concepts: user reactions, using non-verbal communication
Relationship: Both involve users expressing their reactions.
Criteria: Users express their reactions to updates or announcements using emojis or other non-verbal communication.
Phrase: Expressing user reactions

19.
Concepts: acknowledge help, acknowledging information
Relationship: Both involve users acknowledging assistance or information.
Criteria: Users express gratitude and acknowledge receipt or understanding of information.
Phrase: Acknowledging assistance

20.
Concepts: greeting the community, expressing community support
Relationship: Both involve interactions that foster community spirit.
Criteria: Users or designers greet, welcome, and express support for the community.
Phrase: Fostering community spirit

21.
Concepts: inviting feedback for planning, soliciting user input and feedback
Relationship: Both involve gathering user feedback for future planning.
Criteria: Designers solicit suggestions and invite users to provide input and feedback for future improvements.
Phrase: Soliciting user feedback

22.
Concepts: identity confirmation, confirming professional role
Relationship: Both involve confirming a user's identity or professional role.
Criteria: Users or designers confirm a user's identity as a teacher or their professional role.
Phrase: Confirming professional identity

23.
Concepts: sharing past experiences, sharing professional background
Relationship: Both involve users sharing their experiences and background.
Criteria: Users share personal anecdotes, teaching experience, and professional background to provide context and establish credibility.
Phrase: Sharing professional experiences

24.
Concepts: community context, providing educational context
Relationship: Both involve providing context about the community or educational environment.
Criteria: Users provide context about their community, teaching environment, and technology use in educational settings.
Phrase: Providing educational context
---