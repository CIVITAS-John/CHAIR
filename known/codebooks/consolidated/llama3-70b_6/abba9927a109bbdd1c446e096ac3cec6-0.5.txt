You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (32 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
32. 
Concepts: {Repeat the input 32}
Relationship: {What is logical relationship between concepts in code 32, or N/A if not applicable}
Criteria: {Who did what, and how for code 32}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: setting expectations, sets development expectations
- Designer sets expectations, provides timelines, or outlines priorities for the development of Physics Lab.
- The designer sets expectations for development timelines or priorities.

2.
Concepts: setting timeline expectations, setting release expectations, setting expectations for future releases
- A designer sets expectations for timelines or releases.
- Designers set expectations for release dates or timelines for updates or new features.
- Designer sets expectations for future releases or updates.

3.
Concepts: managing feature release expectations, managing user expectations for release
- Designer manages users' expectations for feature releases.
- Designer manages user expectations for the release of updates or new features.

4.
Concepts: managing expecations, set user expectations
- Designer manages or sets user expectations about a feature or functionality.
- Designer sets or manages user expectations about a feature, functionality, or timeline.

5.
Concepts: managing expectations, managing user expectations
- Designer manages user expectations by explaining limitations and plans.
- Developer manages expectations for complex or challenging features.
- A designer manages user expectations by providing context or clarifying limitations.

6.
Concepts: sequencing design phases, sequencing development phases
- Designer sequences design phases or priorities.
- The designer outlines the sequence of development phases or priorities.

7.
Concepts: prioritizing tasks, prioritizing development tasks, task prioritization
- Designer prioritizes or organizes tasks or features
- Designer prioritizes development tasks.
- Designer delays or prioritizes tasks or features

8.
Concepts: justifying priorities, explaining development priorities
- The designer justifies the prioritization of certain topics or features.
- Designer explains the reasoning behind prioritizing certain features or tasks in the development process.

9.
Concepts: development priorities, prioritizing feature development, setting development priorities, setting development roadmap
- The designer outlines priorities for development or feature implementation.
- The designer highlights the importance of developing a particular feature or functionality.
- Designer prioritizes feature development based on user needs.
- The designer sets priorities for development or feature implementation.
- Designer sets a development roadmap and prioritizes features.

10.
Concepts: reveals environmental constraints, sharing environmental constraints
- User mentions limitations or constraints related to their environment.
- A user shares information about their environmental or institutional constraints, such as limited resources or old hardware.

11.
Concepts: explaining constraints, contextual explanation
- Explaining constraints or limitations
- Explaining reasons or constraints related to the product or service.

12.
Concepts: explaining compatibility issues, informs about software limitations
- Designer explains or mentions compatibility issues with the software.
- The designer informs users about software limitations or incompatibilities.

13.
Concepts: team limitations, acknowledging limitations
- The designer acknowledges limitations or constraints of the development team.
- Designer acknowledges limitations of the software.
- The speaker acknowledges a limitation or issue with the product.
- The designer acknowledges limitations or constraints in the design or functionality.
- The speaker acknowledges limitations, weaknesses, or areas for improvement.

14.
Concepts: design constraints, justifying limitations
- A designer reveals design constraints or limitations.
- Designer explains limitations or constraints of the software
- The user explains the reasons behind a specific design constraint or limitation.
- Identifying significant factors that influence the design or development of the product or service.
- A designer explains or justifies limitations or constraints.

15.
Concepts: explain limitation, explains system limitations, explaining limitations, explaining current limitations, explaining current limitations of software
- A designer explains the limitations of a feature or functionality.
- A designer explains limitations or constraints of the system or software.
- The designer explains why a feature or functionality cannot be implemented due to system limitations.
- The designer explains limitations or constraints of the software in general.
- The designer explains limitations or constraints of the current software version.
- Designer explains the current limitations or constraints of the software.

16.
Concepts: technical limitations, highlighting constraints
- Designer states technical limitations or constraints of the software.
- Designer explains technical limitations or constraints.
- Designer highlights limitations or constraints of the software or hardware.
- Mentioning limitations or constraints in a specific context.

17.
Concepts: discussing limitations, sharing technical constraints
- Discussing the limitations or constraints of the software.
- The speaker shares technical constraints or limitations that affect the development or use of the software.

18.
Concepts: considering limitations, considering implementation constraints
- The designer expresses consideration for potential issues or limitations.
- A designer considers constraints or limitations that may impact implementation.

19.
Concepts: frustration, technical frustrations, expresses frustration
- User or designer expresses frustration or annoyance
- The designer expresses frustration with platform limitations or technical issues.
- The designer expresses frustration with limitations or constraints

20.
Concepts: highlighting obstacles, highlighting potential challenges
- Users mention potential obstacles or challenges they face.
- User highlights a potential challenge or issue.

21.
Concepts: highlighting ui challenges, revealing potential usability challenges
- The speaker highlights challenges or difficulties with the user interface.
- A user reveals or discusses potential usability challenges or issues.

22.
Concepts: highlights technical constraints, highlighting technical challenges
- A user highlights technical constraints or limitations.
- User highlights technical challenges or limitations, such as network restrictions.

23.
Concepts: software limitations, highlighting limitations
- User highlights software limitations or constraints.
- A user highlights a limitation or constraint in using the software.

24.
Concepts: promoting accessibility, advocating for accessibility
- A user suggests improving accessibility features or functionality.
- A user advocates for accessibility or usability features.

25.
Concepts: multi-platform interest, demonstrating interest in cross-platform functionality, expressing interest in cross-platform access, expressing interest in multiple platforms
- Expressing interest in multi-platform support or compatibility.
- A user expresses interest in using the software on multiple platforms.
- A user expresses interest in cross-platform access or compatibility.
- User expresses interest in multiple platforms for the software.

26.
Concepts: highlighting regional needs, highlighting regional differences
- User mentions regional or cultural differences affecting software usage.
- User highlights regional differences in hardware environments.

27.
Concepts: providing version information, informing about software version
- A designer provides information about a specific version of the software.
- The designer informs users about the current software version.

28.
Concepts: explaining version type, clarifying version type, version clarification
- The designer explains the type of version, such as the PC version.
- The designer clarifies the type of version (e.g., PC version) being referred to.
- The designer clarifies which version of the platform is being discussed (e.g., PC version).

29.
Concepts: clarifying platform differences, clarifying version differences
- The designer clarifies differences between platform versions.
- The designer clarifies differences between versions of the software.

30.
Concepts: compatibility speculation, theorizing about compatibility
- Speculating about the compatibility of the software with different devices or systems.
- Designer speculates or theorizes about the compatibility of the software with different systems.

31.
Concepts: outlining system requirements, clarifying system requirements
- Designer mentions specific system requirements for the software.
- Designer clarifies or specifies system requirements for Physics Lab.

32.
Concepts: future compatibility, considering system compatibility
- Designer considers compatibility with different systems or versions
- Designer considers system compatibility for older systems.
===
Here are the definitions for each code:

---
1.
Concepts: setting expectations, sets development expectations
Relationship: The designer sets expectations for development timelines or priorities.
Criteria: The designer sets expectations for development timelines or priorities.
Phrase: Setting development expectations.

2.
Concepts: setting timeline expectations, setting release expectations, setting expectations for future releases
Relationship: The designer sets expectations for timelines or releases.
Criteria: The designer sets expectations for timelines or releases.
Phrase: Setting release expectations.

3.
Concepts: managing feature release expectations, managing user expectations for release
Relationship: The designer manages user expectations for feature releases.
Criteria: The designer manages user expectations for feature releases.
Phrase: Managing release expectations.

4.
Concepts: managing expectations, set user expectations
Relationship: The designer manages or sets user expectations about a feature or functionality.
Criteria: The designer manages or sets user expectations about a feature or functionality.
Phrase: Managing user expectations.

5.
Concepts: managing expectations, managing user expectations
Relationship: The designer manages user expectations by explaining limitations and plans.
Criteria: The designer manages user expectations by explaining limitations and plans.
Phrase: Managing user expectations.

6.
Concepts: sequencing design phases, sequencing development phases
Relationship: The designer sequences design phases or priorities.
Criteria: The designer sequences design phases or priorities.
Phrase: Sequencing design phases.

7.
Concepts: prioritizing tasks, prioritizing development tasks, task prioritization
Relationship: The designer prioritizes or organizes tasks or features.
Criteria: The designer prioritizes or organizes tasks or features.
Phrase: Prioritizing tasks.

8.
Concepts: justifying priorities, explaining development priorities
Relationship: The designer justifies the prioritization of certain topics or features.
Criteria: The designer justifies the prioritization of certain topics or features.
Phrase: Justifying priorities.

9.
Concepts: development priorities, prioritizing feature development, setting development priorities, setting development roadmap
Relationship: The designer outlines priorities for development or feature implementation.
Criteria: The designer outlines priorities for development or feature implementation.
Phrase: Setting development priorities.

10.
Concepts: reveals environmental constraints, sharing environmental constraints
Relationship: The user shares information about their environmental or institutional constraints.
Criteria: The user shares information about their environmental or institutional constraints.
Phrase: Sharing environmental constraints.

11.
Concepts: explaining constraints, contextual explanation
Relationship: Explaining constraints or limitations.
Criteria: Explaining constraints or limitations.
Phrase: Explaining constraints.

12.
Concepts: explaining compatibility issues, informs about software limitations
Relationship: The designer explains or mentions compatibility issues with the software.
Criteria: The designer explains or mentions compatibility issues with the software.
Phrase: Explaining compatibility issues.

13.
Concepts: team limitations, acknowledging limitations
Relationship: The designer acknowledges limitations or constraints of the development team.
Criteria: The designer acknowledges limitations or constraints of the development team.
Phrase: Acknowledging limitations.

14.
Concepts: design constraints, justifying limitations
Relationship: A designer reveals design constraints or limitations.
Criteria: A designer reveals design constraints or limitations.
Phrase: Revealing design constraints.

15.
Concepts: explain limitation, explains system limitations, explaining limitations, explaining current limitations, explaining current limitations of software
Relationship: The designer explains the limitations of a feature or functionality.
Criteria: The designer explains the limitations of a feature or functionality.
Phrase: Explaining limitations.

16.
Concepts: technical limitations, highlighting constraints
Relationship: The designer states technical limitations or constraints of the software.
Criteria: The designer states technical limitations or constraints of the software.
Phrase: Highlighting technical limitations.

17.
Concepts: discussing limitations, sharing technical constraints
Relationship: Discussing the limitations or constraints of the software.
Criteria: Discussing the limitations or constraints of the software.
Phrase: Discussing limitations.

18.
Concepts: considering limitations, considering implementation constraints
Relationship: The designer expresses consideration for potential issues or limitations.
Criteria: The designer expresses consideration for potential issues or limitations.
Phrase: Considering limitations.

19.
Concepts: frustration, technical frustrations, expresses frustration
Relationship: The designer expresses frustration or annoyance.
Criteria: The designer expresses frustration or annoyance.
Phrase: Expressing frustration.

20.
Concepts: highlighting obstacles, highlighting potential challenges
Relationship: Users mention potential obstacles or challenges they face.
Criteria: Users mention potential obstacles or challenges they face.
Phrase: Highlighting obstacles.

21.
Concepts: highlighting ui challenges, revealing potential usability challenges
Relationship: The speaker highlights challenges or difficulties with the user interface.
Criteria: The speaker highlights challenges or difficulties with the user interface.
Phrase: Highlighting UI challenges.

22.
Concepts: highlights technical constraints, highlighting technical challenges
Relationship: A user highlights technical constraints or limitations.
Criteria: A user highlights technical constraints or limitations.
Phrase: Highlighting technical constraints.

23.
Concepts: software limitations, highlighting limitations
Relationship: User highlights software limitations or constraints.
Criteria: User highlights software limitations or constraints.
Phrase: Highlighting software limitations.

24.
Concepts: promoting accessibility, advocating for accessibility
Relationship: A user suggests improving accessibility features or functionality.
Criteria: A user suggests improving accessibility features or functionality.
Phrase: Promoting accessibility.

25.
Concepts: multi-platform interest, demonstrating interest in cross-platform functionality, expressing interest in cross-platform access, expressing interest in multiple platforms
Relationship: Expressing interest in multi-platform support or compatibility.
Criteria: Expressing interest in multi-platform support or compatibility.
Phrase: Expressing multi-platform interest.

26.
Concepts: highlighting regional needs, highlighting regional differences
Relationship: User mentions regional or cultural differences affecting software usage.
Criteria: User mentions regional or cultural differences affecting software usage.
Phrase: Highlighting regional needs.

27.
Concepts: providing version information, informing about software version
Relationship: A designer provides information about a specific version of the software.
Criteria: A designer provides information about a specific version of the software.
Phrase: Providing version information.

28.
Concepts: explaining version type, clarifying version type, version clarification
Relationship: The designer explains the type of version, such as the PC version.
Criteria: The designer explains the type of version, such as the PC version.
Phrase: Explaining version type.

29.
Concepts: clarifying platform differences, clarifying version differences
Relationship: The designer clarifies differences between platform versions.
Criteria: The designer clarifies differences between platform versions.
Phrase: Clarifying platform differences.

30.
Concepts: compatibility speculation, theorizing about compatibility
Relationship: Speculating about the compatibility of the software with different devices or systems.
Criteria: Speculating about the compatibility of the software with different devices or systems.
Phrase: Speculating about compatibility.

31.
Concepts: outlining system requirements, clarifying system requirements
Relationship: Designer mentions specific system requirements for the software.
Criteria: Designer mentions specific system requirements for the software.
Phrase: Outlining system requirements.

32.
Concepts: future compatibility, considering system compatibility
Relationship: Designer considers compatibility with different systems or versions.
Criteria: Designer considers compatibility with different systems or versions.
Phrase: Considering future compatibility.