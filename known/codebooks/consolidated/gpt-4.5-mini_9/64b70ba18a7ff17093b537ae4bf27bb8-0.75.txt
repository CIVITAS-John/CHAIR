You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (17 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
17. 
Concepts: {Repeat the input 17}
Relationship: {What is logical relationship between concepts in code 17, or N/A if not applicable}
Criteria: {Who did what, and how for code 17}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: future update, list upcoming features
- A designer explains that certain features will be available in future updates.
- The designer lists upcoming features and improvements that will be included in future updates.

2.
Concepts: list version updates, describe product improvements
- Designers provide detailed notes on updates, including new features and fixes for user awareness.
- Designers list new features and inform users of significant changes made to the product.

3.
Concepts: provide update timelines, inform about software version
- The designer shares a timeline for upcoming software updates and discusses future plans.
- The designer informs users about the current version and its release timeline.

4.
Concepts: announce software updates, make general announcements
- Designers provide information about upcoming updates and the status of software releases.
- Designers make announcements about developments or important updates regarding the software.

5.
Concepts: communicate progress updates, highlight progress of updates
- The designer communicates updates about the ongoing work or progress of the project.
- The designer communicates progress on updates, highlighting the scale or significance of changes.

6.
Concepts: discuss future planning, plan future feature development
- The designer discusses future software features and strategic planning for upcoming updates.
- The designer outlines future objectives for the application's development focusing on enhancements.

7.
Concepts: confirm upcoming updates, confirm feature implementation
- A designer provides information about updates that are being prepared.
- The designer confirms the implementation of updates and their expected release in the future.

8.
Concepts: share development updates, share feature development status
- The designer shares information about anticipated future developments and features of the application.
- A designer informs the community about ongoing research related to product features and their timelines.

9.
Concepts: technical question, technical inquiry
- Users ask technical questions regarding the application and its usage.
- Instances where users ask technical questions about the platform, indicating areas of user interest or potential issues.

10.
Concepts: seek help for software usage, request guidance for software usage
- Users ask for help or express the need for additional resources regarding the software.
- Users ask for a user manual or guidance to better understand how to operate the software.

11.
Concepts: use non verbal communication, use emojis in communication
- Use of emojis or other non-verbal forms of communication by users.
- Users engage in conversation using emojis to express feelings or reactions.

12.
Concepts: express user appreciation, express gratitude for contributions
- Users express thanks or appreciation towards the contributions of others.
- Users express appreciation for the software and acknowledge others' contributions.

13.
Concepts: offer an apology, apologies and politeness
- Designers apologize for disturbances caused and show consideration for users.
- Expressions of politeness, apologies, or acknowledgment of potential inconvenience by the designers.

14.
Concepts: answer user concerns, resolve user concern
- Designers address user concerns by providing reassuring information.
- The designer addresses and alleviates user concerns regarding functionality or performance.

15.
Concepts: propose design improvements, suggesting collaboration
- Users suggest features that would enhance software usability in educational contexts.
- Users propose collaborative projects or ideas for enhancing the software's educational functionality.

16.
Concepts: gather context from users, inquire about user requests
- Designers ask questions to gather context about user experiences.
- Designers inquire about specifics of user requests to gain context.

17.
Concepts: troubleshoot issues, clarification question
- Designers ask users to specify problems encountered with the software.
- The designer asks users about specific problems they have encountered while using the application.
===
---
Definitions for each code (17 in total):

1.
Concepts: future update, list upcoming features  
Relationship: The designer's explanation of future features logically follows the listing of those features, as they are interconnected in the context of informing users.  
Criteria: The designer explained certain features that will be included in future updates and listed those upcoming features and improvements.  
Phrase: Outline future updates.

2.
Concepts: list version updates, describe product improvements  
Relationship: Listing version updates naturally includes the description of product improvements, as both serve to inform users about the software's evolution.  
Criteria: Designers provided detailed notes on updates and listed new features to inform users of significant changes made to the product.  
Phrase: Document version updates.

3.
Concepts: provide update timelines, inform about software version  
Relationship: Sharing a timeline of updates complements informing users about the current software version, as both are essential for understanding the software’s status.  
Criteria: The designer shared a timeline for upcoming software updates and informed users about the current version and its release timeline.  
Phrase: Communicate software timelines.

4.
Concepts: announce software updates, make general announcements  
Relationship: Announcing software updates aligns with making general announcements, as both involve sharing information about changes or developments.  
Criteria: Designers provided information about upcoming updates and made announcements regarding the software developments.  
Phrase: Disclose software updates.

5.
Concepts: communicate progress updates, highlight progress of updates  
Relationship: Communicating updates is logically tied to highlighting progress, as both emphasize the ongoing status of the project.  
Criteria: The designer communicated updates about ongoing work and highlighted the significance of progress on updates.  
Phrase: Report project progress.

6.
Concepts: discuss future planning, plan future feature development  
Relationship: Discussing future planning is inherently connected to planning feature development, as both focus on strategizing for the software's future.  
Criteria: The designer discussed future software features and outlined future objectives for the application’s development.  
Phrase: Strategize future features.

7.
Concepts: confirm upcoming updates, confirm feature implementation  
Relationship: Confirming upcoming updates is directly linked to confirming feature implementation, as both validate the software's development trajectory.  
Criteria: A designer confirmed upcoming updates that are being prepared and the implementation of updates expected for future release.  
Phrase: Validate update confirmations.

8.
Concepts: share development updates, share feature development status  
Relationship: Sharing development updates is inherently related to sharing the status of feature development, as both provide insights into ongoing projects.  
Criteria: The designer shared information about anticipated future developments and informed the community about ongoing research related to product features.  
Phrase: Update on development status.

9.
Concepts: technical question, technical inquiry  
Relationship: Technical questions and inquiries are naturally related, as both involve users seeking information about the application.  
Criteria: Users asked technical questions regarding the application, indicating areas of interest or potential issues.  
Phrase: Pose technical inquiries.

10.
Concepts: seek help for software usage, request guidance for software usage  
Relationship: Seeking help and requesting guidance are closely connected, as both reflect users' needs for assistance with the software.  
Criteria: Users asked for help or expressed the need for additional resources regarding the software's usage.  
Phrase: Request software assistance.

11.
Concepts: use non verbal communication, use emojis in communication  
Relationship: Non-verbal communication and the use of emojis are logically linked, as emojis serve as a specific form of non-verbal expression.  
Criteria: Users engaged in conversation using emojis or other non-verbal forms of communication.  
Phrase: Engage in non-verbal expression.

12.
Concepts: express user appreciation, express gratitude for contributions  
Relationship: Expressing appreciation and gratitude are intertwined, as both denote users' recognition of others' contributions.  
Criteria: Users expressed thanks or appreciation towards contributions and acknowledged others' efforts.  
Phrase: Convey user appreciation.

13.
Concepts: offer an apology, apologies and politeness  
Relationship: Offering an apology and demonstrating politeness are connected as both involve showing consideration for others' feelings or experiences.  
Criteria: Designers apologized for disturbances and expressed politeness towards users.  
Phrase: Extend apologies.

14.
Concepts: answer user concerns, resolve user concern  
Relationship: Answering user concerns is logically related to resolving them, as both actions aim to alleviate user anxiety or confusion.  
Criteria: Designers addressed user concerns by providing reassuring information and alleviating worries regarding functionality.  
Phrase: Address user concerns.

15.
Concepts: propose design improvements, suggesting collaboration  
Relationship: Proposing design improvements and suggesting collaboration are related, as both involve users' ideas for enhancing software usability.  
Criteria: Users suggested features to enhance software usability and proposed collaborative projects for educational enhancement.  
Phrase: Propose enhancements.

16.
Concepts: gather context from users, inquire about user requests  
Relationship: Gathering context and inquiring about user requests are interlinked, as both seek to understand users' needs and experiences.  
Criteria: Designers asked questions to gather context about user experiences and inquired about specifics of user requests.  
Phrase: Collect user insights.

17.
Concepts: troubleshoot issues, clarification question  
Relationship: Troubleshooting issues and asking clarification questions are connected, as both involve addressing user-reported problems for better understanding.  
Criteria: Designers asked users to specify problems encountered and sought clarification on specific issues faced with the application.  
Phrase: Clarify technical issues.
---