You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (13 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
13. 
Concepts: {Repeat the input 13}
Relationship: {What is logical relationship between concepts in code 13, or N/A if not applicable}
Criteria: {Who did what, and how for code 13}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: introduce software functions, introduce and explain new features
- Designers elaborate on specific software features and address their functionalities.
- Designers present and explain new software components, including features like augmented reality.

2.
Concepts: provide instructional updates, provide technical information
- Designers offer clarifications and instructions regarding software functionality.
- Designers explain technical specifications and the development process of the software.

3.
Concepts: responding to inquiries, seek specifics and request guidance
- A designer responded to a user's inquiry concerning software functionality or compatibility.
- Users ask designers for detailed technical information about software functionalities and compatibility.

4.
Concepts: clarify design rationale, provide development rationale
- Designers clarify software features and their user-friendly rationale.
- Designers explain the reasons behind development decisions and limitations.

5.
Concepts: collaborative planning, discuss input methods and interface layout
- Designers and users collaboratively discussing and planning the development of the software.
- Designers and users collaborate on input methods and interface usability to optimize software performance.

6.
Concepts: users suggest improvements, share and support user experiences
- Both users and designers propose improvements to software functionalities.
- Users and designers engage in mutual sharing of experiences to enhance support and software improvement.

7.
Concepts: accept user suggestions, confirm potential updates
- Users confirm and designers commit to incorporating user suggestions in future updates.
- Designers confirm and suggest possibilities for upcoming features based on system needs.

8.
Concepts: validate user feedback, designers maintain feedback loops
- Designers acknowledge and implement user feedback into development plans.
- Designers collect and implement user feedback into design decisions.

9.
Concepts: prioritize user feedback, seek consensus and request feedback
- Designers prioritize feedback in planning future software iterations.
- Designers emphasize the importance of feedback while seeking consensus from users for future developments.

10.
Concepts: list upcoming features, confirm and detail upcoming features
- Designers list and provide information about intended software features.
- Designers inform users about upcoming features and their timelines in future updates.

11.
Concepts: identify classroom challenges, contextualize educational experiences
- Users describe institutional restrictions and technical challenges affecting software usage in classrooms.
- Users describe contexts of software usage and share related challenges in educational settings.

12.
Concepts: communication tone, encourage open and casual communication
- Designer interacts with users using language that reflects informal or casual communication styles.
- Designers create a welcoming environment for users to communicate informally and report issues.

13.
Concepts: consulting community, cultivate community input
- Designers engage the community in decision-making processes and seek input on specific technical aspects.
- Designers collect suggestions and ideas from the community to support collaborative projects.
===
---
Definitions for each code (13 in total):
1. 
Concepts: introduce software functions, introduce and explain new features  
Relationship: Both concepts involve designers presenting new functionalities of the software to enhance user understanding.  
Criteria: Designers elaborate on specific software features and functionalities, presenting new components such as augmented reality.  
Phrase: Present software functionalities.

2. 
Concepts: provide instructional updates, provide technical information  
Relationship: Both concepts focus on ensuring users have the necessary information to understand and utilize the software effectively.  
Criteria: Designers offer clarifications and technical specifications regarding software functionality and development processes.  
Phrase: Offer instructional updates.

3. 
Concepts: responding to inquiries, seek specifics and request guidance  
Relationship: Involves a dialogue where users ask questions and designers provide necessary responses to enhance understanding.  
Criteria: Designers respond to users' inquiries about software functionality while users seek detailed technical information.  
Phrase: Address user inquiries.

4. 
Concepts: clarify design rationale, provide development rationale  
Relationship: Both concepts indicate a need for transparency in the decisions behind software design and development.  
Criteria: Designers clarify the user-friendly rationale behind software features and the reasoning for development decisions.  
Phrase: Explain design rationale.

5. 
Concepts: collaborative planning, discuss input methods and interface layout  
Relationship: These concepts highlight interactions between designers and users in optimizing software usability through discussions.  
Criteria: Designers and users collaboratively discuss the development and interface usability to enhance software performance.  
Phrase: Collaborate on software design.

6. 
Concepts: users suggest improvements, share and support user experiences  
Relationship: Involves collaboration where both users and designers work together to refine software functionalities based on shared experiences.  
Criteria: Users and designers propose improvements and share experiences to enhance software performance.  
Phrase: Engage in software improvement.

7. 
Concepts: accept user suggestions, confirm potential updates  
Relationship: Both concepts demonstrate a responsive approach to user input, with designers affirming incorporation of feedback into updates.  
Criteria: Users confirm suggestions while designers commit to incorporating these feedback in future software updates.  
Phrase: Incorporate user suggestions.

8. 
Concepts: validate user feedback, designers maintain feedback loops  
Relationship: This reflects a continuous cycle of user input and designer response to improve the software based on feedback.  
Criteria: Designers acknowledge user feedback and integrate it into development plans and design decisions.  
Phrase: Implement user feedback.

9. 
Concepts: prioritize user feedback, seek consensus and request feedback  
Relationship: Both concepts emphasize the importance of user feedback in the software development process.  
Criteria: Designers prioritize and seek consensus on user feedback for future software iterations.  
Phrase: Prioritize user feedback.

10. 
Concepts: list upcoming features, confirm and detail upcoming features  
Relationship: These concepts focus on informing users about future software enhancements and timelines.  
Criteria: Designers communicate about intended software features and provide detailed information on upcoming functionalities.  
Phrase: Detail upcoming features.

11. 
Concepts: identify classroom challenges, contextualize educational experiences  
Relationship: Both concepts address how environmental and institutional factors influence software usage in educational settings.  
Criteria: Users describe technical challenges and contextual factors affecting software usage in classrooms.  
Phrase: Identify classroom challenges.

12. 
Concepts: communication tone, encourage open and casual communication  
Relationship: These concepts highlight the importance of fostering a welcoming and informal environment for user interactions.  
Criteria: Designers use informal language to encourage users to communicate openly and report issues.  
Phrase: Foster open communication.

13. 
Concepts: consulting community, cultivate community input  
Relationship: Both concepts illustrate the importance of community engagement in the decision-making and development processes.  
Criteria: Designers engage the community for input and collect suggestions to support collaborative initiatives.  
Phrase: Engage community input.
---