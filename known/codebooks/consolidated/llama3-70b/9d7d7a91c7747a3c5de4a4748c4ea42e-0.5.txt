You are an expert in thematic analysis. 
Each code is a cluster of multiple qualitative sub-code. If a sub-code includes another, use the broader one. If sub-codes are parallel, write one that covers both.
Write clear and generalizable labels and criteria for each code, informed by the context, and without unnecessary specifics or examples.
Find a theory-informed category for each code. Use 2-4 words for categories and avoid over-generalization (e.g. "social interaction" instead of "interaction", "communication approach" instead of "communication").
The research question is: How did Physics Lab's online community emerge? (through the lens of learning sciences, human-computer interaction, and participatory design)
Always follow the output format:
---
Categories: 
* {Name some categories you identified from the research question and theoretical lens}

Definitions for each code (32 in total):
1.
Relationship: {The logical relationship between sub-codes in code 1}
Criteria: {Consolidated criteria of code 1}
Label: {A consolidated label of code 1}
Category: {2-4 words for code 1}
...
32.
Relationship: {The logical relationship between sub-codes in code 32}
Criteria: {Consolidated criteria of code 32}
Label: {A consolidated label of code 32}
Category: {2-4 words for code 32}
---
~~~
1. emoji, emotive visual communication.
- Using emojis or other non-verbal cues to express reactions or emotions
- Use of emojis or emoticons
- Expressing emotions and reactions through emojis.
- Use of emojis, emoticons to convey emotional responses
- Use of non-verbal symbols such as emojis to express emotions or emphasize communication.

2. politeness, polite user interaction.
- Use of polite language in communication
- Using polite language or expressions
- Polite interactions and formal conversation initiation

3. user engagement, proactive user engagement.
- Encouraging or promoting user engagement
- User-initiated interactions that enhance engagement and participation within the community.

4. community feedback, community feedback solicitation.
- Collecting opinions or suggestions from the community
- Active engagement of the community in decision-making through feedback solicitation.

5. subject focus areas, physics focus.
- Mentions focus on electricity, mechanics, optics experiment types
- Focus on physics, particularly electricity and mechanics, topics or concepts related to electromagnetics

6. needs assessment, understanding user needs.
- Identifying or assessing user needs
- Discussing, understanding, or identifying the specific needs or requirements of users.

7. user support, technical user support.
- Involves offering support and seeking technical assistance within the community.
- User inquiries regarding software issues and clarifications.
- Offers of help or support, offers of technical assistance, request for technical assistance or troubleshooting
- Provision of targeted support and assistance in response to technical challenges faced by users.

8. download instructions, technology download guidance.
- Providing instructions or steps for downloading or accessing the product.
- Providing instructions or guidance on downloading or accessing resources
- Instructions provided for downloading specific software or tools.

9. user guidance, user manual requests.
- Involves guidance provision and inquiries about user manuals.
- Inquiries and requests for user manuals, guides, or instructional content.

10. release notes & new features, feature list and introduction.
- Listing changes in new releases, introducing new features
- Detailed introduction of new or revised features in software updates.

11. use case, software use case.
- Describes a specific use case or application for the product.
- Description of a specific use case or scenario
- Describing the intended use cases or target audience for the software

12. feature discussion and explanation, feature design and functionality.
- Discussing or providing feedback on specific features, explaining functionality or rationale behind features.
- Discussing the design considerations and rationale behind specific software features or functionalities, as well as the specific features, functionalities, or components included in the software.

13. software functionality, feature usage and explanation.
- Explaining software capabilities and discussing functionalities.
- Detailed explanation and discussion on the utility and application of specific software features.

14. platform clarification, information clarification.
- Clarifying or distinguishing between different platforms or versions.
- Clarifying queries, specifying software version/platform

15. community announcement, community updates.
- Announcing updates, new information to community members
- Involves exchanging greetings and sharing official messages within the community.
- Updates shared within the community about ongoing projects, new resources, or significant events.

16. update communication, update communication details.
- Acknowledgment of update completion and communication of update schedules.
- Detailed communication regarding the timing and content of software updates.

17. update information, update confirmations.
- Announcing new versions, changes, and features in the system.
- Confirming update releases, mentioning new version availability

18. update inquiry & details, update inquiries & timelines.
- Involves inquiries about updates and providing details on new releases.
- Asking about update timing, indicating upcoming updates

19. transparency, process transparency.
- Being transparent about the development process, release timelines, or upcoming changes.
- Openness in sharing details about the development processes.

20. progress updates, development status updates.
- Updates on project and software development progress.
- Sharing visual updates, providing development status

21. update schedule, software release planning.
- Outlining a schedule or timeline for updates or releases, mention of a specific version release
- Outlining plans for platform updates, release timelines

22. feature stability, long term stability.
- Ensuring the stability of product features.
- Discusses aspects of a feature that contribute to the system's durability or reliability over time.
- Ensuring the long-term stability and reliability of a system or feature.

23. craftsmanship, craftspersonship mindset.
- Emphasizing the importance of skill and attention to detail.
- Embracing a mindset of craftsmanship, attention to detail, and a commitment to quality.

24. simplicity, design simplicity.
- Emphasizing simplicity or minimalism in the design
- Emphasis on simplicity or ease of use in the online community.
- Focus on simplicity in design and user-friendly features for intuitive use.
- Principles and explanations focusing on simplicity in design

25. design explanation, design principles and rationale.
- Explanations or clarifications of design decisions, guiding principles for design.
- Stating general design principles or guidelines, providing reasoning behind design decisions or approaches.

26. positive feedback provision, software feedback.
- Complimenting software design and functionality.
- Offering positive feedback or praise about the software's design, functionality, or user experience

27. user-centered design, user-centric development.
- Emphasis on user feedback and involvement in design.
- Design approach prioritizing user needs and experiences
- Design processes that heavily consider user input and needs.

28. user feedback on design, design response.
- User feedback specifically related to design choices, reflecting personal preferences.
- Responses to user feedback, feedback or critique on design, users' opinions or suggestions, integrating user feedback into design

29. feature refinement, feature requests & changes.
- Requests for feature refinement and enhancement.
- Requesting new features, indicating desired changes

30. feature enhancement, feature development inquiry.
- Discussions about adding new features, implementing new features, suggestions or ideas for new features
- Enhancements and refinements made to software features to optimize performance and user experience.
- Inquiries and discussions about the development of new features based on user feedback.

31. configuration options, user customization options.
- Describing configuration options, settings, or customization capabilities available in the software.
- Options available for users to manually edit or customize software settings and features.

32. software availability.
- Questions about the software, downloading it
- Inquiring about or discussing the availability and access to download the software
===
Here is the output format with the identified categories, definitions for each code, and their corresponding categories:

---
Categories:
* Community Building
* User Experience
* Communication Approach
* Software Development
* Design Principles
* User Support

Definitions for each code:

1.
Relationship: Parallel sub-codes
Criteria: Using non-verbal cues to express emotions or reactions
Label: Emotive Visual Communication
Category: Communication Approach

2.
Relationship: Broader sub-code
Criteria: Using polite language or expressions
Label: Polite User Interaction
Category: Community Building

3.
Relationship: Parallel sub-codes
Criteria: Encouraging or promoting user engagement
Label: Proactive User Engagement
Category: Community Building

4.
Relationship: Broader sub-code
Criteria: Collecting opinions or suggestions from the community
Label: Community Feedback Solicitation
Category: Community Building

5.
Relationship: Parallel sub-codes
Criteria: Focus on physics, particularly electricity and mechanics
Label: Subject Focus Areas
Category: Software Development

6.
Relationship: Broader sub-code
Criteria: Identifying or assessing user needs
Label: Needs Assessment
Category: User Experience

7.
Relationship: Parallel sub-codes
Criteria: Offering support and seeking technical assistance
Label: Technical User Support
Category: User Support

8.
Relationship: Broader sub-code
Criteria: Providing instructions for downloading or accessing resources
Label: Download Instructions
Category: User Support

9.
Relationship: Parallel sub-codes
Criteria: Inquiries and requests for user manuals
Label: User Guidance
Category: User Support

10.
Relationship: Broader sub-code
Criteria: Listing changes in new releases, introducing new features
Label: Release Notes & New Features
Category: Software Development

11.
Relationship: Parallel sub-codes
Criteria: Describing a specific use case or application
Label: Use Case
Category: Software Development

12.
Relationship: Broader sub-code
Criteria: Discussing or providing feedback on specific features
Label: Feature Discussion and Explanation
Category: Software Development

13.
Relationship: Parallel sub-codes
Criteria: Explaining software capabilities and discussing functionalities
Label: Software Functionality
Category: Software Development

14.
Relationship: Broader sub-code
Criteria: Clarifying or distinguishing between different platforms or versions
Label: Platform Clarification
Category: User Support

15.
Relationship: Parallel sub-codes
Criteria: Announcing updates, new information to community members
Label: Community Announcement
Category: Community Building

16.
Relationship: Broader sub-code
Criteria: Acknowledgment of update completion and communication of update schedules
Label: Update Communication
Category: Software Development

17.
Relationship: Parallel sub-codes
Criteria: Announcing new versions, changes, and features in the system
Label: Update Information
Category: Software Development

18.
Relationship: Broader sub-code
Criteria: Inquiries about updates and providing details on new releases
Label: Update Inquiry & Details
Category: Software Development

19.
Relationship: Parallel sub-codes
Criteria: Being transparent about the development process, release timelines, or upcoming changes
Label: Transparency
Category: Software Development

20.
Relationship: Broader sub-code
Criteria: Updates on project and software development progress
Label: Progress Updates
Category: Software Development

21.
Relationship: Parallel sub-codes
Criteria: Outlining a schedule or timeline for updates or releases
Label: Update Schedule
Category: Software Development

22.
Relationship: Broader sub-code
Criteria: Ensuring the stability of product features
Label: Feature Stability
Category: Software Development

23.
Relationship: Parallel sub-codes
Criteria: Emphasizing the importance of skill and attention to detail
Label: Craftsmanship
Category: Design Principles

24.
Relationship: Broader sub-code
Criteria: Emphasizing simplicity or minimalism in the design
Label: Simplicity
Category: Design Principles

25.
Relationship: Parallel sub-codes
Criteria: Explanations or clarifications of design decisions, guiding principles for design
Label: Design Explanation
Category: Design Principles

26.
Relationship: Broader sub-code
Criteria: Complimenting software design and functionality
Label: Positive Feedback Provision
Category: User Experience

27.
Relationship: Parallel sub-codes
Criteria: Emphasis on user feedback and involvement in design
Label: User-Centered Design
Category: Design Principles

28.
Relationship: Broader sub-code
Criteria: User feedback specifically related to design choices
Label: User Feedback on Design
Category: User Experience

29.
Relationship: Parallel sub-codes
Criteria: Requests for feature refinement and enhancement
Label: Feature Refinement
Category: Software Development

30.
Relationship: Broader sub-code
Criteria: Discussions about adding new features, implementing new features
Label: Feature Enhancement
Category: Software Development

31.
Relationship: Parallel sub-codes
Criteria: Describing configuration options, settings, or customization capabilities
Label: Configuration Options
Category: User Experience

32.
Relationship: Broader sub-code
Criteria: Inquiries about or discussing the availability and access to download the software
Label: Software Availability
Category: User Support