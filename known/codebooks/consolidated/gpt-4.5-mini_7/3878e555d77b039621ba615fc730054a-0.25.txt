You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (49 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
49. 
Concepts: {Repeat the input 49}
Relationship: {What is logical relationship between concepts in code 49, or N/A if not applicable}
Criteria: {Who did what, and how for code 49}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: explain design principles, provide design rationale, explain design goals and intentions
- Designers articulate the principles guiding their design choices and explain the underlying principles of the product.
- A designer explains the rationale behind the software's design for user-friendliness and provides explanations for decisions taken.
- Designers explain their design goals emphasizing user-friendliness and the rationale behind design choices.

2.
Concepts: suggest design simplification, simplification and refinement in design
- The designer shares thoughts on simplifying the software's design and emphasizes the need for simplicity.
- Designers discuss the importance of simplification and refinement in the design process.

3.
Concepts: provide technical details, clarify technical functionality
- The designer provides technical details about new features and specific compatibility information.
- Designer clarifies technical aspects related to touch screen functionality and provides information about it.

4.
Concepts: give usage instructions, ensure proper operation
- A designer provided instructions on how to use a specific feature of the software.
- Designers provide instructions to ensure users can operate the software correctly and effectively.

5.
Concepts: announce feature updates, communicate software changes
- Designers announce new features, updates, or bug fixes based on user input.
- Designers provide updates or announcements about the software and solicit user input on desired features.

6.
Concepts: share development progress, communicate software updates
- Designers highlight significant progress made in software updates and share detailed information about new features.
- Designers document software updates and inform users about product enhancements by listing new features and providing detailed notes on version updates.

7.
Concepts: give an intro to the update content, communicate update scope and magnitude
- Designers provide an introduction to the content of updates, outlining what users can expect.
- Designers outline the extent and nature of the upcoming software updates and share information about the size and significance of an upcoming update.

8.
Concepts: outline and set development timelines, outline development goals
- The designer provides a timeline for upcoming software updates and outlines the schedule for releases and updates.
- Designers outline the sequence of development priorities for different sections of the software and outline specific objectives and future functionalities for the software development.

9.
Concepts: explain development complexity, ensure transparency about feature complexity
- Designers explain the complexities involved in software development and describe the time requirements for completion.
- Designer communicated the complexity of a feature and the time required for its completion.

10.
Concepts: ensure accuracy through clarification, provide and clarify version details
- The designer seeks clarification on specific details and technical aspects of a discussion.
- The designer provided detailed information about the current version and clarified which version is being discussed.

11.
Concepts: transparent developer discussion, maintain development transparency
- The designer engages in transparent discussions about development challenges and solutions.
- A designer emphasizes transparency regarding the development process and progress and provides detailed information about development processes and progress.

12.
Concepts: promise that the update is ongoing, reassure users about software status
- Designers assure users that updates are in progress and ongoing.
- Designers reassure users about ongoing work, optimization efforts, and address their concerns by answering questions.

13.
Concepts: express hope for progress, commit to software improvement
- Designers express aspirations for progress in software development and feature implementation.
- Designers express their commitment to improving the software and acknowledge the need for future enhancements.

14.
Concepts: confirm teacher identity, confirm professional role
- Designers confirm the professional background of users, particularly in teaching.
- A user confirms their role as a teacher and affirms their professional identity.

15.
Concepts: sharing identity per request, share professional background
- A user shares their professional background in response to a request for information.
- Users share their professional background to enhance understanding of the community's composition.

16.
Concepts: provide context for needs, explain intention and ask follow-up questions
- Users describe the context of their needs related to the software.
- A user states the context of their interest in the software, and the designer responds with relevant information.

17.
Concepts: seek help for usage, request user documentation, request user assistance
- Users express their need for guidance or support in using the software effectively.
- Users inquire about resources related to the software, such as manuals or downloads.
- Users request assistance with downloading the software and accessing it.

18.
Concepts: inquire about compatibility, provide platform specifics
- A user inquires about the compatibility of the application across different platforms.
- A user provides specific information about their system compatibility and specifies the platform for inquiry.

19.
Concepts: seek information actively, show interest in details
- Users ask questions to gain knowledge or resources related to the software.
- Users express curiosity or need for information about the software's technical details.

20.
Concepts: discuss platform limitations, discuss system compatibility
- The designer mentions limitations regarding specific operating systems and explains how they affect functionality.
- The designer discusses compatibility issues with various operating systems and speculates on compatibility with different systems.

21.
Concepts: discuss technical constraints, consider technical aspects
- Instances where technical limitations or requirements are discussed.
- A designer considers potential technical issues and discusses technical aspects that may affect performance.

22.
Concepts: express user needs, highlight educational needs
- Users express specific needs related to the application in educational contexts.
- Users highlight specific educational needs related to the software's functionality.

23.
Concepts: share user experiences, user experience in educational contexts
- Users share personal experiences related to the software in educational contexts.
- User experiences and challenges in using the software within educational settings.

24.
Concepts: design adaptation, discuss local export necessity
- Designers identify the need for specific functionalities, such as local export capabilities.
- Designers emphasize the importance of supporting local export features and note the need for such functionality.

25.
Concepts: ease of use, evaluate software usability
- Discussions related to the ease of use and user-friendliness of the software.
- Users evaluate the software's practicality and ease of use compared to other options, provide feedback comparing the software's practicality to other software, and compare the software favorably to similar applications in terms of usability.

26.
Concepts: engage with emojis, use non verbal communication
- Users express emotions or reactions through emojis in their interactions.
- Use of emojis or other non-verbal forms of communication by users.

27.
Concepts: initiate interaction, welcome users warmly
- A user initiates interaction by greeting the community.
- Designers greet users and initiate friendly communication within the community.

28.
Concepts: acknowledge community support, gratitude and encouragement
- Instances of support and acknowledgment are expressed within the community.
- Expressions of appreciation and encouragement that help build a positive community atmosphere.

29.
Concepts: recognition of effort, demonstrate user appreciation
- Instances where users acknowledge and appreciate the efforts of the designers.
- Expressions of thanks or appreciation from users and users expressing gratitude or appreciation for feedback received regarding design updates or features.

30.
Concepts: compliment, convey user satisfaction
- Users express admiration or appreciation for ideas, features, or the software itself, often combining compliments with requests.
- Users share positive experiences and express satisfaction with the software's performance.

31.
Concepts: demonstrate self-help, acknowledge received help
- Users express gratitude for finding information or solutions within the community.
- Users express gratitude in response to assistance or information received.

32.
Concepts: physics concepts, request additional features
- User requests specific physics concepts or demonstrations to be included in the software.
- Users request the inclusion of additional experiments or features in the software.

33.
Concepts: justify feature requests, make feature requests
- Users articulate reasons behind their requests for specific software features.
- Users make detailed requests for specific features or functionalities in the software and articulate requests for new features or improvements to enhance the product.

34.
Concepts: memory aid, express concern about memory
- Designers acknowledge the need to remember community suggestions for future reference.
- The designer indicates a need to gather opinions before proceeding and expresses concern regarding memory retention.

35.
Concepts: concurring on design ideas, agree with suggestions
- Users express agreement with design ideas proposed by others.
- Users express agreement with other users' suggestions and support previous comments.

36.
Concepts: provide positive responses, indicate potential user needs
- Users provide brief affirmative responses indicating interest or agreement.
- Users indicate agreement or acknowledgment of a statement or question posed by others.

37.
Concepts: connecting to community, discuss future design considerations
- Designers connect their work to the community by discussing future experiments based on user needs.
- Designers mention considerations for future design plans based on community feedback and promise to consult the community.

38.
Concepts: engage with community, provide community answers
- A designer engages with community members by asking questions and responding to feedback.
- The designer provides answers to community inquiries and users provide specific answers related to design inquiries.

39.
Concepts: ask teachers' needs, seek teacher input
- Designers inquire about the needs of teachers within the community.
- Designers seek input from teachers regarding content or features for the software.

40.
Concepts: inquire about user identity, inquire about user roles
- Designers inquire about the identity or role of a user within the community.
- Designers inquire about the user's role and professional background to understand their perspective.

41.
Concepts: co-design with users, involve users in design
- Designers allow users to contribute ideas and seek collaboration in development.
- The collaborative interaction between users and designers contributes to the design process and integrates user feedback.

42.
Concepts: shared experiences and support, share knowledge for design
- Users and designers sharing experiences and supporting each other in using and improving the software.
- Designers share specific information about the software's features and users share relevant experiences that impact design.

43.
Concepts: apologize for timing, issue apologies for disturbances
- The designer expressed regret for disturbing users at an inconvenient time.
- Designers issue apologies for any disturbances caused by their communication.

44.
Concepts: offer potential solutions, suggest potential solutions, offer solutions to concerns
- The designer provided solutions to compatibility issues and offered resources for users.
- A designer proposes a combined approach to using features and shares user-friendly approaches based on feedback.
- The designer offers solutions for users experiencing issues and addresses concerns regarding touchscreen functionality.

45.
Concepts: balance user needs, propose dual solutions
- A designer seeks to balance the needs of users by suggesting a dual approach.
- A designer makes a decision regarding the use of dual solutions and suggests using two solutions simultaneously.

46.
Concepts: respond, respond to user inquiries
- The designer responds to user inquiries and provides relevant information about the application.
- A designer answered a user's question about software limitations and responded to a clarification request.

47.
Concepts: address specific users, engage in direct communication
- Designers mention and address specific users in communications to seek clarification or assistance.
- Designers engage in direct and real-time communication with users to address inquiries.

48.
Concepts: problem solving, offer ongoing support
- Designers encourage users to report problems directly to facilitate resolution.
- The designer encourages users to report any issues they encounter while using the software.

49.
Concepts: direct users to resources, answer access inquiries
- Designer directs users to resources for accessing the software.
- Designers or users provide information about accessing software or resources.
===
---
Definitions for each code (49 in total):
1.
Concepts: explain design principles, provide design rationale, explain design goals and intentions
Relationship: The concepts are interconnected as they all relate to the designer's articulation of their design philosophy and objectives.
Criteria: Designers articulate the principles guiding their design choices, explain the rationale behind the software's user-friendliness, and clarify their design goals.
Phrase: Articulate design philosophy.

2.
Concepts: suggest design simplification, simplification and refinement in design
Relationship: Both concepts emphasize the importance of making the design more straightforward and user-friendly.
Criteria: Designers share thoughts on simplifying the software's design and discuss the importance of refinement in the design process.
Phrase: Advocate for design simplification.

3.
Concepts: provide technical details, clarify technical functionality
Relationship: The concepts are related as they both involve conveying specific information about the software's technical aspects.
Criteria: The designer provides technical details about new features and clarifies technical aspects related to functionality.
Phrase: Clarify technical functionality.

4.
Concepts: give usage instructions, ensure proper operation
Relationship: Both concepts focus on providing guidance to users for effective software use.
Criteria: A designer provides instructions on how to use specific features and ensures users can operate the software correctly.
Phrase: Provide usage instructions.

5.
Concepts: announce feature updates, communicate software changes
Relationship: The concepts are linked as they both involve informing users about modifications and improvements to the software.
Criteria: Designers announce new features and updates based on user input and communicate changes to the software.
Phrase: Communicate software updates.

6.
Concepts: share development progress, communicate software updates
Relationship: Both concepts involve informing users about the status and advancements in software development.
Criteria: Designers highlight significant progress made in software updates and document enhancements for users.
Phrase: Share development progress.

7.
Concepts: give an intro to the update content, communicate update scope and magnitude
Relationship: The concepts are related as they both involve providing an overview of what users can expect from updates.
Criteria: Designers provide an introduction to the content of updates and outline the extent and significance of upcoming changes.
Phrase: Introduce update content.

8.
Concepts: outline and set development timelines, outline development goals
Relationship: Both concepts focus on planning and communicating the schedule and objectives for software development.
Criteria: The designer provides a timeline for updates and outlines specific objectives for future functionalities.
Phrase: Outline development timelines.

9.
Concepts: explain development complexity, ensure transparency about feature complexity
Relationship: The concepts are interconnected as they both address the challenges and intricacies of software development.
Criteria: Designers explain the complexities involved in development and communicate the time requirements for feature completion.
Phrase: Explain development complexity.

10.
Concepts: ensure accuracy through clarification, provide and clarify version details
Relationship: Both concepts focus on ensuring users have accurate information regarding the software's version and details.
Criteria: The designer seeks clarification on technical aspects and provides detailed version information.
Phrase: Clarify version details.

11.
Concepts: transparent developer discussion, maintain development transparency
Relationship: The concepts are related as they both emphasize open communication about the development process.
Criteria: Designers engage in transparent discussions about challenges and solutions in development.
Phrase: Maintain development transparency.

12.
Concepts: promise that the update is ongoing, reassure users about software status
Relationship: Both concepts involve providing users with assurance regarding the status of software updates.
Criteria: Designers assure users that updates are ongoing and address their concerns about the software's status.
Phrase: Reassure users about updates.

13.
Concepts: express hope for progress, commit to software improvement
Relationship: The concepts are linked as they both reflect a forward-looking attitude towards software development.
Criteria: Designers express aspirations for progress and commit to ongoing software improvements.
Phrase: Commit to software improvement.

14.
Concepts: confirm teacher identity, confirm professional role
Relationship: Both concepts focus on validating the professional background of users, specifically in teaching.
Criteria: Designers confirm the professional background of users and their roles as teachers.
Phrase: Confirm professional identity.

15.
Concepts: sharing identity per request, share professional background
Relationship: The concepts are related as they both involve users sharing their professional backgrounds in response to inquiries.
Criteria: Users share their professional background to enhance understanding of the community's composition.
Phrase: Share professional background.

16.
Concepts: provide context for needs, explain intention and ask follow-up questions
Relationship: Both concepts focus on understanding user needs and responding appropriately.
Criteria: Users describe the context of their needs related to the software, and designers respond with relevant information.
Phrase: Explain user needs.

17.
Concepts: seek help for usage, request user documentation, request user assistance
Relationship: The concepts are interconnected as they all involve users seeking support for effective software use.
Criteria: Users express their need for guidance and inquire about resources related to the software.
Phrase: Request user assistance.

18.
Concepts: inquire about compatibility, provide platform specifics
Relationship: Both concepts focus on understanding the software's compatibility across different platforms.
Criteria: A user inquires about compatibility and provides specific information about their system.
Phrase: Inquire about compatibility.

19.
Concepts: seek information actively, show interest in details
Relationship: The concepts are related as they both involve users actively seeking knowledge about the software.
Criteria: Users ask questions to gain knowledge and express curiosity about technical details.
Phrase: Seek information actively.

20.
Concepts: discuss platform limitations, discuss system compatibility
Relationship: Both concepts focus on the challenges and limitations related to software functionality across different platforms.
Criteria: The designer discusses limitations regarding operating systems and compatibility issues.
Phrase: Discuss platform limitations.

21.
Concepts: discuss technical constraints, consider technical aspects
Relationship: The concepts are interconnected as they both involve addressing technical limitations and considerations.
Criteria: Instances where technical limitations are discussed and potential issues are considered.
Phrase: Discuss technical constraints.

22.
Concepts: express user needs, highlight educational needs
Relationship: Both concepts focus on articulating specific needs related to the software in educational contexts.
Criteria: Users express specific needs related to the application and highlight educational requirements.
Phrase: Express user needs.

23.
Concepts: share user experiences, user experience in educational contexts
Relationship: The concepts are related as they both involve users sharing their experiences with the software in educational settings.
Criteria: Users share personal experiences and challenges in using the software within educational contexts.
Phrase: Share user experiences.

24.
Concepts: design adaptation, discuss local export necessity
Relationship: Both concepts focus on the need for specific functionalities to enhance the software's usability.
Criteria: Designers identify the need for local export capabilities and emphasize their importance.
Phrase: Discuss design adaptation.

25.
Concepts: ease of use, evaluate software usability
Relationship: The concepts are interconnected as they both focus on assessing the user-friendliness of the software.
Criteria: Discussions related to the ease of use and user-friendliness of the software are evaluated.
Phrase: Evaluate software usability.

26.
Concepts: engage with emojis, use non verbal communication
Relationship: Both concepts involve the use of non-verbal communication to express emotions within the community.
Criteria: Users express emotions or reactions through emojis in their interactions.
Phrase: Engage with emojis.

27.
Concepts: initiate interaction, welcome users warmly
Relationship: The concepts are related as they both involve starting communication and fostering a welcoming environment.
Criteria: A user initiates interaction by greeting the community, and designers warmly welcome users.
Phrase: Initiate interaction.

28.
Concepts: acknowledge community support, gratitude and encouragement
Relationship: Both concepts focus on expressing appreciation and fostering a supportive community atmosphere.
Criteria: Instances of support and acknowledgment are expressed within the community.
Phrase: Acknowledge community support.

29.
Concepts: recognition of effort, demonstrate user appreciation
Relationship: The concepts are interconnected as they both involve expressing gratitude for contributions.
Criteria: Instances where users acknowledge and appreciate the efforts of the designers are noted.
Phrase: Demonstrate user appreciation.

30.
Concepts: compliment, convey user satisfaction
Relationship: Both concepts focus on expressing positive feedback and satisfaction with the software.
Criteria: Users express admiration for features and share positive experiences with the software.
Phrase: Convey user satisfaction.

31.
Concepts: demonstrate self-help, acknowledge received help
Relationship: The concepts are related as they both involve users recognizing their own efforts and the assistance received.
Criteria: Users express gratitude for finding information or solutions and acknowledge help received.
Phrase: Acknowledge received help.

32.
Concepts: physics concepts, request additional features
Relationship: Both concepts focus on users expressing their needs for specific content related to physics.
Criteria: Users request specific physics concepts or demonstrations to be included in the software.
Phrase: Request additional features.

33.
Concepts: justify feature requests, make feature requests
Relationship: The concepts are interconnected as they both involve articulating reasons for requesting specific features.
Criteria: Users articulate reasons behind their requests for specific software features.
Phrase: Justify feature requests.

34.
Concepts: memory aid, express concern about memory
Relationship: Both concepts focus on the importance of retaining information for future reference.
Criteria: Designers acknowledge the need to remember community suggestions and express concern regarding memory retention.
Phrase: Express concern about memory.

35.
Concepts: concurring on design ideas, agree with suggestions
Relationship: The concepts are related as they both involve users expressing agreement with design proposals.
Criteria: Users express agreement with design ideas and support suggestions made by others.
Phrase: Agree with suggestions.

36.
Concepts: provide positive responses, indicate potential user needs
Relationship: Both concepts focus on users affirming statements and indicating their interests.
Criteria: Users provide brief affirmative responses indicating interest or agreement.
Phrase: Provide positive responses.

37.
Concepts: connecting to community, discuss future design considerations
Relationship: The concepts are interconnected as they both involve engaging with the community regarding future developments.
Criteria: Designers connect their work to the community by discussing future experiments based on user needs.
Phrase: Discuss future design considerations.

38.
Concepts: engage with community, provide community answers
Relationship: Both concepts focus on interaction and communication within the community.
Criteria: A designer engages with community members by asking questions and providing answers to inquiries.
Phrase: Engage with community.

39.
Concepts: ask teachers' needs, seek teacher input
Relationship: The concepts are related as they both involve soliciting feedback from teachers regarding the software.
Criteria: Designers inquire about the needs of teachers and seek their input on content or features.
Phrase: Seek teacher input.

40.
Concepts: inquire about user identity, inquire about user roles
Relationship: Both concepts focus on understanding the user's identity and role within the community.
Criteria: Designers inquire about the identity or role of a user to understand their perspective.
Phrase: Inquire about user identity.

41.
Concepts: co-design with users, involve users in design
Relationship: The concepts are interconnected as they both emphasize collaboration between designers and users in the design process.
Criteria: Designers allow users to contribute ideas and seek collaboration in development.
Phrase: Co-design with users.

42.
Concepts: shared experiences and support, share knowledge for design
Relationship: Both concepts focus on the exchange of experiences and knowledge to improve the software.
Criteria: Users and designers share experiences and support each other in using and improving the software.
Phrase: Share knowledge for design.

43.
Concepts: apologize for timing, issue apologies for disturbances
Relationship: The concepts are related as they both involve expressing regret for any inconvenience caused.
Criteria: The designer expresses regret for disturbing users and issues apologies for any disturbances.
Phrase: Issue apologies for disturbances.

44.
Concepts: offer potential solutions, suggest potential solutions, offer solutions to concerns
Relationship: The concepts are interconnected as they all focus on providing solutions to user concerns.
Criteria: The designer provides solutions to compatibility issues and addresses user concerns.
Phrase: Offer potential solutions.

45.
Concepts: balance user needs, propose dual solutions
Relationship: Both concepts focus on addressing the needs of users by suggesting multiple approaches.
Criteria: A designer seeks to balance the needs of users by suggesting a dual approach.
Phrase: Propose dual solutions.

46.
Concepts: respond, respond to user inquiries
Relationship: The concepts are related as they both involve addressing user questions and providing information.
Criteria: The designer responds to user inquiries and provides relevant information about the application.
Phrase: Respond to user inquiries.

47.
Concepts: address specific users, engage in direct communication
Relationship: Both concepts focus on personalized communication with users.
Criteria: Designers mention and address specific users in communications to seek clarification or assistance.
Phrase: Engage in direct communication.

48.
Concepts: problem solving, offer ongoing support
Relationship: The concepts are interconnected as they both involve assisting users in resolving issues.
Criteria: Designers encourage users to report problems directly and offer ongoing support for resolution.
Phrase: Offer ongoing support.

49.
Concepts: direct users to resources, answer access inquiries
Relationship: Both concepts focus on providing users with information necessary for accessing the software.
Criteria: Designers direct users to resources for accessing the software and provide information about access.
Phrase: Direct users to resources.
---