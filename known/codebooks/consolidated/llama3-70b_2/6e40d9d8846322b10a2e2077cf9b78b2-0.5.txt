You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (9 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
9. 
Concepts: {Repeat the input 9}
Relationship: {What is logical relationship between concepts in code 9, or N/A if not applicable}
Criteria: {Who did what, and how for code 9}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: discussing platform features, discussing technical issues
- Users or designers discuss features of the platform.
- Users or designers discuss technical issues or difficulties.

2.
Concepts: context awareness, usability and context of use
- Discussions that show awareness of the specific contexts in which the software is used.
- Discussions about how the software is used in different contexts and its usability.

3.
Concepts: ensuring software compatibility, addressing compatibility issues
- Designers consider software compatibility with different operating systems
- Designers provide information and address user concerns about system compatibility

4.
Concepts: improving usability, enhancing the learning experience
- Changes made to enhance the user's interaction with the software.
- The designers' efforts to improve the software's functionality and capabilities to better support the learning process.

5.
Concepts: technical limitations, discussing technology constraints
- Instances of technical limitations or constraints affecting the use of the software.
- Discussion of limitations and constraints imposed by technology.

6.
Concepts: limitation discussion, system limitation
- Designer discusses the limitations or constraints of a solution.
- Designer explains why a feature or functionality cannot be implemented due to system limitations.

7.
Concepts: export functionality, export/import functions
- Discussing the need for an export function to save or import experiments.
- The discussion around the need for export and import functions to facilitate the use of the software in classroom settings.

8.
Concepts: educational content, educational relevance
- Discussions about the educational value and content of the application.
- Discussions about how the software aligns with educational needs and curricula.

9.
Concepts: simulation effect, software performance
- Reflecting on the effectiveness of the software's simulation capabilities in engaging students.
- The discussion around the software's simulation effects and its performance in the classroom setting.
===
Here are the definitions for each code:

---
1.
Concepts: discussing platform features, discussing technical issues
Relationship: The two concepts are related as users and designers discuss both the features of the platform and the technical issues that arise from using those features.
Criteria: Users or designers engage in discussions about the platform's features and technical difficulties.
Phrase: Discussing platform features and technical issues.

2.
Concepts: context awareness, usability and context of use
Relationship: The two concepts are related as context awareness informs the understanding of usability in different contexts.
Criteria: Users or designers demonstrate awareness of the context in which the software is used and discuss its usability.
Phrase: Considering context in usability discussions.

3.
Concepts: ensuring software compatibility, addressing compatibility issues
Relationship: The two concepts are related as ensuring compatibility involves addressing potential issues that may arise.
Criteria: Designers consider and address system compatibility to ensure smooth user experience.
Phrase: Ensuring software compatibility.

4.
Concepts: improving usability, enhancing the learning experience
Relationship: The two concepts are related as improving usability is a means to enhance the learning experience.
Criteria: Designers make changes to improve user interaction and enhance the learning experience.
Phrase: Enhancing usability for better learning.

5.
Concepts: technical limitations, discussing technology constraints
Relationship: The two concepts are related as technical limitations are discussed as constraints imposed by technology.
Criteria: Users or designers discuss the limitations and constraints imposed by technology.
Phrase: Discussing technical limitations.

6.
Concepts: limitation discussion, system limitation
Relationship: The two concepts are related as the discussion of limitations is centered around system constraints.
Criteria: Designers discuss and explain system limitations that constrain solution implementation.
Phrase: Discussing system limitations.

7.
Concepts: export functionality, export/import functions
Relationship: The two concepts are related as export functionality is a key aspect of export and import functions.
Criteria: Users or designers discuss the need for export and import functions to facilitate software use.
Phrase: Discussing export and import functions.

8.
Concepts: educational content, educational relevance
Relationship: The two concepts are related as educational content is relevant to educational needs and curricula.
Criteria: Users or designers discuss the educational value and content of the application.
Phrase: Discussing educational relevance.

9.
Concepts: simulation effect, software performance
Relationship: The two concepts are related as the simulation effect is a key aspect of the software's performance.
Criteria: Users or designers reflect on the software's simulation capabilities and performance in the classroom.
Phrase: Evaluating software performance.