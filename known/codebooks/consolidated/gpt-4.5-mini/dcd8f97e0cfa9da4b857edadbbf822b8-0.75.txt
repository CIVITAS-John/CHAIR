You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (24 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
24. 
Concepts: {Repeat the input 24}
Relationship: {What is logical relationship between concepts in code 24, or N/A if not applicable}
Criteria: {Who did what, and how for code 24}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: visual and functional design, adapt design for functionality and usability
- Discussions about the visual and functional aspects of the software.
- Designers address specific functionalities of the software related to user interface or device compatibility and discuss adapting the software design to meet user requirements.

2.
Concepts: announce feature expansions, introduce new features and components
- Designers announce expansions in features and multi-language support in software updates.
- Designers provide clear explanations of new features and components that will be available in upcoming updates.

3.
Concepts: announce software updates, announce and detail software updates
- A developer informs users by announcing new software versions and updates to the community.
- A designer provides detailed information about software updates and highlights the significance of recent changes.

4.
Concepts: ensure development transparency, transparent developer discussion
- Designers maintain transparency about ongoing development processes and challenges faced.
- Designers engage in open discussions regarding technical aspects and user input related to the software.

5.
Concepts: share future plans and goals, sharing development plans with the community
- Developers share insights and outline goals for future software functionalities and features.
- Designers share information and plans related to current and future software development with the community.

6.
Concepts: plan and discuss future updates, express interest in and plan future developments
- A designer shares plans for future updates while engaging in discussions about ongoing development and potential enhancements.
- A designer discusses the potential for expanding the software's subject matter and mentions future plans for development.

7.
Concepts: request user feedback, elicit user feedback
- Designers actively seek user feedback to improve the software and outline plans for user input.
- Designers express their intention to gather further input or feedback from users about desired features for future updates.

8.
Concepts: announcing updates and new features, incorporate feedback for product improvement
- Instances where designers announce changes, new features, and updates are based on user input.
- A designer indicates that user feedback will be incorporated in the next software update and announces an upcoming change to improve the software based on user feedback.

9.
Concepts: validate and implement requests, respond to the feature request
- Designers validate user requests and discuss plans to implement suggested features.
- Designers respond to feature requests by providing information on current research or planned developments.

10.
Concepts: seek consensus in collaboration, promoting co-designing efforts
- A designer seeks agreement from users on a proposed idea while participants affirm collaborative contributions.
- A designer indicates their intention to collaborate with the community during the design process while involving users in contributing ideas and decisions.

11.
Concepts: acknowledging community needs, acknowledging community expertise
- A designer acknowledging community input and needs concerning educational experiments.
- Designer and users engage in discussions that acknowledge community expertise in educational standards.

12.
Concepts: encourage user interaction, encourage open communication
- A designer encourages users to participate actively by sharing feedback and suggestions for improvement.
- Designers promote open communication about user needs and encourage discussions within the community.

13.
Concepts: answer about access, respond to user inquiries
- Designers respond to user inquiries about accessing software or resources.
- A designer provides a clear answer to a user's technical question.

14.
Concepts: seeking community resources, request usage instructions and manuals, request software access and support
- Users inquire about obtaining software-related resources or manuals while expressing a need for documentation related to the software.
- Users request information regarding the availability of a user manual and seek detailed instructions for software usage.
- Users request assistance regarding downloading software and inquire about usage functionalities.

15.
Concepts: articulating development criteria, analyze and deliver compatibility specifications
- A designer explains the compatibility requirements for the app based on hardware specifications and considers the technical requirements needed for the app's functionality in classroom settings.
- A designer analyzes compatibility issues and provides technical specifications regarding the software's compatibility requirements.

16.
Concepts: clarify and provide version details, clarify testing purposes and limitations
- Designers specify and clarify the type of software version being discussed and provide details about the uploaded version.
- Designers communicate the intended purpose and known limitations of a software version during testing.

17.
Concepts: seek clarification on uncertainty, elaborate on inquiries and context
- Users express uncertainty and seek further clarification on ambiguous information.
- Users provide additional context related to their questions while supplying clarification in communications.

18.
Concepts: technical issue, address outdated technology challenges
- A user reports a technical issue related to outdated systems, drawing attention to potential obstacles.
- A user comments on outdated technology in their school and highlights limitations posed by old systems.

19.
Concepts: consulting teacher needs, discuss educational context and design needs
- Designers request feedback from teachers regarding content features while inquiring about the specific needs of teachers regarding software functionality.
- A designer and user discuss the educational context of using the software and its relevance to teaching.

20.
Concepts: discuss practical applications, share user experiences in education
- Users share insights on how the software is applied in classroom settings.
- User experiences and challenges in using the software within educational settings are shared.

21.
Concepts: express feelings with emojis, express emotions in communication
- Users use emojis to express emotions in community interactions.
- Users articulate feelings and reactions in their communications.

22.
Concepts: reflect community values, encourage positive community interactions
- User comments on the shared values and principles upheld within the community.
- Users provide positive responses regarding community experiences and engage affirmatively with each other.

23.
Concepts: acknowledge available resources, acknowledge and support each other
- Users acknowledge and make use of shared resources provided by the community.
- Instances where support and acknowledgment are expressed within the community and users express gratitude for assistance.

24.
Concepts: engage with the community
- Users engage actively with conversations and provide feedback or questions.
- A designer shares personal interests relevant to the field and expresses openness to exploring interests within the community.
===
---
Definitions for each code (24 in total):
1.
Concepts: visual and functional design, adapt design for functionality and usability
Relationship: The concepts are interconnected as visual design influences functional usability, requiring adaptation to meet user needs.
Criteria: Designers discuss the visual and functional aspects of the software and adapt designs to enhance usability and functionality for users.
Phrase: Discuss and adapt design for usability.

2.
Concepts: announce feature expansions, introduce new features and components
Relationship: Announcing feature expansions is a method of introducing new features, ensuring users are informed of enhancements.
Criteria: Designers announce expansions in features and provide explanations for new components available in software updates.
Phrase: Introduce and announce new features.

3.
Concepts: announce software updates, announce and detail software updates
Relationship: Announcing software updates encompasses detailing changes, providing users with necessary information about new versions.
Criteria: A developer informs users of new software versions while detailing the significance of the updates.
Phrase: Announce and detail software updates.

4.
Concepts: ensure development transparency, transparent developer discussion
Relationship: Maintaining transparency is achieved through open discussions, allowing for insights into development processes.
Criteria: Designers keep the community informed about ongoing development and engage in discussions about technical aspects and user input.
Phrase: Maintain transparency in development.

5.
Concepts: share future plans and goals, sharing development plans with the community
Relationship: Sharing future plans and goals involves informing the community about upcoming developments, fostering alignment in expectations.
Criteria: Developers outline future software functionalities while designers share development plans with the community.
Phrase: Share future plans with the community.

6.
Concepts: plan and discuss future updates, express interest in and plan future developments
Relationship: Planning discussions about future updates express a commitment to ongoing development and enhancement of the software.
Criteria: Designers share plans for future updates and engage in discussions about potential enhancements and expansions.
Phrase: Plan and discuss future updates.

7.
Concepts: request user feedback, elicit user feedback
Relationship: Actively seeking feedback is a crucial process in eliciting user input to inform software improvements.
Criteria: Designers ask for user feedback to enhance software and outline plans for gathering further input.
Phrase: Request and elicit user feedback.

8.
Concepts: announcing updates and new features, incorporate feedback for product improvement
Relationship: Announcing updates is often based on user feedback, linking community input directly to product enhancements.
Criteria: Designers announce new features and updates that are influenced by user feedback to improve the software.
Phrase: Announce updates based on feedback.

9.
Concepts: validate and implement requests, respond to the feature request
Relationship: Validating user requests is the first step in responding effectively and planning for implementation.
Criteria: Designers validate user requests and provide information on planned developments in response to feature requests.
Phrase: Validate and respond to requests.

10.
Concepts: seek consensus in collaboration, promoting co-designing efforts
Relationship: Seeking consensus is a collaborative approach that promotes co-designing efforts with community input.
Criteria: A designer seeks agreement on proposed ideas while encouraging collaborative contributions from users.
Phrase: Seek consensus in collaboration.

11.
Concepts: acknowledging community needs, acknowledging community expertise
Relationship: Acknowledging community needs and expertise demonstrates recognition of the value users bring to development discussions.
Criteria: Designers acknowledge community input regarding educational needs and expertise in educational standards.
Phrase: Acknowledge community needs and expertise.

12.
Concepts: encourage user interaction, encourage open communication
Relationship: Encouraging interaction fosters open communication, which enhances community engagement.
Criteria: Designers promote active user participation and open discussions about needs within the community.
Phrase: Encourage open communication and interaction.

13.
Concepts: answer about access, respond to user inquiries
Relationship: Responding to inquiries about access is essential in providing users with necessary guidance and information.
Criteria: Designers respond to user questions about accessing software and provide clear answers to technical inquiries.
Phrase: Respond to user inquiries.

14.
Concepts: seeking community resources, request usage instructions and manuals, request software access and support
Relationship: Seeking resources involves requesting specific instructions and support to facilitate software use.
Criteria: Users inquire about software resources, manuals, and requests for assistance in accessing the software.
Phrase: Request resources and support.

15.
Concepts: articulating development criteria, analyze and deliver compatibility specifications
Relationship: Articulating criteria is linked to analyzing compatibility, ensuring that specifications meet necessary requirements.
Criteria: Designers explain compatibility requirements and analyze issues to deliver technical specifications for the software.
Phrase: Articulate and analyze compatibility specifications.

16.
Concepts: clarify and provide version details, clarify testing purposes and limitations
Relationship: Clarifying version details is crucial for understanding testing purposes and limitations of the software.
Criteria: Designers specify software version details and communicate the intended purposes and limitations during testing.
Phrase: Clarify version details and limitations.

17.
Concepts: seek clarification on uncertainty, elaborate on inquiries and context
Relationship: Seeking clarification supports the elaboration of inquiries, enhancing understanding of ambiguous information.
Criteria: Users express uncertainty and seek further details, providing context for their questions in communication.
Phrase: Seek clarification and elaborate on inquiries.

18.
Concepts: technical issue, address outdated technology challenges
Relationship: Reporting technical issues often highlights challenges posed by outdated technology, necessitating attention.
Criteria: Users report technical issues related to outdated systems, drawing attention to limitations experienced.
Phrase: Address outdated technology challenges.

19.
Concepts: consulting teacher needs, discuss educational context and design needs
Relationship: Consulting teacher needs involves discussions that inform design decisions based on educational contexts.
Criteria: Designers request feedback from teachers about content features and discuss their specific software needs.
Phrase: Consult and discuss educational needs.

20.
Concepts: discuss practical applications, share user experiences in education
Relationship: Discussing practical applications facilitates sharing user experiences, enriching community knowledge about software use.
Criteria: Users share insights and challenges regarding how the software is applied in educational settings.
Phrase: Discuss and share user experiences.

21.
Concepts: express feelings with emojis, express emotions in communication
Relationship: Using emojis is one way to communicate emotions, enriching interactions within the community.
Criteria: Users express emotions and articulate feelings in their communications using emojis.
Phrase: Express feelings through communication.

22.
Concepts: reflect community values, encourage positive community interactions
Relationship: Reflecting community values fosters positive interactions, reinforcing a supportive environment.
Criteria: Users comment on shared values and respond positively to community experiences.
Phrase: Reflect and encourage positive interactions.

23.
Concepts: acknowledge available resources, acknowledge and support each other
Relationship: Acknowledging resources is coupled with supporting one another, creating a collaborative community atmosphere.
Criteria: Users recognize and utilize shared resources while expressing gratitude for community support.
Phrase: Acknowledge and support each other.

24.
Concepts: engage with the community
Relationship: Engaging with the community is multifaceted, involving active participation and sharing interests.
Criteria: Users actively engage in discussions and feedback while designers share relevant personal interests.
Phrase: Engage actively with the community.
---