You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (32 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
32. 
Concepts: {Repeat the input 32}
Relationship: {What is logical relationship between concepts in code 32, or N/A if not applicable}
Criteria: {Who did what, and how for code 32}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: specifying hardware requirements, setting hardware expectations
- Designer specifies hardware requirements.
- Designer 1 sets expectations or provides information about the hardware requirements for the app.

2.
Concepts: consideration of future compatibility, considers future compatibility
- Designer considers future compatibility or updates.
- The designer considers future compatibility of the software with different systems or devices.

3.
Concepts: compatibility confirmation, confirms compatibility
- The designer confirms system compatibility.
- A designer confirms the compatibility or suitability of a specific system or configuration.
- Designer confirms or verifies that a specific system, version, or configuration is compatible or okay.

4.
Concepts: confirming compatibility, designer 2 confirms compatibility
- A designer confirms compatibility or answers a question about functionality.
- Designer confirms compatibility with a specific system.
- Designer 2 confirms compatibility or answers a question.

5.
Concepts: discussing technical requirements, considered system compatibility
- Designer discusses technical requirements, such as XP compatibility.
- Designer considers or discusses compatibility with a specific system, such as XP.

6.
Concepts: clarifying system compatibility, informing about system compatibility, inform about system compatibility
- Designer clarifies system compatibility.
- Designer informs users about system compatibility issues.
- Designer informs users about system compatibility or technical requirements.

7.
Concepts: theoretical system compatibility, theorizing about compatibility
- Designer theorizes or discusses system compatibility.
- Designer 1 theorizes or speculates about the compatibility of the app with certain hardware or systems.

8.
Concepts: explaining theoretical compatibility, theoretical software compatibility requirements
- Designer explains that a feature should theoretically be compatible.
- Designer mentions the software's theoretical compatibility requirements.

9.
Concepts: system compatibility, system compatibility discussion
- Discussion or consideration of compatibility with specific systems
- Discussion about compatibility with older systems or devices.

10.
Concepts: limitation acknowledgment, acknowledging feature limitations
- Acknowledging or discussing limitations or constraints of the product.
- Designer 1 acknowledges or explains the limitations or constraints of a specific feature or functionality.

11.
Concepts: explaining system limitations, clarify software limitations, explaining current limitations of software, current version limitations
- Designer explains the limitations of the system or software.
- Designer clarifies or explains software limitations or constraints.
- The designer explains the current limitations or constraints of the software.
- A designer explains the limitations or constraints of the current software version.

12.
Concepts: justifying limitations, explaining design limitations
- Designer explains or justifies limitations or constraints in the development process.
- Explaining the limitations or constraints of a design or product.

13.
Concepts: technical limitation, technical limitations
- The designer addresses technical limitations or constraints.
- A designer provides technical limitations or constraints.

14.
Concepts: clarifying platform requirements, system capabilities clarification
- Designer clarifies platform requirements or limitations.
- A designer clarifies the capabilities or limitations of a system or feature.

15.
Concepts: system requirements, explaining technical requirements
- A designer clarifies system requirements or technical limitations.
- The designer explains technical requirements or constraints.

16.
Concepts: outdated technology, outdated technology description
- Highlighting outdated technology or infrastructure.
- A user describes outdated technology or systems.

17.
Concepts: explains limitations, explains classroom limitations
- Explaining limitations or constraints of the application.
- Explaining limitations or constraints related to the application's use in classrooms.

18.
Concepts: technical constraints, classroom technology constraints influencing software design
- A user mentions technical constraints or limitations that affect software use in schools.
- The user mentions a constraint or limitation in the classroom that affects the software design.

19.
Concepts: identifying gaps in existing tools, identifying gaps in current software
- A user identifies gaps or limitations in existing tools or software.
- The speaker identifies gaps or limitations in the current software or system.

20.
Concepts: highlighting challenges, expresses development difficulty
- A designer highlights a specific challenge or issue with the software.
- A designer expresses difficulty or challenge in developing a feature or aspect of the software.

21.
Concepts: sharing technical constraints, highlighting system limitations, highlighting technical challenges
- A user shares technical constraints or limitations they are experiencing.
- User highlights limitations or challenges with their current system or environment.
- A user highlights technical challenges or limitations in their environment.

22.
Concepts: problem-solving, troubleshooting
- User attempts to solve a problem or troubleshoot an issue.
- Engaging in troubleshooting or debugging a technical issue.
- Designer engages in troubleshooting by asking about issues.

23.
Concepts: proposing design ideas, designer proposes solution
- Designer proposes a design idea or solution.
- Offering a solution or suggestion to a problem.

24.
Concepts: exploring solutions, sharing potential solutions
- Designer explores a potential solution to a problem.
- A designer shares potential solutions or ideas for a problem or issue.

25.
Concepts: offering solutions, providing a solution, providing solution
- Designer or user offers a solution to a problem or issue.
- Designer provides a solution, answer, or workaround to a problem.
- The designer provides a solution or answer to a user's question or problem.

26.
Concepts: promote problem-solving, promoting problem-solving
- Designer encourages or promotes problem-solving or critical thinking.
- A designer promotes problem-solving or experimentation within the application.

27.
Concepts: engaging in problem-solving, engaged in problem solving
- Designer engages in problem-solving or troubleshooting.
- The designer or user engages in problem-solving or troubleshooting.

28.
Concepts: proposed alternative system, user suggests alternative system, suggesting alternative systems
- User proposes an alternative system or solution.
- A user suggests an alternative system, platform, or solution.
- A user suggests an alternative system or approach to a problem.

29.
Concepts: offering alternatives, providing alternatives, providing alternative solutions, suggesting alternative solutions
- User suggests alternative solutions or workarounds.
- A user provides an alternative solution or approach.
- A designer provides alternative instructions or solutions.
- A user or designer provides an alternative solution or workaround to a problem.
- A user suggests a potential solution or workaround to a problem.

30.
Concepts: alternative suggestions, provided alternative suggestion
- Suggesting alternative solutions or approaches.
- Offering an alternative solution or approach to a problem or idea.

31.
Concepts: workaround sharing, sharing a workaround
- Sharing a workaround or solution to a technical issue or problem.
- Offering a solution or workaround to a specific problem or issue.

32.
Concepts: sharing workaround, shared workaround
- A designer shares a workaround or temporary solution.
- A person shares a temporary solution or workaround for a problem.
===
Here are the definitions for each code:

---
1.
Concepts: specifying hardware requirements, setting hardware expectations
Relationship: The designer's action of specifying hardware requirements implies setting expectations for the app's functionality.
Criteria: The designer specifies hardware requirements and sets expectations for the app's functionality.
Phrase: Specifies hardware requirements.

2.
Concepts: consideration of future compatibility, considers future compatibility
Relationship: The designer's consideration of future compatibility is a proactive approach to ensure the software's adaptability.
Criteria: The designer considers future compatibility of the software with different systems or devices.
Phrase: Considers future compatibility.

3.
Concepts: compatibility confirmation, confirms compatibility
Relationship: The designer's confirmation of compatibility ensures the software's suitability for a specific system or configuration.
Criteria: The designer confirms the compatibility or suitability of a specific system, version, or configuration.
Phrase: Confirms compatibility.

4.
Concepts: confirming compatibility, designer 2 confirms compatibility
Relationship: The designer's confirmation of compatibility provides assurance of the software's functionality.
Criteria: The designer confirms compatibility or answers a question about functionality.
Phrase: Confirms compatibility.

5.
Concepts: discussing technical requirements, considered system compatibility
Relationship: The designer's discussion of technical requirements involves considering system compatibility.
Criteria: The designer discusses technical requirements, including system compatibility.
Phrase: Discusses technical requirements.

6.
Concepts: clarifying system compatibility, informing about system compatibility, inform about system compatibility
Relationship: The designer's clarification of system compatibility informs users about technical requirements.
Criteria: The designer clarifies system compatibility issues and informs users about technical requirements.
Phrase: Clarifies system compatibility.

7.
Concepts: theoretical system compatibility, theorizing about compatibility
Relationship: The designer's theorization about compatibility explores potential system compatibility.
Criteria: The designer theorizes or speculates about the compatibility of the app with certain hardware or systems.
Phrase: Theorizes about compatibility.

8.
Concepts: explaining theoretical compatibility, theoretical software compatibility requirements
Relationship: The designer's explanation of theoretical compatibility provides insight into software requirements.
Criteria: The designer explains the software's theoretical compatibility requirements.
Phrase: Explains theoretical compatibility.

9.
Concepts: system compatibility, system compatibility discussion
Relationship: The discussion of system compatibility involves considering compatibility with specific systems.
Criteria: The discussion involves consideration of compatibility with specific systems or devices.
Phrase: Discusses system compatibility.

10.
Concepts: limitation acknowledgment, acknowledging feature limitations
Relationship: The designer's acknowledgment of limitations recognizes the product's constraints.
Criteria: The designer acknowledges or explains the limitations or constraints of a specific feature or functionality.
Phrase: Acknowledges limitations.

11.
Concepts: explaining system limitations, clarify software limitations, explaining current limitations of software, current version limitations
Relationship: The designer's explanation of system limitations clarifies software constraints.
Criteria: The designer explains the limitations or constraints of the software or its current version.
Phrase: Explains system limitations.

12.
Concepts: justifying limitations, explaining design limitations
Relationship: The designer's justification of limitations provides context for design constraints.
Criteria: The designer explains or justifies limitations or constraints in the development process.
Phrase: Justifies limitations.

13.
Concepts: technical limitation, technical limitations
Relationship: The designer's address of technical limitations recognizes constraints in the development process.
Criteria: The designer addresses technical limitations or constraints.
Phrase: Addresses technical limitations.

14.
Concepts: clarifying platform requirements, system capabilities clarification
Relationship: The designer's clarification of platform requirements explains system capabilities.
Criteria: The designer clarifies platform requirements or limitations.
Phrase: Clarifies platform requirements.

15.
Concepts: system requirements, explaining technical requirements
Relationship: The designer's explanation of system requirements provides insight into technical constraints.
Criteria: The designer explains technical requirements or constraints.
Phrase: Explains system requirements.

16.
Concepts: outdated technology, outdated technology description
Relationship: The user's description of outdated technology highlights the need for updates.
Criteria: The user describes outdated technology or systems.
Phrase: Describes outdated technology.

17.
Concepts: explains limitations, explains classroom limitations
Relationship: The explanation of limitations recognizes constraints in the application's use.
Criteria: The designer explains limitations or constraints of the application, including those related to classroom use.
Phrase: Explains limitations.

18.
Concepts: technical constraints, classroom technology constraints influencing software design
Relationship: The user's mention of technical constraints influences software design decisions.
Criteria: The user mentions technical constraints or limitations that affect software design in classrooms.
Phrase: Mentions technical constraints.

19.
Concepts: identifying gaps in existing tools, identifying gaps in current software
Relationship: The user's identification of gaps recognizes limitations in existing tools or software.
Criteria: The user identifies gaps or limitations in existing tools or software.
Phrase: Identifies gaps.

20.
Concepts: highlighting challenges, expresses development difficulty
Relationship: The designer's highlighting of challenges acknowledges development difficulties.
Criteria: The designer highlights a specific challenge or issue with the software.
Phrase: Highlights challenges.

21.
Concepts: sharing technical constraints, highlighting system limitations, highlighting technical challenges
Relationship: The user's sharing of technical constraints highlights system limitations.
Criteria: The user shares technical constraints or limitations they are experiencing.
Phrase: Shares technical constraints.

22.
Concepts: problem-solving, troubleshooting
Relationship: The user's attempt to solve a problem involves troubleshooting.
Criteria: The user attempts to solve a problem or troubleshoot an issue.
Phrase: Troubleshoots.

23.
Concepts: proposing design ideas, designer proposes solution
Relationship: The designer's proposal of a design idea offers a potential solution.
Criteria: The designer proposes a design idea or solution.
Phrase: Proposes solution.

24.
Concepts: exploring solutions, sharing potential solutions
Relationship: The designer's exploration of solutions involves sharing potential solutions.
Criteria: The designer explores potential solutions or ideas for a problem or issue.
Phrase: Explores solutions.

25.
Concepts: offering solutions, providing a solution, providing solution
Relationship: The designer's offering of a solution provides a potential answer.
Criteria: The designer offers a solution, answer, or workaround to a problem.
Phrase: Offers solution.

26.
Concepts: promote problem-solving, promoting problem-solving
Relationship: The designer's promotion of problem-solving encourages critical thinking.
Criteria: The designer encourages or promotes problem-solving or critical thinking.
Phrase: Promotes problem-solving.

27.
Concepts: engaging in problem-solving, engaged in problem solving
Relationship: The designer's engagement in problem-solving involves troubleshooting.
Criteria: The designer or user engages in problem-solving or troubleshooting.
Phrase: Engages in problem-solving.

28.
Concepts: proposed alternative system, user suggests alternative system, suggesting alternative systems
Relationship: The user's proposal of an alternative system offers a potential solution.
Criteria: The user proposes an alternative system or solution.
Phrase: Proposes alternative system.

29.
Concepts: offering alternatives, providing alternatives, providing alternative solutions, suggesting alternative solutions
Relationship: The user's offering of alternatives provides potential solutions.
Criteria: The user provides an alternative solution or approach.
Phrase: Offers alternative solutions.

30.
Concepts: alternative suggestions, provided alternative suggestion
Relationship: The user's suggestion of an alternative provides a potential solution.
Criteria: The user suggests alternative solutions or approaches.
Phrase: Suggests alternative solutions.

31.
Concepts: workaround sharing, sharing a workaround
Relationship: The user's sharing of a workaround provides a temporary solution.
Criteria: The user shares a workaround or temporary solution to a technical issue or problem.
Phrase: Shares workaround.

32.
Concepts: sharing workaround, shared workaround
Relationship: The designer's sharing of a workaround provides a temporary solution.
Criteria: The designer shares a workaround or temporary solution to a problem.
Phrase: Shares workaround.