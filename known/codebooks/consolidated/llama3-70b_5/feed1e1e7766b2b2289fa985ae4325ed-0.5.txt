You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (5 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
5. 
Concepts: {Repeat the input 5}
Relationship: {What is logical relationship between concepts in code 5, or N/A if not applicable}
Criteria: {Who did what, and how for code 5}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: copying ai-generated code, copying and pasting ai-generated code
- Participants copy, selectively copy, and execute AI-generated code.
- Deciding to copy and paste AI-generated code into their own work.

2.
Concepts: summarizing code, interpreting code output
- Participants summarize AI-generated code functionality.
- Participants interpret and comment on AI-generated code output.

3.
Concepts: valuing code simplicity and clarity, prioritizing maintainable and readable code
- Participants prefer and value simple, accessible, and clear code.
- Participants value code that is easy to maintain and prioritize code readability.

4.
Concepts: valuing iterative debugging with ai, benefiting from ai-assisted debugging
- Participants value the iterative debugging process with AI, despite potential errors.
- Participants benefit from and acknowledge the benefits of iterative debugging with AI.

5.
Concepts: address ai limitations, addressing limitations in code checking
- Participants address AI limitations and identify input limitations.
- Participants address limitations in AI code checking.
===
Here are the definitions for each code:

---
1.
Concepts: copying ai-generated code, copying and pasting ai-generated code
Relationship: The concepts are closely related as they both involve the act of copying and using AI-generated code in one's own work.
Criteria: Participants copy and paste AI-generated code into their own work, deciding what to copy and how to execute it.
Phrase: Copying and executing AI-generated code.

2.
Concepts: summarizing code, interpreting code output
Relationship: The concepts are logically related as summarizing code functionality requires understanding and interpreting the code output.
Criteria: Participants summarize and interpret AI-generated code output to understand its functionality.
Phrase: Interpreting AI-generated code output.

3.
Concepts: valuing code simplicity and clarity, prioritizing maintainable and readable code
Relationship: The concepts are closely related as valuing simplicity and clarity implies prioritizing maintainable and readable code.
Criteria: Participants prioritize and value code that is simple, clear, maintainable, and readable.
Phrase: Valuing readable code quality.

4.
Concepts: valuing iterative debugging with ai, benefiting from ai-assisted debugging
Relationship: The concepts are logically related as valuing iterative debugging implies benefiting from AI-assisted debugging.
Criteria: Participants value and benefit from the iterative debugging process with AI, despite potential errors.
Phrase: Valuing AI-assisted debugging.

5.
Concepts: address ai limitations, addressing limitations in code checking
Relationship: The concepts are closely related as addressing AI limitations involves identifying and addressing limitations in code checking.
Criteria: Participants identify and address AI limitations and input limitations in code checking.
Phrase: Addressing AI limitations in code checking.