You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (46 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
46. 
Concepts: {Repeat the input 46}
Relationship: {What is logical relationship between concepts in code 46, or N/A if not applicable}
Criteria: {Who did what, and how for code 46}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: explain new features, introduce new functionalities
- Designers explain upcoming features being developed and share information about ongoing feature development related to circuit diagrams.
- Designers provide examples of planned features and introduce new functionalities to enhance user experience.

2.
Concepts: feature development, explain development focus
- Designer discusses various aspects of feature development in the software.
- Designers explain ongoing work related to specific features and communicate current development focus.

3.
Concepts: list new features, discuss feature improvements
- Designers list new features and updates while noting potential bugs in the software.
- Designers mention the need for adjustments and improvements to specific software features.

4.
Concepts: promise future features, promise that the update is ongoing
- Designers indicate that a feature will be implemented in the future, expressing tentative commitments.
- Designers assure the community that updates are in progress, indicating ongoing development efforts.

5.
Concepts: outline release processes, outline software update schedules
- Designers discuss and outline the structured release and update processes for different platforms.
- Designers outline the schedule for upcoming software updates and provide specific timelines for the Android version release.

6.
Concepts: seek information and inquire, ask questions and seek information
- Users ask questions to seek information or clarification and ask questions to gain knowledge related to the software.
- Users and designers ask questions regarding software updates and features and pose questions seeking information or clarification.

7.
Concepts: clarify details and inquire, specify version and clarify
- Designers clarify which version of the application is being discussed and users ask for clarification about the application.
- Users specify the platform version being discussed for clarity and seek clarification on where to access specific software versions.

8.
Concepts: ask follow-up questions, respond to clarifications
- The designer asks follow-up questions to clarify user experiences and requests.
- Designers respond to user clarification requests and explain the intentions behind their questions.

9.
Concepts: pose design questions, facilitate queries and responses
- Designers pose design-related questions and users provide specific answers regarding requirements.
- Instances where users ask questions and receive answers from designers or other community members and designers encourage users to ask questions.

10.
Concepts: inquire about user problems, express needs and inquire
- Designers ask users to clarify any problems they have encountered while using the software.
- Users communicate needs regarding the application for teaching purposes and designers ask teachers about their needs regarding the software.

11.
Concepts: respond to inquiries, respond to user inquiries
- The designer responds to user inquiries with relevant information about the application.
- Designers provide answers to user inquiries regarding application compatibility.

12.
Concepts: address usability issues, discuss usability issues
- Designers address usability concerns and explain the functionality of specific features.
- Designers discuss usability issues and facilitate user interaction regarding application functionality.

13.
Concepts: share design knowledge, shared experiences and support
- Designers share knowledge about software features and users share relevant experiences for design considerations.
- Users and designers sharing experiences and supporting each other in using and improving the software.

14.
Concepts: visual confirmation, share visual references
- Designer seeks confirmation through visual aids or images.
- Designers share visual references and use images to clarify points raised by users.

15.
Concepts: seek collaborative consensus, seek input and promise consultation
- The designer seeks agreement or consensus on proposed ideas before proceeding with development.
- Designer actively seeks feedback or opinions from the community before proceeding with a project and commits to consulting the community before making decisions regarding new features.

16.
Concepts: commit to iterative improvement, engage in iterative development
- Designers commit to iterative development and improvement based on user feedback.
- Designers discuss updates and continuously improve the product through iterative processes.

17.
Concepts: plan for user feedback, elaborate on user feedback
- Designers outline plans for future updates based on user feedback and needs.
- Designers elaborate on previous experiences and mention user feedback that informs design decisions.

18.
Concepts: invite feature requests and suggestions, suggest design improvements and enhancements
- Designers invite users to suggest new features or improvements and users request new features or specific improvements.
- Users provide suggestions for design improvements based on practical teaching needs and request enhancements to improve educational usability.

19.
Concepts: suggest use cases and emphasize convenience, suggest usability improvements and enhancements
- Users suggest features that would enhance the application's functionality for practical use and suggest features that enhance convenience.
- Users suggest improvements for the app's usability, particularly regarding input methods and recommend adding features to improve usability for touch screen devices.

20.
Concepts: justify user suggestions, justify requests and provide rationale
- Users suggest features and provide justifications based on technological limitations.
- Participants provide explanations or justifications for certain decisions or features based on user needs and articulate the reasons behind their requests for specific software functionalities.

21.
Concepts: discuss future plans, suggest future developments
- Designers discuss and share future plans for software development with users.
- Designers suggest potential future developments and share interests that may influence software direction.

22.
Concepts: provide technical information, acknowledge technical requirements
- Designers provide technical details and specific criteria regarding system compatibility.
- Designers consider and acknowledge technical requirements that may affect software compatibility.

23.
Concepts: consider future compatibility, confirm system compatibility
- Designers consider future compatibility issues and suggest checking system compatibility.
- Designers discuss necessary system requirements and confirm compatibility with specific operating systems.

24.
Concepts: share design rationale, suggest design simplifications
- Designers share thoughts on simplifying design and explain the rationale for user-friendly design.
- Designers suggest refining design elements to enhance usability and discuss the importance of simplification.

25.
Concepts: discuss team limitations, clarify limitations
- Designers discuss team limitations and outline how these can be addressed or worked around.
- Designers clarify and acknowledge limitations regarding the software's functionalities and suggest future considerations.

26.
Concepts: elaboration of response, explain development delays
- The designer elaborates on the complexity of a task and sets expectations for release timing.
- Designers communicate the complexity and timeline for feature releases and explain reasons for delays.

27.
Concepts: apologies and politeness, acknowledge norms and apologize
- Expressions of politeness, apologies, or acknowledgment of potential inconvenience by the designers.
- Designer acknowledges community norms by apologizing for late communication and apologizes for any disturbances caused by communication timing.

28.
Concepts: decision-making, plan feature development
- A designer outlines the decision-making process for prioritizing features.
- Designers prioritize tasks and plan feature development by outlining upcoming features.

29.
Concepts: discuss feature stability, highlight long-term benefits
- Designers discuss the stability of implemented features and explain their importance for the software.
- Designers explain long-term benefits of features and their importance for software stability.

30.
Concepts: discuss policies and restrictions, highlight issues and explain limitations
- Users describe how network policies impact software usage in schools and discuss the environment regarding internet access.
- Users highlight constraints regarding software usage in schools and share information about their school's computer system limitations.

31.
Concepts: request and share resources, request assistance and support
- Users request specific resources, such as manuals or documentation for the software, and request or share resources that can assist others.
- Users request assistance and information regarding the software download and seek assistance or clarification on using specific software features.

32.
Concepts: confirm teacher role and experience, confirm teacher identity and engage
- A user confirms their role as a teacher and identifies their teaching experience and current role in education.
- Designer engages with users to identify their roles as educators and inquires about users' professional roles or backgrounds.

33.
Concepts: gather user context, inquire about user roles
- Designers gather context by asking users about their teaching roles and internet access.
- Designers inquire about users' roles and backgrounds to understand their needs better.

34.
Concepts: greet and engage the community, introduce oneself and initiate interaction
- Users and designers greet the community and share updates, and designers greet users to initiate friendly communication.
- Users introduce themselves to the community to foster connections and initiate interaction by greeting the community.

35.
Concepts: share community resources, share development access
- Designers share resources and communicate software updates in community announcements.
- Designers provide access information and share the development plan in community announcements.

36.
Concepts: agree with focus areas, agree and support suggestions
- A user agrees with the focus areas discussed by others in the conversation.
- User agrees with another user's suggestion and supports previous statements made by others in the discussion.

37.
Concepts: indicate potential user needs, provide brief confirmations
- Users affirm or acknowledge statements or questions, indicating agreement or understanding.
- Users provide brief affirmations or confirmations in response to discussions and confirm or agree with statements made by others.

38.
Concepts: confirms that reason, show engagement and provide context
- The designer confirms understanding of a user's point, indicating engagement in the conversation.
- The designer demonstrates engagement in the conversation through affirmations and a user provides a simple affirmation, indicating engagement.

39.
Concepts: express emotions, use non verbal communication
- Users utilize emojis and informal language to convey feelings and reactions in conversations.
- Use of emojis or other non-verbal forms of communication by users.

40.
Concepts: express amusement, react humorously and engage
- Designer expresses amusement or light-heartedness in communication.
- Designer reacts humorously to a user's comment or story and responds to a humorous comment with laughter.

41.
Concepts: build community and respond, acknowledge help and express appreciation
- Users express gratitude or appreciation, contributing to community building and respond to community discussions, sharing experiences or expressing gratitude.
- Users express gratitude for assistance or information received, indicating a positive interaction and express thanks for feedback received.

42.
Concepts: express enthusiasm and support, acknowledge support and encourage
- Users express enthusiasm or support for ideas or initiatives within the community and respond positively to statements or proposals made by others.
- Instances where support and acknowledgment are expressed within the community and expressions of appreciation and encouragement help build a positive community atmosphere.

43.
Concepts: software effectiveness, share experiences and impacts
- Users discuss the effectiveness of software, particularly in terms of its impact on student engagement or learning.
- Users share their experiences and the impact of the software on their educational practices and share positive experiences about the software's effectiveness.

44.
Concepts: express approval and review usability, appreciate dedication and acknowledge craftsmanship
- Users express approval or satisfaction with the software and its features and express satisfaction with the software's practical usability.
- Users express appreciation for the dedication and features of the software and acknowledge the commitment to quality in software development.

45.
Concepts: acknowledge user experience
- Designers acknowledge user experiences and feedback to demonstrate engagement.
- Designers acknowledge user suggestions and discuss plans for implementing them.

46.
Concepts: solicit user feedback
- Designers actively seek and collect user input and encourage feedback and suggestions.
- Designers indicate a willingness to seek user input and mention potential future updates.
===
---
Definitions for each code (46 in total):
1.
Concepts: explain new features, introduce new functionalities  
Relationship: Both concepts involve designers communicating about enhancements to the software.  
Criteria: Designers explain upcoming features being developed and share information about ongoing feature development related to circuit diagrams, providing examples of planned features to enhance user experience.  
Phrase: Communicate new features and functionalities.

2.
Concepts: feature development, explain development focus  
Relationship: Both concepts relate to the ongoing process of creating and refining software features.  
Criteria: Designers discuss various aspects of feature development in the software and explain ongoing work related to specific features, communicating the current development focus.  
Phrase: Discuss feature development and focus.

3.
Concepts: list new features, discuss feature improvements  
Relationship: Both concepts involve designers providing information about software updates and enhancements.  
Criteria: Designers list new features and updates while noting potential bugs in the software and mention the need for adjustments and improvements to specific software features.  
Phrase: List features and discuss improvements.

4.
Concepts: promise future features, promise that the update is ongoing  
Relationship: Both concepts express commitments to future developments and ongoing work.  
Criteria: Designers indicate that a feature will be implemented in the future, expressing tentative commitments, and assure the community that updates are in progress, indicating ongoing development efforts.  
Phrase: Promise future features and updates.

5.
Concepts: outline release processes, outline software update schedules  
Relationship: Both concepts involve planning and communicating timelines for software releases.  
Criteria: Designers discuss and outline the structured release and update processes for different platforms and outline the schedule for upcoming software updates, providing specific timelines for the Android version release.  
Phrase: Outline release processes and schedules.

6.
Concepts: seek information and inquire, ask questions and seek information  
Relationship: Both concepts involve users and designers engaging in a dialogue to gather information.  
Criteria: Users ask questions to seek information or clarification related to the software, and both users and designers pose questions regarding software updates and features.  
Phrase: Inquire and seek information.

7.
Concepts: clarify details and inquire, specify version and clarify  
Relationship: Both concepts involve the need for clarification regarding software versions and details.  
Criteria: Designers clarify which version of the application is being discussed, while users specify the platform version for clarity and seek clarification on where to access specific software versions.  
Phrase: Clarify and specify details.

8.
Concepts: ask follow-up questions, respond to clarifications  
Relationship: Both concepts involve a two-way communication process for understanding.  
Criteria: The designer asks follow-up questions to clarify user experiences and requests, while designers respond to user clarification requests and explain the intentions behind their questions.  
Phrase: Ask follow-up questions and respond.

9.
Concepts: pose design questions, facilitate queries and responses  
Relationship: Both concepts involve interaction between designers and users regarding design-related inquiries.  
Criteria: Designers pose design-related questions, and users provide specific answers regarding requirements, while instances occur where users ask questions and receive answers from designers or other community members.  
Phrase: Facilitate design queries and responses.

10.
Concepts: inquire about user problems, express needs and inquire  
Relationship: Both concepts involve understanding user challenges and needs.  
Criteria: Designers ask users to clarify any problems they have encountered while using the software, and users communicate their needs regarding the application for teaching purposes.  
Phrase: Inquire about user problems and needs.

11.
Concepts: respond to inquiries, respond to user inquiries  
Relationship: Both concepts involve providing answers to user questions.  
Criteria: The designer responds to user inquiries with relevant information about the application and provides answers to user inquiries regarding application compatibility.  
Phrase: Respond to user inquiries.

12.
Concepts: address usability issues, discuss usability issues  
Relationship: Both concepts focus on improving user experience through addressing concerns.  
Criteria: Designers address usability concerns and explain the functionality of specific features while discussing usability issues and facilitating user interaction regarding application functionality.  
Phrase: Address and discuss usability issues.

13.
Concepts: share design knowledge, shared experiences and support  
Relationship: Both concepts involve exchanging knowledge and experiences for improvement.  
Criteria: Designers share knowledge about software features, and users share relevant experiences for design considerations, fostering support among users and designers.  
Phrase: Share knowledge and support.

14.
Concepts: visual confirmation, share visual references  
Relationship: Both concepts involve using visual aids to enhance understanding.  
Criteria: Designers seek confirmation through visual aids or images and share visual references to clarify points raised by users.  
Phrase: Share visual references and confirm.

15.
Concepts: seek collaborative consensus, seek input and promise consultation  
Relationship: Both concepts involve engaging the community for feedback before making decisions.  
Criteria: The designer seeks agreement or consensus on proposed ideas before proceeding with development and actively seeks feedback from the community, committing to consultation before making decisions regarding new features.  
Phrase: Seek consensus and input.

16.
Concepts: commit to iterative improvement, engage in iterative development  
Relationship: Both concepts focus on continuous enhancement based on feedback.  
Criteria: Designers commit to iterative development and improvement based on user feedback and discuss updates to continuously improve the product through iterative processes.  
Phrase: Commit to iterative improvement.

17.
Concepts: plan for user feedback, elaborate on user feedback  
Relationship: Both concepts involve utilizing user feedback for future updates.  
Criteria: Designers outline plans for future updates based on user feedback and needs, elaborating on previous experiences that inform design decisions.  
Phrase: Plan for and elaborate on feedback.

18.
Concepts: invite feature requests and suggestions, suggest design improvements and enhancements  
Relationship: Both concepts involve encouraging user input for software enhancements.  
Criteria: Designers invite users to suggest new features or improvements, and users provide suggestions for design improvements based on practical teaching needs.  
Phrase: Invite and suggest enhancements.

19.
Concepts: suggest use cases and emphasize convenience, suggest usability improvements and enhancements  
Relationship: Both concepts focus on enhancing the application's functionality for users.  
Criteria: Users suggest features that would enhance the application's functionality for practical use and recommend improvements for usability, particularly regarding input methods.  
Phrase: Suggest use cases and improvements.

20.
Concepts: justify user suggestions, justify requests and provide rationale  
Relationship: Both concepts involve providing explanations for user requests and suggestions.  
Criteria: Users suggest features and provide justifications based on technological limitations, while participants articulate the reasons behind their requests for specific software functionalities.  
Phrase: Justify suggestions and requests.

21.
Concepts: discuss future plans, suggest future developments  
Relationship: Both concepts involve sharing visions for the software's direction.  
Criteria: Designers discuss and share future plans for software development with users and suggest potential future developments that may influence software direction.  
Phrase: Discuss and suggest future plans.

22.
Concepts: provide technical information, acknowledge technical requirements  
Relationship: Both concepts involve sharing technical details necessary for software use.  
Criteria: Designers provide technical details and specific criteria regarding system compatibility while acknowledging technical requirements that may affect software compatibility.  
Phrase: Provide technical information and requirements.

23.
Concepts: consider future compatibility, confirm system compatibility  
Relationship: Both concepts focus on ensuring software works with future systems.  
Criteria: Designers consider future compatibility issues and suggest checking system compatibility while discussing necessary system requirements and confirming compatibility with specific operating systems.  
Phrase: Confirm compatibility and consider future needs.

24.
Concepts: share design rationale, suggest design simplifications  
Relationship: Both concepts involve enhancing user experience through thoughtful design.  
Criteria: Designers share thoughts on simplifying design and explain the rationale for user-friendly design while suggesting refining design elements to enhance usability.  
Phrase: Share rationale and suggest simplifications.

25.
Concepts: discuss team limitations, clarify limitations  
Relationship: Both concepts involve acknowledging constraints in software development.  
Criteria: Designers discuss team limitations and outline how these can be addressed or worked around while clarifying and acknowledging limitations regarding the software's functionalities.  
Phrase: Discuss and clarify limitations.

26.
Concepts: elaboration of response, explain development delays  
Relationship: Both concepts involve providing context for project timelines.  
Criteria: The designer elaborates on the complexity of a task and sets expectations for release timing while communicating the complexity and timeline for feature releases and explaining reasons for delays.  
Phrase: Elaborate on responses and delays.

27.
Concepts: apologies and politeness, acknowledge norms and apologize  
Relationship: Both concepts involve maintaining community standards through respectful communication.  
Criteria: Expressions of politeness, apologies, or acknowledgment of potential inconvenience by the designers while acknowledging community norms by apologizing for late communication.  
Phrase: Apologize and acknowledge norms.

28.
Concepts: decision-making, plan feature development  
Relationship: Both concepts involve strategizing for future software features.  
Criteria: A designer outlines the decision-making process for prioritizing features while prioritizing tasks and planning feature development by outlining upcoming features.  
Phrase: Plan and make decisions for development.

29.
Concepts: discuss feature stability, highlight long-term benefits  
Relationship: Both concepts focus on the importance of reliable software features.  
Criteria: Designers discuss the stability of implemented features and explain their importance for the software while highlighting the long-term benefits of features for software stability.  
Phrase: Discuss stability and long-term benefits.

30.
Concepts: discuss policies and restrictions, highlight issues and explain limitations  
Relationship: Both concepts involve addressing external factors affecting software use.  
Criteria: Users describe how network policies impact software usage in schools and highlight constraints regarding software usage in schools.  
Phrase: Discuss policies and limitations.

31.
Concepts: request and share resources, request assistance and support  
Relationship: Both concepts involve seeking and providing help within the community.  
Criteria: Users request specific resources, such as manuals or documentation for the software, and seek assistance or clarification on using specific software features.  
Phrase: Request and share resources.

32.
Concepts: confirm teacher role and experience, confirm teacher identity and engage  
Relationship: Both concepts involve recognizing the professional identity of users.  
Criteria: A user confirms their role as a teacher and identifies their teaching experience while the designer engages with users to identify their roles as educators.  
Phrase: Confirm and engage with users.

33.
Concepts: gather user context, inquire about user roles  
Relationship: Both concepts involve understanding user backgrounds to tailor support.  
Criteria: Designers gather context by asking users about their teaching roles and internet access while inquiring about users' roles and backgrounds to understand their needs better.  
Phrase: Gather context and inquire.

34.
Concepts: greet and engage the community, introduce oneself and initiate interaction  
Relationship: Both concepts involve fostering a welcoming community atmosphere.  
Criteria: Users and designers greet the community and share updates while initiating friendly communication to foster connections.  
Phrase: Greet and engage the community.

35.
Concepts: share community resources, share development access  
Relationship: Both concepts involve disseminating information to the community.  
Criteria: Designers share resources and communicate software updates in community announcements while providing access information and sharing the development plan.  
Phrase: Share resources and access.

36.
Concepts: agree with focus areas, agree and support suggestions  
Relationship: Both concepts involve consensus-building within the community.  
Criteria: A user agrees with the focus areas discussed by others in the conversation and supports previous statements made by others in the discussion.  
Phrase: Agree and support suggestions.

37.
Concepts: indicate potential user needs, provide brief confirmations  
Relationship: Both concepts involve acknowledging and validating user input.  
Criteria: Users affirm or acknowledge statements or questions, indicating agreement or understanding while providing brief affirmations in response to discussions.  
Phrase: Confirm and acknowledge needs.

38.
Concepts: confirms that reason, show engagement and provide context  
Relationship: Both concepts involve demonstrating active participation in discussions.  
Criteria: The designer confirms understanding of a user's point, indicating engagement in the conversation while demonstrating engagement through affirmations.  
Phrase: Confirm and show engagement.

39.
Concepts: express emotions, use non verbal communication  
Relationship: Both concepts involve conveying feelings in communication.  
Criteria: Users utilize emojis and informal language to convey feelings and reactions in conversations, using non-verbal forms of communication.  
Phrase: Express emotions and communicate non-verbally.

40.
Concepts: express amusement, react humorously and engage  
Relationship: Both concepts involve light-hearted interactions within the community.  
Criteria: Designer expresses amusement or light-heartedness in communication, reacting humorously to a user's comment or story.  
Phrase: Express amusement and engage humorously.

41.
Concepts: build community and respond, acknowledge help and express appreciation  
Relationship: Both concepts involve fostering a supportive community environment.  
Criteria: Users express gratitude or appreciation, contributing to community building and responding to community discussions.  
Phrase: Build community and express appreciation.

42.
Concepts: express enthusiasm and support, acknowledge support and encourage  
Relationship: Both concepts involve promoting a positive atmosphere within the community.  
Criteria: Users express enthusiasm or support for ideas or initiatives within the community and respond positively to statements or proposals made by others.  
Phrase: Express enthusiasm and support.

43.
Concepts: software effectiveness, share experiences and impacts  
Relationship: Both concepts involve discussing the software's impact on users.  
Criteria: Users discuss the effectiveness of software, particularly in terms of its impact on student engagement or learning, sharing their experiences and the impact on educational practices.  
Phrase: Discuss effectiveness and share experiences.

44.
Concepts: express approval and review usability, appreciate dedication and acknowledge craftsmanship  
Relationship: Both concepts involve recognizing the quality and usability of the software.  
Criteria: Users express approval or satisfaction with the software and its features, acknowledging the commitment to quality in software development.  
Phrase: Express approval and acknowledge craftsmanship.

45.
Concepts: acknowledge user experience  
Relationship: N/A  
Criteria: Designers acknowledge user experiences and feedback to demonstrate engagement and discuss plans for implementing suggestions.  
Phrase: Acknowledge user experiences.

46.
Concepts: solicit user feedback  
Relationship: N/A  
Criteria: Designers actively seek and collect user input, encouraging feedback and suggestions while indicating a willingness to seek user input for potential future updates.  
Phrase: Solicit and collect user feedback.  
---