You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (32 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
32. 
Concepts: {Repeat the input 32}
Relationship: {What is logical relationship between concepts in code 32, or N/A if not applicable}
Criteria: {Who did what, and how for code 32}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: offering resources and design support, guiding software use and directing to resources
- Designers offer resources and design support to users.
- Designers guide software use and direct users to resources.

2.
Concepts: highlighting collaborative features, promoting and suggesting group sharing features
- A designer or developer highlights the collaborative or sharing aspects of the platform.
- Designers promote and suggest group sharing features to facilitate collaboration.

3.
Concepts: offering advice, seeking technical support and guidance
- Users provide advice or technical suggestions to the designer or community.
- Users seek technical support and guidance from the designer.

4.
Concepts: technical question, seeking technical clarification
- User asks a technical question about the platform or its features.
- Users ask for tutorials and seek technical clarification.

5.
Concepts: requesting user manual guidance, seeking documentation support
- Users request resources and user manual guidance.
- Users seek documentation support and inquire about availability.

6.
Concepts: seeking updates, inquiring about update timing and status
- Users seek or inquire about updates or new developments, expressing interest in the process.
- Users ask about the timing or status of updates or new features.

7.
Concepts: inquiring about resources, inquiring about resource availability
- Users inquire about the app and resources.
- Inquiring about the availability of resources or infrastructure.

8.
Concepts: questioning requests, inquiring about user needs
- Asking for clarification or details about a request or feature.
- Asking about user needs or preferences, soliciting user input for future developments.

9.
Concepts: inquiring about context, gathering context or seeking information
- Designers seek user information and inquire about context.
- The designer seeks context or information from the community.

10.
Concepts: proposing new features, suggesting collaboration
- User suggests a feature or functionality that demonstrates proactive engagement, and proposes new features and suggests educational enhancements.
- User or designer suggests collaboration or proposes collaborative features, suggests or ideas for interactions or features are proposed by the designer or community members, and suggests a feature or functionality that facilitates communication among community members.

11.
Concepts: feature requests and suggestions, expressing community needs
- Expressing hopes or wishes for specific features or functionalities
- A user expresses a need or desire for a specific feature or functionality, and suggests or requests a feature that caters to a specific need or use case.

12.
Concepts: influencing development, suggesting development approaches and providing detailed suggestions
- A user attempts to influence the development of the software, contributes to the development of the software by providing ideas or feedback, and provides suggestions or ideas that influence design decisions, driving the development process.
- Users suggest approaches and provide detailed suggestions for developing or improving the Physics Lab software.

13.
Concepts: advising on development, planning prioritization
- Users advise on development and prioritize feedback.
- Users or designers suggest or plan prioritization of feature development.

14.
Concepts: seeking consensus, ensuring collective input
- Seeking agreement or consensus on a particular issue, ensuring consensus.
- Ensuring that collective input or opinions are considered

15.
Concepts: planning future engagement, promising future consultation
- Planning or discussing future engagement, collaboration, or activities.
- Promise of future consultation or gathering opinions, announcing future collaboration.

16.
Concepts: clarifying functionality, clarifying feature purpose
- Designers clarify how a feature or functionality works.
- Designers clarify the purpose, intent, or functionality of a particular feature or tool.

17.
Concepts: development approach, suggesting focused, iterative approach
- User suggests taking a slow and steady approach to development.
- A user suggests a focused or iterative approach to development or design.

18.
Concepts: inquiring about platform compatibility, expressing compatibility concerns
- Users ask about platform clarification and inquire about compatibility.
- A user mentions that a specific operating system is compatible or expresses concern about compatibility.

19.
Concepts: suggesting compatible options, suggesting compatibility
- User suggests compatible options or alternatives.
- A user suggests that a system or version should be compatible or expresses hope for compatibility.

20.
Concepts: adapting to user context, adapting to technical constraints
- Designers consider and adapt to user contexts or limitations when making decisions.
- A designer adapts to technical constraints or limitations.

21.
Concepts: describing resource constraints, describing classroom limitations
- A user describes institutional limitations or constraints.
- A user explains limitations or constraints in classroom settings.

22.
Concepts: streamlining functionality, improving usability through simplification and enhancement
- Designer aims to simplify or streamline the functionality or user experience of the Physics Lab.
- Users suggest reducing complexity and enhancing functionality to improve the Physics Lab software.

23.
Concepts: community-driven development, providing support through help and instructions
- The community facilitates user-driven development, support, or feedback related to the Physics Lab.
- Users offer help and designers provide instructions to support users in the Physics Lab online community.

24.
Concepts: sharing software opinions, evaluating software effectiveness
- Users provide feedback or evaluations about the software based on their experiences.
- Users evaluate or comment on the effectiveness or quality of the software.

25.
Concepts: highlighting user engagement and experience, describing user interactions and perspectives
- Users highlight the engagement or impact of the software, emphasizing user experience.
- Users describe their interactions and provide their perspectives on the software.

26.
Concepts: endorsing user friendliness, praising practicality
- Endorsing the software's user-friendly nature.
- Users praise or compliment the software's practicality or usability, and appreciate its practicality or usability.

27.
Concepts: praising ideas and appreciating development progress, expressing enthusiasm and appreciation for the physics lab software
- Users praise ideas and express appreciation for development progress in the Physics Lab software.
- Users show enthusiasm and appreciation for features of the Physics Lab software.

28.
Concepts: appreciating aesthetics, appreciating design philosophy
- Users appreciate the aesthetic aspects of the application or software, and compliment the design or quality.
- Users express appreciation or admiration for design, and appreciate the design philosophy or approach behind the Physics Lab application.

29.
Concepts: announce updates and releases
- Designers announce updates, changes, and releases to the community.
- Designer promotes or introduces new features or design elements.

30.
Concepts: appreciating support
- A user or designer expresses gratitude or appreciation for support or resources.
- User expresses gratitude and a sense of belonging.
- User expresses praise or appreciation.

31.
Concepts: enhancing realism
- Designers enhance or refine simulations.
- Designers refine simulation settings or parameters.

32.
Concepts: requesting new features
- Users request new features, additional features, or updates to the software.
- Users expressing comfort in making specific requests or suggestions, and highlighting the convenience of a feature or suggesting features for convenience.
===
Here are the definitions for each code:

---
1.
Concepts: offering resources and design support, guiding software use and directing to resources
Relationship: The concepts are related as they both describe the supportive role of designers in facilitating users' experience with the software.
Criteria: Designers provide resources and guidance to facilitate users' effective use of the software.
Phrase: Providing design support and guidance.

2.
Concepts: highlighting collaborative features, promoting and suggesting group sharing features
Relationship: The concepts are related as they both describe the promotion of collaborative features in the software.
Criteria: Designers highlight and suggest collaborative features to facilitate group sharing and collaboration.
Phrase: Promoting collaborative features.

3.
Concepts: offering advice, seeking technical support and guidance
Relationship: The concepts are related as they both describe the exchange of technical knowledge and support between users and designers.
Criteria: Users and designers exchange technical advice and guidance to resolve issues and improve the software.
Phrase: Exchanging technical advice and guidance.

4.
Concepts: technical question, seeking technical clarification
Relationship: The concepts are related as they both describe users' requests for technical information and clarification.
Criteria: Users ask technical questions and seek clarification on software features and functionality.
Phrase: Seeking technical clarification.

5.
Concepts: requesting user manual guidance, seeking documentation support
Relationship: The concepts are related as they both describe users' requests for documentation and guidance on using the software.
Criteria: Users request user manuals and documentation support to facilitate their understanding of the software.
Phrase: Requesting documentation support.

6.
Concepts: seeking updates, inquiring about update timing and status
Relationship: The concepts are related as they both describe users' interest in software updates and developments.
Criteria: Users seek information on software updates and their timing and status.
Phrase: Inquiring about updates.

7.
Concepts: inquiring about resources, inquiring about resource availability
Relationship: The concepts are related as they both describe users' requests for information on available resources.
Criteria: Users inquire about the availability of resources and infrastructure.
Phrase: Inquiring about resource availability.

8.
Concepts: questioning requests, inquiring about user needs
Relationship: The concepts are related as they both describe the clarification of user needs and requests.
Criteria: Designers and users clarify and discuss user needs and requests to ensure effective development and use of the software.
Phrase: Clarifying user needs.

9.
Concepts: inquiring about context, gathering context or seeking information
Relationship: The concepts are related as they both describe the collection of information and context to inform software development.
Criteria: Designers gather context and information from users to inform software development decisions.
Phrase: Gathering context and information.

10.
Concepts: proposing new features, suggesting collaboration
Relationship: The concepts are related as they both describe users' proactive engagement with the software and its development.
Criteria: Users propose new features and suggest collaboration to enhance the software and its functionality.
Phrase: Proposing new features and collaboration.

11.
Concepts: feature requests and suggestions, expressing community needs
Relationship: The concepts are related as they both describe users' expressions of needs and desires for specific features.
Criteria: Users express their needs and desires for specific features and functionalities.
Phrase: Expressing community needs.

12.
Concepts: influencing development, suggesting development approaches and providing detailed suggestions
Relationship: The concepts are related as they both describe users' contributions to software development and design decisions.
Criteria: Users influence software development by providing suggestions, ideas, and feedback.
Phrase: Influencing development decisions.

13.
Concepts: advising on development, planning prioritization
Relationship: The concepts are related as they both describe users' and designers' planning and prioritization of software development.
Criteria: Users and designers advise on and prioritize software development to ensure effective allocation of resources.
Phrase: Advising on development priorities.

14.
Concepts: seeking consensus, ensuring collective input
Relationship: The concepts are related as they both describe the collection of opinions and input from multiple stakeholders.
Criteria: Designers and users seek consensus and ensure collective input to inform software development decisions.
Phrase: Ensuring collective input.

15.
Concepts: planning future engagement, promising future consultation
Relationship: The concepts are related as they both describe the planning and promise of future collaboration and consultation.
Criteria: Designers and users plan and promise future engagement, collaboration, and consultation to ensure continued improvement of the software.
Phrase: Planning future engagement and consultation.

16.
Concepts: clarifying functionality, clarifying feature purpose
Relationship: The concepts are related as they both describe the provision of information on software functionality and features.
Criteria: Designers clarify software functionality and feature purposes to facilitate users' understanding.
Phrase: Clarifying software functionality.

17.
Concepts: development approach, suggesting focused, iterative approach
Relationship: The concepts are related as they both describe users' suggestions for software development approaches.
Criteria: Users suggest focused and iterative approaches to software development to ensure effective and incremental progress.
Phrase: Suggesting development approaches.

18.
Concepts: inquiring about platform compatibility, expressing compatibility concerns
Relationship: The concepts are related as they both describe users' concerns and inquiries about software compatibility.
Criteria: Users inquire about and express concerns regarding software compatibility with different platforms.
Phrase: Inquiring about platform compatibility.

19.
Concepts: suggesting compatible options, suggesting compatibility
Relationship: The concepts are related as they both describe users' suggestions for compatible options and solutions.
Criteria: Users suggest compatible options and solutions to ensure software functionality across different platforms.
Phrase: Suggesting compatible options.

20.
Concepts: adapting to user context, adapting to technical constraints
Relationship: The concepts are related as they both describe designers' adaptations to user contexts and technical limitations.
Criteria: Designers adapt to user contexts and technical constraints to ensure effective software development and functionality.
Phrase: Adapting to user contexts and technical constraints.

21.
Concepts: describing resource constraints, describing classroom limitations
Relationship: The concepts are related as they both describe users' descriptions of limitations and constraints in classroom settings.
Criteria: Users describe institutional and classroom limitations and constraints that impact software use and development.
Phrase: Describing resource constraints.

22.
Concepts: streamlining functionality, improving usability through simplification and enhancement
Relationship: The concepts are related as they both describe designers' efforts to improve software usability and functionality.
Criteria: Designers streamline functionality and improve usability through simplification and enhancement of software features.
Phrase: Streamlining software functionality.

23.
Concepts: community-driven development, providing support through help and instructions
Relationship: The concepts are related as they both describe the community's role in facilitating software development and support.
Criteria: The community provides support and facilitates development through help, instructions, and feedback.
Phrase: Facilitating community-driven development.

24.
Concepts: sharing software opinions, evaluating software effectiveness
Relationship: The concepts are related as they both describe users' evaluations and opinions on software effectiveness and quality.
Criteria: Users share their opinions and evaluate the effectiveness and quality of the software.
Phrase: Evaluating software effectiveness.

25.
Concepts: highlighting user engagement and experience, describing user interactions and perspectives
Relationship: The concepts are related as they both describe users' experiences and interactions with the software.
Criteria: Users highlight their engagement and describe their interactions and perspectives on the software.
Phrase: Highlighting user engagement and experience.

26.
Concepts: endorsing user friendliness, praising practicality
Relationship: The concepts are related as they both describe users' positive evaluations of software usability and practicality.
Criteria: Users endorse and praise the software's user-friendly nature and practicality.
Phrase: Endorsing user-friendly design.

27.
Concepts: praising ideas and appreciating development progress, expressing enthusiasm and appreciation for the physics lab software
Relationship: The concepts are related as they both describe users' positive sentiments towards software development and ideas.
Criteria: Users praise ideas, appreciate development progress, and express enthusiasm for the software.
Phrase: Expressing appreciation and enthusiasm.

28.
Concepts: appreciating aesthetics, appreciating design philosophy
Relationship: The concepts are related as they both describe users' appreciation for software design and aesthetics.
Criteria: Users appreciate the aesthetic aspects and design philosophy behind the software.
Phrase: Appreciating software design.

29.
Concepts: announce updates and releases
Relationship: The concepts are related as they both describe designers' announcements of software updates and releases.
Criteria: Designers announce updates, changes, and releases to the community.
Phrase: Announcing updates and releases.

30.
Concepts: appreciating support
Relationship: The concepts are related as they both describe users' appreciation for support and resources.
Criteria: Users express gratitude and appreciation for support and resources provided.
Phrase: Expressing appreciation for support.

31.
Concepts: enhancing realism
Relationship: The concepts are related as they both describe designers' efforts to refine and enhance software simulations.
Criteria: Designers refine and enhance simulations to improve their realism and effectiveness.
Phrase: Enhancing simulation realism.

32.
Concepts: requesting new features
Relationship: The concepts are related as they both describe users' requests for additional software features and functionalities.
Criteria: Users request new features and functionalities to enhance software capabilities.
Phrase: Requesting new features.