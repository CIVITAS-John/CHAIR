You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (18 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
18. 
Concepts: {Repeat the input 18}
Relationship: {What is logical relationship between concepts in code 18, or N/A if not applicable}
Criteria: {Who did what, and how for code 18}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: engage in positive interactions, foster community through enthusiasm
- Users engage positively in community discussions and interactions.
- Users express enthusiasm and foster community by showing gratitude and encouragement.

2.
Concepts: express user satisfaction, acknowledge craftsmanship
- Users express satisfaction and appreciation for the software's effectiveness.
- Users and designers express gratitude and appreciation for the software's quality.

3.
Concepts: user experience in educational contexts, technical and infrastructural challenges in educational settings
- User experiences and challenges in using the software within educational settings.
- Users and designers discuss challenges related to technology in educational environments.

4.
Concepts: clarify and respond, clarify and validate details
- Designers clarify points of confusion during discussions and respond to a user's clarification request with additional information.
- The designer seeks clarification and confirmation from users regarding specific details and requests.

5.
Concepts: confirm teacher role, confirm identity and roles
- Users identify themselves as teachers and make relevant requests.
- Users confirm their identity and professional roles in the community.

6.
Concepts: request assistance, seek technical assistance
- Users request assistance and technical support for using the software.
- Designer seeks assistance with a technical issue related to user interface.

7.
Concepts: share personal anecdotes, share user experiences
- Users share personal anecdotes related to their experiences with the software.
- Users share their experiences and successful outcomes from using the software in educational settings.

8.
Concepts: share knowledge, share research progress
- Designers share factual information or insights about the software's features or functionalities.
- Designers discuss ongoing research and inform the community about its relevance to the software and future features.

9.
Concepts: image sharing, share resources and access
- Designer and user share images related to the software.
- The designer shares resources and access information related to the software's development and usage.

10.
Concepts: commit to improvement, refine and propose design improvements
- Designers commit to improving the software based on user feedback and support, addressing user needs in future updates.
- Designers propose refinements and simplifications to enhance the software's design.

11.
Concepts: acknowledge and seek input, accept and incorporate feedback
- The designer acknowledges community needs and actively seeks input for future feature development.
- Designers acknowledge user suggestions and plan to incorporate feedback into future updates.

12.
Concepts: discuss future interests, discuss future plans collaboratively
- Designers share personal interests that may relate to the development of the application and influence future developments.
- Designers and users collaboratively discuss future plans for software development.

13.
Concepts: gather user context, inquire about user identity
- Designers ask for and gather context to understand user needs and issues.
- Designers inquire about user roles and interact with them to address their specific needs.

14.
Concepts: provide usability solutions, address and respond to usability issues
- A designer shares workarounds and potential solutions based on user feedback regarding usability issues.
- The designer addresses usability issues and responds to user concerns to alleviate them.

15.
Concepts: respond to feedback, address user feedback
- Instances where designers respond to user feedback or queries.
- A designer responds to and aligns their actions with user feedback regarding software features.

16.
Concepts: communicate status updates, highlight progress and updates
- Designers communicate status updates and inform users about the release process.
- Designers highlight progress made in updates and provide internal updates on features.

17.
Concepts: provide technical details, explain development process
- Designers provide technical information and verify software compatibility with systems.
- The designer explains the theoretical compatibility of the application with various systems.

18.
Concepts: explain design rationale, provide rationale for decisions
- The designer explains the rationale and principles guiding their design decisions.
- The designer provides reasoning and rationale for development decisions.
===
---
Definitions for each code (18 in total):
1.
Concepts: engage in positive interactions, foster community through enthusiasm  
Relationship: Positive interactions and enthusiasm are interrelated as they both contribute to a supportive community atmosphere.  
Criteria: Users engage positively in community discussions and express enthusiasm, fostering a sense of community through gratitude and encouragement.  
Phrase: Foster community through positive engagement.

2.
Concepts: express user satisfaction, acknowledge craftsmanship  
Relationship: User satisfaction and acknowledgment of craftsmanship are connected as appreciation for quality often stems from effective user experiences.  
Criteria: Users express satisfaction and appreciation for the software's effectiveness and quality, acknowledging the craftsmanship involved.  
Phrase: Acknowledge satisfaction and craftsmanship.

3.
Concepts: user experience in educational contexts, technical and infrastructural challenges in educational settings  
Relationship: User experiences are often shaped by the technical and infrastructural challenges they face in educational contexts.  
Criteria: Users share their experiences and challenges related to using the software within educational settings, discussing technology-related issues.  
Phrase: Discuss user experiences and challenges.

4.
Concepts: clarify and respond, clarify and validate details  
Relationship: Clarifying points of confusion and validating details are essential for effective communication and understanding in discussions.  
Criteria: Designers clarify confusion and validate details by responding to user requests for clarification with additional information.  
Phrase: Clarify and respond to inquiries.

5.
Concepts: confirm teacher role, confirm identity and roles  
Relationship: Confirming one's identity and role as a teacher is crucial for establishing credibility and context within the community.  
Criteria: Users identify themselves as teachers and confirm their professional roles, making relevant requests in the community.  
Phrase: Confirm professional identity.

6.
Concepts: request assistance, seek technical assistance  
Relationship: Requesting assistance and seeking technical support are both actions taken by users to address issues they encounter.  
Criteria: Users request technical assistance for using the software, while designers seek help with technical issues related to the user interface.  
Phrase: Request and seek technical assistance.

7.
Concepts: share personal anecdotes, share user experiences  
Relationship: Sharing personal anecdotes and user experiences are both ways to connect and learn from one another within the community.  
Criteria: Users share personal anecdotes and experiences related to the software, highlighting successful outcomes in educational settings.  
Phrase: Share experiences and anecdotes.

8.
Concepts: share knowledge, share research progress  
Relationship: Sharing knowledge and research progress are interconnected as both contribute to the community's understanding of the software's development.  
Criteria: Designers share insights about the software's features and discuss ongoing research relevant to its future developments.  
Phrase: Share knowledge and research updates.

9.
Concepts: image sharing, share resources and access  
Relationship: Image sharing and sharing resources are both methods of providing valuable information and support to the community.  
Criteria: Designers and users share images and resources related to the software's development and usage.  
Phrase: Share images and resources.

10.
Concepts: commit to improvement, refine and propose design improvements  
Relationship: Commitment to improvement and proposing design refinements are both actions aimed at enhancing the software based on user feedback.  
Criteria: Designers commit to improving the software and propose refinements to address user needs in future updates.  
Phrase: Commit to and propose improvements.

11.
Concepts: acknowledge and seek input, accept and incorporate feedback  
Relationship: Acknowledging community needs and seeking input are essential for effectively incorporating feedback into future developments.  
Criteria: Designers acknowledge community needs, actively seek input, and plan to incorporate user feedback into future updates.  
Phrase: Acknowledge and incorporate feedback.

12.
Concepts: discuss future interests, discuss future plans collaboratively  
Relationship: Discussing future interests and plans collaboratively fosters a shared vision for the software's development.  
Criteria: Designers share personal interests and collaboratively discuss future plans for software development with users.  
Phrase: Collaboratively discuss future plans.

13.
Concepts: gather user context, inquire about user identity  
Relationship: Gathering user context and inquiring about identity are both necessary for understanding user needs and tailoring support.  
Criteria: Designers gather context and inquire about user roles to address specific needs effectively.  
Phrase: Gather context and inquire about identity.

14.
Concepts: provide usability solutions, address and respond to usability issues  
Relationship: Providing usability solutions and addressing issues are both proactive measures to enhance user experience.  
Criteria: Designers share workarounds and solutions based on user feedback regarding usability issues and respond to user concerns.  
Phrase: Address and provide usability solutions.

15.
Concepts: respond to feedback, address user feedback  
Relationship: Responding to feedback and addressing user concerns are both critical for maintaining user satisfaction and engagement.  
Criteria: Designers respond to user feedback and align their actions with user suggestions regarding software features.  
Phrase: Respond to and address feedback.

16.
Concepts: communicate status updates, highlight progress and updates  
Relationship: Communicating status updates and highlighting progress are both ways to keep users informed about the software's development.  
Criteria: Designers communicate status updates and highlight progress made in updates to inform users about the release process.  
Phrase: Communicate updates and progress.

17.
Concepts: provide technical details, explain development process  
Relationship: Providing technical details and explaining the development process are both essential for transparency and user understanding.  
Criteria: Designers provide technical information and explain the compatibility of the software with various systems.  
Phrase: Provide technical details and explanations.

18.
Concepts: explain design rationale, provide rationale for decisions  
Relationship: Explaining design rationale and providing reasoning for decisions are both important for justifying design choices to the community.  
Criteria: Designers explain the principles guiding their design decisions and provide rationale for development choices.  
Phrase: Explain design rationale and decisions.
---