You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (8 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
8. 
Concepts: {Repeat the input 8}
Relationship: {What is logical relationship between concepts in code 8, or N/A if not applicable}
Criteria: {Who did what, and how for code 8}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: image sharing, share community resources
- Designer and user share images relevant to the community or software.
- Users seek and share important resources or documentation related to the software.

2.
Concepts: physics concepts, educational tools
- User requests specific physics-related demonstrations or features.
- A user requests specific educational tools and features that would aid in teaching physics concepts.

3.
Concepts: make feature requests, provide specific feedback
- Users make requests for specific features or improvements to be developed within the software.
- Users provide feedback or suggestions about software features and organization.

4.
Concepts: analyzing the problem, clarify software compatibility
- A designer analyzes potential compatibility issues based on the user's computer specifications.
- Designers clarify compatibility issues and confirm system requirements for updates.

5.
Concepts: gather community input, foster community discussions
- Designers collect user insights and identify community input to inform software enhancements.
- Designers invite community members to share feedback and suggestions regarding the software.

6.
Concepts: provide support and troubleshoot, diagnose problems and provide solutions
- Designers provide support and troubleshoot problems faced by users.
- Designers respond with solutions or diagnoses regarding technical problems.

7.
Concepts: reassure and address concerns, assure and announce future updates
- Designers reassure users and address their concerns about upcoming features and software.
- Designers assure the community of future updates and discuss plans based on input.

8.
Concepts: plan for user feedback, acknowledge user feedback
- Designers outline their plan to gather user opinions before proceeding.
- Designers acknowledge user feedback and discuss plans for implementation.
===
---
Definitions for each code (8 in total):
1.
Concepts: image sharing, share community resources
Relationship: Both concepts involve the exchange of visual and informational resources to enhance community engagement.
Criteria: Designers and users share images relevant to the community or software while seeking and sharing important resources or documentation related to the software.
Phrase: Share community images and resources

2.
Concepts: physics concepts, educational tools
Relationship: The concepts are linked through the educational context, where both aim to enhance understanding of physics.
Criteria: Users request specific physics-related demonstrations and educational tools that would aid in teaching physics concepts.
Phrase: Request educational tools for physics

3.
Concepts: make feature requests, provide specific feedback
Relationship: Both concepts are focused on user engagement in improving software through requests and feedback.
Criteria: Users make requests for specific features or improvements and provide feedback or suggestions about software features and organization.
Phrase: Request features and provide feedback

4.
Concepts: analyzing the problem, clarify software compatibility
Relationship: These concepts involve diagnosis and verification to ensure the software functions properly with user systems.
Criteria: A designer analyzes potential compatibility issues based on user specifications and clarifies compatibility issues and system requirements for updates.
Phrase: Analyze compatibility issues

5.
Concepts: gather community input, foster community discussions
Relationship: Both concepts involve engaging the community in dialogue to enhance software development.
Criteria: Designers collect user insights and invite community members to share feedback and suggestions regarding the software.
Phrase: Gather and foster community input

6.
Concepts: provide support and troubleshoot, diagnose problems and provide solutions
Relationship: These concepts relate to customer service, focusing on identifying and resolving user issues.
Criteria: Designers provide support and troubleshoot problems while responding with solutions or diagnoses regarding technical problems.
Phrase: Provide support and troubleshoot issues

7.
Concepts: reassure and address concerns, assure and announce future updates
Relationship: Both concepts focus on communication and trust-building with the community regarding software changes.
Criteria: Designers reassure users and address their concerns about upcoming features while assuring the community of future updates based on input.
Phrase: Reassure users about updates

8.
Concepts: plan for user feedback, acknowledge user feedback
Relationship: Both concepts emphasize the importance of user feedback in the planning and implementation process.
Criteria: Designers outline their plan to gather user opinions and acknowledge user feedback while discussing plans for implementation.
Phrase: Plan and acknowledge user feedback
---