You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (20 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
20. 
Concepts: {Repeat the input 20}
Relationship: {What is logical relationship between concepts in code 20, or N/A if not applicable}
Criteria: {Who did what, and how for code 20}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: acknowledge shared resources, acknowledge community support
- Users express gratitude for assistance and resources provided by the community.
- Designers and users express gratitude and acknowledge each otherâ€™s contributions within the community.

2.
Concepts: express gratitude for feedback, express appreciation and positive feedback
- Users express gratitude for software updates, and designers appreciate user feedback.
- Users express gratitude for the software's quality and specific features.

3.
Concepts: express emotions, use emojis for engagement
- Users express emotions or sentiments in their interactions through visual symbols.
- Users incorporate emojis in their communication to convey emotions.

4.
Concepts: highlight outdated technology, explain outdated technology issues
- Highlighting issues related to outdated technology or resources in use.
- Users describe technical challenges they face due to outdated systems affecting usability.

5.
Concepts: share teaching background, establish credibility through experience
- Users share their teaching experiences and backgrounds in response to inquiries.
- Users share their teaching experiences to establish credibility in discussions.

6.
Concepts: articulate user needs, request additional features
- Users express their needs and suggest functionalities that accommodate current hardware trends.
- Users articulate requests for specific features to enhance software functionality.

7.
Concepts: seek information, inquire about access and downloads
- Users ask various questions related to software updates and technical capabilities.
- Users inquire about accessing or downloading the software and specific versions.

8.
Concepts: confirm user background, gather contextual information
- Designers ask users about their teaching context to inform discussions.
- Designers seek to clarify user roles and gather information regarding their backgrounds.

9.
Concepts: discuss usability concerns, inquiring and troubleshooting user experiences
- Designers engage in discussions about software usability with users.
- Designers inquire about users' experiences to identify problems encountered during use and seek to understand their needs.

10.
Concepts: suggest software enhancements, engage in collaborative problem solving
- Users and designers collaboratively propose functionalities to improve the software.
- Designers and users collaborate to solve issues and improve the software.

11.
Concepts: share design knowledge, collaborative learning
- Designers share relevant technical information while addressing user feature requests.
- Designers promote collaborative learning by encouraging knowledge sharing among users.

12.
Concepts: conveying future timelines, suggest future possibilities
- Designers convey tentative completion timelines for complex features and promise future implementations.
- Designers plan future developments while suggesting potential features or design possibilities.

13.
Concepts: planning future updates, planning for future feedback
- Designers inform users about planning stages for future updates and confirm the implementation of planned features.
- Designers outline future design plans based on user feedback and respond to community suggestions for improvement.

14.
Concepts: current efforts, explaining development focuses
- Designer discusses current research and development efforts in technology.
- Designers explain ongoing work, current focuses, and strategic plans behind feature development.

15.
Concepts: previewing upcoming features, introducing new features
- Designers share previews and list features planned for future software versions.
- Designers announce new features, introduce components, and explain upcoming features being developed for the software.

16.
Concepts: reassure users about progress, promise that the update is ongoing
- Designers reassure users about progress while expressing gratitude for their support.
- Designers reassure users that updates are in progress and actively being worked on.

17.
Concepts: share release timelines, update on release status
- Designers share timelines and updates about development to keep the community informed.
- Designers keep the community informed by sharing the review and release status of the software.

18.
Concepts: explain delays in features, discuss technical limitations
- Designers explain delays in updates while discussing the complexities involved in development.
- Designers explain the state of features in development, highlighting their technical limitations.

19.
Concepts: clarify existing features, provide and explain feature details
- Designers clarify how existing features work and elaborate on suggestions based on experiences.
- Designers provide detailed explanations regarding features and functionalities of the software.

20.
Concepts: provide software updates, provide download instructions
- Designers give updates and instructions that help users navigate software updates and downloads.
- Designers share access and download instructions for the software effectively.
===
---
Definitions for each code (20 in total):
1. 
Concepts: acknowledge shared resources, acknowledge community support
Relationship: Users and designers express mutual gratitude for contributions and resources, highlighting the collaborative nature of the community.
Criteria: Users express gratitude for assistance and resources while designers recognize contributions within the community.
Phrase: Acknowledge community contributions

2. 
Concepts: express gratitude for feedback, express appreciation and positive feedback
Relationship: Users and designers share a reciprocal appreciation, enhancing community engagement through acknowledgment of feedback and updates.
Criteria: Users express gratitude for software updates, while designers appreciate user feedback and quality assessments.
Phrase: Express gratitude for feedback

3. 
Concepts: express emotions, use emojis for engagement
Relationship: Users use visual symbols to enhance emotional expression in their communications, deepening engagement within the community.
Criteria: Users express emotions through their interactions and incorporate emojis to convey sentiments.
Phrase: Convey emotions visually

4. 
Concepts: highlight outdated technology, explain outdated technology issues
Relationship: Users bring attention to the challenges posed by outdated technology, prompting discussion of usability issues.
Criteria: Users highlight issues related to outdated technology while describing the technical challenges they face.
Phrase: Discuss technology challenges

5. 
Concepts: share teaching background, establish credibility through experience
Relationship: Users share their experiences to enhance credibility in discussions, fostering trust within the community.
Criteria: Users share their teaching experiences in response to inquiries to establish credibility.
Phrase: Establish credibility through experience

6. 
Concepts: articulate user needs, request additional features
Relationship: Users communicate their needs and desired functionalities, guiding software development towards user-centered enhancements.
Criteria: Users express their needs and suggest functionalities to improve software functionality.
Phrase: Articulate user needs

7. 
Concepts: seek information, inquire about access and downloads
Relationship: Users actively engage in seeking information about software, enhancing their understanding of access and technical capabilities.
Criteria: Users ask questions related to software updates and inquire about access or downloads.
Phrase: Inquire about access

8. 
Concepts: confirm user background, gather contextual information
Relationship: Designers seek to understand the context of users' experiences to tailor discussions and support effectively.
Criteria: Designers ask users about their teaching context to clarify roles and gather background information.
Phrase: Gather user context

9. 
Concepts: discuss usability concerns, inquiring and troubleshooting user experiences
Relationship: Designers and users engage in a dialogue to identify and troubleshoot usability issues, enhancing the software's user experience.
Criteria: Designers discuss software usability and inquire about users' experiences to identify problems.
Phrase: Troubleshoot usability concerns

10. 
Concepts: suggest software enhancements, engage in collaborative problem solving
Relationship: Users and designers collaborate to propose enhancements, fostering a culture of joint problem-solving in the community.
Criteria: Users and designers collaboratively propose functionalities to improve the software.
Phrase: Collaborate on enhancements

11. 
Concepts: share design knowledge, collaborative learning
Relationship: Designers facilitate knowledge sharing, promoting collaborative learning and enhancing user understanding of software.
Criteria: Designers share relevant technical information to address user feature requests and encourage learning.
Phrase: Promote knowledge sharing

12. 
Concepts: conveying future timelines, suggest future possibilities
Relationship: Designers communicate potential futures, providing users with insight into upcoming developments and enhancements.
Criteria: Designers convey timelines for complex features while suggesting potential future implementations.
Phrase: Convey future possibilities

13. 
Concepts: planning future updates, planning for future feedback
Relationship: Designers outline their plans based on user feedback, ensuring that future updates align with community needs.
Criteria: Designers inform users about planning stages for future updates and incorporate community suggestions.
Phrase: Plan for future updates

14. 
Concepts: current efforts, explaining development focuses
Relationship: Designers articulate their ongoing efforts and strategic focuses, keeping users informed about development priorities.
Criteria: Designers discuss current research and explain ongoing work in feature development.
Phrase: Explain development efforts

15. 
Concepts: previewing upcoming features, introducing new features
Relationship: Designers share insights into future developments, creating anticipation and engagement within the user community.
Criteria: Designers share previews and announce new features being developed for the software.
Phrase: Introduce upcoming features

16. 
Concepts: reassure users about progress, promise that the update is ongoing
Relationship: Designers build trust by reassuring users about ongoing updates and expressing gratitude for community support.
Criteria: Designers reassure users about progress on updates while emphasizing active work.
Phrase: Reassure about progress

17. 
Concepts: share release timelines, update on release status
Relationship: Designers keep the community informed about development timelines and status updates, fostering transparency.
Criteria: Designers share timelines and updates about software development to inform the community.
Phrase: Update on release status

18. 
Concepts: explain delays in features, discuss technical limitations
Relationship: Designers address challenges in development, providing users with a clearer understanding of technical constraints.
Criteria: Designers explain delays in updates while discussing complexities involved in development.
Phrase: Explain development delays

19. 
Concepts: clarify existing features, provide and explain feature details
Relationship: Designers enhance user understanding by elaborating on existing functionalities, addressing user experiences and suggestions.
Criteria: Designers clarify how existing features work and provide detailed explanations.
Phrase: Clarify feature functionalities

20. 
Concepts: provide software updates, provide download instructions
Relationship: Designers facilitate user access to software updates, ensuring that users can effectively navigate changes.
Criteria: Designers give updates and instructions for software navigation and downloads.
Phrase: Provide update instructions
---