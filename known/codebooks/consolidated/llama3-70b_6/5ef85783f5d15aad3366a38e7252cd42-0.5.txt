You are an expert in thematic analysis clarifying the criteria of qualitative codes. Do not attempt to merge codes now.
Consider provided quotes, and note that each quote is independent of others.
Write clear and generalizable criteria for each code and do not introduce unnecessary details.
If necessary, refine labels to be more accurate, but do not repeat yourself.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (32 in total):
1. 
Criteria: {Who did what, and how for code 1}
Label: {A descriptive label of code 1}
...
32.
Criteria: {Who did what, and how for code 32}
Label: {A descriptive label of code 32}
---
~~~
1.
Label: expecting ai to find relevant models from the library
Quotes:
- E04: I know that Perceptron model exists in the NetLogo model library. So it's interesting to me that it didn't pull that up, but it could be that I used like the wrong verbiage, but it doesn't understand what I'm trying to do. (interviewer's observation) E04 expects ChatLogo to find "Perceptron" model from the library but it does not. He evaluates the search results of the AI.

2.
Label: ai saving time for learning new extensions
Quotes:
- E01: There's a lot of extensions I would love to know about GIS extensions, but I have very limited time. What could I do in two hours? And I think everybody has a very finite length of time. (interviewer's observation) AI could potentially save time for learning new extensions (compared with core concepts) of NetLogo.

3.
Label: requiring system support for reminders
Quotes:
- E01: Depending on what you do and how busy you are and the higher ranking people are, the more busy they are, the longer it is between sessions. So you make some notes on little yellow, sticky cinnamon. And then you go back to your administrator job for two months, and then some other project comes up. And then six months later, you come back. Okay, now, where was I? (interviewer's observation) E01's reflection on how professionals learn - they learn in fragments, in fragmented time blocks and need support from the system to remind them where they were.

4.
Label: challenges for novices seeking help
Quotes:
- E01: I couldn't (help the novice) because when a beginner just posts a big block of code, it says there's something wrong with this. (interviewer's observation) Challenges for novices to seek help: they simply post chunks of code without background information.

5.
Label: suggests ai support for understanding variable contexts in code
Quotes:
- E01: And I find what I have trouble with and certainly what beginners have trouble with is "scope".   You know, when you go from one point to another and all of a sudden you're, you're not no longer in ask turtles to do something you're in, ask links to do. But you know, so all of a sudden you've shifted, you've shifted your variable space and this happens implicitly and all of a sudden you're writing code and then it gives you an error that of the nature X Y Z doesn't operate in a turtle context. (interviewer's observation) AI needs to support learning of the "scope" concept in NetLogo.

6.
Label: ai hallucinations
Quotes:
- E01: So maybe the details are wrong and, you know, Michael Tamalo or somebody jumped on me because I posted some answer and it used some function that wasn't available. AI had hallucinated some function. (interviewer's observation) AI might hallucinates.

7.
Label: practice
Quotes:
- E04: I just like being able to kind of, like, iteratively build it. The thing that I always do when I create a model is I do, like, the initial command. I'll set up and go here. I'll go ahead and after I kind of set up the buttons, I'll put the functions behind them back here in the interface. (interviewer's observation) E04 creates the code skeleton before asking ChatGPT. He has a clear idea & established process of building ABMs.
- E01: I don't want chat GPT to write 27 operations in one line and show how brilliant it is. I wanted to separate out the code and, and it did a good job of not only did it write the code, but it commented the code. And then in addition to commenting the code externally, it did documentation. (interviewer's observation) ChatGPT tends to provide comments and documentation. Generated code is easy to read.
- E04: It's basically following best practices. It is not trying to ruthlessly create a model. (interviewer's observation) Not "ruthlessly create a model".

8.
Label: demonstrating expert ai use
Quotes:
- E01: I've observed when I tried to suggest ChatGPT to other people, they're, um, they are amazed at the output that I can get. And that's because I know how to ask six questions in a row to zero in on what I'm after. (interviewer's observation) To maximize the capability of ChatGPT, one needs to know how to iteratively ask questions.

9.
Label: self reliant in fixing errors
Quotes:
- E04: (no verbal response) (interviewer's observation) E04 reads through the code and tries to debug with himself when the generated code does not do what it does.

10.
Label: ai limitations in reading long code pieces
Quotes:
- E01: It's about, let's see, what did I count is 3800 lines of code. Well, first I couldn't feed it all the ChatGPT can only take it 1800 lines at a time. And then I said, you know, can you tell me what this does? And it basically said, no. ... I can live with that again. (interviewer's observation) ChatGPT's limitation on reading long code pieces.

11.
Label: using ai as a reference
Quotes:
- E04: I just like being able to kind of, like, iteratively build it. The thing that I always do when I create a model is I do, like, the initial command. I'll set up and go here. I'll go ahead and after I kind of set up the buttons, I'll put the functions behind them back here in the interface. (interviewer's observation) E04 creates the code skeleton before asking ChatGPT. He has a clear idea & established process of building ABMs.
- E04: Because I'll like forget the syntax sometimes and I usually use the netlogo dictionary and just have it like open to the side. (interviewer's observation) E04 still forgets about the syntax and ChatGPT can help.

12.
Label: missing code structures at times
Quotes:
- E04: It doesn't... Include everything that you need.  (interviewer's observation) Misses code structures at times.

13.
Label: ai assisted feedback
Quotes:
- E01: And I posted that into chat GPT and it analyzed it in 10 seconds and said, well, it does this, this, and this, and here, these eight things are wrong. (interviewer's observation) ChatGPT could be used to provide timely feedback.

14.
Label: considering the impact of phraseology on ai responses
Quotes:
- E04: "I want to create a simple perception" (interviewer's observation) Thinks a bit about whether to use "in NetLogo" or not.

15.
Label: familiar with multiple software languages
Quotes:
- E01: I started programming in 1964 at IBM. ... And since then I have programmed in production code in at least 20 different software languages. (interviewer's observation) E01's prior experiences in computer programming in general.

16.
Label: switching to familiar models
Quotes:
- E04: So that's interesting anyways, I'm going back to Perceptron. (interviewer's observation) E04 gives up immediately after the AI asks the same question again.

17.
Label: asking the interviewer to scroll slowly so he could read in detail
Quotes:
- E01: "Also a good idea because we did not ask it to do that." (interviewer's observation) E01 reads and evaluates the ChatGPT code. Asks Interviewer to scroll slowly so he could read in detail.

18.
Label: e04 praises better ai troubleshooting capabilities
Quotes:
- E04: It was really nice that it, like with the troubleshooting errors, for example, like at least in principle, I know that we had this one that we couldn't fix. It seemed like it was able to kind of do some better troubleshooting to a certain extent. (interviewer's observation) Better troubleshooting capability.

19.
Label: desiring fine tuned expert oriented design
Quotes:
- E04: Part of the issue that I'm having now is just kind of like the learning curve, just trying to figure out how everything works. (interviewer's observation) E04 mentions a learning curve, likely because our current design is not fine-tuned for experts.

20.
Label: uses ai for net logo
Quotes:
- E04: I've found that AI is really helpful for like, translating other models from other languages into NetLogo, for example. (interviewer's observation) Helpful for translating from other languages into NetLogo

21.
Label: highlights risks for novices
Quotes:
- E04: To me, it seems like you need to have a certain degree of expertise to understand where the errors are and how to fix them. Because otherwise it's like you're going down this path where you're blindly following the ChatGPT and you have no idea what's going on. For less experienced people, I wouldn't like that because it could put you in a worse situation. (interviewer's observation) Requires expertise to understand errors and debug them. Risks to blindly follow ChatGPT, esp. for less experienced people.

22.
Label: requests to repeat the task for further evaluation of chat gpt's responses
Quotes:
- E01: "I would like to write code to have a turtle run slowly around the perimeter of a square, but the square should go larger each time it goes around in NetLogo." (interviewer's observation) Interviewer proposes to try ChatGPT with the same prompt.

23.
Label: suggesting incremental error feedback for novice users
Quotes:
- E01: So I would find it more helpful if it asked the questions one at a time. Before you tell me nine more errors. Just because users are always overfilling their buffer. So smaller requests work better. (interviewer's observation) E01 suggests (for novice) only showing one error at a time in the AI-driven system.

24.
Label: writes code in older net logo versions
Quotes:
- E04: I guess, in their databases, they still have like, NetLogo 5 in there and stuff. So like, for example, you know, the anonymous functions, they still use like, the old, sometimes I'll get like, the old functionality for the anonymous functions. (interviewer's observation) Writing code in older versions of NetLogo

25.
Label: acknowledging the usefulness of ai in addressing syntax issues
Quotes:
- E04: Because I'll like forget the syntax sometimes and I usually use the netlogo dictionary and just have it like open to the side. (interviewer's observation) E04 still forgets about the syntax and ChatGPT can help.

26.
Label: learning
Quotes:
- E01: This is what conversations with ChatGPT typically look like. I had to go through about eight separate times to get all the errors out of it.  But, but look at how it structured the code. Look at the things that did look what you could learn from this. This is valuable. (interviewer's observation) Users may benefit from the iterative debugging process during working with AI, even though AI might give wrong answers.
- E04: So one thing I'm realizing now, part of my setup needs to be reset all. (interviewer's observation) E04 sees from the generated code and realizes that he needs to reset.

27.
Label: describes conversational approach
Quotes:
- E01: I speak to (ChatGPT) like a person. I could just walk in the room and go write me code that does X, but I don't, I start with good morning. And it comes back, but it comes back with good morning. How can I assist you today? It's pretty good at figuring out natural language. So in some sense that you might just be better off, just pretend it's not a computer. (interviewer's observation) E01 reflects on how he interacts with ChatGPT like a person.

28.
Label: encouraging help seeking behavior
Quotes:
- E01: What you have in America is this, this cult of individualism to a point of obsession. And people don't naturally stop and go, how can I get help with this? (interviewer's observation) Continued: reflection on the individualism.

29.
Label: initially confused about ai capabilities
Quotes:
- E04: So if I can talk to it in NetLogo, does that mean I could give it in the logo command and then it would like turn that into code on the backend or? (interviewer's observation) Initial confusion over what the system could do.

30.
Label: rapid ai advancements
Quotes:
- E01: It's like, I could hire an intern to like do this, or I could have chat GPT do it much faster for free. And, and, and even if chat GPT doesn't do it today, I bet six months from now, it would do it. (interviewer's observation) ChatGPT is free and advances fast.

31.
Label: refines the task details based on ai's responses
Quotes:
- E01: "I would like to write code to have a turtle run slowly around the perimeter of a square, but the square should go larger each time it goes around." (interviewer's observation) Seeing AI's counter question, E01 makes his request more detailed.

32.
Label: identifying gap in knowledge transfer
Quotes:
- E01: So my observation is that a critical, critical 10%, maybe more, maybe a lot more of knowledge that you need to do your job in software is only contained in oral tradition. It's, it is not documented anywhere.  (interviewer's observation) E01's reflection on knowledge in pieces - how they are generated and sustained.
===
Here are the definitions for each code:

1.
Criteria: Expecting AI to find relevant models from the library based on user input.
Label: Expecting AI-driven search functionality.

2.
Criteria: AI saves time for learning new extensions by providing relevant information.
Label: Time-saving potential of AI in learning extensions.

3.
Criteria: Need for system support to remind users of their progress and provide fragmented learning support.
Label: Need for system support for fragmented learning.

4.
Criteria: Novices face challenges when seeking help due to lack of background information.
Label: Challenges in seeking help for novices.

5.
Criteria: AI support is needed to understand variable contexts in code, specifically scope.
Label: Need for AI support in understanding code scope.

6.
Criteria: AI may provide hallucinated or incorrect information.
Label: AI hallucinations.

7.
Criteria: Users engage in iterative building and testing of models with AI support.
Label: Iterative model building with AI.

8.
Criteria: Expert users demonstrate effective use of AI by asking targeted questions.
Label: Expert AI use.

9.
Criteria: Users are self-reliant in fixing errors and debugging code.
Label: Self-reliance in error fixing.

10.
Criteria: AI has limitations in reading and processing long code pieces.
Label: AI limitations in code processing.

11.
Criteria: AI is used as a reference to check syntax and functionality.
Label: AI as a reference.

12.
Criteria: AI may miss code structures at times, requiring user intervention.
Label: Missing code structures.

13.
Criteria: AI provides timely feedback on code errors and functionality.
Label: AI-assisted feedback.

14.
Criteria: Users consider the impact of phraseology on AI responses.
Label: Considering phraseology impact.

15.
Criteria: Users are familiar with multiple software languages and programming concepts.
Label: Familiarity with multiple programming languages.

16.
Criteria: Users switch to familiar models or approaches when faced with difficulties.
Label: Switching to familiar models.

17.
Criteria: Users carefully evaluate and read AI-generated code in detail.
Label: Detailed code evaluation.

18.
Criteria: AI is praised for its better troubleshooting capabilities.
Label: AI troubleshooting capabilities.

19.
Criteria: Users desire fine-tuned, expert-oriented design for AI-driven interfaces.
Label: Need for expert-oriented design.

20.
Criteria: AI is used to translate models from other languages into NetLogo.
Label: AI-assisted model translation.

21.
Criteria: Users highlight risks for novices in blindly following AI-generated code.
Label: Risks for novices.

22.
Criteria: Users request to repeat tasks to evaluate AI responses further.
Label: Request for repeated evaluation.

23.
Criteria: Users suggest incremental error feedback for novice users.
Label: Incremental error feedback.

24.
Criteria: Users write code in older NetLogo versions, requiring adaptation to new syntax.
Label: Writing code in older NetLogo versions.

25.
Criteria: AI is acknowledged as useful in addressing syntax issues.
Label: AI assistance with syntax.

26.
Criteria: Users learn from iterative debugging processes with AI.
Label: Learning from AI-driven debugging.

27.
Criteria: Users describe a conversational approach to interacting with AI.
Label: Conversational AI interaction.

28.
Criteria: Users encourage help-seeking behavior and collaboration.
Label: Encouraging help-seeking behavior.

29.
Criteria: Users are initially confused about AI capabilities and limitations.
Label: Initial confusion about AI capabilities.

30.
Criteria: Users acknowledge rapid advancements in AI capabilities.
Label: Rapid AI advancements.

31.
Criteria: Users refine task details based on AI responses and feedback.
Label: Refining task details.

32.
Criteria: Users identify gaps in knowledge transfer and oral tradition.
Label: Gap in knowledge transfer.