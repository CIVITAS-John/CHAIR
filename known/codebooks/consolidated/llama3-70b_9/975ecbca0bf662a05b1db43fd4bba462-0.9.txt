You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (16 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
16. 
Concepts: {Repeat the input 16}
Relationship: {What is logical relationship between concepts in code 16, or N/A if not applicable}
Criteria: {Who did what, and how for code 16}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: considering accessibility, consider user accessibility
- The designer considers accessibility in software development.
- A designer considers user accessibility by suggesting a feature that caters to users' needs.

2.
Concepts: designer consideration, show consideration
- Designer 1 shows consideration or empathy towards users.
- Designer shows consideration or empathy towards users, acknowledging their concerns or needs.

3.
Concepts: broader implications, considering broader implications
- Designer questions the broader implications of an issue.
- Designer considers broader implications of software design.

4.
Concepts: show understanding, demonstrating understanding
- A designer or community member shows understanding or acknowledgement of a concern or idea.
- A designer demonstrates understanding of a specific concept or issue.
- A user shows understanding or agreement with a concept or idea.

5.
Concepts: reflective thinking, contemplation expression
- A designer engages in reflective thinking or consideration.
- A designer expresses contemplation or thoughtfulness.

6.
Concepts: consideration of local export, recognized need for local export
- The designer considers local export functionality.
- Designer recognizes the need for local export or offline capabilities.

7.
Concepts: consider technical requirements, practical constraint consideration
- A designer considers technical requirements or limitations.
- A designer considers practical constraints or limitations.

8.
Concepts: explaining software functionality, explain bidirectional conversion benefits, explaining bidirectional conversion
- The designer explains a feature of bidirectional conversion.
- Designer explains benefits of bidirectional conversion
- A designer explains the concept or functionality of bidirectional conversion.

9.
Concepts: clarify user interactions, clarifies touch screen functionality
- Designer explains how users can interact with specific features or components.
- A designer clarifies how a feature or functionality works, especially in relation to touch screens.

10.
Concepts: clarifying software features, clarify software capabilities
- The designer clarifies a feature.
- The designer clarifies software capabilities or features.

11.
Concepts: clarify purpose, clarify functionality
- A designer clarifies the purpose or functionality of a feature.
- Designer clarifies how a feature or component works.

12.
Concepts: enhancing user experience, clarifying user experience
- The designer enhances user experience with clarity.
- Enhancing user experience through design improvements.
- A designer clarifies or explains a user's experience.

13.
Concepts: guide user understanding, enhancing user understanding, facilitating user understanding
- A designer guides users in understanding updated resources or features.
- Designer enhances user understanding through additional explanations.
- Designer facilitates user understanding through explanations or instructions.

14.
Concepts: explaining existing features, informing about existing features
- Designer explains existing features or functionality.
- Designers inform about existing features.

15.
Concepts: explaining design benefits, emphasize utility of features
- Explaining the benefits or advantages of a design or feature.
- The designer highlights the benefits or advantages of a feature.

16.
Concepts: feature significance, feature importance explanation
- Explaining the importance or benefits of a feature or functionality.
- A designer explains the importance or rationale behind a specific software feature.
===
Here are the definitions for each code:

---
1.
Concepts: considering accessibility, consider user accessibility
Relationship: The concepts are related in that considering accessibility implies taking into account the needs of users.
Criteria: Designers consider users' needs to ensure accessibility in software development.
Phrase: Consider user accessibility.

2.
Concepts: designer consideration, show consideration
Relationship: The concepts are related in that showing consideration implies empathy towards users, which is a key aspect of consideration.
Criteria: Designers show empathy towards users by acknowledging their concerns or needs.
Phrase: Show consideration.

3.
Concepts: broader implications, considering broader implications
Relationship: The concepts are related in that considering broader implications implies thinking beyond the immediate issue.
Criteria: Designers question and consider the broader implications of an issue in software design.
Phrase: Consider broader implications.

4.
Concepts: show understanding, demonstrating understanding
Relationship: The concepts are related in that showing understanding implies acknowledgement or agreement with a concern or idea.
Criteria: Designers, community members, or users demonstrate understanding of a concept or issue.
Phrase: Demonstrate understanding.

5.
Concepts: reflective thinking, contemplation expression
Relationship: The concepts are related in that reflective thinking implies a thoughtful and contemplative approach.
Criteria: Designers engage in reflective thinking or express contemplation or thoughtfulness.
Phrase: Engage in reflective thinking.

6.
Concepts: consideration of local export, recognized need for local export
Relationship: The concepts are related in that recognizing the need for local export implies considering its functionality.
Criteria: Designers consider and recognize the need for local export or offline capabilities.
Phrase: Consider local export.

7.
Concepts: consider technical requirements, practical constraint consideration
Relationship: The concepts are related in that considering technical requirements implies taking into account practical constraints.
Criteria: Designers consider technical requirements and practical constraints in software design.
Phrase: Consider technical requirements.

8.
Concepts: explaining software functionality, explain bidirectional conversion benefits, explaining bidirectional conversion
Relationship: The concepts are related in that explaining software functionality implies explaining its benefits and features.
Criteria: Designers explain software functionality, including bidirectional conversion benefits.
Phrase: Explain software functionality.

9.
Concepts: clarify user interactions, clarifies touch screen functionality
Relationship: The concepts are related in that clarifying user interactions implies explaining how users can interact with specific features.
Criteria: Designers clarify user interactions and explain how features or components work.
Phrase: Clarify user interactions.

10.
Concepts: clarifying software features, clarify software capabilities
Relationship: The concepts are related in that clarifying software features implies explaining software capabilities.
Criteria: Designers clarify software features and capabilities.
Phrase: Clarify software features.

11.
Concepts: clarify purpose, clarify functionality
Relationship: The concepts are related in that clarifying purpose implies explaining how a feature or component works.
Criteria: Designers clarify the purpose and functionality of features or components.
Phrase: Clarify functionality.

12.
Concepts: enhancing user experience, clarifying user experience
Relationship: The concepts are related in that enhancing user experience implies clarifying how a feature or component works.
Criteria: Designers enhance user experience by clarifying software features and functionality.
Phrase: Enhance user experience.

13.
Concepts: guide user understanding, enhancing user understanding, facilitating user understanding
Relationship: The concepts are related in that guiding user understanding implies enhancing and facilitating understanding through explanations.
Criteria: Designers guide users by enhancing and facilitating their understanding of updated resources or features.
Phrase: Guide user understanding.

14.
Concepts: explaining existing features, informing about existing features
Relationship: The concepts are related in that explaining existing features implies informing users about them.
Criteria: Designers explain and inform about existing software features.
Phrase: Explain existing features.

15.
Concepts: explaining design benefits, emphasize utility of features
Relationship: The concepts are related in that explaining design benefits implies emphasizing the utility of features.
Criteria: Designers explain and emphasize the benefits or advantages of design or features.
Phrase: Emphasize utility of features.

16.
Concepts: feature significance, feature importance explanation
Relationship: The concepts are related in that explaining feature significance implies explaining its importance or rationale.
Criteria: Designers explain the importance or rationale behind specific software features.
Phrase: Explain feature significance.