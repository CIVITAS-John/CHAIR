You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (21 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
21. 
Concepts: {Repeat the input 21}
Relationship: {What is logical relationship between concepts in code 21, or N/A if not applicable}
Criteria: {Who did what, and how for code 21}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: promote development transparency, transparent developer discussion
- The designer communicates transparency about the development process to the community.
- The designer engages in transparent discussions about the application's functionality and user experiences.

2.
Concepts: discuss feature usability, discuss design and input functionality
- Designers discuss various aspects of feature development and usability issues related to the software design and future features.
- Designers discuss the visual and functional aspects of the software and input methods.

3.
Concepts: discuss future planning and direction, explore future development interests
- Designers discuss ongoing development efforts and express personal interests aligning with community needs.
- Designers discuss potential interests or future topics for exploration and share plans regarding product development and features.

4.
Concepts: engage in collaborative problem solving, offer and share potential solutions
- Moments where designers and users work together to address issues.
- Designers offer and share solutions for compatibility issues and user experience enhancements.

5.
Concepts: ask design questions and respond, encourage user questions and communication
- Designers pose questions while users provide information about design specifications.
- Designers encourage users to ask questions and promote open communication.

6.
Concepts: set development timelines, communicate development progress
- The designer shares timelines and expectations for future software releases.
- The designer provides updates on the progress and timelines for software releases.

7.
Concepts: commit to providing a solution, cater to user needs and consider solutions
- Designers commit to addressing user needs and providing necessary solutions.
- Designers suggest solutions that meet multiple user needs in their design considerations.

8.
Concepts: design decision, provide rationale for decisions
- A designer makes a decision regarding the approach to software development.
- Designers provide rationale for decisions regarding software features and development.

9.
Concepts: explain current focus, outline development priorities and tasks
- The designer explains the current priorities or focus areas in the development of the application.
- Designers establish priorities for feature development while outlining potential future tasks.

10.
Concepts: elaborate on suggestions, elaborate on feature complexity
- Designer elaborates on a previous experience to clarify a feature's functionality.
- A designer elaborates on responses by explaining the complexity of tasks and setting expectations.

11.
Concepts: explain feature functionality, clarify technical details
- Designers explain the functionality of various features and their operational capabilities.
- Designers share technical details about component features and clarify technical aspects related to software functionality.

12.
Concepts: request clarification, inquire about platform version and clarify details
- The designer seeks clarification on specific details related to the software's functionality.
- Users specify platform versions while designers clarify software version details.

13.
Concepts: discuss team and technical limitations, explain software and platform limitations
- Designers discuss limitations faced by the development team and potential solutions.
- Designers explain specific technical limitations of the software and platform compatibility issues.

14.
Concepts: inquire about needs, gather user input and context
- Designers inquire about the needs and preferences of educators within the community to inform software development.
- Designers gather user input on educational standards and context about their teaching situations.

15.
Concepts: engage in software development, anticipate updates and respond to information
- A user inquires about upcoming updates, demonstrating engagement and interest in the development process.
- Users express eagerness for updates based on earlier information provided by developers.

16.
Concepts: physics concepts, request new features
- Users request specific physics concepts or demonstrations to be included.
- Users request new features or improvements for the Physics Lab tool, particularly related to physics experiments.

17.
Concepts: suggest and request new features, suggest educational enhancements
- Users suggest specific tools and additional features to improve functionality.
- Users suggest features that would improve the application's usability in educational settings, enhancing functionality for educational purposes.

18.
Concepts: articulate needs, specify and justify feature requests
- Users articulate their needs related to the application's functionality or documentation, reflecting both user and community needs.
- Users make specific requests for features and provide reasoning based on experience.

19.
Concepts: acknowledge community support, welcome and greet the community
- A designer reciprocates a greeting to the community.
- Designers greet users and foster a friendly community atmosphere.

20.
Concepts: inquire for clarity and seek clarification, ask clarifying questions and pose inquiries
- Users ask questions to seek information or clarification on various issues.
- Users initiate interactions by asking clarifying questions about features.

21.
Concepts: confirm information receipt, confirm understanding and acknowledgment
- Users acknowledge receipt of information or resources provided and confirm the availability of shared files.
- Users and designers confirm understanding and acknowledge provided information.
===
---
Definitions for each code (21 in total):
1.
Concepts: promote development transparency, transparent developer discussion
Relationship: The designer's communication of transparency is directly related to the nature of the discussions that occur within the community.
Criteria: The designer communicates transparently about the development process and engages in discussions regarding application functionality and user experiences.
Phrase: Communicate development transparency.

2.
Concepts: discuss feature usability, discuss design and input functionality
Relationship: The discussions about feature usability inherently include considerations of design and input functionality.
Criteria: Designers discuss usability issues and visual aspects of software design and input methods.
Phrase: Discuss feature usability.

3.
Concepts: discuss future planning and direction, explore future development interests
Relationship: Ongoing discussions about future planning inform the exploration of development interests within the community.
Criteria: Designers discuss ongoing development efforts and share their interests aligned with community needs.
Phrase: Discuss future planning.

4.
Concepts: engage in collaborative problem solving, offer and share potential solutions
Relationship: Collaborative problem solving naturally involves the sharing of potential solutions among designers and users.
Criteria: Designers and users work together to address issues and share solutions for enhancements.
Phrase: Engage in collaborative problem solving.

5.
Concepts: ask design questions and respond, encourage user questions and communication
Relationship: The act of asking design questions fosters an environment that encourages user questions and open communication.
Criteria: Designers pose questions while encouraging users to provide information and ask questions.
Phrase: Encourage user communication.

6.
Concepts: set development timelines, communicate development progress
Relationship: Setting timelines is a proactive approach that is complemented by ongoing communication of progress.
Criteria: The designer shares timelines and provides updates on software release progress.
Phrase: Communicate development timelines.

7.
Concepts: commit to providing a solution, cater to user needs and consider solutions
Relationship: A commitment to solutions is driven by the consideration of user needs.
Criteria: Designers commit to addressing user needs and suggest solutions that cater to those needs.
Phrase: Commit to user solutions.

8.
Concepts: design decision, provide rationale for decisions
Relationship: Design decisions are often accompanied by a rationale that explains the reasoning behind them.
Criteria: A designer makes decisions regarding software development and provides rationale for those decisions.
Phrase: Provide rationale for design decisions.

9.
Concepts: explain current focus, outline development priorities and tasks
Relationship: Explaining the current focus helps to outline the priorities and tasks for development.
Criteria: The designer explains current priorities and outlines potential future tasks in application development.
Phrase: Outline development priorities.

10.
Concepts: elaborate on suggestions, elaborate on feature complexity
Relationship: Elaborating on suggestions often requires an explanation of feature complexity to set expectations.
Criteria: Designer elaborates on suggestions and clarifies the complexity of tasks related to features.
Phrase: Elaborate on feature complexity.

11.
Concepts: explain feature functionality, clarify technical details
Relationship: Explaining functionality is essential for clarifying technical details about features.
Criteria: Designers explain the functionality of features and share technical details regarding their operation.
Phrase: Clarify feature functionality.

12.
Concepts: request clarification, inquire about platform version and clarify details
Relationship: Requesting clarification is a necessary step in inquiring about specific software details.
Criteria: The designer seeks clarification on details while users specify platform versions and clarify software version details.
Phrase: Request clarification.

13.
Concepts: discuss team and technical limitations, explain software and platform limitations
Relationship: Discussions about team limitations are closely tied to the explanation of technical limitations faced in software development.
Criteria: Designers discuss limitations faced by the team and explain technical limitations of the software.
Phrase: Discuss technical limitations.

14.
Concepts: inquire about needs, gather user input and context
Relationship: Inquiring about needs is a method of gathering user input and understanding the context for software development.
Criteria: Designers inquire about the needs of educators and gather user input on educational standards.
Phrase: Gather user input.

15.
Concepts: engage in software development, anticipate updates and respond to information
Relationship: Engagement in software development is reflected in users' anticipation of updates and responses to information.
Criteria: Users inquire about updates, demonstrating engagement and interest in the development process.
Phrase: Engage in software development.

16.
Concepts: physics concepts, request new features
Relationship: Requests for new features often relate to specific physics concepts that users want to see included.
Criteria: Users request specific physics concepts or new features for the Physics Lab tool.
Phrase: Request new features.

17.
Concepts: suggest and request new features, suggest educational enhancements
Relationship: Suggesting new features is linked to the broader goal of enhancing educational functionality.
Criteria: Users suggest tools and features that improve usability in educational settings.
Phrase: Suggest educational enhancements.

18.
Concepts: articulate needs, specify and justify feature requests
Relationship: Articulating needs provides the foundation for specifying and justifying feature requests.
Criteria: Users articulate their needs and make specific requests for features with reasoning.
Phrase: Specify feature requests.

19.
Concepts: acknowledge community support, welcome and greet the community
Relationship: Acknowledging community support fosters a welcoming environment and encourages interaction.
Criteria: A designer greets the community and fosters a friendly atmosphere.
Phrase: Welcome the community.

20.
Concepts: inquire for clarity and seek clarification, ask clarifying questions and pose inquiries
Relationship: Inquiring for clarity is directly related to the act of asking clarifying questions.
Criteria: Users ask questions to seek information or clarification on various issues.
Phrase: Ask clarifying questions.

21.
Concepts: confirm information receipt, confirm understanding and acknowledgment
Relationship: Confirming receipt of information is related to confirming understanding and acknowledgment of that information.
Criteria: Users acknowledge receipt of information and confirm understanding of provided resources.
Phrase: Confirm information receipt.
---