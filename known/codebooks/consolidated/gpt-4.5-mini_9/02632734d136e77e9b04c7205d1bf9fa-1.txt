You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (18 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
18. 
Concepts: {Repeat the input 18}
Relationship: {What is logical relationship between concepts in code 18, or N/A if not applicable}
Criteria: {Who did what, and how for code 18}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: sharing feature development updates, designers mention ongoing research
- Designers share updates on ongoing research about software features.
- Designers discuss active research efforts aimed at enhancing software functionality.

2.
Concepts: share version details, explaining version details
- A designer shares detailed information about features in a specific version update.
- Designers identify and explain specific app versions being discussed.

3.
Concepts: notifying about updates, announcing community updates
- Designers inform the community about upcoming component functionalities.
- Designers inform the community about software updates and future plans.

4.
Concepts: sharing update timelines, providing progress updates
- Designers provide timelines for updates and releases.
- Designers share timelines regarding software updates and improvements.

5.
Concepts: seeking user feedback, designers gather user feedback
- Designers actively seek and respond to user feedback on implementations.
- Designers actively seek insights on user experiences with the software.

6.
Concepts: designers appreciate feedback, designers align with user feedback
- Designers express appreciation for user contributions while inviting more feedback.
- Designers succinctly acknowledge and accept user feedback while outlining improvements.

7.
Concepts: making requests, requesting specific features
- Instances where users requested enhancements or new features to improve the software.
- Users articulate specific features needed within the software.

8.
Concepts: request additional experiments, users request features for experiments
- Users request the addition of specific experimental features or functionalities for future software versions.
- Users suggest improvements or requests for features related to Physics Lab tools.

9.
Concepts: feature adjustment, proposing design refinements
- Designer indicates a need for adjustments to existing software features.
- Designers propose enhancements to existing software features.

10.
Concepts: designers seek community input, cultivating community participation
- Designers collect ideas or suggestions from the community for upcoming projects.
- Designers promote interaction and feedback from the community.

11.
Concepts: confirming understanding, express comprehension
- Designers acknowledge and seek clarity on user input.
- The designer displays understanding and empathy towards user needs by requesting further clarification.

12.
Concepts: clarify existing feature, providing clarification on updates
- Designers clarify existing features of the software to address user inquiries or confusions.
- Designers clarify software version details and address users' questions.

13.
Concepts: comparing software usability, evaluating software satisfaction
- Users compare software functionalities and user experiences.
- Users express satisfaction based on the software's usability.

14.
Concepts: community building, greeting community members
- A user or designer expresses gratitude or demonstrates social interaction within the community.
- Users and designers exchange greetings to promote a welcoming atmosphere.

15.
Concepts: use non verbal communication, expressing emotions with emojis
- Use of emojis or other non-verbal forms of communication by users.
- Users express feelings through emojis in conversations.

16.
Concepts: sharing user backgrounds, professional background sharing
- Users provide information about their professional or personal background.
- Users share their professional background to establish credibility and context.

17.
Concepts: requesting guidance, seeking usage support
- Users sought guidance on utilizing the software effectively.
- Users express need for help regarding software usage.

18.
Concepts: seek guidance, requesting documentation
- User inquires about the availability of a user manual for assistance.
- Users request manuals to navigate and utilize the software effectively.
===
---
Definitions for each code (18 in total):

1.  
Concepts: sharing feature development updates, designers mention ongoing research  
Relationship: Designers communicate about their current work and research progress on features.  
Criteria: Designers share updates about ongoing research related to software functionality with the community.  
Phrase: Communicate feature research.  

2.  
Concepts: share version details, explaining version details  
Relationship: Sharing information complements the explanation of specific software versions.  
Criteria: Designers provide and explain details about particular version updates within the community.  
Phrase: Explain version specifics.  

3.  
Concepts: notifying about updates, announcing community updates  
Relationship: Notifications and announcements serve to keep the community informed about updates.  
Criteria: Designers inform the community of upcoming functionalities and software updates.  
Phrase: Inform about updates.  

4.  
Concepts: sharing update timelines, providing progress updates  
Relationship: Timelines and progress updates provide insight into the software update process.  
Criteria: Designers share schedules and timelines for software updates and releases with the community.  
Phrase: Provide update timelines.  

5.  
Concepts: seeking user feedback, designers gather user feedback  
Relationship: Seeking and gathering feedback are interrelated actions in user engagement.  
Criteria: Designers actively solicit and collect user feedback to understand their experiences with the software.  
Phrase: Gather user feedback.  

6.  
Concepts: designers appreciate feedback, designers align with user feedback  
Relationship: Appreciation and alignment indicate a responsive approach to user contributions.  
Criteria: Designers express gratitude for user feedback and align future improvements based on their input.  
Phrase: Acknowledge user feedback.  

7.  
Concepts: making requests, requesting specific features  
Relationship: User requests are central to enhancing software functionality.  
Criteria: Users articulate specific feature enhancements or improvements needed within the software.  
Phrase: Request software features.  

8.  
Concepts: request additional experiments, users request features for experiments  
Relationship: Requests for experimental features showcase user interest in software improvements.  
Criteria: Users propose and request specific features for future software experiments.  
Phrase: Suggest experimental features.  

9.  
Concepts: feature adjustment, proposing design refinements  
Relationship: Adjustments and refinements highlight the ongoing development of software features.  
Criteria: Designers propose adjustments to existing software features for improvement.  
Phrase: Propose feature adjustments.  

10.  
Concepts: designers seek community input, cultivating community participation  
Relationship: Seeking input fosters active participation from the community.  
Criteria: Designers collect suggestions and ideas from the community to support collaborative projects.  
Phrase: Cultivate community input.  

11.  
Concepts: confirming understanding, express comprehension  
Relationship: Acknowledgment and comprehension enhance communication between designers and users.  
Criteria: Designers confirm their understanding of user input by asking for clarification where needed.  
Phrase: Confirm user understanding.  

12.  
Concepts: clarify existing feature, providing clarification on updates  
Relationship: Clarification helps address user confusion regarding software features.  
Criteria: Designers explain existing software features and updates to resolve user inquiries.  
Phrase: Clarify software features.  

13.  
Concepts: comparing software usability, evaluating software satisfaction  
Relationship: Comparison and evaluation indicate users are assessing their experiences with the software.  
Criteria: Users evaluate software functionalities and express their satisfaction based on usability.  
Phrase: Assess software experiences.  

14.  
Concepts: community building, greeting community members  
Relationship: Greeting members promotes a positive and inclusive community atmosphere.  
Criteria: Users and designers engage in social interactions to foster a welcoming community environment.  
Phrase: Build community connections.  

15.  
Concepts: use non verbal communication, expressing emotions with emojis  
Relationship: Non-verbal communication, such as emojis, conveys emotional expressions effectively.  
Criteria: Users utilize emojis to express feelings during conversations in the community.  
Phrase: Express emotions non-verbally.  

16.  
Concepts: sharing user backgrounds, professional background sharing  
Relationship: Sharing backgrounds provides context and credibility within the community.  
Criteria: Users share personal and professional backgrounds to establish rapport and enhance interactions.  
Phrase: Share user backgrounds.  

17.  
Concepts: requesting guidance, seeking usage support  
Relationship: Requests for guidance are common when users need support with software usage.  
Criteria: Users seek help and guidance on how to effectively utilize the software.  
Phrase: Seek software guidance.  

18.  
Concepts: seek guidance, requesting documentation  
Relationship: Seeking guidance and requesting documentation show users' lack of familiarity with software features.  
Criteria: Users inquire about available manuals to assist them in navigating the software effectively.  
Phrase: Request usage documentation.  
---