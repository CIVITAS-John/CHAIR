You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (10 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
10. 
Concepts: {Repeat the input 10}
Relationship: {What is logical relationship between concepts in code 10, or N/A if not applicable}
Criteria: {Who did what, and how for code 10}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: plan new features, introducing new features
- Designer plans or proposes new functions or features for the product.
- Designers introduce new features or functionalities.

2.
Concepts: explains software features, demonstrates software capabilities
- Designer explains features or functionalities.
- Designer demonstrates or explains software capabilities.

3.
Concepts: provides software information, providing download information
- Designer provides direct information about software availability or access.
- A designer provides information on where to download a software or feature and informs users about the availability of a download or resource.

4.
Concepts: supporting effective usage, providing practical advice
- The designer provides guidance to support users in using the software effectively.
- Designers offer practical advice or tips to users to help them use the software effectively.

5.
Concepts: clarifying user interactions, facilitates user understanding
- Designer clarifies user interactions to facilitate understanding.
- Designer promotes user understanding through explanations.

6.
Concepts: clarify platform specifics, inquiring about the platform
- User inquires about platform-specific details.
- User asks about the platform or version to clarify compatibility or functionality.

7.
Concepts: confirming compatibility, providing compatibility information
- A designer confirms the compatibility of the software with specific systems or devices.
- Designers provide information or answers about the software's compatibility with different systems or devices.

8.
Concepts: describing technical constraints, highlighting technical limitations
- Users reference technical constraints or limitations.
- Explaining or highlighting technical limitations.

9.
Concepts: acknowledging limitations, acknowledging team limitations
- Designers acknowledge potential issues or limitations with the software.
- A designer acknowledges limitations or constraints of the team.

10.
Concepts: explaining limitations, clarifying software limitations, clarifying design limitations
- Designers explain limitations or constraints.
- Designers explain or clarify limitations of the software or project.
- Clarification of limitations or constraints of the current design or testing.
===
Here are the definitions for each code:

---
1.
Concepts: plan new features, introducing new features
Relationship: The concepts are related as planning new features leads to introducing them.
Criteria: Designers plan and introduce new features for the product.
Phrase: Introduce new features.

2.
Concepts: explains software features, demonstrates software capabilities
Relationship: The concepts are related as explaining features and demonstrating capabilities are ways to showcase software functionality.
Criteria: Designers explain and demonstrate software features and capabilities.
Phrase: Demonstrate software features.

3.
Concepts: provides software information, providing download information
Relationship: The concepts are related as providing software information includes providing download information.
Criteria: Designers provide software information, including download details.
Phrase: Provide software information.

4.
Concepts: supporting effective usage, providing practical advice
Relationship: The concepts are related as providing practical advice is a way to support effective usage.
Criteria: Designers provide guidance and practical advice to support effective software usage.
Phrase: Offer practical advice.

5.
Concepts: clarifying user interactions, facilitates user understanding
Relationship: The concepts are related as clarifying user interactions leads to facilitating user understanding.
Criteria: Designers clarify user interactions to facilitate understanding.
Phrase: Clarify user interactions.

6.
Concepts: clarify platform specifics, inquiring about the platform
Relationship: The concepts are related as users inquire about platform specifics to clarify compatibility or functionality.
Criteria: Users ask about platform specifics to clarify compatibility or functionality.
Phrase: Inquire about the platform.

7.
Concepts: confirming compatibility, providing compatibility information
Relationship: The concepts are related as confirming compatibility involves providing relevant information.
Criteria: Designers confirm and provide information about software compatibility.
Phrase: Confirm compatibility.

8.
Concepts: describing technical constraints, highlighting technical limitations
Relationship: The concepts are related as describing technical constraints involves highlighting limitations.
Criteria: Users describe and highlight technical constraints or limitations.
Phrase: Highlight technical limitations.

9.
Concepts: acknowledging limitations, acknowledging team limitations
Relationship: The concepts are related as acknowledging limitations includes acknowledging team limitations.
Criteria: Designers acknowledge limitations, including those of the team.
Phrase: Acknowledge limitations.

10.
Concepts: explaining limitations, clarifying software limitations, clarifying design limitations
Relationship: The concepts are related as explaining limitations involves clarifying software and design limitations.
Criteria: Designers explain and clarify limitations of the software, project, or design.
Phrase: Explain limitations.

Let me know if you need any further assistance!