You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (22 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
22. 
Concepts: {Repeat the input 22}
Relationship: {What is logical relationship between concepts in code 22, or N/A if not applicable}
Criteria: {Who did what, and how for code 22}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: infrastructure inquiry, inquiring about internet access
- A designer inquires about the infrastructure or technical capabilities.
- Designers inquire about internet access or connectivity for users to understand constraints.

2.
Concepts: listing feature updates, listing planned features
- The designer lists feature updates.
- Designer lists planned features, components, or updates for the Physics Lab software.

3.
Concepts: providing explanations, explanation of simulation details
- Designer provides explanations or clarifications about the Physics Lab software or its features.
- Designer explains or provides details about the simulation or its features.

4.
Concepts: suggest specific features, suggested features for optical experiments
- User suggests specific features or resources related to a particular topic or area (e.g., mechanical waves and vibrations).
- User suggests features for optical experiments.

5.
Concepts: requesting content, requested inclusion of mechanics experiments
- A user requests the inclusion of additional experiments or content on the platform.
- The user requests or suggests the inclusion of a specific feature or experiment.

6.
Concepts: enhance user interaction, suggestions of interactions
- Suggestions or ideas for enhancing user interaction within the Physics Lab platform.
- The speaker suggests or proposes interactions, features, or functionalities for the Physics Lab software.

7.
Concepts: practical suggestions, suggested development approach
- The designer suggests practical adjustments or improvements to the Physics Lab platform.
- Recommendations or advice on how to approach development or improvement of Physics Lab.

8.
Concepts: express user needs, explain reasons for request
- Expressions of user needs or requirements for Physics Lab.
- User explains the reasons behind their requests or suggestions for the Physics Lab software.

9.
Concepts: requesting enhancements, expand scope of experiments
- User requests enhancements or new features for the Physics Lab software.
- Requests or suggestions for expanding the scope of experiments or features in Physics Lab.

10.
Concepts: articulate detailed needs, demonstrated understanding of physics concepts
- A user articulates detailed needs or requests for physics demonstrations.
- User demonstrates their understanding of physics concepts by making a request.

11.
Concepts: clarifying compatibility issues, suggesting and confirming compatibility
- Designers clarify and suggest solutions for compatibility issues.
- Users suggest and designers confirm compatibility options.

12.
Concepts: ensure compatibility, compatibility clarification, clarifying system compatibility
- Ensuring or discussing compatibility with different devices, systems, or platforms.
- The designer clarifies whether the software is compatible with older systems or devices.
- Clarifying system compatibility or requirements.

13.
Concepts: speculating about compatibility, theorizing about compatibility
- Speculating about the compatibility of a system or device.
- The designer theorizes or speculates about compatibility or technical issues.

14.
Concepts: illustrate impact of external factors, illustrate impact of external events
- Users describe how external factors affect their use of the software.
- User illustrates the impact of external events or circumstances on the use of technology in educational settings.

15.
Concepts: explain situation, discuss software use implications
- A user explains a situation or context that affects their use of the software.
- User discusses implications or challenges of using the software.

16.
Concepts: highlighting user challenges, highlighting teaching challenges
- Users identify and discuss challenges they face while using the Physics Lab.
- User highlights challenges or difficulties in teaching or using the software.

17.
Concepts: identifying barriers, highlighting technical constraints
- A user identifies potential obstacles or limitations.
- A user references technical constraints or limitations.

18.
Concepts: clarify testing phase, explain testing phase
- Clarify the testing phase or purpose of a feature.
- An explanation or description of the testing phase or process.

19.
Concepts: ensure proper operation, ensure proper functionality
- Ensuring proper operation or usage of the software by the designer.
- A statement ensuring that a feature or functionality works correctly.

20.
Concepts: explain functionality, explain features
- Explaining how something works or functions.
- Providing information about the features or capabilities of something.

21.
Concepts: software functionality illustration, give an example of the feature's functions
- Illustrating the practical functionality of the software.
- Providing examples of feature functionality

22.
Concepts: highlighting practicality, emphasizes practical application
- Users highlight the practicality or usefulness of the software.
- User emphasizes the practical applications or use cases for the product.
===
Here are the definitions for each code:

---
1.
Concepts: infrastructure inquiry, inquiring about internet access
Relationship: The concepts are related as the designer inquires about infrastructure and internet access to understand the technical capabilities and constraints.
Criteria: Designer inquires about infrastructure or internet access to understand constraints.
Phrase: Inquiring about infrastructure and internet access.

2.
Concepts: listing feature updates, listing planned features
Relationship: The concepts are related as the designer lists feature updates and planned features to provide information about the software's development.
Criteria: Designer lists feature updates and planned features.
Phrase: Listing feature updates and planned features.

3.
Concepts: providing explanations, explanation of simulation details
Relationship: The concepts are related as the designer provides explanations and clarifies simulation details to educate users about the software.
Criteria: Designer provides explanations and clarifies simulation details.
Phrase: Providing explanations and clarifying simulation details.

4.
Concepts: suggest specific features, suggested features for optical experiments
Relationship: The concepts are related as the user suggests specific features for optical experiments to improve the software's functionality.
Criteria: User suggests specific features for optical experiments.
Phrase: Suggesting specific features for optical experiments.

5.
Concepts: requesting content, requested inclusion of mechanics experiments
Relationship: The concepts are related as the user requests content and the inclusion of mechanics experiments to expand the software's scope.
Criteria: User requests content and the inclusion of mechanics experiments.
Phrase: Requesting content and inclusion of mechanics experiments.

6.
Concepts: enhance user interaction, suggestions of interactions
Relationship: The concepts are related as the speaker suggests ways to enhance user interaction to improve the user experience.
Criteria: Speaker suggests ways to enhance user interaction.
Phrase: Suggesting ways to enhance user interaction.

7.
Concepts: practical suggestions, suggested development approach
Relationship: The concepts are related as the designer suggests practical adjustments and a development approach to improve the software.
Criteria: Designer suggests practical adjustments and a development approach.
Phrase: Suggesting practical adjustments and a development approach.

8.
Concepts: express user needs, explain reasons for request
Relationship: The concepts are related as the user expresses needs and explains reasons for requests to inform the software's development.
Criteria: User expresses needs and explains reasons for requests.
Phrase: Expressing user needs and explaining reasons for requests.

9.
Concepts: requesting enhancements, expand scope of experiments
Relationship: The concepts are related as the user requests enhancements and the expansion of experiments to improve the software's functionality.
Criteria: User requests enhancements and the expansion of experiments.
Phrase: Requesting enhancements and expanding scope of experiments.

10.
Concepts: articulate detailed needs, demonstrated understanding of physics concepts
Relationship: The concepts are related as the user articulates detailed needs and demonstrates an understanding of physics concepts to inform the software's development.
Criteria: User articulates detailed needs and demonstrates understanding of physics concepts.
Phrase: Articulating detailed needs and demonstrating understanding of physics concepts.

11.
Concepts: clarifying compatibility issues, suggesting and confirming compatibility
Relationship: The concepts are related as the designer clarifies compatibility issues and suggests and confirms compatibility options.
Criteria: Designer clarifies compatibility issues and suggests and confirms compatibility options.
Phrase: Clarifying compatibility issues and suggesting compatibility options.

12.
Concepts: ensure compatibility, compatibility clarification, clarifying system compatibility
Relationship: The concepts are related as the designer ensures and clarifies compatibility to ensure the software's functionality.
Criteria: Designer ensures and clarifies compatibility.
Phrase: Ensuring and clarifying compatibility.

13.
Concepts: speculating about compatibility, theorizing about compatibility
Relationship: The concepts are related as the designer speculates and theorizes about compatibility to anticipate potential issues.
Criteria: Designer speculates and theorizes about compatibility.
Phrase: Speculating and theorizing about compatibility.

14.
Concepts: illustrate impact of external factors, illustrate impact of external events
Relationship: The concepts are related as the user illustrates the impact of external factors and events on the software's use.
Criteria: User illustrates impact of external factors and events.
Phrase: Illustrating impact of external factors and events.

15.
Concepts: explain situation, discuss software use implications
Relationship: The concepts are related as the user explains a situation and discusses implications to provide context for the software's use.
Criteria: User explains situation and discusses implications.
Phrase: Explaining situation and discussing implications.

16.
Concepts: highlighting user challenges, highlighting teaching challenges
Relationship: The concepts are related as the user highlights challenges in using the software and teaching with it.
Criteria: User highlights challenges in using and teaching with the software.
Phrase: Highlighting challenges in using and teaching with the software.

17.
Concepts: identifying barriers, highlighting technical constraints
Relationship: The concepts are related as the user identifies barriers and highlights technical constraints to inform the software's development.
Criteria: User identifies barriers and highlights technical constraints.
Phrase: Identifying barriers and highlighting technical constraints.

18.
Concepts: clarify testing phase, explain testing phase
Relationship: The concepts are related as the designer clarifies and explains the testing phase to provide context for the software's development.
Criteria: Designer clarifies and explains the testing phase.
Phrase: Clarifying and explaining the testing phase.

19.
Concepts: ensure proper operation, ensure proper functionality
Relationship: The concepts are related as the designer ensures proper operation and functionality to guarantee the software's quality.
Criteria: Designer ensures proper operation and functionality.
Phrase: Ensuring proper operation and functionality.

20.
Concepts: explain functionality, explain features
Relationship: The concepts are related as the designer explains functionality and features to educate users about the software.
Criteria: Designer explains functionality and features.
Phrase: Explaining functionality and features.

21.
Concepts: software functionality illustration, give an example of the feature's functions
Relationship: The concepts are related as the designer illustrates software functionality and provides examples to demonstrate the software's capabilities.
Criteria: Designer illustrates software functionality and provides examples.
Phrase: Illustrating software functionality and providing examples.

22.
Concepts: highlighting practicality, emphasizes practical application
Relationship: The concepts are related as the user highlights practicality and emphasizes practical applications to demonstrate the software's usefulness.
Criteria: User highlights practicality and emphasizes practical applications.
Phrase: Highlighting practicality and emphasizing practical applications.