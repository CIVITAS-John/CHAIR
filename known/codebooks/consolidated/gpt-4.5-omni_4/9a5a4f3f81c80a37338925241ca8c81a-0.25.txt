You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (17 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
17. 
Concepts: {Repeat the input 17}
Relationship: {What is logical relationship between concepts in code 17, or N/A if not applicable}
Criteria: {Who did what, and how for code 17}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: information seeking, seeking usage support
- Users asking questions to gain knowledge or resources related to the software.
- Users express the need for support or guidance in using and downloading the software.

2.
Concepts: user support, provide technical support
- Assistance and support provided by designers to help users effectively use the product.
- Users or designers request or provide technical help or instructions.

3.
Concepts: respond to questions, asking questions
- Users and designers exchange responses to clarify questions.
- Users or designers ask questions to seek information or clarification and to gather information.

4.
Concepts: promoting group discussion, encouraging problem reporting
- Designers encourage users to discuss problems or issues within the group and promote open communication.
- Designers encourage users to report problems or issues and invite them to discuss or ask questions in the future.

5.
Concepts: seek user context, inquiring about user background
- Designers seek context or background information from users.
- Designers respond indirectly to user queries by inquiring about their role and background.

6.
Concepts: explaining software features, highlighting feature applications
- Designers explain features, technical artifacts, and the functionality of components with examples.
- Developers give examples of how a feature functions and highlight its practical applications.

7.
Concepts: providing platform-specific updates, adapting to platform constraints
- Designers provide updates and information specific to different platforms.
- A designer mentions and adapts to the limitations or requirements specific to a platform.

8.
Concepts: highlight update frequency, providing update timelines
- Designers highlight the frequency of software updates.
- Designers provide schedules and timelines for updates, releases, and feature development.

9.
Concepts: transparent developer discussion, ensuring development transparency
- Designers discuss technical aspects and considerations transparently.
- Designers provide transparent updates about the complexity, timeline, and processes of development.

10.
Concepts: explain development process, explaining development challenges
- Explaining aspects of the development process or compatibility issues.
- Designers discuss the complexity, timeline, and challenges of developing a feature.

11.
Concepts: list future tasks, outlining feature roadmap
- A designer lists potential tasks or considerations for future updates.
- Designers list, describe, and outline future plans for features and usability aspects.

12.
Concepts: discussing future plans, announce future consultation
- Developers discuss and detail potential future developments, features, and updates.
- A developer announces plans for future consultation with users.

13.
Concepts: highlighting student engagement, highlighting software usability
- Users share their experiences and highlight student engagement when using the software.
- Users highlight and comment on the practicality, usability, and effectiveness of the software.

14.
Concepts: suggesting new features, proposing improvements
- Users suggest categorizing, refining, or adding features to improve usability.
- Users suggest improvements to enhance user experience and usability and propose improvements to the workflow or functionality.

15.
Concepts: visual design appreciation, praising software craftsmanship
- Users appreciate the visual design of the software.
- Users praise the designers' craftsmanship and acknowledge the quality of the software.

16.
Concepts: expressive, use non-verbal communication
- Users and designers use expressive language and emojis in their interactions.
- Users communicate or express themselves using emojis or other non-verbal forms.

17.
Concepts: confirming agreement, short affirmative response
- Users respond positively and agree with statements or suggestions.
- User provides a short, affirmative response.
===
---
Definitions for each code (17 in total):
1.
Concepts: information seeking, seeking usage support
Relationship: Both concepts involve users actively seeking knowledge or assistance.
Criteria: Users ask questions to gain knowledge or resources and express the need for support or guidance in using the software.
Phrase: Seeking information and support

2.
Concepts: user support, provide technical support
Relationship: Both concepts involve providing assistance to users.
Criteria: Assistance and support are provided by designers to help users effectively use the product, including technical help or instructions.
Phrase: Providing user support

3.
Concepts: respond to questions, asking questions
Relationship: Both concepts involve an exchange of information through questions and responses.
Criteria: Users and designers exchange responses to clarify questions and seek information or clarification.
Phrase: Engaging in Q&A

4.
Concepts: promoting group discussion, encouraging problem reporting
Relationship: Both concepts involve encouraging user interaction and communication about issues.
Criteria: Designers encourage users to discuss problems or issues within the group and promote open communication and problem reporting.
Phrase: Encouraging discussion and reporting

5.
Concepts: seek user context, inquiring about user background
Relationship: Both concepts involve gathering background information from users.
Criteria: Designers seek context or background information from users and respond indirectly to user queries by inquiring about their role and background.
Phrase: Inquiring about user context

6.
Concepts: explaining software features, highlighting feature applications
Relationship: Both concepts involve explaining and demonstrating software features.
Criteria: Designers explain features and functionality with examples and highlight practical applications.
Phrase: Explaining and demonstrating features

7.
Concepts: providing platform-specific updates, adapting to platform constraints
Relationship: Both concepts involve addressing platform-specific considerations.
Criteria: Designers provide updates and information specific to different platforms and adapt to their limitations or requirements.
Phrase: Addressing platform-specific needs

8.
Concepts: highlight update frequency, providing update timelines
Relationship: Both concepts involve communicating the timing of updates.
Criteria: Designers highlight the frequency of software updates and provide schedules and timelines for updates and feature development.
Phrase: Communicating update schedules

9.
Concepts: transparent developer discussion, ensuring development transparency
Relationship: Both concepts involve maintaining transparency in the development process.
Criteria: Designers discuss technical aspects and considerations transparently and provide updates about the complexity, timeline, and processes of development.
Phrase: Ensuring development transparency

10.
Concepts: explain development process, explaining development challenges
Relationship: Both concepts involve explaining aspects of the development process.
Criteria: Designers explain aspects of the development process, including compatibility issues, complexity, timeline, and challenges.
Phrase: Explaining development process and challenges

11.
Concepts: list future tasks, outlining feature roadmap
Relationship: Both concepts involve planning and outlining future development tasks.
Criteria: Designers list potential tasks or considerations for future updates and outline future plans for features and usability aspects.
Phrase: Outlining future development plans

12.
Concepts: discussing future plans, announce future consultation
Relationship: Both concepts involve communicating future development intentions.
Criteria: Developers discuss potential future developments, features, and updates, and announce plans for future consultation with users.
Phrase: Communicating future plans

13.
Concepts: highlighting student engagement, highlighting software usability
Relationship: Both concepts involve users sharing positive experiences with the software.
Criteria: Users share their experiences and highlight student engagement and the practicality, usability, and effectiveness of the software.
Phrase: Highlighting positive user experiences

14.
Concepts: suggesting new features, proposing improvements
Relationship: Both concepts involve users providing feedback for software enhancement.
Criteria: Users suggest categorizing, refining, or adding features to improve usability and propose improvements to enhance user experience and functionality.
Phrase: Proposing feature enhancements

15.
Concepts: visual design appreciation, praising software craftsmanship
Relationship: Both concepts involve users expressing appreciation for the software's design quality.
Criteria: Users appreciate the visual design and praise the designers' craftsmanship, acknowledging the quality of the software.
Phrase: Praising design quality

16.
Concepts: expressive, use non-verbal communication
Relationship: Both concepts involve using expressive and non-verbal forms of communication.
Criteria: Users and designers use expressive language and emojis in their interactions to communicate or express themselves.
Phrase: Using expressive communication

17.
Concepts: confirming agreement, short affirmative response
Relationship: Both concepts involve users expressing agreement.
Criteria: Users respond positively and agree with statements or suggestions, often with a short, affirmative response.
Phrase: Confirming agreement
---