You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (6 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
6. 
Concepts: {Repeat the input 6}
Relationship: {What is logical relationship between concepts in code 6, or N/A if not applicable}
Criteria: {Who did what, and how for code 6}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: recognize gaps in conceptualization, emphasizes need for conceptual understanding
- Recognizes gaps in conceptual understanding and the importance of clear instructions.
- Emphasizes the need for conceptual understanding in learning experiences.

2.
Concepts: thorough code evaluation, importance of thorough evaluation
- Implies thoroughness in code evaluation
- The participant reflects on the importance of thorough evaluation and reading code in detail.

3.
Concepts: reads code before integrating, engages in thoughtful code integration
- The participant reads code before integrating it.
- Engages in thoughtful code integration, reading and selectively copying code.

4.
Concepts: reads in detail, reads and comments on code, reads through code manually
- The participant reads and evaluates code in detail.
- Reads and comments on code, summarizing its functionality and understanding.
- The code reads through code manually to debug and understand.

5.
Concepts: considering syntax and language, thinks critically about language use
- User thinks about syntax and language usage
- The participant thinks critically about language use and nuances in communication.

6.
Concepts: compares solo and collaborative programming, peer programming vs. individual work
- Compares solo and collaborative programming approaches.
- The participant compares peer programming to individual work, highlighting the benefits of collaborative coding.
===
Here are the definitions for each code:

---
1.
Concepts: recognize gaps in conceptualization, emphasizes need for conceptual understanding
Relationship: The concepts are logically related as recognizing gaps in conceptualization leads to emphasizing the need for conceptual understanding.
Criteria: Participants recognize gaps in their understanding and emphasize the importance of clear instructions to fill those gaps.
Phrase: Emphasize conceptual understanding.

2.
Concepts: thorough code evaluation, importance of thorough evaluation
Relationship: The concepts are logically related as thorough code evaluation is a result of recognizing the importance of thorough evaluation.
Criteria: Participants imply the importance of thoroughly evaluating code and reflect on its significance in their learning experiences.
Phrase: Evaluate code thoroughly.

3.
Concepts: reads code before integrating, engages in thoughtful code integration
Relationship: The concepts are logically related as reading code before integrating is a precursor to engaging in thoughtful code integration.
Criteria: Participants read code before integrating it and engage in thoughtful integration by selectively copying code.
Phrase: Integrate code thoughtfully.

4.
Concepts: reads in detail, reads and comments on code, reads through code manually
Relationship: The concepts are logically related as reading in detail, reading and commenting on code, and reading through code manually are all aspects of thorough code reading.
Criteria: Participants read and evaluate code in detail, comment on its functionality, and debug manually.
Phrase: Read code thoroughly.

5.
Concepts: considering syntax and language, thinks critically about language use
Relationship: The concepts are logically related as considering syntax and language leads to thinking critically about language use.
Criteria: Participants think about syntax and language usage and critically evaluate nuances in communication.
Phrase: Think critically about language.

6.
Concepts: compares solo and collaborative programming, peer programming vs. individual work
Relationship: The concepts are logically related as comparing solo and collaborative programming leads to highlighting the benefits of collaborative coding.
Criteria: Participants compare solo and collaborative programming approaches and highlight the benefits of peer programming over individual work.
Phrase: Compare coding approaches.