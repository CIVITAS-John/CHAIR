You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (12 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
12. 
Concepts: {Repeat the input 12}
Relationship: {What is logical relationship between concepts in code 12, or N/A if not applicable}
Criteria: {Who did what, and how for code 12}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: user satisfaction, describing ai interface as user-friendly
- Overall user satisfaction with the intuitiveness and ease of use of AI systems.
- Users describe the AI interface as intuitive, straightforward, and user-friendly.

2.
Concepts: non-technical language use, accommodating explanations
- Feedback on AI providing clear and non-technical explanations.
- Notes that AI explanations should be clear and suitable for different expertise levels.

3.
Concepts: praises ai inference abilities, describing ai context inference, appreciates context understanding
- Acknowledges AI's ability to accurately infer users' needs from provided input.
- Users emphasize AI's ability to understand and infer user needs based on input context.
- Appreciating AI's capability to understand user needs from provided context without explicitly detailed instructions.

4.
Concepts: valuing ai's clear explanations, values ai parameter clarification
- Users describe and appreciate the clear, easy-to-understand explanations provided by AI.
- Appreciation for AI's capability to precisely define and clarify task parameters.

5.
Concepts: maintained task focus, task-focused documentation integration
- Importance of AI in maintaining task focus by integrating immediate access to documentation.
- Positive perception of the AI's ability to stay focused on tasks by integrating documentation search.

6.
Concepts: readability in code, values clarity in coding
- Advocating for simple, easy-to-read code to facilitate maintenance and debugging.
- Emphasis on clear, simple coding practices for future ease of maintenance.

7.
Concepts: values documentation, documentation and commenting
- AI's ability to comment and document code clearly.
- The interviewee's perception of AI's role in generating well-documented and commented code.

8.
Concepts: appreciating annotated ai code, appreciating the usefulness of executable ai-generated code
- Users appreciate AI features, specifically its ability to provide well-commented and documented code.
- A user finds AI-generated code executable and useful for direct implementation.

9.
Concepts: prefers readable code, providing functional and well-documented code
- Preference for readable and well-documented code produced by AI.
- Users want AI-generated code to be well-organized, commented, and documented to facilitate understanding and integration.

10.
Concepts: describes ai analysis efficiency, benefiting from timely ai feedback
- Describes AI's ability to quickly analyze and provide feedback on code, emphasizing time savings.
- Appreciating the speed and responsiveness of timely feedback from AI on code or analysis.

11.
Concepts: value ai's role in error detection, valuing ai's debugging capabilities
- Users value AI's potential to detect less obvious errors in their code.
- Values AI's ability to autonomously resolve and clarify errors in code.

12.
Concepts: values ai feedback, iterative improvement valuation
- Valuing feedback from AI to improve or optimize one's own code.
- A user values the iterative improvement possible with AI assistance.
===
---
Definitions for each code (12 in total):

1.
Concepts: user satisfaction, describing ai interface as user-friendly
Relationship: The concepts of satisfaction and user experience are interconnected.
Criteria: Users express overall satisfaction with the AI interface's user-friendliness and intuitiveness.
Phrase: Valuing user-friendly interface 

2.
Concepts: non-technical language use, accommodating explanations
Relationship: The need for clarity and accommodation is closely tied to language simplicity.
Criteria: Users require AI explanations to be clear and accommodating for various expertise levels using non-technical language.
Phrase: Demanding clear explanations

3.
Concepts: praises ai inference abilities, describing ai context inference, appreciates context understanding
Relationship: Inference abilities and context understanding are mutually reinforcing attributes.
Criteria: Users appreciate AI's accurate context inference and understanding of user needs based on provided input.
Phrase: Appreciating context inference

4.
Concepts: valuing ai's clear explanations, values ai parameter clarification
Relationship: Both clarity in explanations and parameter clarification contribute to user comprehension.
Criteria: Users value the AI's ability to provide clear explanations and precise task parameter definitions.
Phrase: Valuing clear explanations

5.
Concepts: maintained task focus, task-focused documentation integration
Relationship: Task focus and integrated documentation are complementary in achieving efficient workflows.
Criteria: Users highlight AI's role in maintaining task focus through seamless documentation integration.
Phrase: Enhancing task focus

6.
Concepts: readability in code, values clarity in coding
Relationship: Readability and clarity are intrinsically linked to code quality and usability.
Criteria: Users advocate for clear, simple, and readable AI-generated code for ease of maintenance and debugging.
Phrase: Advocating for readable code

7.
Concepts: values documentation, documentation and commenting
Relationship: Documentation quality and commenting are essential components of code clarity.
Criteria: Users recognize the importance of AI's ability to produce clearly documented and commented code.
Phrase: Valuing code documentation

8.
Concepts: appreciating annotated ai code, appreciating the usefulness of executable ai-generated code
Relationship: Annotated and executable code are both appreciated for their practical use.
Criteria: Users appreciate the practical benefits of AI features that deliver well-documented and executable code.
Phrase: Appreciating useful code

9.
Concepts: prefers readable code, providing functional and well-documented code
Relationship: Preference for readable code aligns with the need for functional documentation.
Criteria: Users prefer AI-generated code to be readable, well-documented, and functional for better understanding and integration.
Phrase: Preferring well-documented code

10.
Concepts: describes ai analysis efficiency, benefiting from timely ai feedback
Relationship: Efficiency in analysis and timely feedback are both geared towards productivity enhancement.
Criteria: Users benefit from AI's quick analysis and responsive feedback, appreciating the time savings.
Phrase: Valuing efficient analysis

11.
Concepts: value ai's role in error detection, valuing ai's debugging capabilities
Relationship: Error detection and debugging capabilities are critical for improving code accuracy.
Criteria: Users value AI's ability to detect and autonomously resolve errors, enhancing code reliability.
Phrase: Valuing error detection

12.
Concepts: values ai feedback, iterative improvement valuation
Relationship: Feedback and iterative improvement are key components of continuous enhancement.
Criteria: Users value receiving AI feedback to iteratively improve and optimize their code.
Phrase: Valuing iterative improvement
---