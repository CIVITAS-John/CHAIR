You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (10 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
10. 
Concepts: {Repeat the input 10}
Relationship: {What is logical relationship between concepts in code 10, or N/A if not applicable}
Criteria: {Who did what, and how for code 10}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: outline project priorities, prioritize development tasks
- The designer communicates the current focus of development and outlines specific timelines for updates.
- A designer outlines the prioritization of different sections in the development process and discusses the prioritization of different features or sections to be developed.

2.
Concepts: educate users on features, offer user tips and instructions
- A designer provides instructions on using specific features and guidance on new functionalities.
- Designers share detailed information about new features and updates and provide instructions to help users understand and use the software effectively.

3.
Concepts: offer user suggestions, suggest practical use cases
- Users provide feedback or suggestions about the software's features and improvements.
- Users suggest features that enhance convenience and usability of the software.

4.
Concepts: address user concerns, acknowledge and respond to feature requests
- Designers commit to addressing user requests and provide solutions to issues.
- Designers recognize the necessity for specific features and respond to user requests with relevant information.

5.
Concepts: engage with user inquiries, respond to user feedback
- Designers actively respond to user inquiries and feedback, demonstrating attentiveness to user needs and concerns.
- The designer acknowledges and aligns actions with user feedback and responds to user feedback and suggestions, addressing queries and incorporating input into the design process.

6.
Concepts: understand user needs, inquire about user identity
- Designers ask users for context to better understand their needs and respond with relevant information.
- Designers inquire about the identity or role of a user to understand their perspective.

7.
Concepts: initiate interaction, build community through interaction
- A user initiates interaction by greeting the community, and designers warmly welcome users.
- Users engage in friendly exchanges, expressing gratitude and agreement.

8.
Concepts: acknowledge community support, recognize community support
- Instances of support and acknowledgment are expressed within the community.
- Users acknowledge that an issue has been resolved and express gratitude for help received.

9.
Concepts: acknowledgment, expert recognition
- Users acknowledge the contributions of experts and make specific requests for features.
- A user acknowledges the expertise of others before making a feature request.

10.
Concepts: share development progress
- Designers highlight significant progress made in software updates and document enhancements for users.
- Designers provide updates on internal changes and announce new features and bug fixes.
===
---
Definitions for each code (10 in total):
1.
Concepts: outline project priorities, prioritize development tasks  
Relationship: The designer's communication of project priorities directly informs the prioritization of development tasks.  
Criteria: The designer outlines the current focus and specific timelines for development tasks.  
Phrase: Communicate project priorities.

2.
Concepts: educate users on features, offer user tips and instructions  
Relationship: Educating users on features is complemented by providing practical tips and instructions for effective use.  
Criteria: Designers provide instructions and guidance on new functionalities to enhance user understanding.  
Phrase: Educate users on features.

3.
Concepts: offer user suggestions, suggest practical use cases  
Relationship: User suggestions often lead to practical use cases that enhance the software's usability.  
Criteria: Users provide feedback and suggest features that improve convenience and usability.  
Phrase: Suggest practical use cases.

4.
Concepts: address user concerns, acknowledge and respond to feature requests  
Relationship: Addressing user concerns is linked to acknowledging and responding to specific feature requests.  
Criteria: Designers commit to addressing user requests and provide relevant solutions.  
Phrase: Address user concerns.

5.
Concepts: engage with user inquiries, respond to user feedback  
Relationship: Engaging with inquiries is a direct response to user feedback, demonstrating attentiveness.  
Criteria: Designers actively respond to user inquiries and feedback, aligning actions with user needs.  
Phrase: Engage with user inquiries.

6.
Concepts: understand user needs, inquire about user identity  
Relationship: Understanding user needs is enhanced by inquiring about the user's identity or role.  
Criteria: Designers ask users for context and identity to better tailor their responses.  
Phrase: Understand user needs.

7.
Concepts: initiate interaction, build community through interaction  
Relationship: Initiating interaction fosters community building through friendly exchanges.  
Criteria: Users greet the community, and designers welcome them, promoting engagement.  
Phrase: Initiate interaction.

8.
Concepts: acknowledge community support, recognize community support  
Relationship: Acknowledging support reinforces the recognition of community contributions.  
Criteria: Users express gratitude for help received and acknowledge resolved issues.  
Phrase: Acknowledge community support.

9.
Concepts: acknowledgment, expert recognition  
Relationship: Acknowledgment of contributions is often tied to recognizing the expertise of others.  
Criteria: Users acknowledge expert contributions before making specific feature requests.  
Phrase: Recognize expert contributions.

10.
Concepts: share development progress  
Relationship: Sharing development progress involves documenting and highlighting significant updates made.  
Criteria: Designers provide updates on software enhancements and new features for users.  
Phrase: Share development progress.
---