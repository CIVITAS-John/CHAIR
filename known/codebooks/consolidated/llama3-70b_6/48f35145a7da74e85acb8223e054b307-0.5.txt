You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (17 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
17. 
Concepts: {Repeat the input 17}
Relationship: {What is logical relationship between concepts in code 17, or N/A if not applicable}
Criteria: {Who did what, and how for code 17}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: responding to users, addressing user queries
- Designers respond to users' requests or questions.
- Designers address or respond to users' queries or questions.

2.
Concepts: justifying feature requests, providing reasons for suggestions
- A user provides reasons or justifications for feature requests.
- User provides reasons for their suggestions.

3.
Concepts: expressing feature wishes, expressing need for a feature
- A user expresses a desire or wish for a specific feature.
- A user expresses a need or desire for a feature.

4.
Concepts: requesting update, requesting features, requesting new features or functionalities
- User requests an update or new feature.
- A user requests new features or functionalities.
- A user requests new features or functionalities with specific use cases.

5.
Concepts: showcasing user needs, expressing user requirements
- A user expresses a need or requirement for the software.
- Users express their requirements or needs for the Physics Lab software or online community.

6.
Concepts: identifying user needs, highlighting usability needs
- A user identifies or acknowledges potential user needs.
- A user highlights or identifies usability needs or issues.

7.
Concepts: suggesting improvements, suggesting improvements or new features, suggesting new features or capabilities
- A user suggests improvements or new features for the platform.
- Users suggest new features or improvements to the simulation.
- A user provides further suggestions or ideas for improvement.
- A user suggests new features or improvements to the software.

8.
Concepts: providing comparative feedback, comparing software to others
- Users compare the software with other similar tools or software, providing comparative feedback.
- Users compare the software to other less practical alternatives in terms of practicality and user experience.

9.
Concepts: praising software aesthetics, praising software design
- Users appreciate or praise the aesthetic aspects of the software.
- Users compliment or praise the software design or features, expressing admiration or appreciation for its quality.

10.
Concepts: expressing software interest, showing interest in software format
- A user expresses interest in downloading or using software.
- A user shows interest in the format or platform of the software.

11.
Concepts: asking for platform clarification, inquiring about platform compatibility, inquiring about platform specifics
- User asks for clarification on platform or version
- A user inquires about platform compatibility or availability.
- A user inquires about platform specifics or technical details.

12.
Concepts: complimenting software features
- Users compliment a specific aspect of the software, such as the 3D effect.
- Users compliment, praise, or appreciate the software or its features.

13.
Concepts: acknowledge understanding
- The speaker acknowledges or indicates understanding of someone else's statement.
- Designers or users acknowledge resolutions, updates, or understanding.

14.
Concepts: sharing development plans and roadmaps
- The designer shares information about the development plan or roadmap.
- Designers share plans for new features and invite feedback from the community.

15.
Concepts: expressing gratitude
- Users or designers express gratitude or appreciation for support or contributions.
- Users express thanks or appreciation for the software or community.
- Expressions of gratitude or appreciation for designers' hard work, dedication, or craftsmanship.

16.
Concepts: signaling progress
- The designer signals progress or updates in software development.
- Designer indicates progress or updates on a task or project.

17.
Concepts: express enthusiasm
- A user expresses enthusiasm or excitement about the platform or a feature.
- A designer expresses enthusiasm or interest in a particular topic.
===
Here are the definitions for each code:

---
1.
Concepts: responding to users, addressing user queries
Relationship: Responding and addressing are two sides of the same coin, where designers acknowledge and provide answers to users' questions.
Criteria: Designers respond to users' queries by addressing their concerns.
Phrase: Address user queries

2.
Concepts: justifying feature requests, providing reasons for suggestions
Relationship: Justifying and providing reasons are two aspects of explaining the rationale behind a feature request.
Criteria: Users provide reasons to justify their feature requests.
Phrase: Justify feature requests

3.
Concepts: expressing feature wishes, expressing need for a feature
Relationship: Expressing wishes and needs are two ways of conveying a desire for a feature.
Criteria: Users express their wishes or needs for a feature.
Phrase: Express feature wishes

4.
Concepts: requesting update, requesting features, requesting new features or functionalities
Relationship: Requesting updates, features, and new functionalities are all related to asking for changes or additions to the software.
Criteria: Users request updates or new features to improve the software.
Phrase: Request software updates

5.
Concepts: showcasing user needs, expressing user requirements
Relationship: Showcasing and expressing are two ways of highlighting user needs and requirements.
Criteria: Users express their needs and requirements for the software.
Phrase: Express user needs

6.
Concepts: identifying user needs, highlighting usability needs
Relationship: Identifying and highlighting are two aspects of bringing attention to user needs and usability issues.
Criteria: Users identify and highlight usability needs and issues.
Phrase: Identify user needs

7.
Concepts: suggesting improvements, suggesting improvements or new features, suggesting new features or capabilities
Relationship: Suggesting improvements, new features, and capabilities are all related to providing ideas for software development.
Criteria: Users suggest improvements or new features to enhance the software.
Phrase: Suggest software improvements

8.
Concepts: providing comparative feedback, comparing software to others
Relationship: Providing comparative feedback and comparing software are two ways of evaluating the software in relation to others.
Criteria: Users provide comparative feedback by comparing the software to others.
Phrase: Provide comparative feedback

9.
Concepts: praising software aesthetics, praising software design
Relationship: Praising aesthetics and design are two ways of expressing admiration for the software's visual and functional aspects.
Criteria: Users praise the software's design and aesthetics.
Phrase: Praise software design

10.
Concepts: expressing software interest, showing interest in software format
Relationship: Expressing interest and showing interest are two ways of conveying enthusiasm for the software.
Criteria: Users express interest in the software and its format.
Phrase: Express software interest

11.
Concepts: asking for platform clarification, inquiring about platform compatibility, inquiring about platform specifics
Relationship: Asking for clarification, inquiring about compatibility, and inquiring about specifics are all related to seeking information about the platform.
Criteria: Users ask for clarification on platform specifics and compatibility.
Phrase: Inquire about platform specifics

12.
Concepts: complimenting software features
Relationship: Complimenting software features is a way of expressing appreciation for specific aspects of the software.
Criteria: Users compliment specific software features.
Phrase: Compliment software features

13.
Concepts: acknowledge understanding
Relationship: Acknowledging understanding is a way of indicating comprehension of someone else's statement.
Criteria: Speakers acknowledge understanding of others' statements.
Phrase: Acknowledge understanding

14.
Concepts: sharing development plans and roadmaps
Relationship: Sharing development plans and roadmaps are two ways of providing information about the software's future development.
Criteria: Designers share development plans and roadmaps with the community.
Phrase: Share development plans

15.
Concepts: expressing gratitude
Relationship: Expressing gratitude is a way of showing appreciation for support or contributions.
Criteria: Users and designers express gratitude for support and contributions.
Phrase: Express gratitude

16.
Concepts: signaling progress
Relationship: Signaling progress is a way of indicating updates or advancements in software development.
Criteria: Designers signal progress in software development.
Phrase: Signal progress

17.
Concepts: express enthusiasm
Relationship: Expressing enthusiasm is a way of conveying excitement or interest in the platform or a feature.
Criteria: Users and designers express enthusiasm for the platform or features.
Phrase: Express enthusiasm