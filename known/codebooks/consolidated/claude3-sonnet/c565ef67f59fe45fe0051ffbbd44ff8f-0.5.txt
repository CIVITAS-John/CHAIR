You are an expert in thematic analysis. 
Each code is a cluster of multiple qualitative sub-code. First, determine the logical relationship between concepts. If a concept includes another, use the broader one. If concepts are parallel, try to cover both concepts.
Write clear and generalizable labels and criteria for each merged code, informed by the context, and without unnecessary specifics or examples.
Find a theory-informed category for each code. Use 2-4 words for categories and avoid over-generalization.
The research question is: How did Physics Lab's online community emerge? (through the lens of learning sciences, human-computer interaction, and participatory design)
Always follow the output format:
---
Categories: 
* {Name some categories you identified from the research question and theoretical lens}

Definitions for each code (12 in total):
1. {Repeat the input 1}
Relationship: {The logical relationship between concepts in input 1}
Criteria: {A sentence of consolidated criteria for code 1}
Label: {A consolidated label of code 1}
Category: {2-4 words for code 1}
...
12. {Repeat the input 12}
Relationship: {The logical relationship between concepts in input 12}
Criteria: {A sentence of consolidated criteria for code 12}
Label: {A consolidated label of code 12}
Category: {2-4 words for code 12}
---
~~~
1. software feature: version release, software feature: planned updates.
- Mentions of new versions or releases of Physics Lab.
- Mentions of planned updates, features, or components for Physics Lab.

2. conceptual understanding, visualization and simulation.
- Features or affordances of the software that aim to facilitate conceptual understanding of physics principles.
- Features or affordances of the software that support visualization or simulation of physics concepts.

3. usability considerations, user experience and usability.
- Aspects of the software design that aim to improve usability or user experience.
- Considerations, discussions, or aspects related to the user experience, interface design, and usability of the software or application.

4. user feedback, usability feedback.
- Comments from users providing feedback, suggestions or describing their experience with the software.
- Community members providing feedback, suggestions or reporting issues to the designers.
- Quotes that provide feedback or suggestions related to the usability and user experience of the software.

5. user involvement, incorporating user needs.
- Quotes that illustrate user involvement in the design process through feedback and suggestions.
- Evidence of users being involved in the design process, providing feedback, or contributing ideas.
- Quotes that suggest how user needs or feedback are incorporated into the software design.

6. designer responsiveness.
- The designer acknowledging, responding to and incorporating user feedback.
- Quotes that demonstrate Designer's responsiveness to user feedback and willingness to incorporate suggestions.

7. interface design.
- References to the design of the software's user interface or specific interface elements.
- Discussions and decisions related to the user interface design, including visual representations and interaction mechanisms.

8. feature request.
- A user's request for a specific feature or functionality to be added to the software.
- Suggestions or requests from users for specific features or functionalities in the Physics Lab software.

9. download inquiry.
- A user's inquiry about downloading or accessing a specific version of the software.
- Users asking about or seeking information on how to download or access the Physics Lab software.

10. active participation.
- Evidence of community members actively engaging in discussions, sharing resources, or providing feedback.
- Instances where participants actively contribute to the conversation by asking questions, sharing information, or responding to others.

11. knowledge sharing.
- Instances of community members sharing knowledge, expertise, or resources related to physics education.
- Users sharing knowledge or providing explanations to help others.
- Instances where community members share knowledge, information or expertise.

12. prioritization.
- Discussions or decisions related to prioritizing the development or implementation of certain features or sections.
- Statements or decisions regarding the order or priority of features or sections to be developed.
===
---
Categories:
* Software Development
* User Experience
* Community Engagement
* Knowledge Sharing

Definitions for each code (12 in total):

1. software feature: version release, software feature: planned updates. 
Relationship: The concepts are parallel, both referring to software features.
Criteria: Mentions of new versions, releases, planned updates, or upcoming features of Physics Lab software.
Label: Software updates and releases
Category: Software Development

2. conceptual understanding, visualization and simulation.
Relationship: The concepts are parallel, both referring to educational features.  
Criteria: Features or affordances aimed at facilitating conceptual physics understanding through visualizations or simulations.
Label: Educational features for understanding
Category: Software Development

3. usability considerations, user experience and usability.
Relationship: The concepts are parallel, both referring to usability aspects.
Criteria: Aspects related to improving the usability, user experience or interface design of the software.
Label: Usability and user experience
Category: User Experience  

4. user feedback, usability feedback.
Relationship: "usability feedback" is a specific type of "user feedback"
Criteria: Comments, suggestions or reports from users regarding their experience or issues with the software's usability.
Label: User feedback on usability
Category: User Experience

5. user involvement, incorporating user needs. 
Relationship: "incorporating user needs" is a consequence of "user involvement"
Criteria: Evidence of involving users in the design process by gathering their feedback and needs.
Label: User involvement in design
Category: User Experience

6. designer responsiveness.
Relationship: A standalone concept.
Criteria: The designer acknowledging, responding to, and incorporating user feedback into the software.
Label: Designer responsiveness to feedback  
Category: User Experience

7. interface design.
Relationship: A standalone concept.
Criteria: References to the design of the user interface, including visual and interaction elements.
Label: User interface design
Category: User Experience

8. feature request.
Relationship: A standalone concept. 
Criteria: A user requesting or suggesting a new feature to be added to the software.
Label: User feature requests
Category: User Experience

9. download inquiry. 
Relationship: A standalone concept.
Criteria: A user asking about how to download or access a specific version of the software.
Label: Software download inquiries
Category: Software Development  

10. active participation.
Relationship: A standalone concept.
Criteria: Evidence of community members actively engaging in discussions, sharing resources or providing feedback.
Label: Active community participation
Category: Community Engagement

11. knowledge sharing.
Relationship: A standalone concept. 
Criteria: Instances where community members share knowledge, expertise or resources related to physics education.
Label: Sharing of knowledge and expertise
Category: Knowledge Sharing

12. prioritization.
Relationship: A standalone concept.
Criteria: Discussions or decisions regarding the priority or order of features/sections to be developed.
Label: Prioritization of development tasks
Category: Software Development
---