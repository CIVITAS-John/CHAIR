You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (18 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
18. 
Concepts: {Repeat the input 18}
Relationship: {What is logical relationship between concepts in code 18, or N/A if not applicable}
Criteria: {Who did what, and how for code 18}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: feature preview, preview upcoming features
- Sharing visual or written updates about upcoming features or changes.
- Designers outline expected features to be included in upcoming updates.

2.
Concepts: provide community updates, communicate important announcements
- Designers communicate information about component and version updates to the community.
- Designers communicate significant updates to the entire user community.

3.
Concepts: detail specific updates, software update process
- Designers communicate the scope and details of software updates.
- The designer communicates the update schedule for different software platforms.

4.
Concepts: communicate release plans, share info on app release
- Designers share updates on project timelines and release plans with users.
- Designers keep users informed about the software release process and forthcoming versions.

5.
Concepts: provide product updates, share development updates
- Designers provide updates regarding the software's technical status and future plans.
- Designers share visual and detailed information about software developments.

6.
Concepts: confirm upcoming updates, confirm future implementations
- Designers confirm details and timelines for planned future updates.
- Designers confirm which features will be included in future updates.

7.
Concepts: solicit user feedback, gather user experience feedback
- Designers invite users to provide feedback and suggestions for improvements.
- Designers solicit user experiences and feedback on usability.

8.
Concepts: inquire about user problems, trying to understand the needs
- Designers and participants ask questions to understand specific user difficulties with the software.
- Inquiries aimed at understanding user issues or needs during the usage of the application.

9.
Concepts: clarify user requests, ask follow-up questions
- Designers express understanding and ask clarifying questions about user needs.
- Designers seek clarification on user inquiries to gather additional information.

10.
Concepts: express user frustration, address technical issues
- Users express dissatisfaction regarding technical limitations or issues.
- Users highlight technology-related limitations affecting software usability.

11.
Concepts: introduce feature functions, provide feature demonstrations
- Designers introduce and explain the functionalities of newly released features.
- Designers illustrate the functionalities available through practical examples.

12.
Concepts: clarify version type, give more information about the version uploaded
- Designers clarify and differentiate software version details for users.
- Designers provide specific information about the version of the software available for users.

13.
Concepts: inquire about updates, inquire about update status
- Users inquire about upcoming software updates and features.
- Inquiries regarding the status of potential updates or features for specific platforms.

14.
Concepts: request user manual, request usage instructions
- Users request documentation or user manuals for better software comprehension.
- Users request information on how to effectively use software features.

15.
Concepts: compare with other software, comparative feedback
- Users compare the software favorably to other applications highlighting usability.
- Users provide feedback comparing the software positively or negatively to alternative options based on functionality.

16.
Concepts: provide positive reviews, share positive feedback
- User gives positive feedback regarding the software's practicality and effectiveness.
- Users share positive opinions and experiences regarding software effectiveness in classrooms.

17.
Concepts: confirm understanding, confirm collaboration
- Users or designers confirm agreement in conversations exchanged.
- Users and designers express agreement on collaborative design concepts.

18.
Concepts: use emojis for engagement, use non verbal communication
- A user employs an emoji as part of their communication.
- Use of emojis or other non-verbal forms of communication by users.
===
---
Definitions for each code (18 in total):
1. 
Concepts: feature preview, preview upcoming features
Relationship: The concepts are logically connected as they both involve sharing visual or written updates about future features, focusing on enhancing community awareness. 
Criteria: Designers share visual or written updates about expected features to be included in future releases.
Phrase: Preview upcoming features.

2. 
Concepts: provide community updates, communicate important announcements
Relationship: These concepts are related as both involve the dissemination of critical information to the community regarding updates and announcements.
Criteria: Designers communicate significant announcements and updates about components and software versions to the community.
Phrase: Communicate important announcements.

3. 
Concepts: detail specific updates, software update process
Relationship: The concepts are connected because they both involve sharing detailed information about the software update process and its components.
Criteria: Designers communicate specific details and the schedule of software updates across various platforms.
Phrase: Detail specific updates.

4. 
Concepts: communicate release plans, share info on app release
Relationship: The concepts logically relate as they both focus on informing users about the timelines and processes associated with software releases.
Criteria: Designers share release plans and timelines for software updates with users to keep them informed.
Phrase: Share info on app release.

5. 
Concepts: provide product updates, share development updates
Relationship: The concepts are related as they both involve communicating information about the technical status and future plans of the software.
Criteria: Designers share updates concerning the software's technical status along with visual information about ongoing developments.
Phrase: Provide product updates.

6.
Concepts: confirm upcoming updates, confirm future implementations
Relationship: These concepts relate because both involve confirming and detailing planned software updates and their timelines.
Criteria: Designers confirm the specifics and timelines regarding features slated for future updates.
Phrase: Confirm upcoming updates.

7. 
Concepts: solicit user feedback, gather user experience feedback
Relationship: The concepts relate as both involve actively seeking user feedback to improve the software based on user experiences.
Criteria: Designers invite users to share feedback and suggestions for Usability enhancements.
Phrase: Gather user experience feedback.

8. 
Concepts: inquire about user problems, trying to understand the needs
Relationship: These concepts are logically connected as they both emphasize understanding user difficulties and specific requirements within the software.
Criteria: Designers and participants ask questions to elucidate user issues and needs while using the application.
Phrase: Inquire about user problems.

9. 
Concepts: clarify user requests, ask follow-up questions
Relationship: The concepts relate as both involve understanding user inquiries more clearly through additional questions.
Criteria: Designers seek clarification on user requests to gather more details about their needs.
Phrase: Clarify user requests.

10. 
Concepts: express user frustration, address technical issues
Relationship: The concepts are interconnected in that expressing frustration often relates to existing technical problems that need to be addressed.
Criteria: Users convey dissatisfaction regarding technical limitations impacting software usability.
Phrase: Address technical issues.

11. 
Concepts: introduce feature functions, provide feature demonstrations
Relationship: These concepts are logically related as both include the presentation and explanation of new feature functionalities to users.
Criteria: Designers introduce and demonstrate newly released feature functions to the community.
Phrase: Provide feature demonstrations.

12. 
Concepts: clarify version type, give more information about the version uploaded
Relationship: The concepts are interconnected as both involve providing users with specific details that differentiate software versions.
Criteria: Designers detail the characteristics and updates pertaining to different software versions for users.
Phrase: Clarify version type.

13. 
Concepts: inquire about updates, inquire about update status
Relationship: These concepts are connected as both involve users seeking information regarding the status of future software updates.
Criteria: Users ask about the status and timing of upcoming software updates or features.
Phrase: Inquire about updates.

14. 
Concepts: request user manual, request usage instructions
Relationship: The concepts are related in that both involve users seeking documentation or guidelines to understand the software better.
Criteria: Users request manuals and instructional materials to facilitate proper use of the software.
Phrase: Request usage instructions.

15. 
Concepts: compare with other software, comparative feedback
Relationship: These concepts relate logically as users evaluate and provide feedback based on comparisons between the software and other applications.
Criteria: Users provide comparative feedback on the software's functionality relative to alternative applications.
Phrase: Compare with other software.

16. 
Concepts: provide positive reviews, share positive feedback
Relationship: The concepts are connected as both pertain to users sharing favorable opinions and experiences regarding the software's effectiveness.
Criteria: Users share positive reviews and feedback based on their experiences with the software.
Phrase: Share positive feedback.

17. 
Concepts: confirm understanding, confirm collaboration
Relationship: The concepts relate as they both involve affirming agreement and collaboration between users and designers.
Criteria: Users or designers confirm mutual understanding and collaboration on design concepts.
Phrase: Confirm collaboration.

18. 
Concepts: use emojis for engagement, use non verbal communication
Relationship: The concepts relate as they both pertain to the use of non-verbal forms of communication, including emojis, to foster engagement.
Criteria: Users incorporate emojis or non-verbal cues in communication to enhance engagement.
Phrase: Use emojis for engagement.
---