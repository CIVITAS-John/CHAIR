You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (53 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
53. 
Concepts: {Repeat the input 53}
Relationship: {What is logical relationship between concepts in code 53, or N/A if not applicable}
Criteria: {Who did what, and how for code 53}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: reflect and clarify, reflect on experiences
- Designers reflect on past experiences to explain challenges or clarify previous statements.
- Designers reflect on past experiences that influence their current practices and decisions.

2.
Concepts: consider future compatibility, listing what might need to be done
- A designer notes potential compatibility issues that may need future attention.
- Designer lists potential tasks or considerations for future development.

3.
Concepts: detail version updates, listing bug fixes and software updates
- Detailed notes about updates, features, and changes in new software versions are provided by the designer.
- Designers outline new features and bug fixes as part of software updates and list new features and updates, including bug fixes in the software.

4.
Concepts: announce updates and improvements, sharing and announcing feature updates
- Designers provide updates on changes to existing features, announce improvements, and make announcements regarding development plans and specifications in upcoming updates.
- Information about changes or new features in upcoming updates is shared by designers and designers announce upcoming updates and invite user suggestions for additional features.

5.
Concepts: inform and introduce features, preview and introduce updates
- Designers inform users about changes in the functionality of features and introduce new components and functionalities of the software.
- Designers provide information or visual content about upcoming features or updates and introductory information about the content of upcoming updates.

6.
Concepts: request software updates, inquiring about update status
- Users ask for updates regarding recent changes, and notifications about new software versions are provided.
- A user inquires about the timing of future software updates and the status of updates for the Android version of the software.

7.
Concepts: reassure users about improvements, highlight and assure progress
- Designers reassure users about ongoing optimizations and address their concerns.
- Designers highlight the progress of software updates and assure users that improvements are in progress.

8.
Concepts: promise to improve, commit to user improvement
- The designer expresses gratitude for user support and commits to improvements.
- Developers commit to improving the software based on user feedback and express commitment to addressing user needs.

9.
Concepts: feature roadmap, plan feature development
- The designer outlines the order of features to be completed in the Physics Lab software.
- Designers outline plans for the order of feature development and enhancements.

10.
Concepts: explain project delays, elaborate on complexities
- Designers explain reasons for delays in software updates or features.
- A designer elaborates on the complexity and timeline of a feature's release and discusses the time required for development.

11.
Concepts: share visual references, share visual progress
- The designer shares a visual reference to assist in communication or clarification using images.
- A designer shares visual updates or images related to the software to illustrate progress or changes in the project.

12.
Concepts: explain team limitations, clarify platform limitations
- A designer discusses limitations faced by the development team and explains software functionalities.
- The designer notes platform limitations regarding system compatibility and explains limitations affecting functionality.

13.
Concepts: speculate on compatibility, confirm system compatibility
- Designer speculates on the compatibility of the software with various systems.
- A designer confirms that a specific version is compatible with certain systems and suggests checking compatibility.

14.
Concepts: propose potential solution, suggest alternative solutions
- Developers propose solutions to potential compatibility issues or technical challenges.
- A user suggests an alternative solution for compatibility issues, and users suggest alternative methods based on experiences.

15.
Concepts: ensure proper operation, provide usage instructions
- Designers provide instructions to ensure users can operate the software correctly.
- A designer provides detailed instructions for using the software's operation and components.

16.
Concepts: plan for long-term stability, give rationale to development decision
- The designer discusses long-term planning for features that ensure stability and emphasizes the long-term benefits of certain features.
- A designer explains the rationale behind development decisions for long-term stability.

17.
Concepts: component integration, assess feature stability
- A designer discusses the integration of components as a means to ensure software stability.
- Designers discuss the reliability of completed features and explain their importance for overall software stability.

18.
Concepts: explaining design goals, explain design intentions
- Designers explain their design goals regarding user experience and accessibility.
- A designer explains the rationale behind the software design for user-friendliness and the focus areas.

19.
Concepts: make technical inquiries, inquire about platform specifics
- Users ask technical questions about the platform, showing interest in details.
- Users inquire about specific functionalities or updates related to the platform and specifications of software versions.

20.
Concepts: question for access, clarify platform access
- Users ask about the availability or access to specific versions of the software.
- Users seek clarification on where to access the software and regarding the version being discussed.

21.
Concepts: ask for download information, request software resources
- A user requests information about where to download the software, using an emoji.
- Users ask about resources available for downloading or inquire about the process to download the software.

22.
Concepts: discuss context of use, provide context for needs
- Instances where users describe the specific contexts in which they use the software.
- Users provide context for their needs or requests related to the software and articulate their usability needs.

23.
Concepts: confirm user identity, sharing identity per request
- A user confirms their identity or role in response to inquiries about their professional background.
- A user shares their professional background in response to a request for information.

24.
Concepts: professional engagement, share professional background
- Users confirm their professional background or involvement in teaching, indicating their expertise.
- Users share their professional or personal backgrounds to provide context and establish credibility.

25.
Concepts: identify teaching background, sharing and introducing teaching backgrounds
- A user identifies their teaching background and current role in middle or high school education.
- A user shares their background and experience as a teacher in different educational levels and introduces their teaching background, including grade levels and experience.

26.
Concepts: discuss internet restrictions, provide context about resources
- Users describe restrictions related to classroom technology use and internet access.
- Users provide context about school network restrictions and available resources.

27.
Concepts: use non verbal communication, express emotions through emojis
- Use of emojis or other non-verbal forms of communication by users.
- Users express emotions or reactions using text or emojis in discussions.

28.
Concepts: self-introduction, initiate interaction with community
- Users introduce themselves to the community to establish presence.
- A user initiates interaction by greeting the community as a new participant.

29.
Concepts: politeness, greet the community
- Participants use polite language to engage with others in the community.
- Participants greet community members to maintain engagement.

30.
Concepts: evaluate software usability, compare with similar applications
- Users comment on the practicality and effectiveness of the software.
- Users compare the software favorably to similar applications or standards.

31.
Concepts: appreciate dedication, appreciate software craftsmanship
- Users express admiration for the commitment and quality of the design process.
- Users acknowledge and appreciate the value of craftsmanship in the software's development.

32.
Concepts: acknowledge feedback received, acknowledge assistance received
- Users express gratitude for feedback received from the community.
- Users express gratitude for assistance or information shared by others.

33.
Concepts: acknowledge provided resources, acknowledge designer contributions
- A user acknowledges and appreciates the resources provided by the designer.
- Users express appreciation for the designer's efforts and contributions to the community.

34.
Concepts: agree with suggestions, second the previous response
- Users express agreement with suggestions made by others.
- Users support or agree with previous comments made by others.

35.
Concepts: suggest practical use case, justify feature requests
- User suggests practical applications for features to enhance usability.
- Users recommend specific features based on their experiences and explain the rationale behind their recommendations.

36.
Concepts: expand platform scope, request additional features, suggest educational enhancements
- Users suggest expanding the software's features to include additional topics.
- Users request the inclusion of additional features or functionalities in the software.
- A user suggests features that would enhance the convenience and utility of the software.

37.
Concepts: make and provide suggestions, propose feature improvements
- A designer offers a suggestion regarding the software, and a user suggests a better method for a specific task.
- The designer suggests improvements for the software's features, and users exchange suggestions for new functionalities.

38.
Concepts: usability improvement, suggest feature simplification
- Instances where suggestions or changes are made to improve the usability of the software.
- Suggestions to simplify features or processes within the software are proposed.

39.
Concepts: gather user opinions, take user feedback into account
- The designer justifies the need to gather opinions before starting new features.
- A designer indicates plans to incorporate user feedback in the next software update.

40.
Concepts: establish feedback loop, integrate user feedback
- Instances where user feedback is collected and implemented into design decisions.
- Instances where user feedback is acknowledged and incorporated into the design process are noted.

41.
Concepts: continuously refining the product, refining design and adjusting features
- Designers continuously refined and improved the product based on user feedback, discussing updates and optimizations in an iterative manner.
- Developers discuss the need for refining or adapting design elements based on user input and discuss adjustments that need to be made to existing features.

42.
Concepts: encourage detailed feedback, elaborate on suggestions
- Designer encourages users to provide more detailed feedback and elaborates on suggestions with examples.
- Users offer additional suggestions or refinements to previously discussed ideas and provide context in the conversation.

43.
Concepts: share potential solutions, sharing information for design
- Designers share potential solutions or strategies based on feedback.
- User shares relevant information or experiences that impact design considerations.

44.
Concepts: engage with community, seeking input and encouraging involvement
- Designers engage with the community through responses and questions.
- Designers actively seek feedback or opinions from the community and encourage community members to participate and provide suggestions.

45.
Concepts: offer co-design opportunities, promise community consultation
- Designers communicate their intention to involve the community in the design process.
- Designers communicate intentions to consult with the community before making decisions.

46.
Concepts: connecting to community, cultivating community
- Designers relate the software to community needs and interests.
- Developers encourage community involvement and feedback in the software development process.

47.
Concepts: encourage in-group discussion, encourage ongoing support
- A designer encourages users to voice any issues directly within the group.
- A designer encourages users to report issues directly in the community and discuss encountered problems.

48.
Concepts: collaborate on problem-solving, engage in troubleshooting
- Moments where designers and users work together to address issues are noted.
- User engages in problem-solving discussions, and designers seek to understand and resolve user concerns.

49.
Concepts: seek user context, inquire about user role
- Designers seek and gather context by inquiring about users' teaching experiences and backgrounds.
- Designers ask users about their roles or backgrounds to provide relevant assistance.

50.
Concepts: ask teachers' needs, consult teachers for input
- Developers inquire about the needs and preferences of teachers within the community.
- Designers seek input from teachers regarding specific educational content and standards.

51.
Concepts: community answer, query and response
- The designer provides answers to user questions, contributing to community knowledge.
- Instances where users ask questions and receive answers from designers or other community members.

52.
Concepts: direct users to resources, provide access information
- Designer directs users to specific resources for accessing software or information.
- Designer provides information on how to access resources or software with detailed answers.

53.
Concepts: sending resources, share access information
- Designers share resources or information regarding software access and updates.
- The designer shares access information regarding development plans or download links.
===
---
Definitions for each code (53 in total):
1.
Concepts: reflect and clarify, reflect on experiences
Relationship: Designers use reflection on past experiences to clarify current challenges and decisions.
Criteria: Designers reflect on past experiences to explain challenges or clarify previous statements.
Phrase: Reflect on experiences.

2.
Concepts: consider future compatibility, listing what might need to be done
Relationship: Designers and users anticipate future needs and tasks related to software compatibility.
Criteria: A designer notes potential compatibility issues and lists tasks for future development.
Phrase: Consider future compatibility.

3.
Concepts: detail version updates, listing bug fixes and software updates
Relationship: Designers provide comprehensive details about software updates, including new features and bug fixes.
Criteria: Detailed notes about updates and bug fixes in software versions are provided by the designer.
Phrase: Detail version updates.

4.
Concepts: announce updates and improvements, sharing and announcing feature updates
Relationship: Designers communicate changes and improvements to users regarding software features.
Criteria: Designers provide updates on changes and invite suggestions for upcoming updates.
Phrase: Announce updates and improvements.

5.
Concepts: inform and introduce features, preview and introduce updates
Relationship: Designers provide information about new features and upcoming updates to users.
Criteria: Designers inform users about changes and introduce new functionalities of the software.
Phrase: Inform and introduce features.

6.
Concepts: request software updates, inquiring about update status
Relationship: Users seek information about the status of software updates and changes.
Criteria: Users ask for updates regarding recent changes and inquire about future software versions.
Phrase: Request software updates.

7.
Concepts: reassure users about improvements, highlight and assure progress
Relationship: Designers communicate progress and reassure users about ongoing software improvements.
Criteria: Designers reassure users about optimizations and highlight the progress of software updates.
Phrase: Reassure users about improvements.

8.
Concepts: promise to improve, commit to user improvement
Relationship: Designers express commitment to enhancing the software based on user feedback.
Criteria: The designer commits to improvements based on user feedback and expresses gratitude for support.
Phrase: Promise to improve.

9.
Concepts: feature roadmap, plan feature development
Relationship: Designers outline planned features and their development order for the software.
Criteria: The designer outlines the order of features to be completed in the Physics Lab software.
Phrase: Plan feature development.

10.
Concepts: explain project delays, elaborate on complexities
Relationship: Designers clarify reasons for delays and discuss complexities affecting project timelines.
Criteria: Designers explain reasons for delays in software updates or features.
Phrase: Explain project delays.

11.
Concepts: share visual references, share visual progress
Relationship: Designers use visual aids to communicate progress and clarify information.
Criteria: The designer shares visual references to assist in communication about the software.
Phrase: Share visual references.

12.
Concepts: explain team limitations, clarify platform limitations
Relationship: Designers discuss limitations faced by the development team and software functionalities.
Criteria: A designer discusses limitations faced by the development team and explains software functionalities.
Phrase: Explain team limitations.

13.
Concepts: speculate on compatibility, confirm system compatibility
Relationship: Designers assess and confirm the compatibility of the software with various systems.
Criteria: Designer speculates on compatibility and confirms that a specific version is compatible with certain systems.
Phrase: Confirm system compatibility.

14.
Concepts: propose potential solution, suggest alternative solutions
Relationship: Developers and users collaboratively propose solutions to technical challenges.
Criteria: Developers propose solutions to potential compatibility issues and users suggest alternatives.
Phrase: Propose potential solution.

15.
Concepts: ensure proper operation, provide usage instructions
Relationship: Designers provide guidance to ensure users can operate the software effectively.
Criteria: Designers provide instructions to ensure users can operate the software correctly.
Phrase: Provide usage instructions.

16.
Concepts: plan for long-term stability, give rationale to development decision
Relationship: Designers emphasize long-term planning for stability in software features.
Criteria: The designer discusses long-term planning for features that ensure stability.
Phrase: Plan for long-term stability.

17.
Concepts: component integration, assess feature stability
Relationship: Designers evaluate the integration of components to ensure overall software stability.
Criteria: A designer discusses the integration of components as a means to ensure software stability.
Phrase: Assess feature stability.

18.
Concepts: explaining design goals, explain design intentions
Relationship: Designers articulate their goals and intentions regarding user experience and accessibility.
Criteria: Designers explain their design goals regarding user experience and accessibility.
Phrase: Explain design goals.

19.
Concepts: make technical inquiries, inquire about platform specifics
Relationship: Users ask detailed questions about the platform and its functionalities.
Criteria: Users ask technical questions about the platform, showing interest in details.
Phrase: Make technical inquiries.

20.
Concepts: question for access, clarify platform access
Relationship: Users seek clarification on the availability of software versions and access points.
Criteria: Users ask about the availability or access to specific versions of the software.
Phrase: Clarify platform access.

21.
Concepts: ask for download information, request software resources
Relationship: Users request information regarding the download process and resources.
Criteria: A user requests information about where to download the software.
Phrase: Request software resources.

22.
Concepts: discuss context of use, provide context for needs
Relationship: Users describe their specific contexts and needs for using the software.
Criteria: Instances where users describe the specific contexts in which they use the software.
Phrase: Discuss context of use.

23.
Concepts: confirm user identity, sharing identity per request
Relationship: Users affirm their identity in response to inquiries about their professional background.
Criteria: A user confirms their identity or role in response to inquiries about their professional background.
Phrase: Confirm user identity.

24.
Concepts: professional engagement, share professional background
Relationship: Users provide context about their professional backgrounds to establish credibility.
Criteria: Users share their professional or personal backgrounds to provide context.
Phrase: Share professional background.

25.
Concepts: identify teaching background, sharing and introducing teaching backgrounds
Relationship: Users disclose their teaching backgrounds to establish their roles in education.
Criteria: A user identifies their teaching background and shares their experience in education.
Phrase: Identify teaching background.

26.
Concepts: discuss internet restrictions, provide context about resources
Relationship: Users describe limitations related to technology use and available resources.
Criteria: Users describe restrictions related to classroom technology use and internet access.
Phrase: Discuss internet restrictions.

27.
Concepts: use non verbal communication, express emotions through emojis
Relationship: Users utilize non-verbal communication to express emotions in discussions.
Criteria: Use of emojis or other non-verbal forms of communication by users.
Phrase: Use non-verbal communication.

28.
Concepts: self-introduction, initiate interaction with community
Relationship: Users introduce themselves to establish their presence within the community.
Criteria: Users introduce themselves to the community to establish presence.
Phrase: Self-introduction.

29.
Concepts: politeness, greet the community
Relationship: Participants engage with the community using polite language and greetings.
Criteria: Participants use polite language to engage with others in the community.
Phrase: Greet the community.

30.
Concepts: evaluate software usability, compare with similar applications
Relationship: Users assess software effectiveness by comparing it to similar applications.
Criteria: Users comment on the practicality and effectiveness of the software.
Phrase: Evaluate software usability.

31.
Concepts: appreciate dedication, appreciate software craftsmanship
Relationship: Users express admiration for the quality and commitment in software development.
Criteria: Users express admiration for the commitment and quality of the design process.
Phrase: Appreciate software craftsmanship.

32.
Concepts: acknowledge feedback received, acknowledge assistance received
Relationship: Users express gratitude for feedback and assistance from the community.
Criteria: Users express gratitude for feedback received from the community.
Phrase: Acknowledge feedback received.

33.
Concepts: acknowledge provided resources, acknowledge designer contributions
Relationship: Users appreciate the resources and efforts provided by the designer.
Criteria: A user acknowledges and appreciates the resources provided by the designer.
Phrase: Acknowledge designer contributions.

34.
Concepts: agree with suggestions, second the previous response
Relationship: Users express agreement and support for suggestions made by others.
Criteria: Users express agreement with suggestions made by others.
Phrase: Agree with suggestions.

35.
Concepts: suggest practical use case, justify feature requests
Relationship: Users recommend features based on practical applications and their experiences.
Criteria: User suggests practical applications for features to enhance usability.
Phrase: Suggest practical use case.

36.
Concepts: expand platform scope, request additional features, suggest educational enhancements
Relationship: Users propose enhancements to broaden the software's functionality.
Criteria: Users suggest expanding the software's features to include additional topics.
Phrase: Request additional features.

37.
Concepts: make and provide suggestions, propose feature improvements
Relationship: Designers and users exchange suggestions for improving software features.
Criteria: A designer offers a suggestion regarding the software, and a user suggests a better method.
Phrase: Propose feature improvements.

38.
Concepts: usability improvement, suggest feature simplification
Relationship: Users propose changes aimed at enhancing the software's usability.
Criteria: Instances where suggestions or changes are made to improve the usability of the software.
Phrase: Suggest feature simplification.

39.
Concepts: gather user opinions, take user feedback into account
Relationship: Designers emphasize the importance of user feedback in development.
Criteria: The designer justifies the need to gather opinions before starting new features.
Phrase: Gather user opinions.

40.
Concepts: establish feedback loop, integrate user feedback
Relationship: Designers actively incorporate user feedback into the design process.
Criteria: Instances where user feedback is collected and implemented into design decisions.
Phrase: Integrate user feedback.

41.
Concepts: continuously refining the product, refining design and adjusting features
Relationship: Designers iteratively improve the product based on user input and feedback.
Criteria: Designers continuously refined and improved the product based on user feedback.
Phrase: Continuously refine the product.

42.
Concepts: encourage detailed feedback, elaborate on suggestions
Relationship: Designers and users engage in discussions to refine ideas and suggestions.
Criteria: Designer encourages users to provide more detailed feedback and elaborates on suggestions.
Phrase: Encourage detailed feedback.

43.
Concepts: share potential solutions, sharing information for design
Relationship: Designers and users exchange information that influences design considerations.
Criteria: Designers share potential solutions or strategies based on feedback.
Phrase: Share potential solutions.

44.
Concepts: engage with community, seeking input and encouraging involvement
Relationship: Designers actively involve the community in the design process through engagement.
Criteria: Designers engage with the community through responses and questions.
Phrase: Engage with community.

45.
Concepts: offer co-design opportunities, promise community consultation
Relationship: Designers communicate their intention to involve the community in design decisions.
Criteria: Designers communicate intentions to consult with the community before making decisions.
Phrase: Offer co-design opportunities.

46.
Concepts: connecting to community, cultivating community
Relationship: Designers relate software development to community needs and encourage involvement.
Criteria: Designers relate the software to community needs and interests.
Phrase: Cultivate community.

47.
Concepts: encourage in-group discussion, encourage ongoing support
Relationship: Designers foster an environment for users to discuss issues within the community.
Criteria: A designer encourages users to voice any issues directly within the group.
Phrase: Encourage in-group discussion.

48.
Concepts: collaborate on problem-solving, engage in troubleshooting
Relationship: Designers and users work together to address and resolve issues.
Criteria: Moments where designers and users work together to address issues are noted.
Phrase: Collaborate on problem-solving.

49.
Concepts: seek user context, inquire about user role
Relationship: Designers gather context by asking users about their backgrounds and experiences.
Criteria: Designers seek and gather context by inquiring about users' teaching experiences.
Phrase: Seek user context.

50.
Concepts: ask teachers' needs, consult teachers for input
Relationship: Developers engage with teachers to understand their specific needs and preferences.
Criteria: Developers inquire about the needs and preferences of teachers within the community.
Phrase: Ask teachers' needs.

51.
Concepts: community answer, query and response
Relationship: Users and designers interact to share knowledge and provide answers to questions.
Criteria: The designer provides answers to user questions, contributing to community knowledge.
Phrase: Community answer.

52.
Concepts: direct users to resources, provide access information
Relationship: Designers provide users with information on accessing software and resources.
Criteria: Designer directs users to specific resources for accessing software or information.
Phrase: Direct users to resources.

53.
Concepts: sending resources, share access information
Relationship: Designers share resources and information related to software access and updates.
Criteria: Designers share resources or information regarding software access and updates.
Phrase: Share access information.
---