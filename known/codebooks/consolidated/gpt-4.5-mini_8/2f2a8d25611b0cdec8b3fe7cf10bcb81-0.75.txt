You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (60 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
60. 
Concepts: {Repeat the input 60}
Relationship: {What is logical relationship between concepts in code 60, or N/A if not applicable}
Criteria: {Who did what, and how for code 60}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: list upcoming features, explain upcoming features
- Designer lists features that are planned for inclusion in future software versions.
- The designer describes specific features planned for future implementation.

2.
Concepts: announce software updates, announce software releases
- Announcement of updates and new features included in a software version release.
- Designers provide updates about the software versions and new features.
- Designers announce the availability or status of a new software version along with its features.

3.
Concepts: share version details, provide detailed updates
- A designer provides information about the features and updates included in a software version.
- Designer provides a comprehensive summary of new features and updates for the software.

4.
Concepts: provide update schedules, manage release schedules
- Designer provides a schedule for upcoming software updates and releases.
- Designers detail the scheduled release of updates and versions for the software.

5.
Concepts: share update timelines, communicate release plans
- Designers inform the community about the status or timeline of software updates and releases.
- Designers communicate plans for software releases and updates to the community.

6.
Concepts: internal update, announce component updates
- Designer informs users about updates to existing software features.
- Designer informs users about updates and changes to specific components within the software.

7.
Concepts: provide community updates, make community announcements
- The designer communicates updates about new features, including adjustments and bug fixes, to the community.
- Designer communicates plans for software updates or improvements, aiming to keep the community informed.

8.
Concepts: communicate ongoing work, communication about progress and plans
- Designer shares status updates related to ongoing development work.
- The designer communicates complexity and time expectations regarding ongoing development efforts.

9.
Concepts: feature preview, preview upcoming updates
- Designers share visual or textual updates related to features that are currently in development.
- Designer previews upcoming features and updates for the software.

10.
Concepts: share visual updates, share feature development info
- A designer shares visual updates or images related to the software's progress or features.
- Designers share information about updates and new features in the software's development.

11.
Concepts: development update, communicate software updates
- Information shared by designers about the current status, updates, and future plans for the Physics Lab software.
- Designers provide information about updates or changes to the Physics Lab tool.

12.
Concepts: discuss future plans, open future planning discussions
- Discussions about potential future developments and directions for the product.
- Designers outline future plans or considerations related to software development.

13.
Concepts: outline future plans, outline development priorities
- Designer outlines future development plans prioritizing specific subject areas.
- Designers outline priorities for development, indicating a structured approach to project management.

14.
Concepts: explain limitations, talk about limitation of the solution
- A designer explains and identifies the limitations of the software and its current version.
- Designer notes limitations in the functionality of a proposed solution.

15.
Concepts: apologize for timing, apologize for potential interruptions
- Designers express regret for communicating at inconvenient times.
- Designers apologize for any inconvenience caused by their communications or updates.

16.
Concepts: confirm future features, promise future improvements
- Designer assures users that a desired feature will eventually be implemented.
- Assurance about the existence of features that are planned for the future.

17.
Concepts: respond to user feedback, plan for iterative feedback
- Designers react to user feedback and outline intended changes for future updates.
- Designer outlines plans to gather user feedback and implement iterative updates based on that feedback.

18.
Concepts: accept and implement suggestions, acknowledgment and implementation
- Designers acknowledge and commit to implementing user suggestions in future updates.
- Designers acknowledging user feedback and discussing plans to implement suggested features.

19.
Concepts: reassure users, resolve user concerns
- Designers reassure users regarding software updates and features in response to inquiries.
- Designers reassure users about specific concerns by providing explanations and responses.

20.
Concepts: seek clarifications, response to clarification, ask for further clarification
- Designers seek further explanation or elaboration on points made during discussions.
- A designer responds to a clarification request by providing additional information.
- Designer seeks clarification or more details on a previous statement or query.

21.
Concepts: followup, ask follow-up questions
- Users and designers engage in dialogue to clarify issues or confirm assumptions related to software functionality.
- A designer poses follow-up questions to clarify user needs or issues encountered.

22.
Concepts: troubleshooting, inquire about problems
- Designer seeks to understand user experiences regarding issues encountered with the software.
- Designer seeks clarification about issues users are experiencing with the software.

23.
Concepts: offer solutions, propose potential solution
- A designer provides theoretical or practical solutions to user concerns or questions.
- Designers propose solutions to issues related to software development or compatibility.

24.
Concepts: user support, provide technical support
- Assistance and support provided by designers to help users effectively use the product.
- Instances where designers provide technical support or guidance to users.

25.
Concepts: respond, provide designer response
- Designers respond to user inputs, addressing issues or providing information.
- Designers respond to user feedback and suggestions, showing engagement with community input.

26.
Concepts: user guidance, provide usage instructions
- A designer provides detailed instructions on new features and functionality to assist users.
- A designer provides specific instructions on how to operate a new feature and how to use specific features of the software correctly.

27.
Concepts: provide feature details, explain functionalities
- Designer elaborates on features and provides practical examples to enhance user understanding.
- A designer provides explanations regarding the softwareâ€™s capabilities and specific features to users.

28.
Concepts: compliment 3d effect, visual design appreciation
- A user compliments the quality of the 3D effects present in the software.
- A user appreciates the visual aspects of the software, specifically its 3D effects.

29.
Concepts: express appreciation, appreciate features, express positive feedback
- User expresses appreciation for the efforts and quality put into the software development.
- Users express appreciation and satisfaction regarding the software's development or specific features.
- Users express satisfaction and positive sentiments regarding the software and its features.

30.
Concepts: share user reviews, provide comparative feedback
- Users share positive reviews regarding the software's usability and practicality compared to others.
- Users provide feedback by comparing the software with others, highlighting its practical advantages.

31.
Concepts: propose another feature, suggest design enhancements
- Users propose additional functionalities that would facilitate their teaching preparations.
- Users propose functionalities that would improve ease of use or teaching effectiveness.

32.
Concepts: invite feedback, solicit suggestions, elicit feedback
- Designer invites users to provide feedback and suggestions for future updates.
- A designer requests user suggestions and invites them to share their requirements for future updates.
- Designer actively invites suggestions and input from the community regarding product features and updates.

33.
Concepts: prompting user feedback, encourage interaction
- A designer prompts users for feedback to foster a collaborative environment.
- A designer encourages users to engage by sharing their needs or suggestions for improvements.

34.
Concepts: gather user input, gather user feedback
- A designer gathers input from users regarding specific needs or preferences for future software design.
- A designer seeks feedback from users on potential features or improvements and their experiences using the product.

35.
Concepts: prioritize user feedback, integrate user feedback
- Designers prioritize user feedback as a crucial element in the software's improvement.
- Designers actively seek and incorporate user feedback into the development of the software.

36.
Concepts: provide user response, provide specific feedback, offer suggestions and feedback
- Users provide feedback and suggestions that impact the development of the software.
- Users suggest improvements and specify areas needing refinement in the software.
- Users provide feedback or suggestions about software features and development direction.

37.
Concepts: suggestion, suggest improvements and new features
- Designer and users offer suggestions for improvements and adjustments to the software.
- Users propose enhancements and new functionalities to enhance the software's usability and efficiency.

38.
Concepts: community feedback, community response
- Users providing feedback and suggestions to improve the product.
- Users provide feedback or reactions to issues related to the software's functionality and usage.

39.
Concepts: inquiry, request clarification
- Users ask questions to seek information or clarification.
- User expresses confusion or uncertainty about a topic, prompting clarification.

40.
Concepts: inquire about updates, inquire about update timeline, inquire about update status
- User inquires about the possibility of upcoming updates or recent changes to the software.
- User inquires about the timeline for upcoming software updates and the schedule for new features.
- Users inquire about the timing of upcoming software updates or the status of specific software versions.

41.
Concepts: request guidance, seek usage instructions
- A user seeks guidance or requests assistance on using a specific version of the software.
- Users ask for guidance on utilizing specific features of the software effectively.

42.
Concepts: seek help, express need for support
- Users express a need for assistance or clarification regarding the software.
- Users express the need for additional support in using the software effectively.

43.
Concepts: request user manual, request resources
- Users request a user manual or documentation to understand how to use the software better.
- Users request manuals and information regarding resources related to the software to enhance their understanding.

44.
Concepts: cross platform usage, inquire about platform compatibility
- A user inquires about the usage of the application on different platforms.
- Users seek information about the availability or compatibility of the software on different platforms.

45.
Concepts: inquire about access, inquire about download information
- A user inquires about the process to access or download the software.
- User inquires about download locations or access to specific software versions.

46.
Concepts: expressive, express emotions
- Expression of feelings or emotions, often accompanied by emojis, in the conversation.
- Users express emotions or sentiments through visual symbols like emojis.

47.
Concepts: reciprocate greetings, initiate interaction through greeting
- Designers greet users and reciprocate greetings to foster a welcoming atmosphere.
- Users and designers greet each other to initiate conversation and interaction.

48.
Concepts: appreciate community support, acknowledge community support, acknowledge and demonstrate appreciation
- Users express support for designers, and designers acknowledge this support in the community.
- Designers express gratitude towards the community for their active engagement and support.
- Users acknowledge and appreciate the efforts made by designers in the community.

49.
Concepts: user appreciation, user interaction and gratitude
- Expressions of thanks or appreciation from users.
- Users express gratitude or appreciation in their interactions within the community.

50.
Concepts: seek community input, consulting community
- Designers actively seek community feedback prior to determining development direction.
- Designers engage with the community to gather input or opinions on certain topics or features.

51.
Concepts: cultivate community involvement, encourage participatory design
- Designers encourage community involvement and feedback in the development of the software.
- Designers encourage community contributions and feedback in the design process for the software.

52.
Concepts: invite user participation, invite community participation
- Inviting community members to participate and contribute to the development process.
- Designers invite community members to provide feedback for future improvements.

53.
Concepts: engage with the community, maintain community interaction
- Designers engage with the community to foster interaction and encourage participation.
- Designers initiate or maintain communication with community members to foster interaction.

54.
Concepts: seek consensus, express agreement on design ideas
- Designer seeks agreement or input from users on a proposed idea.
- Users and designers express agreement or approval of proposed design ideas.

55.
Concepts: involve users in design, co-design with users
- Instances where designers actively involve users in the design process.
- Involving users in the design process, allowing them to contribute ideas and make decisions.

56.
Concepts: inquire about user roles, ask about user's professional background
- Designer asks a user about their role to better understand the audience.
- Designers inquire about the user's professional role to better tailor their support or responses.

57.
Concepts: designer user interaction, identify roles within the community
- The designer interacts with a user to clarify their role within the community.
- Users and designers identify their roles, contributing to community dynamics.

58.
Concepts: confirm compatibility
- A designer confirms the compatibility of a version or feature with user needs.
- The designer assures and confirms the compatibility of the software with specific hardware and operating systems.

59.
Concepts: make feature request
- A user makes a detailed request for specific features to be developed or improved.
- Users request new features or improvements for the Physics Lab tool that cater to physics experiments.

60.
Concepts: clarify version type
- Clarification of the specific type or version of a product being discussed.
- A designer clarifies which software version is being discussed in the group.
===
---
Definitions for each code (60 in total):

1.
Concepts: list upcoming features, explain upcoming features
Relationship: The concepts are related as both involve communication about future software developments.
Criteria: Designers list and describe features planned for future software versions for community awareness.
Phrase: List and explain upcoming features.

2.
Concepts: announce software updates, announce software releases
Relationship: Both concepts involve notifying users about new software versions and their features.
Criteria: Designers announce updates and releases to inform users about improvements and new features.
Phrase: Announce software updates and releases.

3.
Concepts: share version details, provide detailed updates
Relationship: Both concepts involve providing information about software versions and their features.
Criteria: Designers provide comprehensive information about features and updates in each software version.
Phrase: Share version details and updates.

4.
Concepts: provide update schedules, manage release schedules
Relationship: The concepts are related as both involve timelines for software updates.
Criteria: Designers provide and manage schedules for future software updates and releases.
Phrase: Provide and manage update schedules.

5.
Concepts: share update timelines, communicate release plans
Relationship: Both concepts involve informing the community about upcoming software updates.
Criteria: Designers communicate timelines and plans for software updates to keep the community informed.
Phrase: Share timelines and communicate release plans.

6.
Concepts: internal update, announce component updates
Relationship: The concepts relate as both communicate changes regarding existing software features.
Criteria: Designers inform users about updates to the software's features and components.
Phrase: Announce internal and component updates.

7.
Concepts: provide community updates, make community announcements
Relationship: Both concepts involve communication aimed at keeping the community informed.
Criteria: Designers communicate updates and plans regarding software to the community.
Phrase: Provide community updates and announcements.

8.
Concepts: communicate ongoing work, communication about progress and plans
Relationship: Both concepts involve sharing information about development status.
Criteria: Designers share status and complexity information about ongoing development work.
Phrase: Communicate ongoing work and progress.

9.
Concepts: feature preview, preview upcoming updates
Relationship: Both concepts involve sharing information about future software features.
Criteria: Designers share previews of features and updates currently in development.
Phrase: Preview upcoming features and updates.

10.
Concepts: share visual updates, share feature development info
Relationship: The concepts are related through the visual representation of software development.
Criteria: Designers share visual updates and information regarding feature development.
Phrase: Share visual updates and development information.

11.
Concepts: development update, communicate software updates
Relationship: Both concepts focus on updating users about software status and future plans.
Criteria: Designers provide updates about the current status and future plans for the software.
Phrase: Communicate development and software updates.

12.
Concepts: discuss future plans, open future planning discussions
Relationship: Both concepts involve conversations about potential directions for the product.
Criteria: Designers and users discuss future developments and directions for the software.
Phrase: Discuss and open future planning.

13.
Concepts: outline future plans, outline development priorities
Relationship: Both concepts relate to planning and prioritizing software development efforts.
Criteria: Designers outline structured future plans and priorities for development.
Phrase: Outline future plans and priorities.

14.
Concepts: explain limitations, talk about limitation of the solution
Relationship: Both concepts involve discussing the constraints of the software.
Criteria: Designers explain and identify the limitations of the current software version.
Phrase: Explain and discuss limitations.

15.
Concepts: apologize for timing, apologize for potential interruptions
Relationship: Both concepts express regret concerning communication timing.
Criteria: Designers express apologies for any inconvenience caused by their communications.
Phrase: Apologize for timing and interruptions.

16.
Concepts: confirm future features, promise future improvements
Relationship: Both concepts involve assurances about forthcoming software features.
Criteria: Designers assure users about the implementation of desired future features.
Phrase: Confirm and promise future features.

17.
Concepts: respond to user feedback, plan for iterative feedback
Relationship: Both concepts focus on engaging users based on their feedback.
Criteria: Designers react to user feedback and outline plans for iterative improvements.
Phrase: Respond to and plan for feedback.

18.
Concepts: accept and implement suggestions, acknowledgment and implementation
Relationship: Both concepts involve acknowledging and committing to user suggestions.
Criteria: Designers acknowledge user suggestions and commit to implementing them in updates.
Phrase: Accept and implement suggestions.

19.
Concepts: reassure users, resolve user concerns
Relationship: Both concepts involve addressing user worries regarding the software.
Criteria: Designers reassure users about updates and features while addressing their concerns.
Phrase: Reassure and resolve user concerns.

20.
Concepts: seek clarifications, response to clarification, ask for further clarification
Relationship: The concepts are related as they involve the exchange of information for clarity.
Criteria: Designers seek and respond to clarification requests to enhance understanding.
Phrase: Seek and respond to clarifications.

21.
Concepts: followup, ask follow-up questions
Relationship: Both concepts relate to continuing dialogue for clarification.
Criteria: Designers and users engage in follow-up questions to clarify issues or needs.
Phrase: Follow up with questions.

22.
Concepts: troubleshooting, inquire about problems
Relationship: Both concepts involve addressing user issues with the software.
Criteria: Designers seek to understand user experiences and issues encountered with the software.
Phrase: Troubleshoot and inquire about problems.

23.
Concepts: offer solutions, propose potential solution
Relationship: Both concepts involve providing answers to user concerns.
Criteria: Designers propose theoretical or practical solutions to user issues.
Phrase: Offer and propose solutions.

24.
Concepts: user support, provide technical support
Relationship: Both concepts focus on assisting users in using the software effectively.
Criteria: Designers provide technical support to help users navigate and utilize the product.
Phrase: Provide user and technical support.

25.
Concepts: respond, provide designer response
Relationship: The concepts are related as both involve engagement with user input.
Criteria: Designers respond to user feedback and issues, demonstrating engagement.
Phrase: Respond to user input.

26.
Concepts: user guidance, provide usage instructions
Relationship: Both concepts involve assisting users in understanding software features.
Criteria: Designers provide instructions on how to operate new functionalities effectively.
Phrase: Provide user guidance and instructions.

27.
Concepts: provide feature details, explain functionalities
Relationship: Both concepts involve elaborating on software capabilities.
Criteria: Designers provide detailed explanations regarding features and functionalities of the software.
Phrase: Provide and explain feature details.

28.
Concepts: compliment 3d effect, visual design appreciation
Relationship: Both concepts express positive sentiments about the software's design.
Criteria: Users express appreciation for the quality of the software's visual effects.
Phrase: Compliment visual design.

29.
Concepts: express appreciation, appreciate features, express positive feedback
Relationship: The concepts relate to users sharing their positive sentiments about the software.
Criteria: Users express gratitude for the software's quality and specific features.
Phrase: Express appreciation and positive feedback.

30.
Concepts: share user reviews, provide comparative feedback
Relationship: Both concepts involve users sharing their opinions about the software.
Criteria: Users share positive reviews and comparative feedback about the software's usability.
Phrase: Share reviews and feedback.

31.
Concepts: propose another feature, suggest design enhancements
Relationship: Both concepts involve users suggesting additional functionalities.
Criteria: Users propose enhancements that would improve teaching effectiveness and ease of use.
Phrase: Propose features and enhancements.

32.
Concepts: invite feedback, solicit suggestions, elicit feedback
Relationship: The concepts are related as they involve reaching out for user input.
Criteria: Designers actively invite and solicit feedback from users for future updates.
Phrase: Invite and elicit feedback.

33.
Concepts: prompting user feedback, encourage interaction
Relationship: Both concepts involve stimulating user engagement and feedback.
Criteria: Designers prompt users for feedback to foster a collaborative environment.
Phrase: Prompt and encourage feedback.

34.
Concepts: gather user input, gather user feedback
Relationship: The concepts are related as both involve collecting information from users.
Criteria: Designers gather input and feedback from users regarding software development needs.
Phrase: Gather user input and feedback.

35.
Concepts: prioritize user feedback, integrate user feedback
Relationship: Both concepts focus on the importance of user feedback in software improvements.
Criteria: Designers prioritize and incorporate user feedback into the software's development.
Phrase: Prioritize and integrate feedback.

36.
Concepts: provide user response, provide specific feedback, offer suggestions and feedback
Relationship: The concepts are related as they involve users expressing their thoughts on software.
Criteria: Users provide feedback and suggestions that influence software development.
Phrase: Provide feedback and suggestions.

37.
Concepts: suggestion, suggest improvements and new features
Relationship: Both concepts involve proposing enhancements to the software.
Criteria: Designers and users suggest improvements and new features for the software.
Phrase: Suggest improvements and features.

38.
Concepts: community feedback, community response
Relationship: Both concepts involve users providing input regarding software functionality.
Criteria: Users provide feedback and reactions to enhance the software's usability.
Phrase: Provide community feedback and responses.

39.
Concepts: inquiry, request clarification
Relationship: Both concepts involve users seeking information to clarify their understanding.
Criteria: Users ask questions and seek clarification on specific software topics.
Phrase: Inquiry and request clarification.

40.
Concepts: inquire about updates, inquire about update timeline, inquire about update status
Relationship: The concepts are related as they involve users seeking information about updates.
Criteria: Users inquire about the status and timelines of upcoming updates and changes.
Phrase: Inquire about updates and timelines.

41.
Concepts: request guidance, seek usage instructions
Relationship: Both concepts involve users seeking assistance to use the software effectively.
Criteria: Users request guidance or instructions on specific features of the software.
Phrase: Request and seek guidance.

42.
Concepts: seek help, express need for support
Relationship: Both concepts involve users expressing their need for assistance.
Criteria: Users express the need for additional support in using the software effectively.
Phrase: Seek help and support.

43.
Concepts: request user manual, request resources
Relationship: Both concepts involve users seeking documentation for better understanding.
Criteria: Users request manuals or resources to enhance their understanding of the software.
Phrase: Request manuals and resources.

44.
Concepts: cross platform usage, inquire about platform compatibility
Relationship: Both concepts involve users seeking information about software usability on different platforms.
Criteria: Users inquire about the software's availability and compatibility across platforms.
Phrase: Inquire about platform compatibility.

45.
Concepts: inquire about access, inquire about download information
Relationship: Both concepts involve users seeking information about how to obtain the software.
Criteria: Users inquire about accessing or downloading the software and specific versions.
Phrase: Inquire about access and downloads.

46.
Concepts: expressive, express emotions
Relationship: The concepts relate to users demonstrating feelings through communication.
Criteria: Users express emotions or sentiments in their interactions through visual symbols.
Phrase: Express emotions.

47.
Concepts: reciprocate greetings, initiate interaction through greeting
Relationship: Both concepts involve creating a welcoming interaction environment.
Criteria: Designers and users greet each other to foster conversation and interaction.
Phrase: Reciprocate and initiate greetings.

48.
Concepts: appreciate community support, acknowledge community support, acknowledge and demonstrate appreciation
Relationship: All concepts involve recognizing and valuing community contributions.
Criteria: Designers and users express and acknowledge support within the community.
Phrase: Appreciate and acknowledge community support.

49.
Concepts: user appreciation, user interaction and gratitude
Relationship: Both concepts focus on expressions of thanks within the community.
Criteria: Users express gratitude and appreciation during their interactions in the community.
Phrase: Express appreciation and gratitude.

50.
Concepts: seek community input, consulting community
Relationship: Both concepts involve outreach for community feedback on development.
Criteria: Designers actively seek and consult the community for input on software features.
Phrase: Seek and consult community input.

51.
Concepts: cultivate community involvement, encourage participatory design
Relationship: Both concepts emphasize engaging the community in the development process.
Criteria: Designers encourage community participation and feedback in software development.
Phrase: Cultivate involvement and encourage design participation.

52.
Concepts: invite user participation, invite community participation
Relationship: Both concepts involve actively seeking community contributions in development.
Criteria: Designers invite community members to participate and contribute feedback for improvements.
Phrase: Invite user and community participation.

53.
Concepts: engage with the community, maintain community interaction
Relationship: Both concepts focus on fostering ongoing communication with users.
Criteria: Designers engage and maintain interaction with community members to foster collaboration.
Phrase: Engage and maintain community interaction.

54.
Concepts: seek consensus, express agreement on design ideas
Relationship: Both concepts involve reaching an understanding or agreement within the community.
Criteria: Designers and users seek and express agreement on proposed design ideas.
Phrase: Seek consensus and express agreement.

55.
Concepts: involve users in design, co-design with users
Relationship: Both concepts focus on the collaborative aspect of the design process.
Criteria: Designers actively involve users in the design process for better product relevance.
Phrase: Involve and co-design with users.

56.
Concepts: inquire about user roles, ask about user's professional background
Relationship: Both concepts involve understanding the user's context to tailor support.
Criteria: Designers inquire about users' roles to better understand their needs in the community.
Phrase: Inquire about user roles and background.

57.
Concepts: designer user interaction, identify roles within the community
Relationship: Both concepts involve clarifying and understanding community dynamics.
Criteria: Designers interact with users to clarify their roles and contributions to the community.
Phrase: Identify and clarify roles in the community.

58.
Concepts: confirm compatibility
Relationship: The concepts are related as they both involve ensuring user needs are met.
Criteria: Designers confirm the compatibility of software versions with user requirements.
Phrase: Confirm software compatibility.

59.
Concepts: make feature request
Relationship: The concepts focus on users proposing new features for future development.
Criteria: Users make detailed requests for specific features to enhance software utility.
Phrase: Make feature requests.

60.
Concepts: clarify version type
Relationship: The concepts involve ensuring clarity about the specific software version.
Criteria: Designers clarify which version of the software is being discussed with the community.
Phrase: Clarify software version type.
---