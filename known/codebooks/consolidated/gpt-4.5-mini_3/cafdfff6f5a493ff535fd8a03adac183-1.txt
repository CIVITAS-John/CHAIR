You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (7 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
7. 
Concepts: {Repeat the input 7}
Relationship: {What is logical relationship between concepts in code 7, or N/A if not applicable}
Criteria: {Who did what, and how for code 7}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: user guidance, provide usage instructions
- A designer provides detailed guidance on new software features and changes for user understanding.
- Designers provide instructions and updates to assist users in effectively operating the software.

2.
Concepts: explain current version's limitation, discuss software limitations and resolutions
- Clarifies limitations or known issues of the current software version during discussions.
- Designers explain software limitations and discuss how these limitations can be addressed.

3.
Concepts: transparency, communicate development timelines and complexity
- Designer transparently discusses complexity and anticipated completion of tasks.
- Designers outline the development process and complexity of features, explaining required timelines for completion.

4.
Concepts: plans for long-term stability, plan for future compatibility in development
- Designers discuss plans for features that will ensure long-term stability.
- Designers consider future compatibility while explaining their decision-making process for ongoing development.

5.
Concepts: communicate software status, provide updates on current efforts
- Designers update the community on the app review status and the current software release progress.
- Designers and developers share updates and visual representations of ongoing work related to software features.

6.
Concepts: inquire about pc version, seek information on access and compatibility
- Users specifically inquire about the PC version of the software and request information on features.
- Users ask questions regarding downloading software versions and platform compatibility for clarity.

7.
Concepts: appreciation of feedback, appreciate received help and information
- Expresses gratitude or recognition for feedback provided by others.
- Users express appreciation for assistance and acknowledge the information received from the community.
===
---
Definitions for each code (7 in total):
1.
Concepts: user guidance, provide usage instructions  
Relationship: The concepts are related as guidance is essential for effectively understanding and using the software.  
Criteria: Designers provide detailed instructions and updates to enhance user understanding of new software features.  
Phrase: Provide user guidance.

2.
Concepts: explain current version's limitation, discuss software limitations and resolutions  
Relationship: The concepts are interlinked as understanding limitations is crucial for discussing potential solutions.  
Criteria: Designers clarify software limitations and discuss potential resolutions during community discussions.  
Phrase: Discuss software limitations.

3.
Concepts: transparency, communicate development timelines and complexity  
Relationship: Transparency in communication helps build trust regarding the complexity and timelines of development work.  
Criteria: Designers transparently communicate the complexity and anticipated timelines of development tasks.  
Phrase: Communicate development transparency.

4.
Concepts: plans for long-term stability, plan for future compatibility in development  
Relationship: The concepts are connected through the intention of ensuring sustainable and forward-thinking software development.  
Criteria: Designers discuss their strategies for long-term stability and future compatibility in software features.  
Phrase: Plan for long-term stability.

5.
Concepts: communicate software status, provide updates on current efforts  
Relationship: These concepts function together to keep the community informed about ongoing software development and progress.  
Criteria: Designers provide regular updates about the software's review status and current development efforts.  
Phrase: Provide software updates.

6.
Concepts: inquire about pc version, seek information on access and compatibility  
Relationship: The concepts are linked as inquiries about the PC version often involve questions about access and compatibility.  
Criteria: Users actively inquire about the PC version and seek clarity on compatibility and access issues.  
Phrase: Seek information on compatibility.

7.
Concepts: appreciation of feedback, appreciate received help and information  
Relationship: The concepts are related as expressing gratitude for feedback reinforces a supportive community environment.  
Criteria: Users express appreciation for the feedback received and acknowledge the assistance from the community.  
Phrase: Show appreciation for feedback.
---