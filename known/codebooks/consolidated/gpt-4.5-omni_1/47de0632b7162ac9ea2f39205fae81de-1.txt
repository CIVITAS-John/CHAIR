You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (24 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
24. 
Concepts: {Repeat the input 24}
Relationship: {What is logical relationship between concepts in code 24, or N/A if not applicable}
Criteria: {Who did what, and how for code 24}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: explain design rationale, articulate reasoning and justify features
- Participants provide reasons or justifications for decisions or actions.
- Participants explain the reasoning behind their questions or suggestions and justify their feature suggestions with explanations.

2.
Concepts: user appreciation, express gratitude
- Expressions of thanks or appreciation from users.
- Users or designers express gratitude for each other's contributions and efforts.

3.
Concepts: requesting help, provide/request technical support
- Users request help or explicitly state their need for assistance.
- Instances where technical support is requested or provided to users.

4.
Concepts: seek information and access, provide and inquire about downloads
- Users ask questions to gain information or resources related to the software, including access or download specifics.
- Participants provide information on where and how to download software, and respond to inquiries regarding the download process.

5.
Concepts: inquiring about app versions, clarify and provide version information
- Users ask about the usage of specific app versions.
- Participants provide and seek information on specific software versions and their features.

6.
Concepts: identify member roles, confirm professional roles and identities
- Participants identify community members by their roles or expertise.
- Participants confirm the professional roles and identities of users.

7.
Concepts: provide contextual background, share experiences and background
- Participants provide relevant context or background information for discussions and inquiries to explain broader needs or goals.
- Participants share their past experiences and personal or professional backgrounds to establish context and familiarity.

8.
Concepts: emoji communication, using non-verbal cues
- Communication through emojis, expressing emotions or reactions concisely.
- Users employed emojis and other non-verbal communication forms to express emotions and reactions.

9.
Concepts: group communication, share information and announcements
- Communication about updates and new versions within the group.
- Participants share information, resources, and updates with the community, often through group-wide announcements.

10.
Concepts: describing usability in context, compare usability and practicality
- Users discuss the specific contexts in which they use the software and its usability in those scenarios.
- Users compare and highlight the usability and practicality of the software against similar alternatives.

11.
Concepts: limitation of the team, explain limitations and constraints
- Acknowledging the limitations or constraints of the design team.
- Designers explain contextual factors, limitations, and constraints of features and software.

12.
Concepts: community feedback, user consultation
- Users providing feedback and suggestions to improve the product.
- Developers consult the community for feedback or opinions on specific design choices or functionalities.

13.
Concepts: share and propose design solutions, suggest refinements and adjustments
- Designers share design thoughts and propose alternative ideas and solutions to improve the software.
- Designers suggest refining and adjusting software features to enhance usability and functionality.

14.
Concepts: suggest usability improvements, provide feedback and suggestions
- Users or designers make suggestions to improve the usability of the software.
- Users offer their feedback and suggestions for improving the software.

15.
Concepts: confirm collaboration, collaborate and invite suggestions
- Designers confirm feature additions or agree to collaborate with input from the community.
- Designers and users collaborate, suggesting features and agreeing on ideas for development.

16.
Concepts: solving problems collaboratively, shared experiences and support
- Users and designers work together to address issues and improve the software.
- Users and designers sharing experiences and supporting each other in using and improving the software.

17.
Concepts: seek and plan for feedback, announce and gather consultations
- Designers seek input, feedback, and suggestions from the community, planning to engage them before making decisions.
- Designers announce, gather opinions, and promise future consultations before development.

18.
Concepts: commit to software improvement, acknowledge and implement feedback
- Designers promise and commit to making improvements based on feedback.
- Designers acknowledge feedback, affirm understanding, and agree to implement user suggestions in future updates.

19.
Concepts: encourage and appreciate user support, resolve and reassure user concerns
- Designers thank and encourage users while reassuring their commitment to improvement.
- Designers address and resolve user concerns, providing reassurance and confirming ongoing optimizations.

20.
Concepts: anticipating updates, inquire about updates
- Users express their anticipation or expectation for software updates.
- Users inquire about the timing, occurrence, status, and availability of software updates.

21.
Concepts: preview upcoming features, explain and exemplify new features
- Designers provide previews of upcoming features or changes.
- Designers explain the implementation and details of upcoming features, providing specific examples.

22.
Concepts: list and update software fixes, list, plan, and confirm features
- Designers list specific updates, new features, adjustments, and bug fixes in the software.
- Designers list and confirm planned features, promise enhancements, and confirm the timeline and details of upcoming updates.

23.
Concepts: announce software updates, inform users about software updates
- Designers announce upcoming software updates and new releases, informing the community about new features or changes.
- Designers inform users about the status or progress of upcoming software versions or updates, including their availability and release schedules.

24.
Concepts: future development plans, discuss development goals and plans
- Sharing future development priorities and plans.
- Designers outline goals and discuss potential future developments and design plans for the product.
===
---
Definitions for each code (24 in total):

1.
Concepts: explain design rationale, articulate reasoning and justify features
Relationship: Synchronous communication with justifying actions
Criteria: Participants provide reasoning and justifications for design decisions or actions.
Phrase: Articulating design justifications

2.
Concepts: user appreciation, express gratitude
Relationship: Gratitude expressions among community members
Criteria: Users express thanks or appreciation for each other's contributions.
Phrase: Expressing user gratitude

3.
Concepts: requesting help, provide/request technical support
Relationship: Interaction for assistance
Criteria: Users request and provide technical support when assistance is needed.
Phrase: Seeking and providing technical support

4.
Concepts: seek information and access, provide and inquire about downloads
Relationship: Information exchange regarding software access
Criteria: Users ask for and provide information about software downloads.
Phrase: Inquiring and providing download information

5.
Concepts: inquiring about app versions, clarify and provide version information
Relationship: Information exchange specific to software versions
Criteria: Users ask and clarify information regarding specific software versions.
Phrase: Clarifying and seeking version details

6.
Concepts: identify member roles, confirm professional roles and identities
Relationship: Role identification within the community
Criteria: Participants identify and confirm professional roles and identities of community members.
Phrase: Confirming member roles

7.
Concepts: provide contextual background, share experiences and background
Relationship: Background sharing for context
Criteria: Participants provide context and share personal or professional experiences to explain broader needs.
Phrase: Sharing contextual backgrounds

8.
Concepts: emoji communication, using non-verbal cues
Relationship: Non-verbal expressions through digital means
Criteria: Users communicate emotions and reactions using emojis and other non-verbal forms.
Phrase: Communicating with emojis

9.
Concepts: group communication, share information and announcements
Relationship: Group-wide information dissemination
Criteria: Participants share updates and information through group announcements.
Phrase: Sharing group updates

10.
Concepts: describing usability in context, compare usability and practicality
Relationship: Usability discussions relative to practical scenarios
Criteria: Users discuss and compare the usability and practicality of the software in specific contexts.
Phrase: Discussing usability in context

11.
Concepts: limitation of the team, explain limitations and constraints
Relationship: Team constraints acknowledgment
Criteria: Designers explain the limitations or constraints they face in software development.
Phrase: Explaining team limitations

12.
Concepts: community feedback, user consultation
Relationship: Feedback loop between users and developers
Criteria: Users provide feedback and developers seek community consultations for improvement.
Phrase: Consulting for community feedback

13.
Concepts: share and propose design solutions, suggest refinements and adjustments
Relationship: Proposing adjustments for improvement
Criteria: Designers propose refinements and alternative solutions to improve software features.
Phrase: Suggesting design refinements

14.
Concepts: suggest usability improvements, provide feedback and suggestions
Relationship: User-driven suggestions for enhancement
Criteria: Users or designers provide feedback and suggestions to enhance software usability.
Phrase: Suggesting usability improvements

15.
Concepts: confirm collaboration, collaborate and invite suggestions
Relationship: Engaging in collaborative efforts
Criteria: Designers and users collaborate and exchange suggestions for development.
Phrase: Collaborating and inviting suggestions

16.
Concepts: solving problems collaboratively, shared experiences and support
Relationship: Joint problem-solving efforts
Criteria: Users and designers work together and share experiences to address issues and improve software.
Phrase: Solving problems collaboratively

17.
Concepts: seek and plan for feedback, announce and gather consultations
Relationship: Planned engagement for user input
Criteria: Designers announce and gather community feedback while planning consultations.
Phrase: Seeking and planning feedback

18.
Concepts: commit to software improvement, acknowledge and implement feedback
Relationship: Commitment and action based on feedback
Criteria: Designers commit to making improvements and acknowledge user suggestions for implementation.
Phrase: Committing to improvements

19.
Concepts: encourage and appreciate user support, resolve and reassure user concerns
Relationship: Encouragement coupled with reassurance
Criteria: Designers encourage users, address concerns, and confirm ongoing optimizations.
Phrase: Encouraging and reassuring users

20.
Concepts: anticipating updates, inquire about updates
Relationship: User expectations for software updates
Criteria: Users express anticipations and inquire about upcoming software updates.
Phrase: Inquiring about updates

21.
Concepts: preview upcoming features, explain and exemplify new features
Relationship: Upcoming features explanation
Criteria: Designers provide previews and explanations of upcoming features with examples.
Phrase: Previewing new features

22.
Concepts: list and update software fixes, list, plan, and confirm features
Relationship: Detailing software adjustments and plans
Criteria: Designers list updates, bug fixes, and confirm planned features and enhancements.
Phrase: Listing software updates

23.
Concepts: announce software updates, inform users about software updates
Relationship: Announcements about software developments
Criteria: Designers announce and inform users about the status and progress of software updates.
Phrase: Announcing software updates

24.
Concepts: future development plans, discuss development goals and plans
Relationship: Future-oriented planning for development
Criteria: Designers discuss future developments, goals, and plans for the software.
Phrase: Discussing future development plans
---