You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another and please do not merge them.
Determine the logical relationship between concepts within each code, such as inclusion, parallel, or intersection.
Write clear and generalizable criteria for each code and do not introduce unnecessary details. Then, write an accurate verb phrase as label for the combined concept.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (16 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Label: {A consolidated verb phrase of code 1}
...
16. 
Concepts: {Repeat the input 16}
Relationship: {What is logical relationship between concepts in code 16, or N/A if not applicable}
Criteria: {Who did what, and how for code 16}
Label: {A consolidated verb phrase of code 16}
---
~~~
1.
Concepts: setting goals, setting a personal goal
- The designer sets a goal or target for achieving a specific milestone or feature.
- A statement expressing a personal goal or objective.

2.
Concepts: locating resources independently, self-reliance in finding resources
- User locates resources independently (e.g., group files).
- Demonstrating autonomy and initiative in finding resources or solutions.

3.
Concepts: manual adjustment options, suggesting manual adjustments
- Informing users about the manual adjustment feature for the layout
- A designer suggests manual adjustments or workarounds.

4.
Concepts: feature request, feature requests
- A user requests a new feature or functionality.
- User suggests or requests a new feature or component.
- A request or suggestion for a specific feature or functionality.
- User suggests features or functionalities for the platform
- User recommends a specific feature addition to the PC version.
- User recommends adding an exit button function to the PC version.
- Users suggest additional features or functionalities to enhance the platform.
- Requesting inclusion of a specific feature or experiment
- Requesting or suggesting additional features or resources, such as optical experiments.
- User requests specific features or functionality
- Users requesting specific features or functionalities

5.
Concepts: requesting features, requesting new features, requesting feature updates, requesting feature development
- User makes a specific request or suggestion for a feature or experiment.
- User expresses need for specific features.
- A user requests a feature or functionality that would make the application more convenient or useful.
- Requesting a specific feature or functionality
- Users ask for updates or new features.
- User requests a specific feature or functionality in the Physics Lab online community.

6.
Concepts: feature suggestion, suggesting features, providing specific feature suggestion
- User suggests a feature improvement for the PC version.
- A user suggests features to enhance the learning experience.
- A user provides a specific suggestion or feature request.

7.
Concepts: feature inclusion confirmation, confirming feature inclusion
- Ensuring that all important features are included
- The designer confirms that a requested feature will be included in the physics lab.

8.
Concepts: explaining update complexity, discussing update complexity, update complexity explanation
- Explaining the complexity or challenges of updates
- A designer mentions the complexity of updates and the expected release time.
- Designer explains or discusses the complexity of an update or task.

9.
Concepts: introducing a new component, introducing new component features
- Introducing a new component or feature and explaining its benefits or applications.
- Designer introduces or explains new component features or properties.

10.
Concepts: explaining component capabilities, explaining new component capabilities
- A designer explains the capabilities or features of a component or tool.
- The designer explains the capabilities of a new component.

11.
Concepts: component updates, components and updates
- Designer announces changes to ideal components
- Designer lists new features, components, or bug fixes

12.
Concepts: acknowledging features, appreciating features
- User acknowledges or appreciates a feature
- User expresses appreciation or admiration for specific features.

13.
Concepts: revealing advanced features, detailing advanced features
- Designer reveals advanced feature development.
- A designer details plans for advanced features or updates.

14.
Concepts: innovative features, explaining innovative features
- Designer reiterates or highlights innovative features or functionalities.
- Designer explains innovative features or functionalities.

15.
Concepts: explaining features, further explaining features
- Designers explain features or functionalities, providing examples or demonstrations.
- A designer explains or promotes the benefits of a specific feature or functionality.

16.
Concepts: addressing compatibility issues, providing context for compatibility issues
- A designer or developer addresses compatibility issues or limitations.
- A user provides context for compatibility issues or technical limitations.
===
Here are the definitions for each code:

---
1.
Concepts: setting goals, setting a personal goal
Relationship: Inclusion (setting a personal goal is a type of setting goals)
Criteria: Designer sets a goal or target for achieving a specific milestone or feature, or user expresses a personal goal or objective.
Label: Setting goals

2.
Concepts: locating resources independently, self-reliance in finding resources
Relationship: Parallel (both concepts describe the same action)
Criteria: User locates resources independently, demonstrating autonomy and initiative in finding resources or solutions.
Label: Locating resources independently

3.
Concepts: manual adjustment options, suggesting manual adjustments
Relationship: Inclusion (suggesting manual adjustments implies the existence of manual adjustment options)
Criteria: Informing users about manual adjustment features or suggesting manual adjustments or workarounds.
Label: Suggesting manual adjustments

4.
Concepts: feature request, feature requests
Relationship: Intersection (all concepts describe different aspects of feature requests)
Criteria: User requests a new feature or functionality, suggests or requests a new feature or component, or recommends a specific feature addition.
Label: Requesting features

5.
Concepts: requesting features, requesting new features, requesting feature updates, requesting feature development
Relationship: Intersection (all concepts describe different aspects of feature requests)
Criteria: User makes a specific request or suggestion for a feature or experiment, expresses need for specific features, or requests a feature or functionality to enhance the application.
Label: Requesting features

6.
Concepts: feature suggestion, suggesting features, providing specific feature suggestion
Relationship: Intersection (all concepts describe different aspects of feature suggestions)
Criteria: User suggests a feature improvement, suggests features to enhance the learning experience, or provides a specific suggestion or feature request.
Label: Suggesting features

7.
Concepts: feature inclusion confirmation, confirming feature inclusion
Relationship: Inclusion (confirming feature inclusion implies the inclusion of a requested feature)
Criteria: Ensuring that all important features are included, or designer confirms that a requested feature will be included.
Label: Confirming feature inclusion

8.
Concepts: explaining update complexity, discussing update complexity, update complexity explanation
Relationship: Intersection (all concepts describe different aspects of update complexity explanations)
Criteria: Explaining the complexity or challenges of updates, discussing the complexity of an update or task, or mentioning the complexity of updates and expected release time.
Label: Explaining update complexity

9.
Concepts: introducing a new component, introducing new component features
Relationship: Inclusion (introducing new component features implies introducing a new component)
Criteria: Introducing a new component or feature, explaining its benefits or applications, or introducing or explaining new component features or properties.
Label: Introducing new components

10.
Concepts: explaining component capabilities, explaining new component capabilities
Relationship: Inclusion (explaining new component capabilities implies explaining component capabilities)
Criteria: Designer explains the capabilities or features of a component or tool, or explains the capabilities of a new component.
Label: Explaining component capabilities

11.
Concepts: component updates, components and updates
Relationship: Inclusion (component updates imply the existence of components)
Criteria: Designer announces changes to ideal components, lists new features, components, or bug fixes.
Label: Announcing component updates

12.
Concepts: acknowledging features, appreciating features
Relationship: Intersection (both concepts describe different aspects of acknowledging features)
Criteria: User acknowledges or appreciates a feature, or expresses appreciation or admiration for specific features.
Label: Acknowledging features

13.
Concepts: revealing advanced features, detailing advanced features
Relationship: Inclusion (detailing advanced features implies revealing advanced features)
Criteria: Designer reveals advanced feature development, or details plans for advanced features or updates.
Label: Revealing advanced features

14.
Concepts: innovative features, explaining innovative features
Relationship: Inclusion (explaining innovative features implies highlighting innovative features)
Criteria: Designer reiterates or highlights innovative features or functionalities, or explains innovative features or functionalities.
Label: Highlighting innovative features

15.
Concepts: explaining features, further explaining features
Relationship: Inclusion (further explaining features implies explaining features)
Criteria: Designers explain features or functionalities, providing examples or demonstrations, or explain or promote the benefits of a specific feature or functionality.
Label: Explaining features

16.
Concepts: addressing compatibility issues, providing context for compatibility issues
Relationship: Intersection (both concepts describe different aspects of addressing compatibility issues)
Criteria: A designer or developer addresses compatibility issues or limitations, or user provides context for compatibility issues or technical limitations.
Label: Addressing compatibility issues