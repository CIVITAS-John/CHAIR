You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (17 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
17. 
Concepts: {Repeat the input 17}
Relationship: {What is logical relationship between concepts in code 17, or N/A if not applicable}
Criteria: {Who did what, and how for code 17}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: highlights risks for novices, highlights novice limitations
- Participants discuss risks or limitations of using AI for novices or inexperienced users and highlight common mistakes made by beginners.
- Participants highlight the limitations of novices, specifically with conceptualizing problems, and challenges faced by novices in seeking help.

2.
Concepts: values clarity and discusses code complexity, discusses code complexity, quality, and error resolution
- Users value clarity and discuss code complexity and quality.
- Users discuss code complexity, quality, and error resolution.

3.
Concepts: underscores credibility, shares prior programming experience
- Participants underscore their credibility by mentioning their extensive programming experience.
- Participants share their prior programming experience.

4.
Concepts: highlights best practices, highlights improved debugging and describes its benefits
- The participant appreciates the AI's debugging capability, including unit testing, which is helpful for beginners.
- Users highlight improved debugging and describe its benefits.

5.
Concepts: observes beginners' struggles, describes beginner practices
- Participants observe beginners' struggles with programming and reflect on the struggles of novice users.
- Participants recognize the challenges and practices of beginner programmers and describe the coding practices or behaviors of beginners.

6.
Concepts: experiences debugging challenges and recognizes the need for debugging skills, practices debugging, highlights learning needs, and calls for preparatory exercises
- Users experience debugging challenges and recognize the need for debugging skills.
- Users practice debugging, highlight learning needs, and call for preparatory exercises.

7.
Concepts: prepares for next steps, reads and critiques error messages
- Prepares for next steps by reading error messages.
- Users read error messages to understand the issue, critique unhelpful error messages, and encounter unclear error messages.

8.
Concepts: values ai's error detection and appreciates its ability, praises ai's troubleshooting, expresses a positive view, and appreciates its support
- Users value AI's error detection and appreciate its ability.
- Users praise AI's troubleshooting, express a positive view of AI debugging, and appreciate its support.

9.
Concepts: comments on and values documentation, appreciates chatgpt's code commenting
- Users comment on and value documentation in AI-generated code.
- The quote appreciates ChatGPT's ability to provide commented code and documentation.

10.
Concepts: analyzes code with ai and notes its efficiency, optimizes code with ai and appreciates its ability
- Users analyze code with AI and note its efficiency.
- Users optimize code with AI and appreciate its ability.

11.
Concepts: appreciates ai-generated code, integrates generated code into models
- Participants appreciate AI's ability to translate code, run executable code generated by AI, and appreciate AI-generated code with comments and documentation.
- Participants appreciate the integration of AI-generated code into the model and integrate generated code into their model or consider how to do so.

12.
Concepts: generate incomplete code, generate outdated code
- AI-generated code can be incomplete or missing structures.
- AI-generated code is outdated or based on older versions of the programming language.

13.
Concepts: error verification, fail to fix errors
- Expresses uncertainty about AI's ability to verify code and detect reserved words.
- Users critique current AI limitations, including its inability to check generated code.

14.
Concepts: evaluates and debugs ai-generated code, suspects and identifies bugs in ai-generated code
- Users evaluate and debug AI-generated code.
- Users suspect and identify bugs in AI-generated code.

15.
Concepts: seeks help and verification from ai, inquires about code structures and asks ai for clarification
- Users seek help from AI and request verification of AI-generated code.
- Users inquire about code structures and ask AI for missing ones.

16.
Concepts: customizes ai-generated code, generates and adapts code using ai feedback
- Participants customize AI-generated code and interact with AI-generated code.
- Users generate code and adapt it based on AI-generated code and feedback.

17.
Concepts: uses ai guidance, seeks ai-generated code, uses ai-generated code as a reference
- Participants use AI guidance to inform manual coding and write code manually with AI guidance.
- Participants seek AI-generated code for a specific task and use the AI-generated code to complete a task.
- Participants use AI-generated code as a reference when writing their own code and refer to generated code or get a reference.
===
Here are the definitions for each code:

---
1.
Concepts: highlights risks for novices, highlights novice limitations
Relationship: The concepts are related as they both focus on the challenges faced by novice users when using AI-driven interfaces.
Criteria: Participants discuss the risks and limitations of using AI for novices and highlight common mistakes made by beginners.
Phrase: Identifying novice limitations

2.
Concepts: values clarity and discusses code complexity, discusses code complexity, quality, and error resolution
Relationship: The concepts are related as they all focus on the importance of code quality and complexity in AI-driven interfaces.
Criteria: Users value clarity and discuss code complexity, quality, and error resolution in AI-generated code.
Phrase: Evaluating code quality

3.
Concepts: underscores credibility, shares prior programming experience
Relationship: The concepts are related as they both establish the participant's credibility in programming.
Criteria: Participants underscore their credibility by sharing their prior programming experience.
Phrase: Establishing credibility

4.
Concepts: highlights best practices, highlights improved debugging and describes its benefits
Relationship: The concepts are related as they both focus on the benefits of AI-driven interfaces in improving debugging practices.
Criteria: Users highlight improved debugging and describe its benefits in AI-driven interfaces.
Phrase: Promoting best practices

5.
Concepts: observes beginners' struggles, describes beginner practices
Relationship: The concepts are related as they both focus on the challenges faced by beginner programmers.
Criteria: Participants observe beginners' struggles and describe the coding practices or behaviors of beginners.
Phrase: Identifying beginner struggles

6.
Concepts: experiences debugging challenges and recognizes the need for debugging skills, practices debugging, highlights learning needs, and calls for preparatory exercises
Relationship: The concepts are related as they all focus on the importance of debugging skills in AI-driven interfaces.
Criteria: Users experience debugging challenges, recognize the need for debugging skills, and call for preparatory exercises.
Phrase: Developing debugging skills

7.
Concepts: prepares for next steps, reads and critiques error messages
Relationship: The concepts are related as they both focus on the importance of error messages in AI-driven interfaces.
Criteria: Users prepare for next steps by reading and critiquing error messages.
Phrase: Interpreting error messages

8.
Concepts: values ai's error detection and appreciates its ability, praises ai's troubleshooting, expresses a positive view, and appreciates its support
Relationship: The concepts are related as they all focus on the benefits of AI-driven interfaces in error detection and troubleshooting.
Criteria: Users value AI's error detection, praise its troubleshooting, and appreciate its support.
Phrase: Appreciating AI's support

9.
Concepts: comments on and values documentation, appreciates chatgpt's code commenting
Relationship: The concepts are related as they both focus on the importance of documentation in AI-generated code.
Criteria: Users comment on and value documentation in AI-generated code.
Phrase: Valuing documentation

10.
Concepts: analyzes code with ai and notes its efficiency, optimizes code with ai and appreciates its ability
Relationship: The concepts are related as they both focus on the benefits of AI-driven interfaces in code analysis and optimization.
Criteria: Users analyze code with AI, note its efficiency, and optimize code with AI.
Phrase: Optimizing code efficiency

11.
Concepts: appreciates ai-generated code, integrates generated code into models
Relationship: The concepts are related as they both focus on the benefits of AI-generated code in model development.
Criteria: Users appreciate AI-generated code and integrate it into their models.
Phrase: Integrating AI-generated code

12.
Concepts: generate incomplete code, generate outdated code
Relationship: The concepts are related as they both focus on the limitations of AI-generated code.
Criteria: AI-generated code can be incomplete or outdated.
Phrase: Identifying code limitations

13.
Concepts: error verification, fail to fix errors
Relationship: The concepts are related as they both focus on the limitations of AI-driven interfaces in error verification and fixing.
Criteria: Users express uncertainty about AI's ability to verify code and detect reserved words.
Phrase: Questioning AI's accuracy

14.
Concepts: evaluates and debugs ai-generated code, suspects and identifies bugs in ai-generated code
Relationship: The concepts are related as they both focus on the importance of evaluating and debugging AI-generated code.
Criteria: Users evaluate and debug AI-generated code and suspect and identify bugs.
Phrase: Debugging AI-generated code

15.
Concepts: seeks help and verification from ai, inquires about code structures and asks ai for clarification
Relationship: The concepts are related as they both focus on the importance of seeking help and clarification from AI-driven interfaces.
Criteria: Users seek help from AI, request verification, and inquire about code structures.
Phrase: Seeking AI guidance

16.
Concepts: customizes ai-generated code, generates and adapts code using ai feedback
Relationship: The concepts are related as they both focus on the benefits of customizing and adapting AI-generated code.
Criteria: Users customize AI-generated code and generate code based on AI feedback.
Phrase: Adapting AI-generated code

17.
Concepts: uses ai guidance, seeks ai-generated code, uses ai-generated code as a reference
Relationship: The concepts are related as they all focus on the benefits of using AI-driven interfaces as a guidance and reference.
Criteria: Users use AI guidance, seek AI-generated code, and use it as a reference.
Phrase: Utilizing AI guidance