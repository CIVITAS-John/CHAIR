You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (64 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
64. 
Concepts: {Repeat the input 64}
Relationship: {What is logical relationship between concepts in code 64, or N/A if not applicable}
Criteria: {Who did what, and how for code 64}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: express frustration, developer frustration
- Users or designers express frustration with system or technology limitations.
- A developer expresses frustration with current limitations or issues.

2.
Concepts: technical issue, system limitations
- Mentioning a technical issue or limitation.
- Mentioning limitations or issues with the existing computer systems.

3.
Concepts: subject focus, explain intention of the app design
- A designer explains the focus and limitations of the subject matter.
- A designer explains the focus and limitations of the app's design.

4.
Concepts: considering hardware limitations, highlighting technical constraints
- Users suggest and consider hardware limitations when designing features.
- Users and designers highlight and discuss technical constraints or limitations.

5.
Concepts: explaining the need, explain feature importance
- Designers explain the need for certain features or developments.
- Designers explain the importance of certain features.

6.
Concepts: align with user needs, align with educational needs
- Designers align feature development with user needs and preferences.
- A designer aligns software features with educational needs.

7.
Concepts: feature optimization, emphasize optimization
- A developer mentions efforts to optimize or improve a feature.
- A designer emphasizes the importance of optimizing a feature.

8.
Concepts: suggesting simplification, simplification and refinement in design
- Designers suggest simplifying or refining features or design elements.
- Statements about simplifying or refining design for stability.

9.
Concepts: design adaptation, local export necessity
- A designer mentions the need to adapt the design for local export.
- A designer mentions the necessity of supporting local export.

10.
Concepts: consideration, considering technical requirements
- A designer considers a specific aspect or requirement.
- Designers discuss and consider technical requirements and conditions.

11.
Concepts: offer special tips, providing user tips
- A designer provides special tips and detailed update information.
- Designers provide tips and practical advice about software features.

12.
Concepts: explain and introduce new features, explain and instruct on features
- Designers explain and introduce new features or components added to the software.
- Designers provide detailed explanations, instructions, and examples of features and their functionalities.

13.
Concepts: technical detail, explaining technical artifacts
- A developer discusses technical details or specifications of the software.
- A designer explains technical aspects or artifacts of the system.

14.
Concepts: clarify software versions, providing technical clarification
- Designers provide detailed information and updates about software versions, clarifying which version is being discussed or updated.
- Designers provide technical clarifications and information about the software's capabilities.

15.
Concepts: explain complexity, compare feature complexities, feature complexity
- Designers explain the complexity of certain features or updates.
- A designer compares the complexity of different features.
- Designers discuss the complexity of features and the time required for their release.

16.
Concepts: describing update scope, share the magnitude of update
- Designers describe the extent and nature of an update.
- A designer shares the magnitude or extent of an update.

17.
Concepts: manual adjustment suggestion, allowing manual adjustments
- A developer suggests that users can manually adjust settings or layouts.
- Designers mention the possibility of manual adjustments and editing in the software.

18.
Concepts: touch screen functionality, touch screen information
- A developer discusses the functionality of touch screens.
- A developer informs users about the presence of on-screen keyboards for touch screens.

19.
Concepts: simulated experiment, detail simulated experiment assessment, experimental simulations in electricity
- A designer discusses plans for simulated experiments.
- A designer details the assessment of simulated experiments.
- A designer discusses experimental simulations in electricity.

20.
Concepts: input methods, input methods discussion
- A designer discusses methods for inputting data into the software.
- A developer discusses input methods or the need for specific input features.

21.
Concepts: design refinement, design discussion
- A designer discusses refining the design.
- A developer discusses various aspects of design and feature considerations.

22.
Concepts: system requirements, explain development process
- A designer discusses system requirements for compatibility.
- A designer explains the development process or compatibility.

23.
Concepts: feature adjustment, feature flexibility
- Designers discuss adjustments or changes to features.
- Designers discuss the flexibility of features or layouts.

24.
Concepts: discussing usability, visual and functional design
- Designers discuss aspects of the user interface and software usability.
- Discussions about the visual and functional aspects of the software.

25.
Concepts: future feedback invitation, future consultation promise
- A developer promises to invite feedback from the community at a later time.
- A developer promises to gather opinions from the community before starting a new project.

26.
Concepts: acknowledge community needs, announce future consultation
- A designer acknowledges community needs and future plans.
- Designers announce plans for future consultations with the community.

27.
Concepts: share potential future direction, outline future development plans
- A designer shares potential future directions for the app.
- Designers share plans and outline goals for future development, discussing potential future developments and directions.

28.
Concepts: respond to feedback, commit to improvements
- A designer responds to feedback by promising to add a feature in the next update.
- A designer promises or commits to improving the software based on feedback.

29.
Concepts: prioritize user feedback, plan iterative development
- A designer prioritizes user feedback for future updates.
- A designer plans iterative development based on user feedback.

30.
Concepts: self-rebuttal, self rebut the previous response
- Designers discuss previous attempts or experiences with the software.
- A designer contradicts their previous response.

31.
Concepts: memory aid, express concern about memory
- A designer mentions the need to gather opinions again to aid memory.
- A designer expresses concern about remembering details or feedback.

32.
Concepts: opinion gathering, project planning
- Designers gather opinions before starting new projects.
- A designer discusses project planning and gathering opinions.

33.
Concepts: suggest prioritization, development prioritization feedback
- A user suggests prioritizing features or improvements.
- A developer provides feedback on the prioritization of development tasks.

34.
Concepts: prioritization, development prioritization
- Statements indicating the order in which tasks or features will be developed.
- Instances where designers discuss the prioritization of different features or sections to be developed.

35.
Concepts: release schedule, release process, version release management
- A designer provides a schedule for upcoming releases.
- A designer discusses the release process and timeline for different versions.
- Designers outline the schedule for version releases across different platforms.

36.
Concepts: set timeline expectation, providing development timelines
- A designer sets expectations for the timeline of a release.
- Designers provide a timeline for the development and release of specific features.

37.
Concepts: update preview, feature preview, listing upcoming features
- A designer previews upcoming updates or features.
- Previews or announcements of upcoming features or updates.
- Designers list and explain features that will be available in future updates.

38.
Concepts: feature expansion, product improvement
- A designer mentions the expansion of features in an update.
- A designer mentions upcoming improvements to the software.

39.
Concepts: detail specific updates, listing updates and fixes
- Designers detail specific updates and new features.
- Designers list new features, components, and bug fixes in updates.

40.
Concepts: detailed overview of update, give an intro to the update content
- Providing a detailed overview of a software update.
- Introducing or explaining the content of an update.

41.
Concepts: software update process, software updates and downloads
- Describing the process or timeline for software updates.
- Information about software updates, downloads, or new versions.

42.
Concepts: internal update, provide update schedule
- A designer provides an internal update on the software.
- A designer provides an update schedule for the software.

43.
Concepts: developer announcement, announce community updates
- A developer communicates new features, updates, bug fixes, or changes to the community.
- Designers make general announcements and provide updates to the community about the software.

44.
Concepts: announce and confirm updates, communicate updates and progress
- Designers confirm upcoming updates, share timelines, and announce plans for future updates or features.
- Designers communicate updates, release schedules, and progress of software updates and plans for future releases.

45.
Concepts: share development updates, provide development updates
- Designers describe their current research and development efforts, providing status information and detailed updates.
- Designers provide information about the current status, updates, and future plans for the Physics Lab software.

46.
Concepts: visual update, highlight progress
- A designer shares a visual update.
- A designer highlights the progress of an update.

47.
Concepts: inquire about recent updates, inquire about feature updates, inquire about update status
- Users ask if there have been any recent updates to the software.
- Users ask if there will be a feature update soon or inquire about the timeline for upcoming updates.
- Users inquire about the update status of a specific platform version, including Android.

48.
Concepts: engage with development process, express interest in platform development
- Users inquire about the development process and upcoming updates.
- Expressing interest in platform development or updates.

49.
Concepts: apologize for interruptions, apologies and politeness
- Designers or users apologize for potential interruptions or inconveniences caused.
- Expressions of politeness, apologies, or acknowledgment of potential inconvenience by the designers.

50.
Concepts: apology for timing, inconvenience acknowledgment
- A developer apologizes for the timing of a message or update.
- A developer acknowledges the potential inconvenience caused by a message or update.

51.
Concepts: future feature promise, promising feature realization
- A developer promises to implement a feature at a later time.
- Designers assure users that a feature will be realized and perfected in the future.

52.
Concepts: reassurance, user reassurance
- Instances where designers reassure users about the progress and express gratitude or encouragement.
- A developer reassures users about the progress or future availability of features.

53.
Concepts: mitigate user concerns, answer to a question
- A designer provides a response to mitigate user concerns.
- Designers respond to user concerns with reassurances about ongoing work.

54.
Concepts: inquiry, uncertainty, clarification request
- Users ask questions to seek information or clarification.
- Users express uncertainty or seek clarification.
- Requests for clarification or additional information about a topic or feature.

55.
Concepts: platform question, ask a question about the app
- Users ask questions about the platform's features, updates, and usage.
- A user asks a question about the application.

56.
Concepts: information seeking, make technical inquiries
- Users asking questions to gain knowledge or resources related to the software.
- Users ask technical questions about various aspects of the software, indicating areas of interest or potential issues.

57.
Concepts: request technical support, inquire about software usage
- Users request assistance or technical support for accessing or using the software.
- Users seek guidance on how to use the software, inquiring about access or download procedures.

58.
Concepts: seek help, express need for support and documentation
- Users seek help or express a need for guidance.
- Users express the need for usage support and documentation.

59.
Concepts: request user manual, justify request for manual
- Users request a user manual for the software.
- Justifying a request for a user manual.

60.
Concepts: compatibility assurance, discuss software compatibility
- A developer assures users about the compatibility of the software with certain hardware.
- Designers confirm and discuss the software's compatibility with specific systems, suggesting users check system compatibility.

61.
Concepts: version clarification, platform clarification
- A user asks for clarification about the version being discussed.
- A user seeks clarification on where to download specific versions of the software.

62.
Concepts: cross platform usage, inquire about platform compatibility
- A user inquires about using the software across different platforms.
- Inquiring about platform compatibility.

63.
Concepts: mention outdated technology, highlight outdated technology
- A user mentions the outdated technology used in their school.
- A user highlights the outdated nature of their technology.

64.
Concepts: community context, mention school initiative
- A user provides context about their school's initiatives.
- Users mention school initiatives or projects.
===
---
Definitions for each code (64 in total):
1.
Concepts: express frustration, developer frustration
Relationship: Both involve expressing frustration.
Criteria: Users or developers express frustration with system or technology limitations.
Phrase: Express frustration with limitations

2.
Concepts: technical issue, system limitations
Relationship: Both involve mentioning technical limitations.
Criteria: Mentioning technical issues or limitations with existing systems.
Phrase: Mention technical limitations

3.
Concepts: subject focus, explain intention of the app design
Relationship: Both involve explaining the focus and limitations.
Criteria: Designers explain the focus and limitations of the subject matter and app design.
Phrase: Explain design focus and limitations

4.
Concepts: considering hardware limitations, highlighting technical constraints
Relationship: Both involve discussing hardware and technical constraints.
Criteria: Users and designers consider and highlight hardware and technical limitations when designing features.
Phrase: Discuss hardware and technical constraints

5.
Concepts: explaining the need, explain feature importance
Relationship: Both involve explaining the necessity and importance of features.
Criteria: Designers explain the need and importance of certain features or developments.
Phrase: Explain feature necessity and importance

6.
Concepts: align with user needs, align with educational needs
Relationship: Both involve aligning features with needs.
Criteria: Designers align feature development with user and educational needs.
Phrase: Align features with needs

7.
Concepts: feature optimization, emphasize optimization
Relationship: Both involve discussing optimization.
Criteria: Designers and developers emphasize and mention efforts to optimize features.
Phrase: Emphasize feature optimization

8.
Concepts: suggesting simplification, simplification and refinement in design
Relationship: Both involve suggesting simplification and refinement.
Criteria: Designers suggest simplifying or refining features or design elements for stability.
Phrase: Suggest design simplification

9.
Concepts: design adaptation, local export necessity
Relationship: Both involve adapting design for local export.
Criteria: Designers mention the need to adapt the design to support local export.
Phrase: Adapt design for local export

10.
Concepts: consideration, considering technical requirements
Relationship: Both involve considering specific aspects or requirements.
Criteria: Designers consider specific aspects and technical requirements.
Phrase: Consider technical requirements

11.
Concepts: offer special tips, providing user tips
Relationship: Both involve providing tips and advice.
Criteria: Designers provide special tips and practical advice about software features.
Phrase: Provide user tips

12.
Concepts: explain and introduce new features, explain and instruct on features
Relationship: Both involve explaining and instructing on features.
Criteria: Designers explain and introduce new features, providing detailed instructions and examples.
Phrase: Explain and instruct on features

13.
Concepts: technical detail, explaining technical artifacts
Relationship: Both involve discussing technical aspects.
Criteria: Designers and developers discuss and explain technical details or artifacts of the software.
Phrase: Explain technical details

14.
Concepts: clarify software versions, providing technical clarification
Relationship: Both involve providing clarifications.
Criteria: Designers provide detailed information and technical clarifications about software versions and capabilities.
Phrase: Provide technical clarifications

15.
Concepts: explain complexity, compare feature complexities, feature complexity
Relationship: All involve discussing feature complexity.
Criteria: Designers explain and compare the complexity of different features and updates.
Phrase: Discuss feature complexity

16.
Concepts: describing update scope, share the magnitude of update
Relationship: Both involve describing the extent of updates.
Criteria: Designers describe the extent and magnitude of an update.
Phrase: Describe update scope

17.
Concepts: manual adjustment suggestion, allowing manual adjustments
Relationship: Both involve manual adjustments.
Criteria: Designers suggest and mention the possibility of manual adjustments in the software.
Phrase: Suggest manual adjustments

18.
Concepts: touch screen functionality, touch screen information
Relationship: Both involve discussing touch screen features.
Criteria: Developers discuss and inform users about touch screen functionality and on-screen keyboards.
Phrase: Discuss touch screen functionality

19.
Concepts: simulated experiment, detail simulated experiment assessment, experimental simulations in electricity
Relationship: All involve discussing simulated experiments.
Criteria: Designers discuss plans and assessments for simulated experiments, particularly in electricity.
Phrase: Discuss simulated experiments

20.
Concepts: input methods, input methods discussion
Relationship: Both involve discussing input methods.
Criteria: Designers and developers discuss methods for inputting data into the software.
Phrase: Discuss input methods

21.
Concepts: design refinement, design discussion
Relationship: Both involve discussing design aspects.
Criteria: Designers and developers discuss refining and various aspects of the design.
Phrase: Discuss design refinement

22.
Concepts: system requirements, explain development process
Relationship: Both involve discussing system compatibility and development.
Criteria: Designers discuss system requirements and explain the development process for compatibility.
Phrase: Discuss system requirements and development

23.
Concepts: feature adjustment, feature flexibility
Relationship: Both involve discussing feature changes.
Criteria: Designers discuss adjustments and the flexibility of features or layouts.
Phrase: Discuss feature adjustments

24.
Concepts: discussing usability, visual and functional design
Relationship: Both involve discussing usability and design aspects.
Criteria: Designers discuss user interface, usability, and visual and functional aspects of the software.
Phrase: Discuss usability and design

25.
Concepts: future feedback invitation, future consultation promise
Relationship: Both involve future community engagement.
Criteria: Developers promise to invite feedback and gather opinions from the community for future projects.
Phrase: Promise future feedback

26.
Concepts: acknowledge community needs, announce future consultation
Relationship: Both involve acknowledging and planning for community needs.
Criteria: Designers acknowledge community needs and announce plans for future consultations.
Phrase: Announce future consultation

27.
Concepts: share potential future direction, outline future development plans
Relationship: Both involve discussing future plans.
Criteria: Designers share potential future directions and outline goals for future development.
Phrase: Outline future development plans

28.
Concepts: respond to feedback, commit to improvements
Relationship: Both involve responding to feedback.
Criteria: Designers respond to feedback by committing to add features or improve the software.
Phrase: Commit to improvements based on feedback

29.
Concepts: prioritize user feedback, plan iterative development
Relationship: Both involve prioritizing feedback for development.
Criteria: Designers prioritize user feedback and plan iterative development based on it.
Phrase: Prioritize feedback for development

30.
Concepts: self-rebuttal, self rebut the previous response
Relationship: Both involve contradicting previous statements.
Criteria: Designers discuss previous attempts or experiences and contradict their previous responses.
Phrase: Contradict previous response

31.
Concepts: memory aid, express concern about memory
Relationship: Both involve concerns about memory.
Criteria: Designers mention the need to gather opinions to aid memory and express concerns about remembering details.
Phrase: Express memory concerns

32.
Concepts: opinion gathering, project planning
Relationship: Both involve gathering opinions for planning.
Criteria: Designers gather opinions before starting new projects and discuss project planning.
Phrase: Gather opinions for project planning

33.
Concepts: suggest prioritization, development prioritization feedback
Relationship: Both involve discussing prioritization.
Criteria: Users suggest prioritizing features, and developers provide feedback on development prioritization.
Phrase: Discuss development prioritization

34.
Concepts: prioritization, development prioritization
Relationship: Both involve discussing the order of tasks.
Criteria: Designers discuss the order in which tasks or features will be developed.
Phrase: Discuss task prioritization

35.
Concepts: release schedule, release process, version release management
Relationship: All involve discussing release timelines.
Criteria: Designers provide schedules and discuss the process and timeline for version releases.
Phrase: Discuss release schedules

36.
Concepts: set timeline expectation, providing development timelines
Relationship: Both involve setting and providing timelines.
Criteria: Designers set expectations and provide timelines for the development and release of features.
Phrase: Provide development timelines

37.
Concepts: update preview, feature preview, listing upcoming features
Relationship: All involve previewing upcoming updates.
Criteria: Designers preview and list upcoming features and updates.
Phrase: Preview upcoming features

38.
Concepts: feature expansion, product improvement
Relationship: Both involve discussing improvements.
Criteria: Designers mention the expansion of features and upcoming improvements to the software.
Phrase: Discuss feature expansion and improvement

39.
Concepts: detail specific updates, listing updates and fixes
Relationship: Both involve detailing updates.
Criteria: Designers detail specific updates and list new features, components, and bug fixes.
Phrase: Detail updates and fixes

40.
Concepts: detailed overview of update, give an intro to the update content
Relationship: Both involve providing an overview of updates.
Criteria: Designers provide a detailed overview and introduction to the content of an update.
Phrase: Provide update overview

41.
Concepts: software update process, software updates and downloads
Relationship: Both involve discussing the update process.
Criteria: Designers describe the process and timeline for software updates and downloads.
Phrase: Describe update process

42.
Concepts: internal update, provide update schedule
Relationship: Both involve providing updates.
Criteria: Designers provide internal updates and schedules for the software.
Phrase: Provide update schedule

43.
Concepts: developer announcement, announce community updates
Relationship: Both involve making announcements.
Criteria: Developers communicate new features, updates, and changes to the community.
Phrase: Announce community updates

44.
Concepts: announce and confirm updates, communicate updates and progress
Relationship: Both involve communicating updates.
Criteria: Designers confirm and announce updates, sharing timelines and progress.
Phrase: Communicate updates and progress

45.
Concepts: share development updates, provide development updates
Relationship: Both involve providing development updates.
Criteria: Designers describe their current research and development efforts, providing status information and updates.
Phrase: Provide development updates

46.
Concepts: visual update, highlight progress
Relationship: Both involve sharing progress visually.
Criteria: Designers share visual updates and highlight the progress of an update.
Phrase: Highlight update progress

47.
Concepts: inquire about recent updates, inquire about feature updates, inquire about update status
Relationship: All involve inquiring about updates.
Criteria: Users inquire about recent updates, feature updates, and the status of updates.
Phrase: Inquire about updates

48.
Concepts: engage with development process, express interest in platform development
Relationship: Both involve user engagement with development.
Criteria: Users inquire about the development process and express interest in platform development.
Phrase: Engage with development process

49.
Concepts: apologize for interruptions, apologies and politeness
Relationship: Both involve expressing apologies.
Criteria: Designers or users apologize for potential interruptions or inconveniences.
Phrase: Apologize for interruptions

50.
Concepts: apology for timing, inconvenience acknowledgment
Relationship: Both involve apologizing for timing and inconvenience.
Criteria: Developers apologize for the timing of messages or updates and acknowledge potential inconvenience.
Phrase: Apologize for timing and inconvenience

51.
Concepts: future feature promise, promising feature realization
Relationship: Both involve promising future features.
Criteria: Developers promise to implement and perfect features in the future.
Phrase: Promise future features

52.
Concepts: reassurance, user reassurance
Relationship: Both involve reassuring users.
Criteria: Designers reassure users about progress and future availability of features.
Phrase: Reassure users

53.
Concepts: mitigate user concerns, answer to a question
Relationship: Both involve responding to user concerns.
Criteria: Designers respond to user concerns with reassurances about ongoing work.
Phrase: Mitigate user concerns

54.
Concepts: inquiry, uncertainty, clarification request
Relationship: All involve seeking information or clarification.
Criteria: Users ask questions to seek information, express uncertainty, or request clarification.
Phrase: Request clarification

55.
Concepts: platform question, ask a question about the app
Relationship: Both involve asking questions about the platform.
Criteria: Users ask questions about the platform's features, updates, and usage.
Phrase: Ask platform questions

56.
Concepts: information seeking, make technical inquiries
Relationship: Both involve seeking technical information.
Criteria: Users ask technical questions to gain knowledge or resources related to the software.
Phrase: Make technical inquiries

57.
Concepts: request technical support, inquire about software usage
Relationship: Both involve seeking support for software usage.
Criteria: Users request assistance or technical support and seek guidance on using the software.
Phrase: Request technical support

58.
Concepts: seek help, express need for support and documentation
Relationship: Both involve seeking help and support.
Criteria: Users seek help and express the need for usage support and documentation.
Phrase: Seek help and support

59.
Concepts: request user manual, justify request for manual
Relationship: Both involve requesting a user manual.
Criteria: Users request and justify the need for a user manual.
Phrase: Request user manual

60.
Concepts: compatibility assurance, discuss software compatibility
Relationship: Both involve discussing software compatibility.
Criteria: Developers assure and discuss the software's compatibility with certain hardware and systems.
Phrase: Discuss software compatibility

61.
Concepts: version clarification, platform clarification
Relationship: Both involve seeking clarification.
Criteria: Users seek clarification about software versions and platforms.
Phrase: Seek version and platform clarification

62.
Concepts: cross platform usage, inquire about platform compatibility
Relationship: Both involve inquiring about platform compatibility.
Criteria: Users inquire about using the software across different platforms and its compatibility.
Phrase: Inquire about platform compatibility

63.
Concepts: mention outdated technology, highlight outdated technology
Relationship: Both involve discussing outdated technology.
Criteria: Users mention and highlight the outdated technology used in their school.
Phrase: Highlight outdated technology

64.
Concepts: community context, mention school initiative
Relationship: Both involve providing context about school initiatives.
Criteria: Users provide context about their school's initiatives or projects.
Phrase: Mention school initiatives
---