You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (32 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
32. 
Concepts: {Repeat the input 32}
Relationship: {What is logical relationship between concepts in code 32, or N/A if not applicable}
Criteria: {Who did what, and how for code 32}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: need for system support, needing system support for learning reminders
- Participant needs system support to remind them of their progress and learning journey.
- The participant needs support from the system to remind them where they were in their learning process.

2.
Concepts: fragmentary learning, need for system support to recall previous work
- The interviewee reflects on how professionals learn in fragmented time blocks and need system support to recall previous work.
- The interviewee reflects on the need for system support to recall previous work, highlighting the importance of fragmented learning.

3.
Concepts: reflecting on fragmented learning patterns, reflecting on how professionals learn in fragments
- Reflecting on the fragmented learning patterns of professionals, needing system support for learning continuity.
- The participant reflects on how professionals learn in fragments and need support from the system.

4.
Concepts: fragmented learning, describing the fragmented nature of professional learning
- Reflections on how professionals learn in fragments, with a need for system support to remind them where they were.
- Describes the fragmented nature of professional learning, where learners need support to remember their progress.

5.
Concepts: emphasizing early and frequent problem-solving inquiries, stresses the significance of early and frequent problem inquiries
- The participant emphasizes the importance of early and frequent problem-solving inquiries.
- Stressing the significance of early and frequent problem inquiries

6.
Concepts: asking for help early and often, importance of asking for help
- E01 advocates for asking for help early and often.
- Emphasizes the importance of asking for help early and often.

7.
Concepts: contextual help-seeking, importance of background information
- The participant emphasizes the importance of context in seeking help, such as providing background information.
- The participant highlights the importance of background information or context in seeking help or understanding code.

8.
Concepts: novice (negative): debug, exercises before asking ai for help, pre-learning requirement about how to ask questions
- Participant believes that novices need practice in debugging their own code before seeking AI assistance.
- The user needs practice in debugging their own code before asking AI for help.
- The participant suggests that users need practice in debugging their own code before seeking AI assistance.

9.
Concepts: importance of debugging practice, importance of user debugging practice, emphasizing the need for users to practice debugging their own code, importance of user practice in debugging
- Suggesting users need practice in debugging their own code before asking AI for help.
- Valuing the importance of debugging practice and exercises before seeking AI assistance.
- Emphasizing the importance of users practicing debugging their own code before seeking AI assistance.
- Emphasizes the need for users to practice debugging their own code before asking AI for help.
- The user emphasizes the importance of user practice in debugging before relying on AI assistance.

10.
Concepts: emphasizing the need for expertise, emphasizing need for expertise in error interpretation
- The user emphasizes the need for expertise when working with AI-generated code and debugging.
- The participant emphasizes the need for expertise in interpreting errors and debugging code.

11.
Concepts: learning needs for debugging, demand for expertise and experience
- The participant highlights the need for practice in debugging one's own code.
- The participant demands expertise and experience, emphasizing the need for users to practice debugging their own code.

12.
Concepts: recognizing testing importance, emphasizing the importance of user debugging skills
- The participant recognizes the importance of testing and debugging in the learning process.
- The participant emphasizes the importance of user debugging skills.

13.
Concepts: knowledge-dependent ai usage, recognizing the need for expertise to understand ai generated code, importance of expertise in ai interaction
- Recognizes the need for expertise to understand and debug AI-generated code.
- Recognizes the need for expertise to understand AI-generated code.
- Recognizes the importance of expertise in understanding AI-generated code and debugging.

14.
Concepts: requiring expertise to understand ai errors, expertise required to understand and fix ai-generated errors
- Believes that users need expertise to understand AI errors and debug them effectively.
- The interviewee recognizes the need for expertise to understand and fix AI-generated errors.

15.
Concepts: expertise required, expertise in ai-generated code
- The participant requires expertise to understand errors and debug them, highlighting the risks of blindly following the AI tool.
- Emphasizes the need for expertise to understand and fix errors in AI-generated code, highlighting the risks of blindly following AI.

16.
Concepts: need for fine-tuning ai design for experts, desiring fine-tuned expert-oriented design
- Recognizing the need for fine-tuning AI design for experts
- Desiring a fine-tuned, expert-oriented design for the AI system.

17.
Concepts: the need for human judgment, emphasizes need for human judgment
- The participant highlights the need for human judgment in AI-assisted learning.
- The participant emphasizes the need for human judgment in AI-assisted learning.

18.
Concepts: need for user judgment, encouraging user judgment
- The participant emphasizes the need for user judgment in evaluating AI responses.
- The participant emphasizes the need for users to exercise judgment when interacting with AI.

19.
Concepts: human judgment, importance of human judgment and ability, highlighting human judgment
- Valuing human judgment in AI-assisted development
- Acknowledging the importance of human judgment and ability in conjunction with AI.
- Emphasizing the importance of human judgment in AI-assisted tasks

20.
Concepts: caution with ai advice, advising caution in interpreting ai advice
- Exercising caution when following AI advice.
- The participant advises users to exercise caution when interpreting AI-generated advice, using their own judgment.

21.
Concepts: warning about blindly following chatgpt, warning about blind following
- Warning about blindly following AI-generated code
- Participant warns against blindly following AI-generated code without understanding the errors and debugging process.

22.
Concepts: avoiding blind trust in ai, caution against blind ai reliance
- Emphasizes the need for caution and critical thinking when using AI-driven interfaces.
- Warns against blind reliance on AI and emphasizes the need for expertise.

23.
Concepts: multilingual programming expertise, familiarity with multiple software languages, expertise in multiple programming languages
- Highlights the expertise of an individual in multiple programming languages.
- Familiarity with multiple software languages and programming experiences.
- The participant has expertise in multiple programming languages.

24.
Concepts: prior programming experience, extensive programming experience
- Reflecting on extensive programming experience in various languages.
- Reflecting on extensive programming experience
- Shares personal experiences and background in computer programming.
- Describes extensive experience in various programming languages.
- Sharing extensive programming experience and background.

25.
Concepts: shares extensive programming experience, sharing prior experiences in computer programming
- Sharing extensive programming experience and background
- Shares prior experiences in computer programming.

26.
Concepts: time constraints, acknowledging time constraints for language learning
- The participant notes the limitations of time for each language, as an expert who knows many languages.
- The interviewee acknowledges the limitations of their time to learn and master multiple languages.

27.
Concepts: effort constraints in language use, constraints of time and attention
- Acknowledging effort constraints, particularly when working with multiple languages.
- Acknowledges the constraints of time and attention in learning and using multiple languages.

28.
Concepts: desire to learn gis extensions, interest in learning gis extensions
- Expresses a desire to learn about GIS extensions in a limited time frame.
- Expresses interest in learning GIS extensions within a limited time frame.

29.
Concepts: limited time for learning, time constraints for learning each language
- Limited time is available for each language or skill.
- Limited time for learning each language

30.
Concepts: observing novice coding habits, observing beginners' coding tendencies
- Interviewee observes and comments on novice coding habits, such as writing large chunks of code before checking for errors.
- The participant observes beginners' tendencies to write extensive code before error checking.

31.
Concepts: writing large chunks of code, observing beginners' struggles with code
- The participant notes the tendency of beginners to write large chunks of code and then struggle to debug.
- Participant observes that beginners often write large chunks of code and struggle to fix resulting errors.

32.
Concepts: beginner coding habits, beginner coding practices
- Describes beginners writing chunks of code, highlighting the importance of incremental coding.
- Notes the tendency of beginners to write large code chunks, highlighting the need for incremental feedback mechanisms.
===
Here are the definitions for each code:

---
1.
Concepts: need for system support, needing system support for learning reminders
Relationship: The participant's need for system support is directly related to their need for learning reminders.
Criteria: Participants need system support to remind them of their progress and learning journey.
Phrase: Needing system support for learning reminders.

2.
Concepts: fragmentary learning, need for system support to recall previous work
Relationship: Fragmentary learning leads to the need for system support to recall previous work.
Criteria: Professionals need system support to recall previous work due to fragmentary learning patterns.
Phrase: Needing system support for recalling previous work.

3.
Concepts: reflecting on fragmented learning patterns, reflecting on how professionals learn in fragments
Relationship: Reflecting on fragmented learning patterns leads to the need for system support.
Criteria: Professionals reflect on how they learn in fragments and need system support for learning continuity.
Phrase: Reflecting on fragmented learning patterns.

4.
Concepts: fragmented learning, describing the fragmented nature of professional learning
Relationship: Fragmented learning leads to the need for system support to remember progress.
Criteria: Professionals learn in fragments and need system support to remember their progress.
Phrase: Describing the fragmented nature of professional learning.

5.
Concepts: emphasizing early and frequent problem-solving inquiries, stresses the significance of early and frequent problem inquiries
Relationship: Emphasizing early and frequent problem-solving inquiries highlights their significance.
Criteria: Participants emphasize the importance of early and frequent problem-solving inquiries.
Phrase: Emphasizing early and frequent problem-solving inquiries.

6.
Concepts: asking for help early and often, importance of asking for help
Relationship: Asking for help early and often is important for effective learning.
Criteria: Participants advocate for asking for help early and often.
Phrase: Asking for help early and often.

7.
Concepts: contextual help-seeking, importance of background information
Relationship: Contextual help-seeking requires background information.
Criteria: Participants emphasize the importance of context in seeking help, including background information.
Phrase: Seeking help contextually.

8.
Concepts: novice (negative): debug, exercises before asking ai for help, pre-learning requirement about how to ask questions
Relationship: Novices need to debug and practice before seeking AI help.
Criteria: Novices need practice in debugging their own code before seeking AI assistance.
Phrase: Practicing debugging before seeking AI help.

9.
Concepts: importance of debugging practice, importance of user debugging practice, emphasizing the need for users to practice debugging their own code, importance of user practice in debugging
Relationship: Debugging practice is essential for effective learning.
Criteria: Users need practice in debugging their own code before seeking AI assistance.
Phrase: Emphasizing the importance of debugging practice.

10.
Concepts: emphasizing the need for expertise, emphasizing need for expertise in error interpretation
Relationship: Expertise is necessary for effective error interpretation.
Criteria: Participants emphasize the need for expertise when working with AI-generated code and debugging.
Phrase: Emphasizing the need for expertise.

11.
Concepts: learning needs for debugging, demand for expertise and experience
Relationship: Debugging requires expertise and experience.
Criteria: Participants highlight the need for practice in debugging one's own code.
Phrase: Demanding expertise and experience.

12.
Concepts: recognizing testing importance, emphasizing the importance of user debugging skills
Relationship: Testing and debugging are crucial for effective learning.
Criteria: Participants recognize the importance of testing and debugging in the learning process.
Phrase: Recognizing the importance of testing.

13.
Concepts: knowledge-dependent ai usage, recognizing the need for expertise to understand ai generated code, importance of expertise in ai interaction
Relationship: AI usage requires expertise to understand generated code.
Criteria: Participants recognize the need for expertise to understand AI-generated code and debugging.
Phrase: Recognizing the need for expertise in AI interaction.

14.
Concepts: requiring expertise to understand ai errors, expertise required to understand and fix ai-generated errors
Relationship: Expertise is necessary to understand and fix AI-generated errors.
Criteria: Participants believe that users need expertise to understand AI errors and debug them effectively.
Phrase: Requiring expertise to understand AI errors.

15.
Concepts: expertise required, expertise in ai-generated code
Relationship: Expertise is necessary to understand and fix errors in AI-generated code.
Criteria: Participants require expertise to understand errors and debug them, highlighting the risks of blindly following the AI tool.
Phrase: Requiring expertise in AI-generated code.

16.
Concepts: need for fine-tuning ai design for experts, desiring fine-tuned expert-oriented design
Relationship: Fine-tuned AI design is necessary for expert users.
Criteria: Participants recognize the need for fine-tuning AI design for experts.
Phrase: Desiring fine-tuned expert-oriented design.

17.
Concepts: the need for human judgment, emphasizes need for human judgment
Relationship: Human judgment is essential in AI-assisted learning.
Criteria: Participants highlight the need for human judgment in AI-assisted learning.
Phrase: Emphasizing the need for human judgment.

18.
Concepts: need for user judgment, encouraging user judgment
Relationship: User judgment is necessary in evaluating AI responses.
Criteria: Participants emphasize the need for user judgment in evaluating AI responses.
Phrase: Encouraging user judgment.

19.
Concepts: human judgment, importance of human judgment and ability, highlighting human judgment
Relationship: Human judgment and ability are crucial in AI-assisted tasks.
Criteria: Participants value human judgment in AI-assisted development.
Phrase: Highlighting human judgment.

20.
Concepts: caution with ai advice, advising caution in interpreting ai advice
Relationship: Caution is necessary when following AI advice.
Criteria: Participants advise users to exercise caution when interpreting AI-generated advice, using their own judgment.
Phrase: Advising caution with AI advice.

21.
Concepts: warning about blindly following chatgpt, warning about blind following
Relationship: Blindly following AI-generated code is risky.
Criteria: Participants warn against blindly following AI-generated code without understanding the errors and debugging process.
Phrase: Warning about blindly following AI-generated code.

22.
Concepts: avoiding blind trust in ai, caution against blind ai reliance
Relationship: Blind trust in AI is risky and should be avoided.
Criteria: Participants emphasize the need for caution and critical thinking when using AI-driven interfaces.
Phrase: Avoiding blind trust in AI.

23.
Concepts: multilingual programming expertise, familiarity with multiple software languages, expertise in multiple programming languages
Relationship: Multilingual programming expertise is characterized by familiarity with multiple software languages.
Criteria: Participants have expertise in multiple programming languages.
Phrase: Possessing multilingual programming expertise.

24.
Concepts: prior programming experience, extensive programming experience
Relationship: Prior programming experience is extensive and varied.
Criteria: Participants reflect on their extensive programming experience in various languages.
Phrase: Reflecting on prior programming experience.

25.
Concepts: shares extensive programming experience, sharing prior experiences in computer programming
Relationship: Sharing prior programming experience is important for learning.
Criteria: Participants share their extensive programming experience and background.
Phrase: Sharing prior programming experience.

26.
Concepts: time constraints, acknowledging time constraints for language learning
Relationship: Time constraints limit language learning.
Criteria: Participants acknowledge the limitations of time for each language, as experts who know many languages.
Phrase: Acknowledging time constraints.

27.
Concepts: effort constraints in language use, constraints of time and attention
Relationship: Effort constraints are characterized by limitations of time and attention.
Criteria: Participants acknowledge the constraints of time and attention in learning and using multiple languages.
Phrase: Acknowledging effort constraints.

28.
Concepts: desire to learn gis extensions, interest in learning gis extensions
Relationship: Desire to learn GIS extensions is driven by interest.
Criteria: Participants express a desire to learn about GIS extensions in a limited time frame.
Phrase: Desiring to learn GIS extensions.

29.
Concepts: limited time for learning, time constraints for learning each language
Relationship: Limited time is a constraint for learning each language.
Criteria: Limited time is available for each language or skill.
Phrase: Acknowledging limited time for learning.

30.
Concepts: observing novice coding habits, observing beginners' coding tendencies
Relationship: Novice coding habits are characterized by writing large chunks of code.
Criteria: Participants observe and comment on novice coding habits, such as writing large chunks of code before checking for errors.
Phrase: Observing novice coding habits.

31.
Concepts: writing large chunks of code, observing beginners' struggles with code
Relationship: Writing large chunks of code leads to struggles with debugging.
Criteria: Participants note the tendency of beginners to write large chunks of code and then struggle to debug.
Phrase: Observing beginners' struggles with code.

32.
Concepts: beginner coding habits, beginner coding practices
Relationship: Beginner coding habits are characterized by writing large chunks of code.
Criteria: Participants describe beginners writing chunks of code, highlighting the importance of incremental coding.
Phrase: Describing beginner coding habits.