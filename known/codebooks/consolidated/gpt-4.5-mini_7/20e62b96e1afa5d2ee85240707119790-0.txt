You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (11 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
11. 
Concepts: {Repeat the input 11}
Relationship: {What is logical relationship between concepts in code 11, or N/A if not applicable}
Criteria: {Who did what, and how for code 11}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: communicate update progress, communicate product updates
- Designers highlight significant progress in updates and assure the community that updates are ongoing.
- Designers confirm timelines for updates, provide details about current product status, and announce improvements for future updates.

2.
Concepts: provide progress updates, communicate ongoing work
- Designers communicate updates on the progress of software releases and ongoing research.
- The designer communicates ongoing work and shares visual updates related to software development.

3.
Concepts: explain development focus, outline future development plans
- Designers explain the ongoing need for software development and communicate the current focus to the community.
- Designers outline specific objectives and hint at future opportunities for software development.

4.
Concepts: community need, educational tools
- Users express a need for specific functionalities that would aid their teaching.
- A user requests specific educational tools, indicating the community's needs for teaching resources.

5.
Concepts: offer user support, offer ongoing support
- Designers offer assistance and technical support to users regarding the software.
- Designer encourages users to report any issues they encounter for ongoing support.

6.
Concepts: facilitate interaction, transparent developer discussion
- Designers and users engage in direct dialogue discussing features and updates.
- Designers engage in open discussions about technical aspects and user experiences.

7.
Concepts: align with feedback, respond to feature requests
- Designers align their actions with user feedback and prioritize it in future updates.
- Designers respond to feature requests and acknowledge the necessity of those features.

8.
Concepts: collaborative planning, collect input and seek consensus
- Designers and users collaboratively discussing and planning the development of the software.
- Designers seek user input and discuss plans for collaboration on new features.

9.
Concepts: acknowledgment, recognize expertise
- Users acknowledge the contributions of experts and make specific requests for software features.
- A user acknowledges the expertise of others and shows respect for experts while making a feature request.

10.
Concepts: establish credibility, sharing identity per request
- Users share their professional background and confirm their identity within the community.
- A user shares their professional background in response to a request for information.

11.
Concepts: consulting community, acknowledging community expertise
- Designers and users seek input from the community on specific technical aspects or decisions.
- Designer and users discuss educational standards and practices in the community.
===
---
Definitions for each code (11 in total):
1.
Concepts: communicate update progress, communicate product updates  
Relationship: Both concepts involve the designers informing the community about the status and advancements of the product.  
Criteria: Designers highlight significant progress and confirm timelines for updates, assuring the community that updates are ongoing.  
Phrase: Communicate product progress.

2.
Concepts: provide progress updates, communicate ongoing work  
Relationship: Both concepts focus on the designers sharing information about the current state of development and research activities.  
Criteria: Designers share updates on software releases and ongoing work, including visual updates related to development.  
Phrase: Provide ongoing progress updates.

3.
Concepts: explain development focus, outline future development plans  
Relationship: Both concepts involve designers clarifying current priorities and future objectives for software development.  
Criteria: Designers explain the need for development and outline specific objectives for future software enhancements.  
Phrase: Explain development focus.

4.
Concepts: community need, educational tools  
Relationship: Both concepts highlight the community's expressed requirements for resources that support teaching.  
Criteria: Users express needs for specific functionalities and request educational tools to aid their teaching efforts.  
Phrase: Identify community needs.

5.
Concepts: offer user support, offer ongoing support  
Relationship: Both concepts emphasize the designers' role in providing assistance and addressing user issues.  
Criteria: Designers offer technical support and encourage users to report issues for continuous assistance.  
Phrase: Provide user support.

6.
Concepts: facilitate interaction, transparent developer discussion  
Relationship: Both concepts involve open communication between designers and users regarding features and updates.  
Criteria: Designers and users engage in direct dialogue about technical aspects and user experiences.  
Phrase: Facilitate community interaction.

7.
Concepts: align with feedback, respond to feature requests  
Relationship: Both concepts focus on the designers' responsiveness to user input and prioritization of features.  
Criteria: Designers align their actions with user feedback and respond to feature requests, acknowledging their importance.  
Phrase: Respond to user feedback.

8.
Concepts: collaborative planning, collect input and seek consensus  
Relationship: Both concepts involve joint efforts between designers and users to plan and develop software features.  
Criteria: Designers and users collaboratively discuss and seek input for planning new features.  
Phrase: Engage in collaborative planning.

9.
Concepts: acknowledgment, recognize expertise  
Relationship: Both concepts emphasize the importance of recognizing and respecting the contributions of knowledgeable community members.  
Criteria: Users acknowledge the expertise of others while making specific requests for software features.  
Phrase: Acknowledge community expertise.

10.
Concepts: establish credibility, sharing identity per request  
Relationship: Both concepts involve users confirming their professional background to build trust within the community.  
Criteria: Users share their professional background in response to requests for information to establish credibility.  
Phrase: Establish community credibility.

11.
Concepts: consulting community, acknowledging community expertise  
Relationship: Both concepts involve seeking input from the community and recognizing the knowledge present within it.  
Criteria: Designers and users consult the community on technical aspects and discuss educational standards.  
Phrase: Consult community expertise.
---