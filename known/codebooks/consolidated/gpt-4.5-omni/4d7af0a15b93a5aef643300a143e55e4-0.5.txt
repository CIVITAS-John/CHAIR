You are an expert in thematic analysis. 
Each code is a cluster of multiple qualitative sub-code. If a sub-code includes another, use the broader one. If sub-codes are parallel, write one that covers both.
Write clear and generalizable labels and criteria for each code, informed by the context, and without unnecessary specifics or examples.
Find a theory-informed category for each code. Use 2-4 words for categories and avoid over-generalization (e.g. "social interaction" instead of "interaction", "communication approach" instead of "communication").
The research question is: How did Physics Lab's online community emerge? (through the lens of learning sciences, human-computer interaction, and participatory design)
Always follow the output format:
---
Categories: 
* {Name some categories you identified from the research question and theoretical lens}

Definitions for each code (12 in total):
1.
Relationship: {The logical relationship between sub-codes in code 1}
Criteria: {Consolidated criteria of code 1}
Label: {A consolidated label of code 1}
Category: {2-4 words for code 1}
...
12.
Relationship: {The logical relationship between sub-codes in code 12}
Criteria: {Consolidated criteria of code 12}
Label: {A consolidated label of code 12}
Category: {2-4 words for code 12}
---
~~~
1. knowledge sharing, information exchange.
- Instances where participants share information, resources, or expertise to help others learn.
- Moments where users or designers share information that helps others understand or use the software better.
- Instances where community members share information, knowledge, or feedback to help others or improve the software.
- Instances where group members share information or expertise to contribute to the learning process.
- Instances where participants provide answers, guidance, or share information to help others.

2. asking questions, information seeking.
- Instances where participants ask questions to gain information or clarification.
- Instances where community members ask questions to obtain information or clarification.
- Instances where participants ask questions or seek information about using the software.

3. social interaction, informal communication.
- Instances where community members engage in casual or informal conversation.
- Casual and friendly exchanges that contribute to a sense of community.

4. collaborative development, collaborative problem solving.
- The community collaboratively contributes to the development and improvement of the software.
- Instances where the community works together to solve a problem or improve the software.
- Collaborative efforts to solve issues or improve the software.
- Instances where participants and designers collaboratively address issues or improve the software.

5. expressions of support, expressions of gratitude.
- Expressions of encouragement or appreciation from community members.
- Instances where participants express thanks or appreciation, fostering a positive community atmosphere.

6. user requests, feature requests.
- Instances where users request features or improvements to the software.
- Suggestions made by users for new features or improvements to the software.
- Participants are invited to suggest new features, provide feedback, and contribute to the design process.

7. user involvement, user feedback integration.
- Instances where users are actively involved in the design process by providing input and suggestions.
- Instances where users are actively involved in the design and development process.
- Moments where user feedback is solicited or integrated into the design process.

8. collaborative feedback, feedback solicitation.
- Instances where developers seek or respond to user feedback.
- Instances where the designer asks for suggestions or feedback, and where community members ask questions or provide feedback about the software.

9. responsiveness, designer responsiveness.
- The designer's prompt and engaged responses to user suggestions and feedback.
- Instances where the designer responds to user feedback and incorporates it into the design.

10. feature updates, design updates, update announcements.
- Instances where the designer provides information about new or upcoming features in the software.
- Instances where the designer provides updates or information about the platform's development, including new features, bug fixes, and enhancements.
- Information provided by the designer about software updates and new features.
- Information shared by developers about new features or changes.

11. problem-solving.
- Instances where participants provide solutions or information to help others.
- Instances where community members discuss and propose solutions to issues or challenges.

12. usability concerns.
- Issues raised by users regarding the ease of use or compatibility of the software.
- Discussions focused on the ease of use and user experience of the system being developed.
===
---
Categories: 
* Knowledge Sharing
* Communication Approach
* Collaborative Development
* User Feedback Integration
* Community Engagement

Definitions for each code (12 in total):
1.
Relationship: Sub-codes involve the sharing of information, resources, or expertise to aid learning and software understanding.
Criteria: Instances where participants share information, resources, or expertise to help others learn or improve the software.
Label: Knowledge Sharing
Category: Knowledge Sharing

2.
Relationship: Sub-codes involve participants asking questions to gain information or clarification.
Criteria: Instances where participants ask questions to obtain information, clarification, or guidance.
Label: Information Seeking
Category: Communication Approach

3.
Relationship: Sub-codes involve casual or informal interactions contributing to community building.
Criteria: Instances where community members engage in casual or friendly exchanges.
Label: Informal Communication
Category: Community Engagement

4.
Relationship: Sub-codes involve collaborative efforts to develop and improve the software.
Criteria: Instances where the community collaborates to solve problems or improve the software.
Label: Collaborative Development
Category: Collaborative Development

5.
Relationship: Sub-codes involve expressions of encouragement, appreciation, or gratitude.
Criteria: Instances where participants express thanks or encouragement, fostering a positive atmosphere.
Label: Supportive Communication
Category: Community Engagement

6.
Relationship: Sub-codes involve users requesting features or improvements.
Criteria: Instances where users suggest new features or improvements to the software.
Label: Feature Requests
Category: User Feedback Integration

7.
Relationship: Sub-codes involve active user involvement in the design and development process.
Criteria: Instances where users provide input, suggestions, or feedback integrated into the design process.
Label: User Involvement
Category: User Feedback Integration

8.
Relationship: Sub-codes involve seeking or responding to user feedback.
Criteria: Instances where developers solicit or respond to user feedback.
Label: Feedback Solicitation
Category: User Feedback Integration

9.
Relationship: Sub-codes involve the designer's prompt responses to user feedback.
Criteria: Instances where the designer responds to and incorporates user feedback.
Label: Designer Responsiveness
Category: Communication Approach

10.
Relationship: Sub-codes involve providing information about updates and new features.
Criteria: Instances where designers announce updates, new features, or changes to the software.
Label: Update Announcements
Category: Communication Approach

11.
Relationship: Sub-codes involve participants discussing and proposing solutions to issues.
Criteria: Instances where participants provide solutions or discuss challenges.
Label: Problem Solving
Category: Collaborative Development

12.
Relationship: Sub-codes involve discussions about the ease of use and user experience.
Criteria: Instances where users raise issues or discuss the usability and compatibility of the software.
Label: Usability Concerns
Category: User Feedback Integration
---