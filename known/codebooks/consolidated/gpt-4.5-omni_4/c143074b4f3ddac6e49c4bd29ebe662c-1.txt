You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (64 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
64. 
Concepts: {Repeat the input 64}
Relationship: {What is logical relationship between concepts in code 64, or N/A if not applicable}
Criteria: {Who did what, and how for code 64}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: update description, give an intro to the update content, detailed overview of update
- Description of the extent and content of a new update.
- Introduces and explains the content of the updates.
- Someone gives a detailed list of features and fixes included in a software update.

2.
Concepts: feature examples, explain new features, detail specific updates
- Giving specific examples or details about the planned or existing features.
- Designers or community members give detailed explanations of the upcoming or newly added features.
- Detailing specific features or components in upcoming updates.

3.
Concepts: bidirectional conversion clarification, bidirectional conversion explanation
- Reiteration on the capability for bidirectional conversion between diagrams.
- Designers explain how bidirectional conversion between diagrams and physical setups works.

4.
Concepts: clarify version type, explain version type
- Clarifying which version or type of software is referenced.
- Clarification provided by designers about the version type or availability within certain groups or platforms.

5.
Concepts: technical clarification, explaining technical artifacts
- Providing clarification on technical aspects or functionalities of features.
- Explanation or clarification of technical artifacts or features.

6.
Concepts: inform about changes, announce component update
- Informing users about changes or updates directly affecting features or components.
- Announcing updates or changes to specific software components.

7.
Concepts: sharing visual previews, share progress updates
- Designers provide visual previews of upcoming features or updates.
- Designers inform about ongoing development progress with status information, often with visual aids.

8.
Concepts: review status update, confirm update completion
- Designers update the community on the review or release status of the application.
- Designers confirm the successful completion or upcoming release of an update.

9.
Concepts: list updates and bug fixes, provide version update details
- Designers provide detailed technical updates, including new features, component adjustments, and bug fixes.
- Designers provide detailed information and notes about updates and changes in different versions.

10.
Concepts: describe update scope, update clarification
- Designers outline the scope or size of an upcoming update.
- Designers clarifying the specifics of a recent or upcoming update.

11.
Concepts: testing phase, clarify testing status
- Indication that a feature or version is in the testing phase.
- Updates that clarify the testing status of a feature or version.

12.
Concepts: status update, progress update, share information about current feature development
- A community member provides an update on the status of a development or feature.
- Updates about the progress of development, including upcoming releases and features in the pipeline.
- Sharing information about the status of current feature development.

13.
Concepts: release process, version release management
- Describing the process and stages of releasing software.
- Details on the schedule and process of releasing updates across platforms.

14.
Concepts: share info on app release, inform about software version
- Sharing information regarding the status of an application release.
- Information on the specific version and expected release timeline of the app.

15.
Concepts: feature list, provide feature roadmap
- Someone lists specific features planned for a new version of the software.
- Someone provides a detailed timeline for the development or completion of specific features.

16.
Concepts: confirm feature update, provide update timelines
- Confirming that a feature update will occur, with specifics on timeline.
- Designers give specific dates or expected timelines for updates or releases.

17.
Concepts: simulation detail, simulation enhancement
- A designer explains simulation details for a specific update or functionality.
- Designers discuss enhancements related to simulation capabilities.

18.
Concepts: potential update mention, confirming and promising future features
- Designers mention potential updates or changes that may be considered in the future.
- Designers assure the inclusion of specific features in future updates.

19.
Concepts: feature stability, long-term stability
- Discussing the anticipated stability and reliability of new features once implemented.
- Mention of a feature that, once completed, will ensure stable functionality over the long term.

20.
Concepts: promise to improve, commit to improvement
- Expressions of gratitude from designers coupled with a commitment to improve the app.
- Designers assert their commitment to continuously improving the software.

21.
Concepts: user reassurance, answer to a question
- Reassuring users about upcoming features or solutions being implemented.
- Assurance given to a user, explaining the timing or status of a feature update.

22.
Concepts: prioritization, outline development priorities
- Statements indicating the order in which tasks or features will be developed.
- Outlines the priorities for software development.

23.
Concepts: explain focus areas, explain current focus
- Explains the focus areas of the current or future project.
- Clarifications about the current focus or priorities in app development.

24.
Concepts: development goals, set development scope
- Statements outlining the goals and objectives in developmental projects or features.
- Statements defining the focus areas and limitations of development.

25.
Concepts: current efforts, mention ongoing research
- Statement referring to current efforts and research activities being conducted by the developers.
- Mentioning ongoing research related to the platform's development.

26.
Concepts: discussion of further interests, share potential future direction
- Discussions about other potential interests or future projects.
- Sharing potential new directions or interests for future development.

27.
Concepts: future consultation promise, announce consultation plans
- Promising to seek consultation before starting certain projects.
- Designers announced their plans to gather opinions from users before new initiatives.

28.
Concepts: plan for feedback, seeking community input
- A community member plans to gather user opinions for iterative feedback.
- Plans to gather opinions or feedback from the community before proceeding.

29.
Concepts: encourage open communication, in-group discussion encouragement
- Designers or users encourage open communication and feedback within the community.
- Designers encourage users to share problems or suggestions within the community.

30.
Concepts: community need, community needs acknowledgment
- Identifying and expressing the specific needs of the community.
- Designers acknowledge community needs and discuss aligning with them in future developments.

31.
Concepts: development rationale, community involvement
- A community member provides the rationale behind a development or design decision.
- A community member discusses involving the community in development and feature planning.

32.
Concepts: encourage discussion, encourage participation
- A community member promotes open discussion and problem-solving within the group.
- A community member invited or encouraged others to participate and contribute more actively.

33.
Concepts: explain development process, maintain development transparency
- Explanations provided by designers on the development process, often including technical details.
- Designers provide detailed information about the development processes, challenges, and progress.

34.
Concepts: direct communication, direct user interaction
- Direct interactions between designers and users to discuss features, updates, and feedback.
- Designers interact with the community by providing immediate help or information.

35.
Concepts: resolve user concerns, offer help and inquire
- Designers responded to or resolved user concerns or questions.
- Designers offered assistance and asked users about specific problems they encountered.

36.
Concepts: user support, provide technical support
- Assistance and support provided by designers to help users effectively use the product.
- Designers or users provided technical support or addressed technical issues.

37.
Concepts: acknowledge designer's point, acknowledgment of understanding
- Agreeing or validating a point made by another person.
- Designers express understanding or acknowledgment of user points.

38.
Concepts: designer confirmation, confirmation/agreement of collaboration
- Confirmation or validation from the designer about a certain point or feature.
- Confirmation from designers regarding collaboration or further opinion gathering.

39.
Concepts: respond, response confirmation
- Responses providing specific information or confirmations to user requests or issues.
- Users and designers respond to each other’s questions and confirm details or preferences.

40.
Concepts: seek clarification, response to clarification
- Designers and users clarified or sought confirmation on specific points or technical details.
- Responses from designers addressing specific clarifications or questions posed by users.

41.
Concepts: user needs, inquiry on user needs
- Individual specifies a requirement or need for a tool, resource, or feature in the community.
- Developer asks community members about their needs or preferences.

42.
Concepts: user role inquiry, inquire about user needs
- Designers inquire about the users' roles or backgrounds.
- Designers seek to understand and identify users' challenges or problems.

43.
Concepts: user interface, visual and functional design
- Discussion related to the graphical user interface or visual elements of the software.
- Discussions about the visual and functional aspects of the software.

44.
Concepts: address usability, discuss usability
- A community member discusses the usability aspect of a feature or design.
- Discussions focusing on the usability of the app including input methods or interface functionality.

45.
Concepts: follow-up, engage in dialogue
- Users and designers engage in conversations where one follows up on the other's statement.
- Designers and users engaged in sequential dialogues or Q&A exchanges.

46.
Concepts: clarifying preferences, interface layout decisions
- Individual clarifies their preference or choice related to the software design.
- Individuals discuss preferences regarding the layout and interface of the software.

47.
Concepts: design adaptation, discuss design flexibility
- Designers discuss the need for supporting different design adaptations.
- Designers discussed potential flexibility in feature layout or design adjustments.

48.
Concepts: community context, contextual information
- Individual provides context about their institution or environment in relation to the software.
- Users provide context regarding their environment or constraints relevant to using the software.

49.
Concepts: contextual background, contextualization of question
- Providing context or background for a response.
- Providing context or additional details to explain a question or concern.

50.
Concepts: provide context, explains the answer
- Contextual background provided by users explaining why certain limitations or settings are in place.
- Explanations provided by users detailing situational contexts, sometimes related to usability constraints.

51.
Concepts: feature complexity, complexity explanation
- Mention of the complexity involved in developing a new feature and its timeline.
- Designers explain the complexity of certain updates or features and the time required.

52.
Concepts: delay explanation, update delay explanation
- Designers provide reasons for delays or complexity in completing tasks.
- Explaining the reason for a delay in updates or features.

53.
Concepts: gives reason for it, providing reasons for suggestions
- Reasons provided by users explaining the need for certain features based on convenience or practicality.
- Users explain the reasons behind their suggestions or requests.

54.
Concepts: explaining the plans, explaining design rationale
- Someone explains the rationale behind plans or design decisions.
- Designers or users provide explanations for decisions or design choices.

55.
Concepts: compatibility answer, system compatibility
- Answers regarding software compatibility with different operating systems.
- Someone talks about the compatibility of the software with different systems and versions.

56.
Concepts: confirm compatibility, compatibility assurance
- Designers confirmed compatibility with certain technologies or systems.
- Assurances regarding the compatibility of software across different devices or platforms.

57.
Concepts: outdated technology, highlight outdated technology
- Users comment on the outdated technology or systems they use.
- Highlighting the use or presence of outdated technology.

58.
Concepts: system limitations, system limitation explanation
- Someone talks about the limitations or constraints related to the computer systems being used.
- Designers explain why certain issues cannot be solved due to system limitations.

59.
Concepts: explain limitations, explain current version's limitation
- Explaining the limitations of a feature or solution.
- Explains the limitations of the current software version.

60.
Concepts: limitation of the team, highlight technical constraints
- Highlights the limitations or constraints of the team or project.
- Discussing or highlighting the technical limitations or constraints.

61.
Concepts: alternative suggestion, suggest alternative solutions
- A user provides an alternative suggestion to a proposed idea or solution.
- Offering or seeking alternatives to existing solutions or plans.

62.
Concepts: usability workaround, share workaround
- Offering workarounds to address usability issues.
- A community member shares a workaround or alternative solution to an issue.

63.
Concepts: problem solving, perform troubleshooting
- Offering assistance and encouraging users to report problems encountered.
- Engaging in troubleshooting to resolve user problems.

64.
Concepts: manual adjustment, manual adjustments suggestion
- References to the ability or necessity to manually adjust settings or configurations.
- Recommending manual adjustments as a workaround.
===
---
Definitions for each code (64 in total):
1.
Concepts: update description, give an intro to the update content, detailed overview of update
Relationship: Progressive detailing of an update from introduction to comprehensive description
Criteria: A designer introduces and thoroughly outlines the contents and specifics of an update
Phrase: Describing update content

2.
Concepts: feature examples, explain new features, detail specific updates
Relationship: Detailing and illustrating specific features in updates
Criteria: A designer or community member explains and illustrates specific features in planned or existing updates
Phrase: Detailing new features

3.
Concepts: bidirectional conversion clarification, bidirectional conversion explanation
Relationship: Explanation and clarification about bidirectional conversion functionality
Criteria: A designer clarifies and explains how bidirectional conversion between diagrams and physical setups works
Phrase: Explaining bidirectional conversion

4.
Concepts: clarify version type, explain version type
Relationship: Clarification about different version types 
Criteria: A designer explains and clarifies which version or type of software is being referenced
Phrase: Clarifying version type

5.
Concepts: technical clarification, explaining technical artifacts
Relationship: Explanation and clarification of technical features
Criteria: A designer provides clarification on technical aspects and explanations of technical artifacts or features
Phrase: Explaining technical features

6.
Concepts: inform about changes, announce component update
Relationship: Informing about changes directly related to components 
Criteria: A designer announces an update or change to specific software components
Phrase: Announcing component updates

7.
Concepts: sharing visual previews, share progress updates
Relationship: Providing visual and status updates
Criteria: A designer shares visual previews and progress updates about ongoing development
Phrase: Sharing progress visuals

8.
Concepts: review status update, confirm update completion
Relationship: Ongoing review status leading to update completion confirmation
Criteria: A designer updates the community on the review status and confirms the update completion
Phrase: Confirming update status

9.
Concepts: list updates and bug fixes, provide version update details
Relationship: Listing update details, including bug fixes
Criteria: A designer provides detailed technical updates including bug fixes and new features across versions
Phrase: Listing update details

10.
Concepts: describe update scope, update clarification
Relationship: Description and clarification of update scope 
Criteria: A designer outlines and clarifies the scope and specifics of a recent or upcoming update
Phrase: Clarifying update scope

11.
Concepts: testing phase, clarify testing status
Relationship: Indicating and clarifying testing phase status
Criteria: A designer indicates and clarifies the testing phase status of a feature or version
Phrase: Clarifying testing status

12.
Concepts: status update, progress update, share information about current feature development
Relationship: Sharing ongoing status and progress related to feature development
Criteria: A community member updates on the status and progress of current feature development and upcoming releases
Phrase: Sharing development progress

13.
Concepts: release process, version release management
Relationship: Explanation of releasing process stages
Criteria: A designer describes the stages and management process of releasing software updates
Phrase: Managing version release

14.
Concepts: share info on app release, inform about software version
Relationship: Providing release status updates related to specific versions
Criteria: Someone shares information regarding application release status and specific version timelines
Phrase: Informing about app release

15.
Concepts: feature list, provide feature roadmap
Relationship: Listing features and providing development timelines 
Criteria: Someone lists planned features and provides a detailed development roadmap for software versions
Phrase: Providing feature roadmap

16.
Concepts: confirm feature update, provide update timelines
Relationship: Confirming updates along with timeline specifics
Criteria: A designer confirms an upcoming feature update and provides specific timelines for releases
Phrase: Providing update timelines

17.
Concepts: simulation detail, simulation enhancement
Relationship: Discussing simulation specifics and enhancements
Criteria: A designer explains details and enhancements related to simulation functionality in updates
Phrase: Explaining simulation enhancements

18.
Concepts: potential update mention, confirming and promising future features
Relationship: Mentioning potential updates and promising feature inclusions 
Criteria: A designer mentions potential future updates and confirms the inclusion of specific features
Phrase: Promising future features

19.
Concepts: feature stability, long-term stability
Relationship: Discussing feature stability over long-term use
Criteria: Someone discusses and anticipates the long-term stability and reliability of new features
Phrase: Discussing feature stability

20.
Concepts: promise to improve, commit to improvement
Relationship: Gratitude coupled with a commitment to enhancements 
Criteria: Designers express gratitude and commit to continuous software improvement
Phrase: Committing to improvement

21.
Concepts: user reassurance, answer to a question
Relationship: Providing reassurance as an answer to user queries
Criteria: Designers reassure users about upcoming feature implementations in response to their queries
Phrase: Reassuring users

22.
Concepts: prioritization, outline development priorities
Relationship: Indicating development task priorities
Criteria: Someone outlines and prioritizes tasks or features for development
Phrase: Outlining development priorities

23.
Concepts: explain focus areas, explain current focus
Relationship: Clarifying current areas of focus in development
Criteria: Someone explains the current or future focus areas in app development
Phrase: Explaining development focus

24.
Concepts: development goals, set development scope
Relationship: Setting goals and defining the scope of development
Criteria: Someone outlines goals and defines the scope and limitations of development
Phrase: Setting development goals

25.
Concepts: current efforts, mention ongoing research
Relationship: Discussing current efforts and ongoing research activities
Criteria: Someone refers to current developmental efforts and mentions ongoing research activities
Phrase: Discussing ongoing research

26.
Concepts: discussion of further interests, share potential future direction
Relationship: Sharing and discussing possible new directions
Criteria: Someone discusses potential interests and directions for future app development
Phrase: Discussing future directions

27.
Concepts: future consultation promise, announce consultation plans
Relationship: Announcing plans to consult users before starting projects
Criteria: Designers promise and announce plans to gather user opinions before initiating new projects
Phrase: Announcing future consultations

28.
Concepts: plan for feedback, seeking community input
Relationship: Seeking and planning for community feedback
Criteria: A community member plans to gather iterative feedback and seek input from the community
Phrase: Seeking community feedback

29.
Concepts: encourage open communication, in-group discussion encouragement
Relationship: Encouraging open communication within the community
Criteria: Designers or users promote open and collaborative communication within the community
Phrase: Encouraging community discussion

30.
Concepts: community need, community needs acknowledgment
Relationship: Identifying and acknowledging community needs
Criteria: Designers identify and align development efforts based on the specific needs of the community
Phrase: Acknowledging community needs

31.
Concepts: development rationale, community involvement
Relationship: Explaining rationale while discussing community involvement 
Criteria: A community member provides the rationale behind developments and emphasizes community involvement
Phrase: Explaining development rationale

32.
Concepts: encourage discussion, encourage participation
Relationship: Promoting participation and discussion
Criteria: A community member actively promotes open discussion and encourages participation within the community
Phrase: Encouraging participation

33.
Concepts: explain development process, maintain development transparency
Relationship: Providing process explanations for transparency
Criteria: Designers explain the development processes and maintain transparency about challenges and progress
Phrase: Maintaining development transparency

34.
Concepts: direct communication, direct user interaction
Relationship: Direct interaction between designers and users 
Criteria: Designers directly interact with users to discuss features, updates, and gather feedback
Phrase: Interacting with users directly

35.
Concepts: resolve user concerns, offer help and inquire
Relationship: Offering help and resolving user concerns
Criteria: Designers offer help and resolve user concerns or questions, often asking for more details
Phrase: Resolving user concerns

36.
Concepts: user support, provide technical support
Relationship: Providing support to help users effectively use the product
Criteria: Designers or users provide technical support and address technical issues users encounter
Phrase: Providing technical support

37.
Concepts: acknowledge designer's point, acknowledgment of understanding
Relationship: Validating or expressing understanding of points made by others
Criteria: Designers acknowledge and validate points made by users or other designers
Phrase: Acknowledging understanding

38.
Concepts: designer confirmation, confirmation/agreement of collaboration
Relationship: Confirming points or collaboration from designers 
Criteria: Designers confirm points or agree on aspects of collaboration or opinion-gathering
Phrase: Confirming collaboration

39.
Concepts: respond, response confirmation
Relationship: Providing responses or confirmations to specific inquiries
Criteria: Designers and users respond and confirm details or preferences in inquiries
Phrase: Confirming responses

40.
Concepts: seek clarification, response to clarification
Relationship: Seeking and responding with clarifications 
Criteria: Designers and users seek and provide clarifications on specific points or technical details
Phrase: Clarifying details

41.
Concepts: user needs, inquiry on user needs
Relationship: Identifying and inquiring about user requirements
Criteria: A developer inquires about and identifies the needs or preferences of community members
Phrase: Understanding user needs

42.
Concepts: user role inquiry, inquire about user needs
Relationship: Inquiring about user roles and needs together 
Criteria: Designers inquire about users' roles/backgrounds while identifying their challenges and needs
Phrase: Inquiring about user roles and needs

43.
Concepts: user interface, visual and functional design
Relationship: Discussing graphical and functional design elements
Criteria: Discussions revolve around the graphical user interface and functional design aspects of the software
Phrase: Discussing interface design

44.
Concepts: address usability, discuss usability
Relationship: Focusing discussions on usability aspects
Criteria: A community member discusses and addresses the usability of features or designs in the app
Phrase: Discussing usability

45.
Concepts: follow-up, engage in dialogue
Relationship: Engaging in sequential dialogues with follow-ups
Criteria: Designers and users engage in dialogues with follow-up questions or statements in a Q&A manner
Phrase: Engaging in follow-up dialogues

46.
Concepts: clarifying preferences, interface layout decisions
Relationship: Discussing interface layout preferences 
Criteria: Individuals discuss and clarify their preferences regarding the layout and interface design of the software
Phrase: Clarifying interface preferences

47.
Concepts: design adaptation, discuss design flexibility
Relationship: Discussing adaptability and flexibility in design
Criteria: Designers discuss the need for adaptable designs and potential flexibility in software layout
Phrase: Discussing design flexibility

48.
Concepts: community context, contextual information
Relationship: Providing context related to the community's environment 
Criteria: Individuals provide information about their institution or environment related to software use
Phrase: Providing community context

49.
Concepts: contextual background, contextualization of question
Relationship: Providing background information to contextually explain a query
Criteria: Individuals provide background details to explain a question or concern within context
Phrase: Contextualizing questions

50.
Concepts: provide context, explains the answer
Relationship: Contextual explanations for providing answers 
Criteria: Users provide contextual background explaining limitations or answering concerns related to usability constraints
Phrase: Explaining contextual answers

51.
Concepts: feature complexity, complexity explanation
Relationship: Describing the complexity of features and development timelines 
Criteria: Designers mention and explain the complexity involved in developing new features and associated timelines
Phrase: Explaining feature complexity

52.
Concepts: delay explanation, update delay explanation
Relationship: Providing reasons for delays in updates or features
Criteria: Designers explain the reasons for delays in completing updates or developing features
Phrase: Explaining update delays

53.
Concepts: gives reason for it, providing reasons for suggestions
Relationship: Providing reasons for suggestions or requests
Criteria: Users provide reasons explaining the need for certain features based on practical considerations
Phrase: Explaining suggestion reasons

54.
Concepts: explaining the plans, explaining design rationale
Relationship: Providing plans and rationale explanations 
Criteria: Designers or users explain their plans and the rationale behind specific design decisions
Phrase: Explaining design rationale

55.
Concepts: compatibility answer, system compatibility
Relationship: Addressing and discussing system compatibility 
Criteria: Someone addresses questions regarding the compatibility of software with different systems
Phrase: Addressing system compatibility

56.
Concepts: confirm compatibility, compatibility assurance
Relationship: Confirming compatibility across systems
Criteria: Designers confirm and assure compatibility of software with various devices or platforms
Phrase: Confirming compatibility

57.
Concepts: outdated technology, highlight outdated technology
Relationship: Commenting and highlighting outdated technology usages 
Criteria: Users comment on and highlight the presence or use of outdated technology in systems
Phrase: Highlighting outdated technology

58.
Concepts: system limitations, system limitation explanation
Relationship: Explaining limitations related to system constraints
Criteria: Designers explain the limitations or constraints in solving issues due to system specifications
Phrase: Explaining system limitations

59.
Concepts: explain limitations, explain current version's limitation
Relationship: Describing limitations of current software versions
Criteria: Someone explains the limitations present in the current version of the software
Phrase: Explaining version limitations

60.
Concepts: limitation of the team, highlight technical constraints
Relationship: Discussing limitations and constraints faced by the team
Criteria: Someone highlights the constraints and technical limitations related to the development team
Phrase: Highlighting team limitations

61.
Concepts: alternative suggestion, suggest alternative solutions
Relationship: Offering alternatives to existing proposals 
Criteria: A user suggests alternative solutions to existing problems or ideas
Phrase: Suggesting alternatives

62.
Concepts: usability workaround, share workaround
Relationship: Providing workarounds for usability issues
Criteria: A community member shares workaround solutions to address usability problems
Phrase: Sharing usability workarounds

63.
Concepts: problem solving, perform troubleshooting
Relationship: Offering help related to resolving issues
Criteria: Someone engages in problem solving or troubleshooting user-reported issues
Phrase: Performing troubleshooting

64.
Concepts: manual adjustment, manual adjustments suggestion
Relationship: Recommending manual setting adjustments
Criteria: Someone references or suggests making manual adjustments to settings or configurations as a workaround
Phrase: Suggesting manual adjustments
---