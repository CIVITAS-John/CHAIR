You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (15 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
15. 
Concepts: {Repeat the input 15}
Relationship: {What is logical relationship between concepts in code 15, or N/A if not applicable}
Criteria: {Who did what, and how for code 15}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: sharing programming experience, demonstrating diverse language knowledge
- Participants share extensive programming experience and have prior experience with multiple software languages.
- The participant mentions their diverse language knowledge and prior experiences in computer programming.

2.
Concepts: emphasizes user expertise, emphasizing expertise in ai debugging
- Participants emphasize the importance of user expertise and debugging practice.
- Participants emphasize the need for expertise in understanding AI-generated code and fixing AI-generated errors.

3.
Concepts: importance of incremental testing, importance of practice and design outlines
- The participant highlights the importance of incremental testing and debugging in programming.
- The participant emphasizes the importance of practice and design outlines in programming.

4.
Concepts: valuing debugging and unit testing, recognizing importance of code validation
- Values the importance of debugging and unit testing in coding.
- Recognizing the importance of code validation and debugging.

5.
Concepts: emphasizing code quality, the importance of code quality
- Participants emphasize the importance of code quality and maintainability.
- Emphasizes the importance of high-quality code and learning processes.

6.
Concepts: choosing not to use "explain it" option, bypassing ai assistance for known issues
- Participant chooses not to use the "explain it" option, often preferring to fix errors manually.
- Chooses to bypass AI assistance for known issues, opting for manual problem-solving instead.

7.
Concepts: self-reliant error fixing, exhibiting confidence in personal debugging skills
- Is self-reliant in fixing errors
- Exhibits confidence in personal debugging skills, choosing to fix problems rather than seeking explanations.

8.
Concepts: manual coding preference, preference for hands-on debugging
- Prefers manual coding over copying AI-generated code
- Prefers hands-on debugging over relying on AI assistance.

9.
Concepts: coding independence, showing independence in coding process
- Demonstrates independence in coding by not relying on AI-generated code
- The interviewee shows independence in their coding process, using AI as a tool.

10.
Concepts: correcting code independently, demonstrating independence in error resolution
- Participants correct code independently without relying on AI suggestions.
- Demonstrating independence in error resolution, such as manually fixing errors rather than relying on AI.

11.
Concepts: practical problem-solving, values practical solutions
- Focuses on finding practical solutions rather than explanations
- Prioritize practical solutions over explanations or theoretical discussions.

12.
Concepts: chooses active problem-solving, action-oriented problem-solving
- Participants choose to fix the problem rather than showing the explanation.
- Demonstrates a preference for action-oriented problem-solving over explanation.

13.
Concepts: prioritizing fixing, prioritizing problem-solving
- Participant prioritizes fixing a problem over other tasks, such as explaining the code.
- Participants prioritize problem-solving over explanations in the coding process.

14.
Concepts: emphasizes personal effort before seeking help, advocates for independent problem-solving efforts
- Participants emphasize the importance of doing one's own work and clearly describing problems before seeking help.
- Interviewee emphasizes the importance of independent problem-solving efforts and proper practices to seek online help.

15.
Concepts: emphasizes early problem-solving, valuing proactive problem-solving
- Participants emphasize the importance of early and frequent problem-solving inquiries.
- The participant values proactive problem-solving and seeking help early and often.
===
Here are the definitions for each code:

---
1.
Concepts: sharing programming experience, demonstrating diverse language knowledge
Relationship: The concepts are related as they both describe the participant's background and expertise in programming.
Criteria: Participants share their extensive programming experience and diverse language knowledge.
Phrase: Share programming expertise

2.
Concepts: emphasizes user expertise, emphasizing expertise in ai debugging
Relationship: The concepts are related as they both highlight the importance of user expertise in AI-generated code debugging.
Criteria: Participants emphasize the need for user expertise in understanding and fixing AI-generated code.
Phrase: Emphasize AI debugging expertise

3.
Concepts: importance of incremental testing, importance of practice and design outlines
Relationship: The concepts are related as they both describe important aspects of the programming process.
Criteria: Participants highlight the importance of incremental testing, practice, and design outlines in programming.
Phrase: Emphasize programming best practices

4.
Concepts: valuing debugging and unit testing, recognizing importance of code validation
Relationship: The concepts are related as they both describe the importance of testing and validation in programming.
Criteria: Participants value the importance of debugging, unit testing, and code validation.
Phrase: Value code validation

5.
Concepts: emphasizing code quality, the importance of code quality
Relationship: The concepts are related as they both highlight the importance of code quality.
Criteria: Participants emphasize the importance of high-quality code and learning processes.
Phrase: Emphasize code quality

6.
Concepts: choosing not to use "explain it" option, bypassing ai assistance for known issues
Relationship: The concepts are related as they both describe the participant's preference for manual problem-solving.
Criteria: Participants choose not to use AI assistance for known issues, opting for manual problem-solving instead.
Phrase: Bypass AI assistance

7.
Concepts: self-reliant error fixing, exhibiting confidence in personal debugging skills
Relationship: The concepts are related as they both describe the participant's confidence in their debugging skills.
Criteria: Participants exhibit confidence in their personal debugging skills, choosing to fix problems manually.
Phrase: Exhibit debugging confidence

8.
Concepts: manual coding preference, preference for hands-on debugging
Relationship: The concepts are related as they both describe the participant's preference for manual coding and debugging.
Criteria: Participants prefer manual coding and hands-on debugging over AI assistance.
Phrase: Prefer manual coding

9.
Concepts: coding independence, showing independence in coding process
Relationship: The concepts are related as they both describe the participant's independence in the coding process.
Criteria: Participants demonstrate independence in their coding process, using AI as a tool.
Phrase: Demonstrate coding independence

10.
Concepts: correcting code independently, demonstrating independence in error resolution
Relationship: The concepts are related as they both describe the participant's independence in error resolution.
Criteria: Participants correct code independently without relying on AI suggestions.
Phrase: Correct code independently

11.
Concepts: practical problem-solving, values practical solutions
Relationship: The concepts are related as they both describe the participant's focus on finding practical solutions.
Criteria: Participants focus on finding practical solutions rather than explanations.
Phrase: Value practical solutions

12.
Concepts: chooses active problem-solving, action-oriented problem-solving
Relationship: The concepts are related as they both describe the participant's preference for active problem-solving.
Criteria: Participants choose to fix the problem rather than showing the explanation.
Phrase: Choose active problem-solving

13.
Concepts: prioritizing fixing, prioritizing problem-solving
Relationship: The concepts are related as they both describe the participant's priority in the coding process.
Criteria: Participants prioritize fixing a problem over other tasks, such as explaining the code.
Phrase: Prioritize problem-solving

14.
Concepts: emphasizes personal effort before seeking help, advocates for independent problem-solving efforts
Relationship: The concepts are related as they both describe the participant's emphasis on independent problem-solving efforts.
Criteria: Participants emphasize the importance of doing one's own work and clearly describing problems before seeking help.
Phrase: Emphasize personal effort

15.
Concepts: emphasizes early problem-solving, valuing proactive problem-solving
Relationship: The concepts are related as they both describe the participant's emphasis on proactive problem-solving.
Criteria: Participants emphasize the importance of early and frequent problem-solving inquiries.
Phrase: Emphasize early problem-solving