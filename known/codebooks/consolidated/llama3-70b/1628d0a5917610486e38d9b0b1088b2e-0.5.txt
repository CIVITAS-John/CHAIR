You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another and please do not merge them.
Determine the logical relationship between concepts within each code, such as inclusion, parallel, or intersection.
Write clear and generalizable criteria for each code and do not introduce unnecessary details. Then, write an accurate label for the combined concept.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (8 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Label: {A consolidated label of code 1}
...
8. 
Concepts: {Repeat the input 8}
Relationship: {What is logical relationship between concepts in code 8, or N/A if not applicable}
Criteria: {Who did what, and how for code 8}
Label: {A consolidated label of code 8}
---
~~~
1.
Concepts: update listings, release notes
- The designer lists updates or changes to the software, outlining changes or updates made to software.
- Designer provides notes on version updates, new features, and bug fixes, listing or explaining bug fixes in a software update.

2.
Concepts: change announcements, user updates
- Designer announces changes to platform components or features, announcing an update to a feature.
- The designer updates users on platform developments or changes, informing users of changes or updates to the system or specific components.

3.
Concepts: feature explanation, explaining feature mechanisms
- Designer explains how a feature or component works, its practical uses, and its purpose.
- A designer explains the underlying process or mechanism of a specific feature.

4.
Concepts: user suggestions, user input/feedback/suggestion with justifications
- User makes a suggestion, suggesting improvements or alternatives.
- A user provides input, feedback, or suggestions with justifications for improvement.

5.
Concepts: background sharing, sharing professional background
- User shares their teaching experience or background, providing information about one's teaching background or experience.
- Sharing information about one's own professional or educational background.

6.
Concepts: question response, providing concise response to user inquiry
- A designer responds to a user's question, addressing a user's question directly.
- Designer provides a concise response to a user inquiry.

7.
Concepts: ensuring user comprehension, ensuring understanding
- Designer ensures user understanding of software
- Designer ensures understanding or clarifies information, often through examples or follow-up questions.

8.
Concepts: context provision, contextualizing
- A user provides context for a question.
- A user provides context or explains a reason for a situation, providing context for their response.
===
Here are the definitions for each code:

---
Definitions for each code:

1.
Concepts: update listings, release notes
Relationship: Inclusion (release notes are a type of update listing)
Criteria: Designer provides a list of changes or updates made to software, including explanations or notes on new features, bug fixes, or version updates.
Label: Software Update Notifications

2.
Concepts: change announcements, user updates
Relationship: Parallel (both concepts refer to informing users of changes or updates)
Criteria: Designer informs users of changes or updates to platform components or features, including announcements or updates on system developments.
Label: Platform Update Communications

3.
Concepts: feature explanation, explaining feature mechanisms
Relationship: Inclusion (explaining feature mechanisms is a type of feature explanation)
Criteria: Designer provides detailed explanations of how a feature or component works, including its practical uses and purpose.
Label: Feature Clarification

4.
Concepts: user suggestions, user input/feedback/suggestion with justifications
Relationship: Inclusion (user input/feedback/suggestion with justifications is a type of user suggestion)
Criteria: User provides suggestions or feedback on improvements or alternatives, including justifications or explanations for their ideas.
Label: User-Generated Ideas

5.
Concepts: background sharing, sharing professional background
Relationship: Inclusion (sharing professional background is a type of background sharing)
Criteria: User shares information about their teaching experience, educational background, or professional background.
Label: User Background Disclosure

6.
Concepts: question response, providing concise response to user inquiry
Relationship: Inclusion (providing concise response to user inquiry is a type of question response)
Criteria: Designer responds directly to a user's question, providing a clear and concise answer.
Label: Question Answering

7.
Concepts: ensuring user comprehension, ensuring understanding
Relationship: Inclusion (ensuring understanding is a type of ensuring user comprehension)
Criteria: Designer takes steps to ensure users understand software functionality, often through examples, follow-up questions, or clarification.
Label: User Understanding Facilitation

8.
Concepts: context provision, contextualizing
Relationship: Inclusion (contextualizing is a type of context provision)
Criteria: User provides additional information or context to clarify a question or situation, helping designers understand their needs.
Label: Contextual Clarification