You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (24 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
24. 
Concepts: {Repeat the input 24}
Relationship: {What is logical relationship between concepts in code 24, or N/A if not applicable}
Criteria: {Who did what, and how for code 24}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: engage casually and informally, maintain community interaction
- Community members engage in casual conversations that promote a friendly environment.
- Participants initiate or maintain interaction among community members with greetings or casual remarks.

2.
Concepts: greeting the community warmly, initiate interactions and engage
- Users and designers greet each other warmly to foster community interactions.
- Users initiate interactions by greeting and introducing themselves within the community.

3.
Concepts: expert recognition, acknowledging community expertise
- A user acknowledges the expertise of others and requests specific educational demonstrations.
- Designer and users acknowledge expertise within the community regarding educational content.

4.
Concepts: student, communicate emotions and engage
- Users contribute to the conversation with non-verbal expressions or emojis.
- Users express feelings and communicate emotions using emojis to enhance conversations.

5.
Concepts: acknowledge group resources, acknowledge help and resources
- Users acknowledge the availability of resources in group files that allow them to help themselves.
- Users express gratitude for assistance and acknowledge the resources they utilize from others.

6.
Concepts: seek help and information, inquire for clarity and ask questions
- Users request documentation and ask questions to seek help and resources related to software features.
- Users ask questions to clarify aspects of the software and seek further understanding.

7.
Concepts: ease of use, provide reviews and highlight practicality
- Discussions related to the ease of use and user-friendliness of the software.
- Users provide reviews emphasizing the software's practicality and ease of use.

8.
Concepts: provide technical support, offer solutions to user inquiries
- Designers offer user support and provide technical guidance to address software difficulties.
- Designers offer solutions to user inquiries and respond to questions regarding software compatibility.

9.
Concepts: seek technical assistance, diagnose and troubleshoot issues
- Designer seeks assistance related to technical issues with user-generated content.
- Users report technical issues that designers analyze and troubleshoot based on user input.

10.
Concepts: inquire and consult teachers, gather context and inquire
- Designers ask about and consult teachers' needs to guide software development.
- Designers gather educational context by inquiring about users' classroom conditions and teaching situations.

11.
Concepts: express comprehension, encourage elaboration and invite inquiries
- Designers express comprehension and request additional information from users.
- Designers encourage users to elaborate on suggestions and invite further inquiries for clarity.

12.
Concepts: integrate user feedback, accept user feedback
- User feedback is acknowledged and actively integrated into the design process.
- Designers acknowledge user suggestions and indicate plans for their implementation in future updates.

13.
Concepts: express approval, committing to software improvement
- Users express approval and support for the development plans of the software.
- Designers express commitment and hopes for future progress based on user input.

14.
Concepts: seek input and involve users, establish a community feedback loop
- Designers seek community input and indicate intentions to involve members in the design process.
- The process of collecting and responding to user feedback influences design decisions.

15.
Concepts: transparency, elaborate and explain delays
- Designer communicates the complexity and timelines involved in feature updates.
- Designers elaborate on the complexity of features and explain any delays in their release.

16.
Concepts: preview and confirm features, set timeline for mechanics experiments
- Designers share information about upcoming features and confirm timelines for their implementation.
- Designers communicate timelines concerning the implementation of specific features or experiments.

17.
Concepts: describe update scope, outline update planning
- Designers describe the nature and scale of updates in the software.
- Designers outline the planning process for future software updates and detail upcoming features.

18.
Concepts: outline release timelines, communicate release schedules, provide development timelines
- Designers outline expected timelines for version updates across platforms.
- Designers communicate schedules and plans for upcoming software releases.
- Designers share and provide users with expected timelines for software updates and development releases.

19.
Concepts: communicate progress updates, provide updates and highlight progress
- Designers communicate ongoing work and provide progress updates and timelines for software releases to users.
- Designers inform users about the status of product features and highlight the progress of updates.

20.
Concepts: share visual updates, discuss and share updates
- Designers and users share images and visual updates related to the software.
- Designers discuss and share updates tailored for specific software platforms.

21.
Concepts: announce new version release, communicate software updates
- Designers announce new software versions and inform the community about updates included in those releases.
- Designers share development updates and invite user feedback by announcing future software updates and new features.

22.
Concepts: highlight and express frustration, express frustration with current limitations
- Users reflect on challenges posed by outdated technology and express dissatisfaction with it.
- The designer expresses frustration with the limitations of their current technology.

23.
Concepts: acknowledge software limitations, discuss limitations and address challenges
- Designers acknowledge and explain limitations within the software's functionality.
- Designers discuss limitations of solutions and address challenges related to particular operating systems.

24.
Concepts: maintain transparency, promote development transparency
- Designer maintains openness about ongoing work to foster trust.
- Designers provide detailed information about development processes and challenges.
===
---
Definitions for each code (24 in total):
1.
Concepts: engage casually and informally, maintain community interaction
Relationship: Casual engagement fosters a friendly environment while maintaining interaction among members.
Criteria: Community members engage in casual conversations that promote interaction through friendly greetings and remarks.
Phrase: Engage informally to maintain interaction.

2.
Concepts: greeting the community warmly, initiate interactions and engage
Relationship: Warm greetings facilitate the initiation of interactions among community members.
Criteria: Users and designers greet each other warmly to foster community engagement through initiating interactions.
Phrase: Greet warmly to initiate engagement.

3.
Concepts: expert recognition, acknowledging community expertise
Relationship: Acknowledging expertise highlights the value of knowledge within the community.
Criteria: Users acknowledge the expertise of others while requesting demonstrations, recognizing the community's knowledge.
Phrase: Acknowledge expertise within the community.

4.
Concepts: student, communicate emotions and engage
Relationship: Emotional communication enhances user engagement in discussions.
Criteria: Users express feelings and communicate emotions through non-verbal expressions or emojis to engage in conversations.
Phrase: Communicate emotions to engage.

5.
Concepts: acknowledge group resources, acknowledge help and resources
Relationship: Recognizing available resources promotes gratitude and self-sufficiency among members.
Criteria: Users acknowledge resource availability and express gratitude for assistance received from others.
Phrase: Acknowledge resources and help.

6.
Concepts: seek help and information, inquire for clarity and ask questions
Relationship: Seeking help and clarity through inquiries enhances understanding and resource utilization.
Criteria: Users ask questions and request documentation to seek help and clarify aspects of the software.
Phrase: Seek help and inquire for clarity.

7.
Concepts: ease of use, provide reviews and highlight practicality
Relationship: Ease of use and practicality are emphasized through user reviews and discussions.
Criteria: Users provide reviews discussing the user-friendliness and practicality of the software.
Phrase: Highlight practicality and ease of use.

8.
Concepts: provide technical support, offer solutions to user inquiries
Relationship: Technical support and solutions address user inquiries and facilitate software usability.
Criteria: Designers offer technical guidance and solutions to users regarding software difficulties.
Phrase: Provide technical support and solutions.

9.
Concepts: seek technical assistance, diagnose and troubleshoot issues
Relationship: Seeking assistance and diagnosing issues are essential for resolving technical challenges.
Criteria: Designers seek help with technical issues while users report problems for troubleshooting.
Phrase: Seek assistance to troubleshoot issues.

10.
Concepts: inquire and consult teachers, gather context and inquire
Relationship: Inquiring about teachers' needs helps contextualize software development.
Criteria: Designers consult teachers and inquire about classroom conditions to guide development.
Phrase: Consult teachers to gather context.

11.
Concepts: express comprehension, encourage elaboration and invite inquiries
Relationship: Expressing comprehension fosters an environment where elaboration and inquiry are encouraged.
Criteria: Designers express understanding and encourage users to elaborate on suggestions and ask questions.
Phrase: Encourage elaboration and invite inquiries.

12.
Concepts: integrate user feedback, accept user feedback
Relationship: Accepting and integrating feedback ensures that user voices are considered in design processes.
Criteria: User feedback is acknowledged and integrated into the software's design updates.
Phrase: Integrate and accept user feedback.

13.
Concepts: express approval, committing to software improvement
Relationship: Approval from users underscores the designers' commitment to software enhancement.
Criteria: Users express support for development plans while designers commit to improvements based on feedback.
Phrase: Express approval for improvement.

14.
Concepts: seek input and involve users, establish a community feedback loop
Relationship: Involving users in the design process creates an effective feedback loop.
Criteria: Designers seek community input and outline intentions to involve members in future design decisions.
Phrase: Seek input to involve users.

15.
Concepts: transparency, elaborate and explain delays
Relationship: Transparency about challenges promotes trust and understanding among users.
Criteria: Designers communicate complexities and explain delays involved in feature updates.
Phrase: Maintain transparency by explaining delays.

16.
Concepts: preview and confirm features, set timeline for mechanics experiments
Relationship: Confirming features and timelines helps manage user expectations.
Criteria: Designers share information about upcoming features and confirm timelines for implementation.
Phrase: Confirm features and set timelines.

17.
Concepts: describe update scope, outline update planning
Relationship: Describing updates and outlining planning processes inform users about changes.
Criteria: Designers describe the nature of updates and outline planning for future software enhancements.
Phrase: Describe updates and outline planning.

18.
Concepts: outline release timelines, communicate release schedules, provide development timelines
Relationship: Clearly communicating timelines enhances user awareness of development progress.
Criteria: Designers outline expected timelines and communicate schedules for software version updates.
Phrase: Communicate release schedules and timelines.

19.
Concepts: communicate progress updates, provide updates and highlight progress
Relationship: Regular progress updates keep users informed and engaged with development.
Criteria: Designers provide ongoing updates about progress and the status of product features to users.
Phrase: Communicate updates and highlight progress.

20.
Concepts: share visual updates, discuss and share updates
Relationship: Visual updates enhance discussions and keep the community informed.
Criteria: Designers and users share images and visual updates about the software.
Phrase: Share and discuss visual updates.

21.
Concepts: announce new version release, communicate software updates
Relationship: Announcing releases informs the community about new features and changes.
Criteria: Designers announce new versions and updates, inviting user feedback on recent developments.
Phrase: Announce updates and releases.

22.
Concepts: highlight and express frustration, express frustration with current limitations
Relationship: Highlighting frustrations allows users and designers to address technology limitations.
Criteria: Users and designers express dissatisfaction with outdated technologies and current limitations.
Phrase: Express frustration with limitations.

23.
Concepts: acknowledge software limitations, discuss limitations and address challenges
Relationship: Acknowledging limitations opens discussions about potential solutions to challenges.
Criteria: Designers acknowledge and discuss software limitations while addressing related challenges.
Phrase: Acknowledge and discuss limitations.

24.
Concepts: maintain transparency, promote development transparency
Relationship: Transparency in development fosters trust and community engagement.
Criteria: Designers maintain openness about ongoing work and provide details on development processes.
Phrase: Maintain transparency in development.