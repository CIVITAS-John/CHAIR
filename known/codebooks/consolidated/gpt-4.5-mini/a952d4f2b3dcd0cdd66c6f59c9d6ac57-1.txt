You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (23 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
23. 
Concepts: {Repeat the input 23}
Relationship: {What is logical relationship between concepts in code 23, or N/A if not applicable}
Criteria: {Who did what, and how for code 23}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: provide positive evaluations of the software, share positive evaluations of software effectiveness
- Users express positive evaluations and opinions about the software's usefulness.
- Users provide positive evaluations regarding the software's impact on educational outcomes.

2.
Concepts: acknowledge help, acknowledge efforts and contributions
- Users express gratitude for assistance or features provided by designers and the community.
- Users commend and express gratitude for the efforts of designers and community members.

3.
Concepts: gratitude, demonstrate mutual appreciation
- Users and the Designer express gratitude towards each other regarding the software and its development.
- Designers and users express thanks and recognition for each other's contributions.

4.
Concepts: questioning identity, inquire about user roles and identity
- Designers inquire about participants' roles or qualifications to tailor discussions appropriately.
- Designers seek information on users' roles to facilitate relevant discussions.

5.
Concepts: update inquiry, inquire about update timelines
- A user inquires about potential updates, reflecting interest in current developments.
- Users inquire about future update timelines, showing interest in the development.

6.
Concepts: request assistance and usage support, request additional guidance and manuals
- Users express needs for clarity and assistance regarding software interactions and usage.
- Users request user manuals to enhance understanding of software functionalities.

7.
Concepts: ask a question, ask questions about software usage
- Users or designers pose questions seeking specific operational or software usage information.
- Users make inquiries about functionalities, seeking effective utilization of the software.

8.
Concepts: make specific requests, offer specific feedback
- Users articulate specific requests for enhancements to the software.
- Users provide precise feedback on aspects they wish to see improved.

9.
Concepts: solicit and seek user input, invite users to provide feedback and requests
- Designers encourage users to provide their thoughts and suggestions for enhancements.
- Designers actively invite users to suggest improvements and features for software.

10.
Concepts: proposing design idea, provide and share design suggestions
- Designers suggest specific features or improvements that need to be implemented in the software.
- Users offer insights for desired software features, and designers share intended functionalities.

11.
Concepts: transparent developer discussion, maintain development transparency
- Designers openly discuss experiences and challenges related to the application’s functionality.
- Designers convey details about the software's development, sharing challenges and progress.

12.
Concepts: share release schedules, discuss and share update schedules
- Designers share schedules and timelines for upcoming software releases across different platforms.
- Designers provide estimated timelines for upcoming software updates and features.

13.
Concepts: update the community group, make announcements to the community
- A designer updates the group about changes or releases to the application.
- Designers deliver updates and announcements about the software to the community.

14.
Concepts: share feature updates, share version update details
- Information about new features and updates being added to the product is shared.
- Designers share summaries of new features associated with software version releases.

15.
Concepts: announce product improvements, announce and explain new features
- Designers announce planned changes or improvements aimed at enhancing software functionality.
- Designers articulate forthcoming software features, detailing specifics of updates.

16.
Concepts: plan and outline future updates, communicate development plans
- Designers articulate plans for software enhancements and future features.
- Designers communicate details about upcoming software changes and the overall development roadmap.

17.
Concepts: gather opinions for feedback planning, gather user input for project development
- Designers express intentions to seek user feedback before significant developments begin.
- Designers seek opinions from users to inform project stages and developments.

18.
Concepts: promise feature realization, confirm future feature implementations
- Designers assure users that certain features will materialize or improve over time.
- Designers affirm specific updates and their expected timelines for users.

19.
Concepts: acknowledge user experience, appreciate and acknowledge user feedback
- Designers acknowledge and validate users’ experiences with the software.
- Designers express gratitude and attentiveness towards constructive user feedback.

20.
Concepts: co-design with users, involve users in design processes
- Designers invite community input to enhance collaborative product development.
- Designers encourage user contributions during the design and testing phases of development.

21.
Concepts: engage in design discussion, initiate discussions on input methods
- Designers engage in discussions regarding multiple aspects of software design and features.
- Designers engage in discussions regarding input methods relevant to the software.

22.
Concepts: instruction and updates, provide instructions for proper operation
- Designers providing updates and instructions to help users understand and use the software effectively.
- Designers instruct users on how to operate the software components effectively.

23.
Concepts: validate user request, inquire and gather detailed user requirements
- Designers validate user requests concerning software features.
- Designers seek detailed clarification on user requests to refine software features.
===
---
Definitions for each code (23 in total):
1.
Concepts: provide positive evaluations of the software, share positive evaluations of software effectiveness
Relationship: Both concepts focus on expressing a favorable opinion regarding the software's utility and its educational impact.
Criteria: Users express favorable opinions and evaluations about the software’s usefulness and educational outcomes.
Phrase: Express positive evaluations of the software.

2.
Concepts: acknowledge help, acknowledge efforts and contributions
Relationship: Both concepts involve expressions of gratitude directed towards the designers and community for their support and contributions.
Criteria: Users express gratitude and recognition for the assistance and contributions provided by designers and community members.
Phrase: Acknowledge help and contributions.

3.
Concepts: gratitude, demonstrate mutual appreciation
Relationship: Both concepts involve reciprocal expressions of thanks and recognition between users and designers.
Criteria: Users and designers express gratitude and appreciation towards each other for their contributions.
Phrase: Demonstrate mutual appreciation.

4.
Concepts: questioning identity, inquire about user roles and identity
Relationship: Both concepts involve designers seeking to understand user roles to ensure relevant interactions and discussions.
Criteria: Designers inquire about users' roles or qualifications to facilitate appropriate discussions.
Phrase: Inquire about user roles.

5.
Concepts: update inquiry, inquire about update timelines
Relationship: Both concepts reflect users' curiosity and interest regarding the software's future updates and developments.
Criteria: Users ask about current and future update timelines related to the software.
Phrase: Inquire about update timelines.

6.
Concepts: request assistance and usage support, request additional guidance and manuals
Relationship: Both concepts focus on users seeking help to better understand the software's functionalities.
Criteria: Users express needs for clarity and request guidance or manuals for improved software usage.
Phrase: Request assistance and guidance.

7.
Concepts: ask a question, ask questions about software usage
Relationship: Both concepts involve inquiries made by users and designers, aiming to gather specific information about software operations.
Criteria: Users or designers pose questions seeking operational information related to the software.
Phrase: Ask questions about software usage.

8.
Concepts: make specific requests, offer specific feedback
Relationship: Both concepts involve users articulating their needs and suggestions for software improvement.
Criteria: Users make precise requests and provide feedback regarding the software.
Phrase: Make specific requests.

9.
Concepts: solicit and seek user input, invite users to provide feedback and requests
Relationship: Both concepts involve designers encouraging user involvement in suggesting enhancements.
Criteria: Designers actively invite users to share their thoughts and suggestions for improvements.
Phrase: Solicit user input.

10.
Concepts: proposing design idea, provide and share design suggestions
Relationship: Both concepts involve sharing insights and suggestions for desired software features.
Criteria: Designers and users propose ideas and suggestions for software advancements.
Phrase: Propose design ideas.

11.
Concepts: transparent developer discussion, maintain development transparency
Relationship: Both concepts emphasize open communication about the development process, including challenges faced.
Criteria: Designers openly discuss their development experiences and share insights about software progress.
Phrase: Maintain development transparency.

12.
Concepts: share release schedules, discuss and share update schedules
Relationship: Both concepts relate to informing users about upcoming software releases and updates.
Criteria: Designers provide schedules and timelines for forthcoming software updates and features.
Phrase: Share update schedules.

13.
Concepts: update the community group, make announcements to the community
Relationship: Both concepts focus on designers communicating changes and updates to the community effectively.
Criteria: Designers share significant updates and announcements with the community regarding the software.
Phrase: Update the community group.

14.
Concepts: share feature updates, share version update details
Relationship: Both concepts involve communicating new features and updates related to different software versions.
Criteria: Designers provide information on new features and updates in the software’s releases.
Phrase: Share feature updates.

15.
Concepts: announce product improvements, announce and explain new features
Relationship: Both concepts involve designers communicating enhancements and new functionalities to users.
Criteria: Designers announce and explain upcoming improvements and features of the software.
Phrase: Announce product improvements.

16.
Concepts: plan and outline future updates, communicate development plans
Relationship: Both concepts focus on discussing future enhancements and providing an overview of development goals.
Criteria: Designers articulate their intentions for software enhancements and future direction.
Phrase: Communicate development plans.

17.
Concepts: gather opinions for feedback planning, gather user input for project development
Relationship: Both concepts emphasize the importance of user feedback in guiding future software developments.
Criteria: Designers seek user opinions to inform planning and development processes.
Phrase: Gather user input.

18.
Concepts: promise feature realization, confirm future feature implementations
Relationship: Both concepts deal with assurances made by designers regarding the introduction of specific features.
Criteria: Designers affirm upcoming features and their expected timelines for implementation.
Phrase: Confirm future features.

19.
Concepts: acknowledge user experience, appreciate and acknowledge user feedback
Relationship: Both concepts involve recognizing and valuing the input and experiences shared by users.
Criteria: Designers validate and appreciate users’ experiences and constructive feedback.
Phrase: Acknowledge user feedback.

20.
Concepts: co-design with users, involve users in design processes
Relationship: Both concepts emphasize collaboration between designers and users in the development process.
Criteria: Designers incorporate community input and involvement in product development stages.
Phrase: Co-design with users.

21.
Concepts: engage in design discussion, initiate discussions on input methods
Relationship: Both concepts involve active dialogues regarding software features and input methods.
Criteria: Designers facilitate discussions about various aspects relevant to software design.
Phrase: Engage in design discussion.

22.
Concepts: instruction and updates, provide instructions for proper operation
Relationship: Both concepts relate to furnishing users with the necessary information for effective software usage.
Criteria: Designers offer updates and instructions for understanding and operating the software.
Phrase: Provide instructions for operation.

23.
Concepts: validate user request, inquire and gather detailed user requirements
Relationship: Both concepts focus on confirming user needs and refining requests for better software feature implementation.
Criteria: Designers validate and seek detailed clarification on user requests to enhance software features.
Phrase: Validate user requests.
---