You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (40 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
40. 
Concepts: {Repeat the input 40}
Relationship: {What is logical relationship between concepts in code 40, or N/A if not applicable}
Criteria: {Who did what, and how for code 40}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: propose design ideas, suggest future possibilities
- Designers propose enhancements or design ideas for the software.
- Designers suggest future possibilities for software development.

2.
Concepts: discuss design interests, discuss ongoing research efforts
- Designers engage in discussions about design considerations and potential future directions.
- Designers discuss current research efforts related to software features.

3.
Concepts: announce planned updates, announce component updates, announce feature enhancements
- Designers announce planned updates and features.
- Designers announce changes to component specifications.
- Designers announce feature expansions and enhancements.

4.
Concepts: describe update scope, share the magnitude of update
- Designers describe the scope and content of updates.
- A designer communicates the scale or significance of an upcoming update to the application.

5.
Concepts: provide development timelines, outline development timeline
- Designers provide timelines for feature development.
- Designers outline the development timeline for the project.

6.
Concepts: provide download instructions, direct users to resources
- Designers share download instructions with users.
- A designer directs users to where they can find resources or download software.

7.
Concepts: share knowledge, explain software functionalities
- Designers share factual information or knowledge about the software's capabilities or features.
- Designers explain the functionalities of the software.

8.
Concepts: confirm software compatibility, acknowledge software limitations
- Designers confirm and provide technical information regarding compatibility.
- Designers acknowledge software limitations and explain compatibility issues.

9.
Concepts: consider future compatibility, suggest checking compatibility
- Designers consider future compatibility issues in their planning.
- Designers suggest checking system compatibility for future updates.

10.
Concepts: system compatibility, explain compatibility speculation
- The designer discusses compatibility issues with various systems, highlighting technical considerations.
- Designers explain the development process and speculate on compatibility.

11.
Concepts: offer potential solutions, commit to providing a solution
- Designers offer and propose solutions to user-reported issues.
- Designers commit to addressing user needs and providing solutions based on inquiries.

12.
Concepts: explain feature complexity, compare feature complexities
- Designers explain the complexities involved in software development.
- A designer compares the complexities of different features in terms of development and implementation.

13.
Concepts: noting for potential bugs, list updates and bug fixes
- Designer notes potential bugs in the current version of the software.
- Designers list new features and bug fixes in the software update and provide detailed notes on updates.

14.
Concepts: clarify existing feature, clarify functionality
- Designer clarifies how existing features function within the software.
- Designers address functionality issues and provide technical clarifications related to user interface components.

15.
Concepts: clarify testing status, clarify version details
- Designers clarify the testing status of specific versions.
- Designers provide detailed information about the application version.

16.
Concepts: emphasize usability, seek and emphasize efficiency
- Designers emphasize the software's usability and ease of use in discussions.
- Designers express a desire for increased efficiency and emphasize the importance of optimizing the software.

17.
Concepts: provide reasoning, explain and justify decisions
- Designers and participants provide reasoning and rationale for their development choices and actions.
- Designers explain the importance of features and provide rationale for their development choices.

18.
Concepts: explain design rationale, explaining design goals
- Designers explain the rationale and intentions behind the software's user-friendly design.
- Designers explain their design philosophy aimed at user-friendliness based on community feedback.

19.
Concepts: long term planning, discuss feature stability
- A designer discusses long-term planning for features that will enhance the application's stability.
- Designers discuss the stability of features and explain their importance for long-term software performance.

20.
Concepts: personal connection, share teaching experiences
- Users and designers share personal teaching experiences to foster connections.
- Users share their teaching experiences and perspectives on educational practices.

21.
Concepts: establish credibility, introduce teaching identity
- A user shares their teaching experience to establish their expertise in the community.
- Users share their teaching experiences, specifying grade levels taught and years of service.

22.
Concepts: identify as teachers, confirm professional identity, confirm teacher identity
- Users confirm their roles as teachers and discuss their educational needs.
- Users confirm their professional roles, indicating their engagement in the educational community.
- The designer engages with users by asking about their teaching levels and professional backgrounds.

23.
Concepts: share past incidents, share technology stories
- Users share past incidents that affected their experiences with the software in educational settings.
- Users share stories about technology situations affecting software use in educational contexts.

24.
Concepts: gather context, seek context for understanding
- A designer gathers context by asking users about their teaching environment.
- Designers seek context to understand user needs and challenges.

25.
Concepts: confirm understanding and clarify, engage in follow-up discussions
- Users and designers confirm understanding and seek clarification during discussions.
- Users or designers engage in follow-up discussions to clarify design information shared in the group.

26.
Concepts: engage in informal communication, build rapport through interaction
- Designers engage users informally regarding avatar customization.
- Designers build rapport through informal interactions with users.

27.
Concepts: collaborate with teachers, consulting educators on standards
- Designers consult teachers for input and discuss educational standards within the community.
- Designers consult educators about educational standards and seek input on specific technical details.

28.
Concepts: request specific features, request new features and improvements
- Users make detailed requests for specific features and explain the reasons behind their requests.
- Users articulate specific requests for new features or improvements to the product.

29.
Concepts: suggest improvements, suggest practical enhancements
- Users suggest new features and improvements for the software's usability.
- Users suggest features that enhance convenience and practical applications for the software.

30.
Concepts: support suggestions, further suggestion
- Users agree with and second suggestions made in community discussions.
- Users provide additional suggestions or refinements to previously discussed ideas or features.

31.
Concepts: respond, respond to user inquiries
- Designers respond to user inquiries and provide relevant information or updates.
- Designers actively respond to user inquiries and feedback.

32.
Concepts: confirm feature implementation, respond to the feature request
- Designers confirm feature existence and acknowledge user suggestions.
- Designers respond to user feature requests, indicating ongoing research or development efforts.

33.
Concepts: invite questions, new user interaction
- Users and designers ask questions and invite more inquiries about the software.
- Users engage with the community by asking questions about the software.

34.
Concepts: seek information, ask technical questions, seek usage support
- Users ask questions to seek information or clarification regarding the software.
- Users ask various technical questions related to the application and its usage.
- Users request assistance or instructions on specific software functionalities.

35.
Concepts: platform specification, clarify platform details
- User specifies the platform version they are inquiring about.
- Users ask for clarification regarding where to access specific versions of the software.

36.
Concepts: affirm user feedback, acknowledge user experiences
- Designers confirm user feedback and affirm its importance.
- Designers express comprehension and acknowledge user experiences.

37.
Concepts: provide context, express community needs
- Users provide contextual information and explanations to clarify issues related to the application.
- Users express needs for functionalities and documentation, providing context for their requests.

38.
Concepts: acknowledge provided resources, acknowledge and utilize resources
- A user acknowledges the resources provided by the group or designer.
- Users express gratitude for help received and acknowledge finding useful resources within the community.

39.
Concepts: acknowledge receipt, confirm finding information
- Users acknowledge receipt of information or messages with affirmative responses.
- A user acknowledges receipt of information about group files.

40.
Concepts: share development plans
- Designers outline future considerations and specific goals for software development.
- Designers share access information and development plans.
===
---
Definitions for each code (40 in total):
1.
Concepts: propose design ideas, suggest future possibilities  
Relationship: Both concepts involve designers actively contributing to the development process by envisioning enhancements and future directions.  
Criteria: Designers propose enhancements and suggest future possibilities for software development.  
Phrase: Propose design enhancements.

2.
Concepts: discuss design interests, discuss ongoing research efforts  
Relationship: Both concepts involve designers engaging in dialogue about design considerations and current research.  
Criteria: Designers engage in discussions about design interests and ongoing research efforts related to software features.  
Phrase: Discuss design considerations.

3.
Concepts: announce planned updates, announce component updates, announce feature enhancements  
Relationship: All concepts relate to designers communicating updates and changes regarding the software.  
Criteria: Designers announce planned updates, component changes, and feature enhancements.  
Phrase: Announce software updates.

4.
Concepts: describe update scope, share the magnitude of update  
Relationship: Both concepts involve designers communicating the extent and significance of updates.  
Criteria: Designers describe the scope and magnitude of upcoming updates.  
Phrase: Describe update scope.

5.
Concepts: provide development timelines, outline development timeline  
Relationship: Both concepts involve designers communicating timelines for the development process.  
Criteria: Designers provide and outline timelines for feature development.  
Phrase: Provide development timelines.

6.
Concepts: provide download instructions, direct users to resources  
Relationship: Both concepts involve designers guiding users on how to access software resources.  
Criteria: Designers share download instructions and direct users to resources.  
Phrase: Provide download guidance.

7.
Concepts: share knowledge, explain software functionalities  
Relationship: Both concepts involve designers disseminating information about the software's capabilities.  
Criteria: Designers share knowledge and explain the functionalities of the software.  
Phrase: Share software knowledge.

8.
Concepts: confirm software compatibility, acknowledge software limitations  
Relationship: Both concepts involve designers addressing technical aspects of software compatibility.  
Criteria: Designers confirm compatibility and acknowledge limitations of the software.  
Phrase: Confirm software compatibility.

9.
Concepts: consider future compatibility, suggest checking compatibility  
Relationship: Both concepts involve designers planning for and advising on compatibility issues.  
Criteria: Designers consider future compatibility and suggest checking system compatibility.  
Phrase: Consider future compatibility.

10.
Concepts: system compatibility, explain compatibility speculation  
Relationship: Both concepts involve discussions about compatibility issues and technical considerations.  
Criteria: Designers discuss system compatibility and explain compatibility speculation.  
Phrase: Discuss compatibility issues.

11.
Concepts: offer potential solutions, commit to providing a solution  
Relationship: Both concepts involve designers addressing user-reported issues with proposed solutions.  
Criteria: Designers offer solutions and commit to addressing user needs.  
Phrase: Offer potential solutions.

12.
Concepts: explain feature complexity, compare feature complexities  
Relationship: Both concepts involve designers discussing the complexities of software features.  
Criteria: Designers explain and compare the complexities involved in software development.  
Phrase: Explain feature complexities.

13.
Concepts: noting for potential bugs, list updates and bug fixes  
Relationship: Both concepts involve designers addressing bugs and updates in the software.  
Criteria: Designers note potential bugs and list updates and bug fixes.  
Phrase: List updates and bug fixes.

14.
Concepts: clarify existing feature, clarify functionality  
Relationship: Both concepts involve designers providing clarity on software features and their functions.  
Criteria: Designers clarify existing features and their functionalities.  
Phrase: Clarify software functionality.

15.
Concepts: clarify testing status, clarify version details  
Relationship: Both concepts involve designers providing information about the software's testing and versioning.  
Criteria: Designers clarify the testing status and version details of the application.  
Phrase: Clarify testing status.

16.
Concepts: emphasize usability, seek and emphasize efficiency  
Relationship: Both concepts involve designers focusing on the usability and efficiency of the software.  
Criteria: Designers emphasize usability and seek to enhance efficiency.  
Phrase: Emphasize software usability.

17.
Concepts: provide reasoning, explain and justify decisions  
Relationship: Both concepts involve designers articulating the rationale behind their decisions.  
Criteria: Designers provide reasoning and explain their development choices.  
Phrase: Explain design rationale.

18.
Concepts: explain design rationale, explaining design goals  
Relationship: Both concepts involve designers articulating the intentions behind their design choices.  
Criteria: Designers explain the rationale and goals of their user-friendly design.  
Phrase: Explain design goals.

19.
Concepts: long term planning, discuss feature stability  
Relationship: Both concepts involve designers considering the future stability of software features.  
Criteria: Designers discuss long-term planning and feature stability.  
Phrase: Discuss feature stability.

20.
Concepts: personal connection, share teaching experiences  
Relationship: Both concepts involve users and designers fostering connections through shared experiences.  
Criteria: Users and designers share personal teaching experiences to build connections.  
Phrase: Share teaching experiences.

21.
Concepts: establish credibility, introduce teaching identity  
Relationship: Both concepts involve users sharing their teaching backgrounds to establish expertise.  
Criteria: Users share their teaching experiences to establish credibility in the community.  
Phrase: Establish teaching credibility.

22.
Concepts: identify as teachers, confirm professional identity, confirm teacher identity  
Relationship: All concepts relate to users affirming their roles within the educational community.  
Criteria: Users confirm their identities as teachers and engage with the community.  
Phrase: Confirm teacher identity.

23.
Concepts: share past incidents, share technology stories  
Relationship: Both concepts involve users recounting experiences related to software use in education.  
Criteria: Users share past incidents and technology stories affecting their experiences.  
Phrase: Share technology experiences.

24.
Concepts: gather context, seek context for understanding  
Relationship: Both concepts involve designers seeking information to better understand user needs.  
Criteria: Designers gather and seek context to understand user challenges.  
Phrase: Gather user context.

25.
Concepts: confirm understanding and clarify, engage in follow-up discussions  
Relationship: Both concepts involve users and designers ensuring clarity in discussions.  
Criteria: Users and designers confirm understanding and engage in follow-up discussions.  
Phrase: Confirm understanding.

26.
Concepts: engage in informal communication, build rapport through interaction  
Relationship: Both concepts involve designers fostering relationships through casual interactions.  
Criteria: Designers engage users informally and build rapport through interaction.  
Phrase: Build rapport.

27.
Concepts: collaborate with teachers, consulting educators on standards  
Relationship: Both concepts involve designers working with educators to align on educational standards.  
Criteria: Designers collaborate with teachers and consult educators on standards.  
Phrase: Collaborate with educators.

28.
Concepts: request specific features, request new features and improvements  
Relationship: Both concepts involve users articulating their needs for software enhancements.  
Criteria: Users request specific features and improvements for the software.  
Phrase: Request software features.

29.
Concepts: suggest improvements, suggest practical enhancements  
Relationship: Both concepts involve users proposing enhancements to improve software usability.  
Criteria: Users suggest improvements and practical enhancements for the software.  
Phrase: Suggest software improvements.

30.
Concepts: support suggestions, further suggestion  
Relationship: Both concepts involve users reinforcing and building upon previous suggestions.  
Criteria: Users support and further suggestions made in community discussions.  
Phrase: Support community suggestions.

31.
Concepts: respond, respond to user inquiries  
Relationship: Both concepts involve designers actively engaging with user inquiries.  
Criteria: Designers respond to user inquiries and provide relevant information.  
Phrase: Respond to inquiries.

32.
Concepts: confirm feature implementation, respond to the feature request  
Relationship: Both concepts involve designers acknowledging user requests regarding features.  
Criteria: Designers confirm feature implementation and respond to user feature requests.  
Phrase: Confirm feature requests.

33.
Concepts: invite questions, new user interaction  
Relationship: Both concepts involve fostering engagement through inquiry.  
Criteria: Users and designers invite questions and engage in interactions about the software.  
Phrase: Invite user questions.

34.
Concepts: seek information, ask technical questions, seek usage support  
Relationship: All concepts involve users actively seeking information and assistance regarding the software.  
Criteria: Users seek information, ask technical questions, and request usage support.  
Phrase: Seek technical information.

35.
Concepts: platform specification, clarify platform details  
Relationship: Both concepts involve users inquiring about specific software platform details.  
Criteria: Users specify platform versions and seek clarification on details.  
Phrase: Clarify platform specifications.

36.
Concepts: affirm user feedback, acknowledge user experiences  
Relationship: Both concepts involve designers recognizing and validating user input.  
Criteria: Designers affirm user feedback and acknowledge their experiences.  
Phrase: Acknowledge user feedback.

37.
Concepts: provide context, express community needs  
Relationship: Both concepts involve users conveying their needs and contextual information.  
Criteria: Users provide context and express community needs regarding functionalities.  
Phrase: Provide community context.

38.
Concepts: acknowledge provided resources, acknowledge and utilize resources  
Relationship: Both concepts involve users recognizing and appreciating resources shared within the community.  
Criteria: Users acknowledge and utilize resources provided by the community.  
Phrase: Acknowledge community resources.

39.
Concepts: acknowledge receipt, confirm finding information  
Relationship: Both concepts involve users confirming they have received information.  
Criteria: Users acknowledge receipt of information and confirm finding relevant details.  
Phrase: Acknowledge receipt of information.

40.
Concepts: share development plans  
Relationship: This concept involves designers communicating their future goals and plans for software development.  
Criteria: Designers outline and share their development plans with the community.  
Phrase: Share development plans.
---