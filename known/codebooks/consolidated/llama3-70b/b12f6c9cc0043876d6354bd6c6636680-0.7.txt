You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (24 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
24. 
Concepts: {Repeat the input 24}
Relationship: {What is logical relationship between concepts in code 24, or N/A if not applicable}
Criteria: {Who did what, and how for code 24}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: valuing code simplicity, advocating for readable code, advocating for clear code
- The user values code simplicity and maintainability.
- The user values simplicity and maintainability in code, preferring code that is easy to understand and modify.
- The user prioritizes code readability, advocating for simple and accessible code.

2.
Concepts: valuing readable code, preferring readable code
- The user values easy-to-read generated code with comments and documentation.
- The user prefers readable code with comments and documentation over complex solutions.

3.
Concepts: discussing code quality, discussing code quality and complexity
- The user discusses the importance of code quality, including readability and maintainability.
- The user discusses code quality and complexity, emphasizing the importance of maintainable code.

4.
Concepts: demonstrating language knowledge, familiarity with multiple software languages
- The user demonstrates diverse language knowledge and experience in computer programming.
- The user is familiar with multiple software languages, having experience with different programming languages.

5.
Concepts: observes beginner coding challenges, observes beginner coding practices
- Users observe beginners' coding challenges with large code chunks.
- Users observe beginners' coding practices, including writing large code chunks.

6.
Concepts: seeks ai verification for coding errors, requests ai verification for coding errors
- Participants ask AI to verify code and eliminate bugs.
- Participants ask AI to verify code and identify potential errors.

7.
Concepts: summarizes ai-generated code, analyzes ai-generated code
- Summarizing and understanding AI-generated code.
- Describing AI's misunderstanding, summarizing and interpreting AI-generated code.

8.
Concepts: analyzing ai-generated code, evaluates ai-generated code
- The user analyzes, evaluates, and debugs AI-generated code.
- The user reads through AI-generated code to understand and debug it.
- The participant asks for slow scrolling to carefully read and evaluate AI-generated code.

9.
Concepts: optimizes code with ai, ai-assisted code optimization, considers ai for optimization
- Using ChatGPT to optimize code.
- Uses AI to optimize code
- Considers using AI-generated code for code optimization and improvement.

10.
Concepts: values ai feedback, seeing potential in ai feedback
- Valuing AI feedback for code improvement and optimization.
- Sees potential in AI feedback for code optimization.

11.
Concepts: notes ai follows best practices, recognizes ai adherence to standards
- The participant notes AI adherence to best practices in code generation.
- The participant notes AI's adherence to best practices in coding and recognizes AI's adherence to coding standards.

12.
Concepts: appreciating executable code, appreciating ai-generated code
- The user appreciates the ability to run AI-generated code.
- The user finds AI-generated code useful and appreciates the AI's code generation capabilities.

13.
Concepts: praising ai-generated code, noting ai-generated code quality
- The user praises the AI's code readability and documentation.
- The user notes AI's ability to produce understandable code.

14.
Concepts: appreciating separated, commented code, appreciating ai-generated code comments
- Appreciates AI-generated code that is separated, commented, and documented.
- The user appreciates the AI's tendency to provide comments and documentation in the generated code.

15.
Concepts: desires automatic integration, preferring seamless model updates
- The interviewee desires seamless integration of AI-generated code into their model.
- The interviewee prefers seamless model updates, wanting the AI to integrate code automatically.

16.
Concepts: appreciates automatic integration, seamless integration of ai-generated code
- Appreciates the capability to automatically integrate AI-generated code.
- Appreciation for seamless integration of AI-generated code.

17.
Concepts: manually codes with ai guidance, writes code manually with ai guidance
- Manually codes with AI guidance.
- Writes code manually, using AI-generated code only as a reference.

18.
Concepts: uses ai-generated code as a reference, refer to the generated code or get a reference
- Uses AI-generated code as a reference.
- Refers to the generated code or gets a reference, using the AI's output as a starting point for further development.

19.
Concepts: integrates ai suggestions, integrating ai into workflow
- Participant integrates AI suggestions into their work.
- The participant integrates AI into their established workflow and development process.

20.
Concepts: manual ai output integration, integrates ai-generated code manually
- The interviewee decides to manually integrate AI output into their code.
- Manually integrates AI-generated code into their own work.

21.
Concepts: integrates ai-generated code, integrates ai-generated code selectively
- The participant integrates AI-generated code into their model.
- The interviewee integrates AI suggestions into their own coding, using generated code as a reference.
- The participant selectively integrates AI-generated code into their work.

22.
Concepts: prioritizes efficiency, ai-driven task efficiency
- The participant prioritizes efficiency when using AI-generated code.
- Participant emphasizes the efficiency of AI in solving programming tasks.

23.
Concepts: test ai's code generation, indicates reliability of ai-generated code
- The participant tests AI's code generation capabilities.
- The participant indicates the reliability of AI-generated code.

24.
Concepts: valuing interface support for task definition, find interface helpful for parameter clarification
- The participant values the interface's support in defining tasks and clarifying parameters.
- The participant finds the interface helpful in clarifying parameters.
===
Here are the definitions for each code:

---
1.
Concepts: valuing code simplicity, advocating for readable code, advocating for clear code
Relationship: These concepts are related as they all prioritize code quality and maintainability.
Criteria: Users value and advocate for simplicity, readability, and clarity in code.
Phrase: Valuing code simplicity and readability.

2.
Concepts: valuing readable code, preferring readable code
Relationship: These concepts are related as they both emphasize the importance of code readability.
Criteria: Users value and prefer code that is easy to read and understand.
Phrase: Valuing readable code.

3.
Concepts: discussing code quality, discussing code quality and complexity
Relationship: These concepts are related as they both focus on the importance of code quality.
Criteria: Users discuss the importance of code quality, including readability and maintainability.
Phrase: Discussing code quality and complexity.

4.
Concepts: demonstrating language knowledge, familiarity with multiple software languages
Relationship: These concepts are related as they both demonstrate the user's programming expertise.
Criteria: Users demonstrate diverse language knowledge and experience in computer programming.
Phrase: Demonstrating language knowledge and expertise.

5.
Concepts: observes beginner coding challenges, observes beginner coding practices
Relationship: These concepts are related as they both observe coding difficulties faced by beginners.
Criteria: Users observe beginners' coding challenges and practices, including writing large code chunks.
Phrase: Observing beginner coding challenges and practices.

6.
Concepts: seeks ai verification for coding errors, requests ai verification for coding errors
Relationship: These concepts are related as they both request AI assistance in code verification.
Criteria: Participants ask AI to verify code and eliminate bugs.
Phrase: Requesting AI verification for coding errors.

7.
Concepts: summarizes ai-generated code, analyzes ai-generated code
Relationship: These concepts are related as they both involve understanding and interpreting AI-generated code.
Criteria: Users summarize and analyze AI-generated code.
Phrase: Summarizing and analyzing ai-generated code.

8.
Concepts: analyzing ai-generated code, evaluates ai-generated code
Relationship: These concepts are related as they both involve examining AI-generated code.
Criteria: Users analyze, evaluate, and debug AI-generated code.
Phrase: Analyzing and evaluating ai-generated code.

9.
Concepts: optimizes code with ai, ai-assisted code optimization, considers ai for optimization
Relationship: These concepts are related as they all involve using AI for code optimization.
Criteria: Users use AI to optimize code and consider AI-generated code for improvement.
Phrase: Optimizing code with AI.

10.
Concepts: values ai feedback, seeing potential in ai feedback
Relationship: These concepts are related as they both appreciate the value of AI feedback.
Criteria: Users value AI feedback for code improvement and optimization.
Phrase: Valuing AI feedback.

11.
Concepts: notes ai follows best practices, recognizes ai adherence to standards
Relationship: These concepts are related as they both acknowledge AI's adherence to coding standards.
Criteria: Users note AI adherence to best practices in code generation.
Phrase: Noting AI adherence to standards.

12.
Concepts: appreciating executable code, appreciating ai-generated code
Relationship: These concepts are related as they both appreciate the functionality of AI-generated code.
Criteria: Users appreciate the ability to run AI-generated code.
Phrase: Appreciating executable AI-generated code.

13.
Concepts: praising ai-generated code, noting ai-generated code quality
Relationship: These concepts are related as they both appreciate the quality of AI-generated code.
Criteria: Users praise the AI's code readability and documentation.
Phrase: Praising AI-generated code quality.

14.
Concepts: appreciating separated, commented code, appreciating ai-generated code comments
Relationship: These concepts are related as they both appreciate the clarity of AI-generated code.
Criteria: Users appreciate AI-generated code that is separated, commented, and documented.
Phrase: Appreciating AI-generated code comments.

15.
Concepts: desires automatic integration, preferring seamless model updates
Relationship: These concepts are related as they both desire seamless integration of AI-generated code.
Criteria: Users desire seamless integration of AI-generated code into their model.
Phrase: Desiring automatic integration.

16.
Concepts: appreciates automatic integration, seamless integration of ai-generated code
Relationship: These concepts are related as they both appreciate the capability of seamless integration.
Criteria: Users appreciate the capability to automatically integrate AI-generated code.
Phrase: Appreciating automatic integration.

17.
Concepts: manually codes with ai guidance, writes code manually with ai guidance
Relationship: These concepts are related as they both involve manual coding with AI assistance.
Criteria: Users manually code with AI guidance.
Phrase: Manually coding with AI guidance.

18.
Concepts: uses ai-generated code as a reference, refer to the generated code or get a reference
Relationship: These concepts are related as they both use AI-generated code as a starting point.
Criteria: Users use AI-generated code as a reference.
Phrase: Using AI-generated code as a reference.

19.
Concepts: integrates ai suggestions, integrating ai into workflow
Relationship: These concepts are related as they both involve integrating AI into the development process.
Criteria: Users integrate AI suggestions into their work.
Phrase: Integrating AI into workflow.

20.
Concepts: manual ai output integration, integrates ai-generated code manually
Relationship: These concepts are related as they both involve manual integration of AI-generated code.
Criteria: Users manually integrate AI-generated code into their own work.
Phrase: Manually integrating AI-generated code.

21.
Concepts: integrates ai-generated code, integrates ai-generated code selectively
Relationship: These concepts are related as they both involve integrating AI-generated code into the model.
Criteria: Users integrate AI-generated code into their model.
Phrase: Integrating AI-generated code.

22.
Concepts: prioritizes efficiency, ai-driven task efficiency
Relationship: These concepts are related as they both prioritize efficiency in coding tasks.
Criteria: Users prioritize efficiency when using AI-generated code.
Phrase: Prioritizing efficiency with AI.

23.
Concepts: test ai's code generation, indicates reliability of ai-generated code
Relationship: These concepts are related as they both evaluate the reliability of AI-generated code.
Criteria: Users test AI's code generation capabilities.
Phrase: Testing AI-generated code reliability.

24.
Concepts: valuing interface support for task definition, find interface helpful for parameter clarification
Relationship: These concepts are related as they both appreciate the interface's support in task definition and parameter clarification.
Criteria: Users value the interface's support in defining tasks and clarifying parameters.
Phrase: Valuing interface support for task definition.