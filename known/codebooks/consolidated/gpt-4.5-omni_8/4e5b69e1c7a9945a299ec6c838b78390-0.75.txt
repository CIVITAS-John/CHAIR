You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (17 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
17. 
Concepts: {Repeat the input 17}
Relationship: {What is logical relationship between concepts in code 17, or N/A if not applicable}
Criteria: {Who did what, and how for code 17}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: confirm user roles, designer-user interaction
- Designers confirm the user's identity and role or inquire about their professional background.
- Conversations between designers and users aimed at verifying user roles or identities within the community.

2.
Concepts: share educational context, establish teaching credibility
- Users share context about their school's resources and their relevant teaching experience.
- Users share their professional background to establish credibility and context by disclosing their teaching experience.

3.
Concepts: provide access information, inquire about software access
- Providing or inquiring about how to access software or resources.
- Users ask for resources or information related to downloading or accessing the software.

4.
Concepts: compatibility speculation, discuss system compatibility
- A designer speculates on the compatibility of the software with older machines.
- Designers discuss system requirements and consider future software compatibility.

5.
Concepts: share version details, specify software version
- Designers provide detailed notes and share information about the software version.
- Users clarify and reference the specific type or version of the software being discussed.

6.
Concepts: confirm future features, plan future enhancements
- Designers list and confirm features for future updates.
- Designers outline and propose future updates and enhancements.

7.
Concepts: clarify design priorities, announce development plans
- Designers explain the focus areas and current priorities of the development process.
- Designers outline specific goals and publicly share their future development plans.

8.
Concepts: share development progress, provide development updates
- Designers discuss and share updates on the development of features or components.
- Designers provide information about the current status, updates, and future plans for the software.

9.
Concepts: provide status update, communicate ongoing progress
- Designers share current research progress using images or text.
- Designers communicate updates, future plans, and ongoing work.

10.
Concepts: provide community updates, update on review status
- Designers make announcements and provide updates to the community.
- Designers update the community on the review or approval status of the software.

11.
Concepts: invite future feedback, encourage community input
- Designers ask for future help and invite feedback from the community.
- Designers ask for community input and encourage members to participate and share thoughts.

12.
Concepts: solve problems collaboratively, shared experiences and support
- Users and designers work together to address issues and improve the software.
- Users and designers sharing experiences and supporting each other in using and improving the software.

13.
Concepts: seek consensus, confirm agreement
- When a designer seeks agreement or consensus from users on a decision or feature.
- Designers or users affirm or agree with each otherâ€™s points, design ideas, or statements.

14.
Concepts: discuss feature design, discuss interface layout
- Designers discuss the visual and functional design of specific features.
- Designers discuss preferences and decisions about the interface layout.

15.
Concepts: explain design rationale, provide development rationale
- Designers explain the rationale and principles behind their design decisions.
- Users or designers provide reasons to justify development decisions.

16.
Concepts: suggest practical use cases, suggest design simplifications
- Designers suggest simplifications and practical use cases to improve efficiency.
- Designers elaborate on suggestions for improving and simplifying the software.

17.
Concepts: propose design idea, propose solutions
- Designers make suggestions or propose new design ideas or features.
- Designers or users propose solutions and seek or offer alternatives to issues.
===
---
Definitions for each code (17 in total):

1.
Concepts: confirm user roles, designer-user interaction
Relationship: Conversations between designers and users to verify identities and roles
Criteria: Designers interact with users to confirm their identities and roles within the community.
Phrase: Verify user roles

2.
Concepts: share educational context, establish teaching credibility
Relationship: Sharing of educational context to establish professional credibility
Criteria: Users share their school's resources and teaching experience to establish credibility.
Phrase: Establish teaching credibility

3.
Concepts: provide access information, inquire about software access
Relationship: Exchange of information regarding access to software
Criteria: Users and designers provide or inquire about how to access software or resources.
Phrase: Provide software access information

4.
Concepts: compatibility speculation, discuss system compatibility
Relationship: Discussion and speculation on system requirements and compatibility
Criteria: Designers speculate and discuss the compatibility of the software with different systems.
Phrase: Discuss system compatibility

5.
Concepts: share version details, specify software version
Relationship: Clarification and sharing of specific software versions
Criteria: Users and designers share and specify the version details of the software being discussed.
Phrase: Specify software version

6.
Concepts: confirm future features, plan future enhancements
Relationship: Confirmation and planning of future software features
Criteria: Designers list, confirm, and propose features for future software updates.
Phrase: Plan future enhancements

7.
Concepts: clarify design priorities, announce development plans
Relationship: Explanation and announcement of development priorities and plans
Criteria: Designers explain their focus areas and publicly announce their development plans.
Phrase: Announce development plans

8.
Concepts: share development progress, provide development updates
Relationship: Sharing of updates on development progress
Criteria: Designers discuss and provide updates on the development of software features or components.
Phrase: Provide development updates

9.
Concepts: provide status update, communicate ongoing progress
Relationship: Sharing of current research status and ongoing work
Criteria: Designers communicate their research progress and ongoing work using images or text.
Phrase: Communicate ongoing progress

10.
Concepts: provide community updates, update on review status
Relationship: Announcements and updates regarding the community and review status
Criteria: Designers provide updates to the community on the review or approval status of the software.
Phrase: Provide community updates

11.
Concepts: invite future feedback, encourage community input
Relationship: Invitation and encouragement for community feedback and participation
Criteria: Designers ask for future help and invite feedback from the community.
Phrase: Encourage community input

12.
Concepts: solve problems collaboratively, shared experiences and support
Relationship: Collaboration and support in problem-solving
Criteria: Users and designers work together and share experiences to address issues and improve the software.
Phrase: Solve problems collaboratively

13.
Concepts: seek consensus, confirm agreement
Relationship: Seeking and confirming agreement on decisions or features
Criteria: Designers or users seek and confirm agreement on design ideas or statements.
Phrase: Confirm agreement

14.
Concepts: discuss feature design, discuss interface layout
Relationship: Discussion on the visual and functional design of features and interface layout
Criteria: Designers discuss the design and layout of specific features.
Phrase: Discuss feature design

15.
Concepts: explain design rationale, provide development rationale
Relationship: Explanation and justification of design and development decisions
Criteria: Designers explain and justify their design and development decisions.
Phrase: Provide development rationale

16.
Concepts: suggest practical use cases, suggest design simplifications
Relationship: Suggesting practical use cases and design simplifications for efficiency
Criteria: Designers suggest practical use cases and simplifications to improve the software.
Phrase: Suggest design simplifications

17.
Concepts: propose design idea, propose solutions
Relationship: Proposal of new design ideas and solutions to issues
Criteria: Designers or users propose new design ideas or solutions to existing issues.
Phrase: Propose design solutions
---