You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (32 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
32. 
Concepts: {Repeat the input 32}
Relationship: {What is logical relationship between concepts in code 32, or N/A if not applicable}
Criteria: {Who did what, and how for code 32}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: writes code manually, manual coding with ai guidance, writes code manually with ai guidance
- The participant writes code manually with AI-generated code as reference.
- Manually codes with AI guidance
- Writes code manually with guidance from AI, rather than copying and pasting.

2.
Concepts: reads generated code, reviews ai-generated code
- The participant reads the code generated by the AI and selectively copies code to the model.
- The participant reviews and evaluates the AI-generated code, selectively copying relevant parts into their model.

3.
Concepts: selectively copies code, selective copying of ai code
- The participant selectively copies code from the AI's output into their model.
- The participant selectively copies AI code, choosing to incorporate specific sections or lines into their own work.

4.
Concepts: copying ai-generated code, copies and pastes ai code, decides to copy and paste ai output
- The participant decides to copy and paste code from the AI output.
- The participant decides to copy and paste the AI-generated code, finding it useful and convenient.
- Decides to copy and paste AI output or code into their own work.

5.
Concepts: balancing copying and execution, balances running code with manual input
- The participant balances copying code with execution options.
- The participant balances running code with manual input, deciding when to use each approach.

6.
Concepts: demonstrates interaction with ai, engages in hands-on interaction
- Participant demonstrates interaction with AI-generated code.
- Participant engages in hands-on interaction with AI-generated code.

7.
Concepts: envisions using ai for code optimization, envisions practical applications of ai
- The participant envisions using LLM-driven interfaces for code optimization.
- The participant envisions practical applications of LLM-driven interfaces, such as writing code for specific tasks.

8.
Concepts: optimizing with ai, uses chatgpt for code optimization
- The participant uses the AI to optimize their code, seeking suggestions for improvement.
- The participant uses ChatGPT to optimize their code.

9.
Concepts: sees ai as a supportive tool, recognizes ai as a supportive tool
- The participant views the AI as a supportive tool for their work.
- The participant recognizes AI as a supportive tool for optimizing code.

10.
Concepts: appreciates collaborative coding process, emphasizes the collaborative nature of coding
- Appreciates the collaborative coding process and AI's role in optimizing code.
- Emphasizes the collaborative nature of coding, using AI as a tool for optimization.

11.
Concepts: engages in careful code evaluation, implies careful decision making
- Carefully evaluates and selects code generated by AI
- Interviewee implies careful decision-making in using AI-generated code.

12.
Concepts: valuing ai feedback, appreciates ai's suggestions, appreciates ai's potential for improvement
- The participant values the feedback provided by AI, including code optimization suggestions.
- Appreciates the AI's suggestions or feedback on improving code or providing alternative solutions.
- Appreciates AI's potential to improve code quality and provide optimization suggestions.

13.
Concepts: suggests future improvements, suggests improvement
- Interviewee suggests future improvements to AI-generated code.
- The participant suggests improvements to the current ChatGPT implementation, such as checking generated code with external information (compiler, etc.).

14.
Concepts: makes pragmatic coding decisions, adopts ai-generated code under time pressure
- The participant makes pragmatic coding decisions, using the AI-generated code completely when realizing time constraints.
- The participant adopts AI-generated code under time pressure, using it to complete their task quickly.

15.
Concepts: uses ai code due to time constraints, uses ai code under time pressure
- Uses AI code due to time constraints.
- Uses AI-generated code when pressed for time or facing deadlines.

16.
Concepts: adapts to practical needs, adapts code for immediate needs
- Adapts to practical needs by using AI-generated code when time-constrained.
- Adapts AI-generated code for immediate needs, often due to time constraints.

17.
Concepts: identifies necessary adjustments from ai code, identifies necessary adjustments from ai output
- Identifies necessary adjustments or corrections needed in the AI-generated code to make it work correctly.
- Identifies necessary adjustments or corrections to the code generated by the LLM-driven interface.

18.
Concepts: adjusts model setup, adjusts model setup based on ai output
- Adjusts model setup and configuration based on AI-generated code or feedback.
- Adjusts model setup based on insights gained from AI-generated code

19.
Concepts: customizes ai-generated code, uses ai for specific adjustments
- Customizes AI-generated code, adapting it to specific needs and contexts.
- Uses AI-driven interfaces for specific code adjustments or modifications.

20.
Concepts: adapts based on ai-generated code, adapts to constraints by utilizing ai outputs
- Adapts their approach based on AI-generated code or suggestions.
- The participant adapts to constraints by utilizing AI-generated code and outputs.

21.
Concepts: overwrites existing work with ai code, overwrites existing code with ai output
- Overwrites existing work with AI-generated code or output.
- Interviewee overwrites existing code with AI-generated code.

22.
Concepts: integrates ai code into model, integration of ai-generated code
- AI-generated code is integrated into the model.
- Values integration of AI-generated code into the workspace or model.

23.
Concepts: integrates ai code, integrates ai-generated code fully
- Integrates AI-generated code into their own work.
- The participant integrates AI-generated code fully into their work, especially when time-constrained.

24.
Concepts: emphasizes maintainability, emphasizes maintainability and clarity, emphasizes importance of maintainable code
- Emphasizes the importance of maintainability and simplicity in code.
- Emphasizes the importance of maintainability, clarity, and simplicity in code.
- Emphasizes the importance of maintainable code, such as readable and commented code.

25.
Concepts: discusses code quality, discusses code complexity, discusses code readability
- Discusses the importance of code quality and maintainability.
- The participant discusses the importance of code complexity and maintainability.
- Discusses code readability, complexity, or maintainability

26.
Concepts: values documentation, values clear documentation, values code readability, values clarity in generated code
- Values the importance of documentation and clear code explanations.
- The participant values clear and accessible documentation, including code that is easy to understand and maintain.
- Values code readability and the importance of clear, commented, and well-documented code.
- Recognizes the importance of comments in code for readability and understanding.
- The participant values clarity in the generated code, such as clear comments and documentation.

27.
Concepts: values simplicity of code, prioritizes code readability
- The code values simplicity and readability of code.
- Values simplicity and readability over complexity in code.

28.
Concepts: values simple, maintainable code, prefers simple, maintainable code, values plain, understandable code
- Preference for simple, maintainable code that is easy to understand and modify.
- The participant values simplicity and understandability in code, preferring plain and accessible code over complex or tricky code.

29.
Concepts: advocates for simplicity in code, prefers clear and accessible code structures
- The participant advocates for simplicity in code, making it easier to maintain.
- The participant prefers clear and accessible code structures for easier maintenance.

30.
Concepts: criticizes complex code, critiques complex coding practices
- Criticizes complex code and advocates for simplicity and accessibility.
- The participant critiques complex coding practices, advocating for simpler and more accessible code.

31.
Concepts: advocate for clear coding practices, express desire for clarity in future coding
- Advocates for clear coding practices and maintainable code.
- Advocates for clear and simple code

32.
Concepts: prioritizing efficiency, prioritizes efficiency
- The participant prioritizes efficiency in coding tasks.
- The participant prioritizes efficiency and uses the AI-generated code completely when realizing time constraints.
===
Here are the definitions for each code:

---
1.
Concepts: writes code manually, manual coding with ai guidance, writes code manually with ai guidance
Relationship: The concepts are related in that they all describe the participant's manual coding process with AI guidance.
Criteria: The participant writes code manually with AI-generated code as reference.
Phrase: Writes code manually with AI guidance.

2.
Concepts: reads generated code, reviews ai-generated code
Relationship: The concepts are related in that they both describe the participant's review of AI-generated code.
Criteria: The participant reviews and evaluates the AI-generated code, selectively copying relevant parts into their model.
Phrase: Reviews AI-generated code.

3.
Concepts: selectively copies code, selective copying of ai code
Relationship: The concepts are related in that they both describe the participant's selective copying of AI-generated code.
Criteria: The participant selectively copies code from the AI's output into their model.
Phrase: Selectively copies AI code.

4.
Concepts: copying ai-generated code, copies and pastes ai code, decides to copy and paste ai output
Relationship: The concepts are related in that they all describe the participant's decision to copy and paste AI-generated code.
Criteria: The participant decides to copy and paste code from the AI output.
Phrase: Copies and pastes AI code.

5.
Concepts: balancing copying and execution, balances running code with manual input
Relationship: The concepts are related in that they both describe the participant's balancing of copying code with execution options.
Criteria: The participant balances copying code with execution options.
Phrase: Balances copying and execution.

6.
Concepts: demonstrates interaction with ai, engages in hands-on interaction
Relationship: The concepts are related in that they both describe the participant's interaction with AI-generated code.
Criteria: Participant demonstrates interaction with AI-generated code.
Phrase: Demonstrates interaction with AI.

7.
Concepts: envisions using ai for code optimization, envisions practical applications of ai
Relationship: The concepts are related in that they both describe the participant's vision for using AI-driven interfaces.
Criteria: The participant envisions using LLM-driven interfaces for code optimization.
Phrase: Envisions using AI for code optimization.

8.
Concepts: optimizing with ai, uses chatgpt for code optimization
Relationship: The concepts are related in that they both describe the participant's use of AI for code optimization.
Criteria: The participant uses the AI to optimize their code, seeking suggestions for improvement.
Phrase: Optimizes with AI.

9.
Concepts: sees ai as a supportive tool, recognizes ai as a supportive tool
Relationship: The concepts are related in that they both describe the participant's view of AI as a supportive tool.
Criteria: The participant views the AI as a supportive tool for their work.
Phrase: Sees AI as a supportive tool.

10.
Concepts: appreciates collaborative coding process, emphasizes the collaborative nature of coding
Relationship: The concepts are related in that they both describe the participant's appreciation for the collaborative nature of coding.
Criteria: Appreciates the collaborative coding process and AI's role in optimizing code.
Phrase: Appreciates collaborative coding process.

11.
Concepts: engages in careful code evaluation, implies careful decision making
Relationship: The concepts are related in that they both describe the participant's careful evaluation of AI-generated code.
Criteria: Carefully evaluates and selects code generated by AI.
Phrase: Evaluates AI-generated code carefully.

12.
Concepts: valuing ai feedback, appreciates ai's suggestions, appreciates ai's potential for improvement
Relationship: The concepts are related in that they all describe the participant's appreciation for AI's feedback and suggestions.
Criteria: The participant values the feedback provided by AI, including code optimization suggestions.
Phrase: Values AI feedback.

13.
Concepts: suggests future improvements, suggests improvement
Relationship: The concepts are related in that they both describe the participant's suggestions for improving AI-generated code.
Criteria: Interviewee suggests future improvements to AI-generated code.
Phrase: Suggests improvements.

14.
Concepts: makes pragmatic coding decisions, adopts ai-generated code under time pressure
Relationship: The concepts are related in that they both describe the participant's pragmatic coding decisions under time pressure.
Criteria: The participant makes pragmatic coding decisions, using the AI-generated code completely when realizing time constraints.
Phrase: Makes pragmatic coding decisions.

15.
Concepts: uses ai code due to time constraints, uses ai code under time pressure
Relationship: The concepts are related in that they both describe the participant's use of AI-generated code under time pressure.
Criteria: Uses AI code due to time constraints.
Phrase: Uses AI code under time pressure.

16.
Concepts: adapts to practical needs, adapts code for immediate needs
Relationship: The concepts are related in that they both describe the participant's adaptation of AI-generated code to practical needs.
Criteria: Adapts to practical needs by using AI-generated code when time-constrained.
Phrase: Adapts to practical needs.

17.
Concepts: identifies necessary adjustments from ai code, identifies necessary adjustments from ai output
Relationship: The concepts are related in that they both describe the participant's identification of necessary adjustments to AI-generated code.
Criteria: Identifies necessary adjustments or corrections needed in the AI-generated code to make it work correctly.
Phrase: Identifies necessary adjustments.

18.
Concepts: adjusts model setup, adjusts model setup based on ai output
Relationship: The concepts are related in that they both describe the participant's adjustment of model setup based on AI-generated code.
Criteria: Adjusts model setup and configuration based on AI-generated code or feedback.
Phrase: Adjusts model setup.

19.
Concepts: customizes ai-generated code, uses ai for specific adjustments
Relationship: The concepts are related in that they both describe the participant's customization of AI-generated code.
Criteria: Customizes AI-generated code, adapting it to specific needs and contexts.
Phrase: Customizes AI-generated code.

20.
Concepts: adapts based on ai-generated code, adapts to constraints by utilizing ai outputs
Relationship: The concepts are related in that they both describe the participant's adaptation to AI-generated code and constraints.
Criteria: Adapts their approach based on AI-generated code or suggestions.
Phrase: Adapts to AI-generated code.

21.
Concepts: overwrites existing work with ai code, overwrites existing code with ai output
Relationship: The concepts are related in that they both describe the participant's overwriting of existing work with AI-generated code.
Criteria: Overwrites existing work with AI-generated code or output.
Phrase: Overwrites existing work with AI code.

22.
Concepts: integrates ai code into model, integration of ai-generated code
Relationship: The concepts are related in that they both describe the participant's integration of AI-generated code into their model.
Criteria: AI-generated code is integrated into the model.
Phrase: Integrates AI code into model.

23.
Concepts: integrates ai code, integrates ai-generated code fully
Relationship: The concepts are related in that they both describe the participant's integration of AI-generated code into their work.
Criteria: The participant integrates AI-generated code fully into their work, especially when time-constrained.
Phrase: Integrates AI code fully.

24.
Concepts: emphasizes maintainability, emphasizes maintainability and clarity, emphasizes importance of maintainable code
Relationship: The concepts are related in that they all describe the participant's emphasis on maintainability in code.
Criteria: Emphasizes the importance of maintainability and simplicity in code.
Phrase: Emphasizes maintainability.

25.
Concepts: discusses code quality, discusses code complexity, discusses code readability
Relationship: The concepts are related in that they all describe the participant's discussion of code quality and maintainability.
Criteria: Discusses the importance of code quality and maintainability.
Phrase: Discusses code quality.

26.
Concepts: values documentation, values clear documentation, values code readability, values clarity in generated code
Relationship: The concepts are related in that they all describe the participant's valuation of clear documentation and code readability.
Criteria: Values the importance of documentation and clear code explanations.
Phrase: Values clear documentation.

27.
Concepts: values simplicity of code, prioritizes code readability
Relationship: The concepts are related in that they both describe the participant's valuation of simplicity and readability in code.
Criteria: Values simplicity and readability over complexity in code.
Phrase: Values simplicity.

28.
Concepts: values simple, maintainable code, prefers simple, maintainable code, values plain, understandable code
Relationship: The concepts are related in that they all describe the participant's valuation of simple, maintainable code.
Criteria: Preference for simple, maintainable code that is easy to understand and modify.
Phrase: Values simple code.

29.
Concepts: advocates for simplicity in code, prefers clear and accessible code structures
Relationship: The concepts are related in that they both describe the participant's advocacy for simplicity in code.
Criteria: The participant advocates for simplicity in code, making it easier to maintain.
Phrase: Advocates for simplicity.

30.
Concepts: criticizes complex code, critiques complex coding practices
Relationship: The concepts are related in that they both describe the participant's criticism of complex code and practices.
Criteria: Criticizes complex code and advocates for simplicity and accessibility.
Phrase: Criticizes complex code.

31.
Concepts: advocate for clear coding practices, express desire for clarity in future coding
Relationship: The concepts are related in that they both describe the participant's advocacy for clear coding practices.
Criteria: Advocates for clear coding practices and maintainable code.
Phrase: Advocates for clear coding practices.

32.
Concepts: prioritizing efficiency, prioritizes efficiency
Relationship: The concepts are related in that they both describe the participant's prioritization of efficiency in coding tasks.
Criteria: The participant prioritizes efficiency in coding tasks.
Phrase: Prioritizes efficiency.