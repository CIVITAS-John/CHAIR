You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (26 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
26. 
Concepts: {Repeat the input 26}
Relationship: {What is logical relationship between concepts in code 26, or N/A if not applicable}
Criteria: {Who did what, and how for code 26}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: follow up on user needs, follow-up on usage scenario
- Designers ask follow-up questions to understand user needs better.
- A designer asks a follow-up question to understand the usage scenario better.

2.
Concepts: seek clarification, clarify follow-up questions
- Users or designers seek or provide clarification on specific points.
- Designers ask follow-up questions and explain their intentions.

3.
Concepts: elaborate on suggestions, encouraging elaboration
- Designers elaborate on responses or suggestions with more details.
- A designer encourages users to provide more details or elaborate on their needs.

4.
Concepts: respond to feedback, responding to users
- Designers respond to user feedback or queries.
- Designers respond to user queries, feedback, or suggestions.

5.
Concepts: suggest alternatives, alternative suggestion
- Users suggest or seek alternative solutions to problems.
- Providing alternative suggestions or solutions.

6.
Concepts: discussing usability, discussing feature development
- A designer discusses the usability aspects and potential improvements of the software.
- A designer discusses various aspects and development of features with users.

7.
Concepts: feature guidance, providing usage instructions
- Designers providing guidance on how to use specific features.
- A designer provides specific instructions on how to use certain features.

8.
Concepts: provide feature details, providing feature explanations, provide technical clarification
- A designer provides detailed information about a feature's functionality.
- Designers provide explanations or clarifications about features.
- Designers clarify the existence or technical details of a feature.

9.
Concepts: explaining technical artifacts, explaining component functionality
- A designer explains technical aspects or artifacts of the software.
- A designer explains the functionality of a specific component in the software.

10.
Concepts: accepting suggestions, accepting user suggestions
- Accepting and planning to implement user suggestions.
- A designer acknowledges a request and commits to including it in a future update.

11.
Concepts: provide feedback, suggest new features, suggest improvements
- Users provide feedback or suggestions to improve the software.
- Users suggest new features or functionalities to enhance the software.
- Users provide suggestions or recommendations for improving features or design aspects of the software.

12.
Concepts: share user experience, sharing classroom experiences
- Users share their experiences and the impact of the software on their teaching or learning.
- Users sharing their positive experiences using the software in a classroom setting.

13.
Concepts: provide positive feedback, appreciating specific features, expressing software satisfaction
- Users share positive feedback about the software.
- Users express appreciation for specific features of the software.
- Users express satisfaction with the software and its features.

14.
Concepts: show consideration, apologies and politeness
- Designers apologize for inconveniences, reflecting community norms.
- Expressions of politeness, apologies, or acknowledgment of potential inconvenience by the designers.

15.
Concepts: acknowledge inconvenience, apologize for inconvenience
- Designers acknowledge potential inconveniences caused to users.
- Designers apologize for any inconvenience caused to users.

16.
Concepts: demonstrate appreciation, recognition of effort
- Users acknowledge and appreciate the efforts of designers.
- Instances where users acknowledge and appreciate the efforts of the designers.

17.
Concepts: request resources, request information
- Users request resources or information related to the software.
- Users ask questions or request specific information regarding the functionalities or use of the software.

18.
Concepts: seek help, request technical support
- Users seek help or express the need for assistance with the software.
- Users request guidance or technical support for using the software.

19.
Concepts: inquire about usage, inquire about access
- Users inquire about how to use a specific version of the software.
- Users inquire about how to access or download specific versions of the software.

20.
Concepts: inquire about downloads, inquire about download process
- Participants inquire about or provide information on where to download the software.
- Users inquiring about the process to download the software.

21.
Concepts: discussing system limitations, explaining software limitations
- A designer discusses the limitations of the system or proposed solution.
- A designer explains the limitations or constraints of the current software version.

22.
Concepts: discussing technical constraints, highlight technical constraints
- Discussing technical limitations or requirements of the software.
- A user highlights technical constraints that affect the use of the software.

23.
Concepts: compare with other software, comparing software to similar apps
- Users compare the software with other similar tools or applications.
- Users provide feedback by comparing the software to similar applications.

24.
Concepts: personal interest expression
- Expressing personal interest in a subject.
- Designers share or express personal interests related to the topic.

25.
Concepts: confirming teacher identity
- A designer inquires about the user's teaching level to confirm their professional identity.
- Confirming the user's identity as a teacher.

26.
Concepts: acknowledge feedback
- A designer acknowledges feedback from users with brief responses.
- Designers acknowledge and appreciate user feedback, indicating future actions.
===
---
Definitions for each code (26 in total):
1.
Concepts: follow up on user needs, follow-up on usage scenario
Relationship: Both involve designers asking follow-up questions to gain a deeper understanding.
Criteria: Designers ask follow-up questions to better understand user needs and usage scenarios.
Phrase: Seeking deeper understanding

2.
Concepts: seek clarification, clarify follow-up questions
Relationship: Both involve seeking or providing clarification on specific points.
Criteria: Users or designers seek or provide clarification on specific points, including follow-up questions and their intentions.
Phrase: Clarifying points

3.
Concepts: elaborate on suggestions, encouraging elaboration
Relationship: Both involve providing or encouraging more detailed responses.
Criteria: Designers elaborate on responses or suggestions and encourage users to provide more details.
Phrase: Encouraging detailed responses

4.
Concepts: respond to feedback, responding to users
Relationship: Both involve designers responding to user input.
Criteria: Designers respond to user feedback, queries, or suggestions.
Phrase: Addressing user input

5.
Concepts: suggest alternatives, alternative suggestion
Relationship: Both involve proposing alternative solutions.
Criteria: Users or designers suggest or seek alternative solutions to problems.
Phrase: Proposing alternatives

6.
Concepts: discussing usability, discussing feature development
Relationship: Both involve discussions about the software's aspects and improvements.
Criteria: Designers discuss usability aspects and feature development with users.
Phrase: Discussing software aspects

7.
Concepts: feature guidance, providing usage instructions
Relationship: Both involve providing instructions on using features.
Criteria: Designers provide guidance and specific instructions on how to use certain features.
Phrase: Guiding feature use

8.
Concepts: provide feature details, providing feature explanations, provide technical clarification
Relationship: All involve providing detailed information or clarifications about features.
Criteria: Designers provide detailed information, explanations, or technical clarifications about features.
Phrase: Explaining features

9.
Concepts: explaining technical artifacts, explaining component functionality
Relationship: Both involve explaining technical aspects of the software.
Criteria: Designers explain technical aspects or the functionality of specific components in the software.
Phrase: Explaining technical aspects

10.
Concepts: accepting suggestions, accepting user suggestions
Relationship: Both involve acknowledging and planning to implement user suggestions.
Criteria: Designers accept and plan to implement user suggestions.
Phrase: Accepting user input

11.
Concepts: provide feedback, suggest new features, suggest improvements
Relationship: All involve users providing input to enhance the software.
Criteria: Users provide feedback, suggest new features, or recommend improvements.
Phrase: Providing enhancement input

12.
Concepts: share user experience, sharing classroom experiences
Relationship: Both involve users sharing their experiences with the software.
Criteria: Users share their experiences and the impact of the software on their teaching or learning.
Phrase: Sharing user experiences

13.
Concepts: provide positive feedback, appreciating specific features, expressing software satisfaction
Relationship: All involve users expressing positive sentiments about the software.
Criteria: Users share positive feedback, express appreciation for specific features, and show satisfaction with the software.
Phrase: Expressing positive sentiments

14.
Concepts: show consideration, apologies and politeness
Relationship: Both involve designers showing politeness and consideration.
Criteria: Designers apologize for inconveniences and reflect community norms of politeness.
Phrase: Demonstrating politeness

15.
Concepts: acknowledge inconvenience, apologize for inconvenience
Relationship: Both involve designers addressing user inconveniences.
Criteria: Designers acknowledge and apologize for any inconvenience caused to users.
Phrase: Addressing inconveniences

16.
Concepts: demonstrate appreciation, recognition of effort
Relationship: Both involve users showing appreciation for designers' efforts.
Criteria: Users acknowledge and appreciate the efforts of designers.
Phrase: Showing appreciation

17.
Concepts: request resources, request information
Relationship: Both involve users requesting additional information or resources.
Criteria: Users request resources or information related to the software.
Phrase: Requesting information

18.
Concepts: seek help, request technical support
Relationship: Both involve users seeking assistance with the software.
Criteria: Users seek help or request technical support for using the software.
Phrase: Seeking assistance

19.
Concepts: inquire about usage, inquire about access
Relationship: Both involve users inquiring about how to use or access the software.
Criteria: Users inquire about how to use or access specific versions of the software.
Phrase: Inquiring about usage

20.
Concepts: inquire about downloads, inquire about download process
Relationship: Both involve users inquiring about downloading the software.
Criteria: Users inquire about the process to download the software.
Phrase: Inquiring about downloads

21.
Concepts: discussing system limitations, explaining software limitations
Relationship: Both involve discussing the limitations of the software.
Criteria: Designers discuss and explain the limitations or constraints of the software.
Phrase: Discussing limitations

22.
Concepts: discussing technical constraints, highlight technical constraints
Relationship: Both involve addressing technical constraints of the software.
Criteria: Users or designers discuss and highlight technical constraints affecting the software.
Phrase: Addressing technical constraints

23.
Concepts: compare with other software, comparing software to similar apps
Relationship: Both involve users comparing the software to other applications.
Criteria: Users compare the software with other similar tools or applications.
Phrase: Comparing software

24.
Concepts: personal interest expression
Relationship: N/A
Criteria: Designers express personal interests related to the topic.
Phrase: Expressing personal interest

25.
Concepts: confirming teacher identity
Relationship: N/A
Criteria: Designers inquire about the user's teaching level to confirm their professional identity.
Phrase: Confirming professional identity

26.
Concepts: acknowledge feedback
Relationship: N/A
Criteria: Designers acknowledge and appreciate user feedback, indicating future actions.
Phrase: Acknowledging feedback
---