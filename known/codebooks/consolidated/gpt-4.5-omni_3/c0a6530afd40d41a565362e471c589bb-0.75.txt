You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (12 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
12. 
Concepts: {Repeat the input 12}
Relationship: {What is logical relationship between concepts in code 12, or N/A if not applicable}
Criteria: {Who did what, and how for code 12}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: offering user improvements, suggesting usability improvements
- A user suggests improvements or additions to the software.
- Someone makes a suggestion to improve the usability of the software.

2.
Concepts: proposing new features, making feature suggestions
- Users suggest new features or functions that would enhance the software.
- Users suggest new features or improvements to enhance the application.

3.
Concepts: feature request invitation, inviting user suggestions
- Designers invite users to suggest new features or improvements.
- A designer invites the community to provide suggestions and requirements for the software.

4.
Concepts: explaining feature requests, user input/feedback/suggestion with justifications
- A user explains the reasons behind their request for a particular feature.
- User suggests a feature with a justification for its need.

5.
Concepts: requesting additional features, requesting physics experiment features
- A user requests the addition of specific experiments or features related to a subject area.
- A user requests features related to specific physics concepts and demonstrations.

6.
Concepts: reaction to feedback, responding to user feedback
- Responses indicating the designer's reaction to feedback or plans for updates.
- A designer responds positively to user feedback, indicating future updates or changes.

7.
Concepts: designer acknowledgment, accepting user suggestions
- Designers agreeing to user requests and acknowledging future inclusion in updates.
- A designer accepts and agrees to implement user suggestions in future updates.

8.
Concepts: setting user expectations, managing user expectations
- Someone sets user expectations about the timeline or features of upcoming updates.
- A designer manages user expectations by indicating the possibility and timeline of future feature additions.

9.
Concepts: clarifying version type, clarifying version usage
- Clarifying the type or version of the software being referred to.
- Someone provides clarification on the version in use and the version uploaded.

10.
Concepts: explaining system limitations, explaining platform limitations
- A user mentions and explains the limitations of their current system.
- A user or designer explains the limitations or constraints of the platform or system.

11.
Concepts: feature functionality, explaining features
- Designer details specific feature functionalities.
- A designer provides detailed explanations about specific features or capabilities.

12.
Concepts: technical discussion, discussing usability considerations
- Designer discusses technical aspects or considerations related to the software.
- A designer discusses usability considerations for the software.
===
---
Definitions for each code (12 in total):
1.
Concepts: offering user improvements, suggesting usability improvements
Relationship: Both involve users making suggestions to enhance the software's usability.
Criteria: Users suggest enhancements or additions to improve the usability of the software.
Phrase: Suggesting usability improvements

2.
Concepts: proposing new features, making feature suggestions
Relationship: Both involve users proposing new features to enhance the software.
Criteria: Users propose new features or functions to enhance the software.
Phrase: Proposing new features

3.
Concepts: feature request invitation, inviting user suggestions
Relationship: Both involve designers inviting users to suggest new features or improvements.
Criteria: Designers invite users to suggest new features or provide suggestions for improvements.
Phrase: Inviting user suggestions

4.
Concepts: explaining feature requests, user input/feedback/suggestion with justifications
Relationship: Both involve users providing justifications for their feature requests.
Criteria: Users explain the reasons behind their feature requests.
Phrase: Justifying feature requests

5.
Concepts: requesting additional features, requesting physics experiment features
Relationship: Both involve users requesting specific features related to physics experiments.
Criteria: Users request addition of features specifically related to physics experiments or concepts.
Phrase: Requesting physics experiment features

6.
Concepts: reaction to feedback, responding to user feedback
Relationship: Both involve designers responding to user feedback.
Criteria: Designers respond to user feedback indicating plans for updates or changes.
Phrase: Responding to feedback

7.
Concepts: designer acknowledgment, accepting user suggestions
Relationship: Both involve designers accepting and acknowledging user suggestions.
Criteria: Designers agree to user requests and acknowledge future inclusion in updates.
Phrase: Accepting user suggestions

8.
Concepts: setting user expectations, managing user expectations
Relationship: Both involve managing user expectations about future updates.
Criteria: Designers set user expectations regarding the timeline and possibility of future updates.
Phrase: Managing user expectations

9.
Concepts: clarifying version type, clarifying version usage
Relationship: Both involve clarifying details about the software version.
Criteria: Someone clarifies the type or usage of the software version being referred to.
Phrase: Clarifying version details

10.
Concepts: explaining system limitations, explaining platform limitations
Relationship: Both involve explaining limitations of the system or platform.
Criteria: Users or designers explain the limitations of their current system or platform.
Phrase: Explaining system limitations

11.
Concepts: feature functionality, explaining features
Relationship: Both involve providing details about feature functionalities.
Criteria: Designers provide detailed explanations about specific features or capabilities.
Phrase: Explaining feature functionality

12.
Concepts: technical discussion, discussing usability considerations
Relationship: Both involve discussing technical aspects and usability considerations.
Criteria: Designers discuss technical aspects and usability considerations related to the software.
Phrase: Discussing technical and usability considerations
---