You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (11 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
11. 
Concepts: {Repeat the input 11}
Relationship: {What is logical relationship between concepts in code 11, or N/A if not applicable}
Criteria: {Who did what, and how for code 11}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: share development updates, communicate progress updates
- Designers communicate that work is actively being done and share visual updates related to the software's development.
- A designer updates the community on the progress and current status of software releases and ongoing research.

2.
Concepts: community feedback, cultivating community
- Users providing feedback and suggestions to improve the product.
- Designers encourage community engagement and feedback for future software updates.

3.
Concepts: provide feedback, suggest software improvements
- Users provide feedback or suggestions about the software's features and quality.
- Users propose practical applications, enhancements, and new features to improve the software's functionality.

4.
Concepts: respond to inquiries, engaging with user inquiries
- The designer responds to user inquiries and provides relevant information about the application.
- Designers actively engage with users by answering their questions and addressing their feedback to meet user needs.

5.
Concepts: refine design, refine through iteration
- Designers propose changes to improve usability.
- Instances where designers discuss updates and the iterative process of refining the product based on user feedback.

6.
Concepts: acknowledgment and implementation, express agreement and confirm understanding
- Designers acknowledging user feedback and discussing plans to implement suggested features.
- Users express agreement with previous suggestions and indicate shared priorities, while users and designers express agreement or appreciation for ideas shared.

7.
Concepts: appreciate user support, express gratitude
- Users and designers express gratitude for the software and support received.
- Users express support, encouragement, and gratitude for the work done by designers or other community members, acknowledging help and resources provided.

8.
Concepts: recognizing efforts, express user appreciation for feedback
- Users acknowledge and express gratitude for the efforts of the designers in their interactions.
- Expressions of thanks or appreciation from users.

9.
Concepts: reflect on experiences, discuss user experiences in education
- Designers reflect on past experiences with the software in an educational setting.
- User experiences and challenges in using the software within educational settings are discussed by users and designers.

10.
Concepts: inquire about update status, inquiring about updates
- Users inquire about the status of updates for the Android version of the software.
- Users and designers ask questions and express curiosity about recent updates or improvements made to the software.

11.
Concepts: describe limitations, clarify and acknowledge limitations
- Users highlight and provide context about system limitations.
- Designers clarify the limitations of the software's functionality and acknowledge potential issues with software compatibility and team limitations in addressing requests.
===
---
Definitions for each code (11 in total):
1. 
Concepts: share development updates, communicate progress updates  
Relationship: Both concepts involve the act of informing the community about the ongoing work and status of the software development.  
Criteria: Designers actively communicate and share visual updates regarding the software's development and progress to the community.  
Phrase: Communicate development progress.

2. 
Concepts: community feedback, cultivating community  
Relationship: Both concepts emphasize the importance of user input and engagement in fostering a supportive community.  
Criteria: Users provide feedback and suggestions, while designers encourage community engagement to enhance future software updates.  
Phrase: Cultivate community feedback.

3. 
Concepts: provide feedback, suggest software improvements  
Relationship: Both concepts focus on users' contributions aimed at enhancing the software's features and functionality.  
Criteria: Users provide feedback and propose practical improvements to enhance the software's quality and usability.  
Phrase: Suggest software improvements.

4. 
Concepts: respond to inquiries, engaging with user inquiries  
Relationship: Both concepts involve interaction between designers and users, focusing on addressing user questions and needs.  
Criteria: Designers actively respond to user inquiries and engage with them to provide relevant information and support.  
Phrase: Engage with user inquiries.

5. 
Concepts: refine design, refine through iteration  
Relationship: Both concepts relate to the process of improving the software through user feedback and iterative design practices.  
Criteria: Designers propose usability changes and discuss the iterative process of refining the product based on user input.  
Phrase: Refine design iteratively.

6. 
Concepts: acknowledgment and implementation, express agreement and confirm understanding  
Relationship: Both concepts involve recognition of user feedback and a shared understanding between users and designers.  
Criteria: Designers acknowledge user feedback and discuss plans for implementation, while users express agreement on shared priorities.  
Phrase: Acknowledge and implement feedback.

7. 
Concepts: appreciate user support, express gratitude  
Relationship: Both concepts highlight the mutual appreciation between users and designers for support and contributions.  
Criteria: Users and designers express gratitude for the software and support received, acknowledging each other's efforts.  
Phrase: Express gratitude for support.

8. 
Concepts: recognizing efforts, express user appreciation for feedback  
Relationship: Both concepts focus on users acknowledging and appreciating the efforts of designers in their interactions.  
Criteria: Users express gratitude for the designers' efforts and contributions during their interactions.  
Phrase: Recognize and appreciate efforts.

9. 
Concepts: reflect on experiences, discuss user experiences in education  
Relationship: Both concepts involve sharing and reflecting on experiences related to the software in educational contexts.  
Criteria: Designers and users discuss and reflect on their past experiences and challenges with the software in educational settings.  
Phrase: Reflect on educational experiences.

10. 
Concepts: inquire about update status, inquiring about updates  
Relationship: Both concepts involve users seeking information about the status of software updates.  
Criteria: Users inquire about the status of updates and express curiosity regarding recent improvements made to the software.  
Phrase: Inquire about update status.

11. 
Concepts: describe limitations, clarify and acknowledge limitations  
Relationship: Both concepts focus on identifying and discussing the limitations of the software and its functionality.  
Criteria: Users highlight system limitations while designers clarify and acknowledge these limitations and potential issues.  
Phrase: Clarify software limitations.
---