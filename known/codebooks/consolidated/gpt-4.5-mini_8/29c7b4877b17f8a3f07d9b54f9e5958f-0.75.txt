You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (19 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
19. 
Concepts: {Repeat the input 19}
Relationship: {What is logical relationship between concepts in code 19, or N/A if not applicable}
Criteria: {Who did what, and how for code 19}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: express understanding, seek and respond to clarifications
- A designer expresses understanding of a user’s needs or concerns by requesting further clarification.
- Designers seek and respond to clarification requests to enhance understanding.

2.
Concepts: respond to user input, show designer responsiveness
- Designers respond to user feedback and issues, demonstrating engagement.
- Designers respond to user questions and feedback, indicating attentiveness to user needs.

3.
Concepts: question user identity, inquire about user roles and background
- Designers seek to identify the professional background or role of community members.
- Designers inquire about users' roles to better understand their needs in the community.

4.
Concepts: invite and elicit feedback, prompt and encourage feedback
- Designers actively invite and solicit feedback from users for future updates.
- Designers prompt users for feedback to foster a collaborative environment.

5.
Concepts: design discussion, discuss feature development
- The designer discusses aspects of design and feature development in response to community needs.
- Designer engages in a discussion about potential features and their implementation.

6.
Concepts: communicate ongoing work and progress, share visual updates and development information
- Designers share status and complexity information about ongoing development work.
- Designers share visual updates and information regarding feature development.

7.
Concepts: announce internal and component updates, announce software updates and releases
- Designers inform users about updates to the software's features and components.
- Designers announce updates and releases to inform users about improvements and new features.

8.
Concepts: user communication, communication of updates
- Designer communicates updates and timelines for software releases to users.
- Instances where designers communicate updates, release schedules, or new features to users.

9.
Concepts: communicate development timelines, share timelines and communicate release plans
- Designers communicate updates about software development progress and release timelines.
- Designers communicate timelines and plans for software updates to keep the community informed.

10.
Concepts: provide community updates and announcements, communicate development and software updates
- Designers communicate updates and plans regarding software to the community.
- Designers provide updates about the current status and future plans for the software.

11.
Concepts: version update notes, share version details and updates
- Designers provide detailed notes on updates, including new features and improvements.
- Designers provide comprehensive information about features and updates in each software version.

12.
Concepts: confirm feature updates, confirm and promise future features
- Confirmation from the designer regarding planned features or updates.
- Designers assure users about the implementation of desired future features.

13.
Concepts: commit to improvement, accept and implement suggestions
- Designers express commitment to improving the software based on user feedback and support.
- Designers acknowledge user suggestions and commit to implementing them in updates.

14.
Concepts: collaborative planning, discuss and open future planning
- Designers and users collaboratively discussing and planning the development of the software.
- Designers and users discuss future developments and directions for the software.

15.
Concepts: feature guidance, provide user guidance and instructions
- Designers give instructions regarding features or operations that users need to follow for effective use.
- Designers provide instructions on how to operate new functionalities effectively.

16.
Concepts: express gratitude and acknowledgment, appreciate and acknowledge community support
- Users and designers express gratitude for contributions and acknowledge each other's efforts.
- Designers and users express and acknowledge support within the community.

17.
Concepts: seek help and support, request and seek guidance
- Users express the need for additional support in using the software effectively.
- Users request guidance or instructions on specific features of the software.

18.
Concepts: ask a question, inquiry and request clarification
- Users or designers pose questions to clarify operational details or functionalities of the software.
- Users ask questions and seek clarification on specific software topics.

19.
Concepts: share reviews and feedback, share user experiences
- Users share positive reviews and comparative feedback about the software's usability.
- Users share their experiences and opinions about using the software and its impact on their teaching or learning.
===
---
Definitions for each code (19 in total):
1.
Concepts: express understanding, seek and respond to clarifications  
Relationship: Designers express understanding by seeking clarification to enhance comprehension.  
Criteria: Designers request clarifications to demonstrate their understanding of user needs and respond to these requests to deepen their knowledge.  
Phrase: Clarify users' needs.

2.
Concepts: respond to user input, show designer responsiveness  
Relationship: Designers actively respond to user feedback to demonstrate engagement and attentiveness.  
Criteria: Designers engage with user input by addressing feedback and inquiries to highlight their responsiveness.  
Phrase: Engage with user feedback.

3.
Concepts: question user identity, inquire about user roles and background  
Relationship: Designers seek to understand user profiles to tailor community interactions.  
Criteria: Designers inquire about users’ roles and backgrounds to better address their needs within the community.  
Phrase: Identify user roles.

4.
Concepts: invite and elicit feedback, prompt and encourage feedback  
Relationship: Designers facilitate user feedback collection to foster collaboration.  
Criteria: Designers actively solicit and encourage user feedback to create an inclusive development environment.  
Phrase: Solicit user feedback.

5.
Concepts: design discussion, discuss feature development  
Relationship: Discussions on design and feature development are initiated in response to community needs.  
Criteria: Designers engage in conversations about design aspects and features to align with community preferences.  
Phrase: Discuss design features.

6.
Concepts: communicate ongoing work and progress, share visual updates and development information  
Relationship: Sharing information about ongoing work enhances transparency regarding development.  
Criteria: Designers communicate progress and share visual updates to keep the community informed about development efforts.  
Phrase: Share development updates.

7.
Concepts: announce internal and component updates, announce software updates and releases  
Relationship: Announcements serve to keep users informed about software improvements and changes.  
Criteria: Designers inform users about updates and releases to ensure they are aware of new features and enhancements.  
Phrase: Announce software updates.

8.
Concepts: user communication, communication of updates  
Relationship: Effective communication ensures users are aware of developments and timelines.  
Criteria: Designers communicate updates and release schedules to keep users informed about software changes.  
Phrase: Communicate updates.

9.
Concepts: communicate development timelines, share timelines and communicate release plans  
Relationship: Timely communication of plans helps manage user expectations regarding software releases.  
Criteria: Designers share timelines and updates about development to keep the community informed.  
Phrase: Share release timelines.

10.
Concepts: provide community updates and announcements, communicate development and software updates  
Relationship: Providing updates enhances community engagement and awareness.  
Criteria: Designers communicate current status and future plans regarding software to the community.  
Phrase: Provide community updates.

11.
Concepts: version update notes, share version details and updates  
Relationship: Detailed notes enhance user understanding of software changes.  
Criteria: Designers provide comprehensive information about version updates to inform users of new features.  
Phrase: Share version details.

12.
Concepts: confirm feature updates, confirm and promise future features  
Relationship: Confirmation and assurances build user trust in the development process.  
Criteria: Designers confirm planned features and assure users about future implementations.  
Phrase: Confirm feature updates.

13.
Concepts: commit to improvement, accept and implement suggestions  
Relationship: Commitment to improvement reflects responsiveness to user feedback.  
Criteria: Designers express commitment to incorporating user suggestions in software updates.  
Phrase: Implement user suggestions.

14.
Concepts: collaborative planning, discuss and open future planning  
Relationship: Collaborative discussions foster a sense of community ownership in development.  
Criteria: Designers and users engage in discussions for future software planning and development.  
Phrase: Collaborate on planning.

15.
Concepts: feature guidance, provide user guidance and instructions  
Relationship: Guidance helps users effectively utilize software functionalities.  
Criteria: Designers provide instructions to assist users in effectively using software features.  
Phrase: Provide usage guidance.

16.
Concepts: express gratitude and acknowledgment, appreciate and acknowledge community support  
Relationship: Acknowledgment strengthens community ties and encourages further contributions.  
Criteria: Designers and users express gratitude and acknowledge each other’s contributions within the community.  
Phrase: Acknowledge community support.

17.
Concepts: seek help and support, request and seek guidance  
Relationship: Seeking support emphasizes the collaborative nature of the community.  
Criteria: Users request guidance and support to enhance their experience with the software.  
Phrase: Request user support.

18.
Concepts: ask a question, inquiry and request clarification  
Relationship: Inquiries facilitate understanding and address uncertainties within the community.  
Criteria: Users and designers pose questions to clarify software functionalities.  
Phrase: Pose clarifying questions.

19.
Concepts: share reviews and feedback, share user experiences  
Relationship: Sharing experiences enriches community knowledge and informs future improvements.  
Criteria: Users share their feedback and experiences to provide insights on software usability and impact.  
Phrase: Share user experiences.
---