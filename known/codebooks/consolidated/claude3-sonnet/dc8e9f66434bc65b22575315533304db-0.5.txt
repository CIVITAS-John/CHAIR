You are an expert in thematic analysis. 
Each code is a cluster of multiple qualitative sub-code. If a sub-code includes another, use the broader one. If sub-codes are parallel, write one that covers both.
Write clear and generalizable labels and criteria for each code, informed by the context, and without unnecessary specifics or examples.
Find a theory-informed category for each code. Use 2-4 words for categories and avoid over-generalization (e.g. "social interaction" instead of "interaction", "communication approach" instead of "communication").
The research question is: How did Physics Lab's online community emerge? (through the lens of learning sciences, human-computer interaction, and participatory design)
Always follow the output format:
---
Categories: 
* {Name some categories you identified from the research question and theoretical lens}

Definitions for each code (21 in total):
1.
Relationship: {The logical relationship between sub-codes in code 1}
Criteria: {Consolidated criteria of code 1}
Label: {A consolidated label of code 1}
Category: {2-4 words for code 1}
...
21.
Relationship: {The logical relationship between sub-codes in code 21}
Criteria: {Consolidated criteria of code 21}
Label: {A consolidated label of code 21}
Category: {2-4 words for code 21}
---
~~~
1. design guidance, design requirements.
- Designers providing guidance or suggestions related to the design.
- Specifying requirements or desired features for the design.

2. design suggestion, seeking design inspiration.
- Suggesting a design feature or modification.
- Seeking inspiration or ideas from existing designs.

3. participatory design, community designer interaction.
- Evidence of participatory design practices or user involvement.
- Interactions or exchanges between community members and designers.

4. designer response, designer input.
- A designer responding to users' comments or questions.
- Input, perspective or information provided by the designer or developer.

5. discussing design, designer perspective.
- Discussing aspects related to the design.
- Designers sharing their perspectives or thought processes.

6. cpu, computer architecture.
- Referring to central processing units (CPUs)
- Discussing aspects related to computer architecture.

7. troubleshooting, technical issue.
- Troubleshooting problems or issues encountered while using the software.
- Indicating an issue or problem with the technical aspects or functionality.

8. technical details, technical explanation.
- Detailed or specific technical information or specifications.
- Explaining technical concepts or how something works.

9. simplifying explanations, conceptual explanations.
- Simplifying a concept, task or approach to explain it better
- Statements explaining, clarifying or providing additional information about concepts

10. simplicity, design simplification.
- Emphasizing simplicity or straightforward approaches
- Proposing a simplified design approach, often humorous

11. component inquiry, component clarification.
- Inquiring about specific components or concepts
- Clarifications or additional information about a component or concept.

12. component references, component comparison.
- Mentioning or suggesting the use of particular components
- Comparisons or contrasts between different components or elements.

13. light sensors, light sources.
- Mentions of light sensors or light-sensitive components.
- Statements discussing light bulbs or sources of illumination

14. existing software, existing solution.
- Mentions of existing software or tools.
- Referring to an existing solution or approach.

15. software updates, software version.
- Indicating a system or software update has occurred
- Mentioning or inquiring about different software versions.

16. software capabilities, software availability.
- Capabilities or features of software.
- Availability or lack of software for a particular purpose.

17. software comparison, software recommendation.
- Comparing different software tools or solutions.
- Recommending software or tools.

18. design constraint, appreciating design constraints.
- Mentioning constraints or limitations related to the design.
- Appreciating or acknowledging design constraints or limitations

19. device constraint, acknowledging user constraint.
- Identifying constraints imposed by a device or hardware.
- Acknowledging or validating a user's stated constraint or limitation

20. software limitation, computational limitation.
- Discussing limitations or issues with the current software implementation.
- Acknowledging computational limitations or constraints.

21. identifying limitation, acknowledging limitations.
- Identifying or acknowledging a limitation or constraint.
- Acknowledging personal limitations or lack of knowledge about a topic
===
---
Categories:
* Design process
* Technical concepts
* Hardware components  
* Software tools
* Constraints and limitations

Definitions for each code (21 in total):

1. 
Relationship: Design suggestions and requirements
Criteria: Statements providing design guidance, desired features or requirements
Label: Design input
Category: Design process

2.
Relationship: Seeking design inspiration 
Criteria: Suggestions for design modifications or seeking ideas from existing designs
Label: Design ideation  
Category: Design process

3. 
Relationship: User involvement in design
Criteria: Evidence of participatory design practices or interactions between users and designers
Label: Participatory design
Category: Design process

4.
Relationship: Designer's perspective
Criteria: Designers responding to users, providing input or sharing their viewpoint
Label: Designer feedback
Category: Design process

5.  
Relationship: Discussing design aspects
Criteria: Discussions related to the design or designers explaining their thought process
Label: Design discourse
Category: Design process

6.
Relationship: Computer hardware 
Criteria: Referring to central processing units (CPUs) or computer architecture
Label: Computer components
Category: Hardware components

7.
Relationship: Resolving technical issues
Criteria: Troubleshooting problems or indicating technical issues with functionality
Label: Technical troubleshooting
Category: Technical concepts

8.
Relationship: Explaining technical details
Criteria: Providing detailed technical information, specifications or explanations
Label: Technical explanations  
Category: Technical concepts

9. 
Relationship: Clarifying concepts
Criteria: Simplifying explanations or providing additional conceptual information
Label: Conceptual clarification
Category: Technical concepts

10.
Relationship: Simplifying design
Criteria: Emphasizing simplicity or proposing simplified design approaches
Label: Design simplification
Category: Design process  

11.
Relationship: Inquiring about components
Criteria: Asking about specific components or seeking clarification
Label: Component inquiry
Category: Hardware components

12.  
Relationship: Referencing components
Criteria: Mentioning, suggesting or comparing different components
Label: Component reference
Category: Hardware components

13.
Relationship: Light-related components
Criteria: Mentions of light sensors, light-sensitive components or light sources
Label: Optical components
Category: Hardware components

14. 
Relationship: Existing solutions
Criteria: Referring to existing software, tools or approaches
Label: Existing solutions
Category: Software tools

15.
Relationship: Software updates
Criteria: Indicating software updates or mentioning different versions
Label: Software updates
Category: Software tools

16.
Relationship: Software capabilities
Criteria: Discussing software features, capabilities or availability
Label: Software capabilities
Category: Software tools  

17.
Relationship: Evaluating software
Criteria: Comparing different software or recommending tools
Label: Software evaluation
Category: Software tools

18.
Relationship: Design constraints
Criteria: Mentioning constraints or limitations related to design
Label: Design constraints
Category: Constraints and limitations

19. 
Relationship: User constraints
Criteria: Identifying constraints imposed by devices or acknowledging user limitations
Label: User constraints
Category: Constraints and limitations  

20.
Relationship: Software and computational constraints
Criteria: Discussing limitations of current software or computational constraints
Label: Software limitations
Category: Constraints and limitations

21.
Relationship: Acknowledging limitations
Criteria: Identifying limitations or acknowledging lack of knowledge
Label: Limitation awareness
Category: Constraints and limitations

---