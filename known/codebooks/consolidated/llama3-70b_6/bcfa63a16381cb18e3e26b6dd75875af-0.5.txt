You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (32 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
32. 
Concepts: {Repeat the input 32}
Relationship: {What is logical relationship between concepts in code 32, or N/A if not applicable}
Criteria: {Who did what, and how for code 32}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: allowing manual editing, acknowledging manual editing
- Designer allows or plans to allow manual editing in the software.
- A designer acknowledges or mentions the possibility of manual editing.

2.
Concepts: future feature planning, promising manual editing option
- Planning for future manual editing features
- Promising to include a manual editing option in future updates.

3.
Concepts: feature customization, offering customization options
- Designer acknowledges user control over software features.
- Offering options for customizing the software or its components.

4.
Concepts: manual adjustment, highlighting manual options
- Offers or discussions about manual adjustment options or customization.
- A designer or developer highlights manual adjustment options for a feature.

5.
Concepts: quality control, prioritizing quality
- Emphasis on quality control, testing, or refinement.
- Prioritizing quality or excellence in a design or development process.

6.
Concepts: emphasizing quality, valuing craftsmanship and perfection
- Emphasizing the importance of quality or perfection in a product or feature.
- Statements emphasize the importance of craftsmanship and striving for perfection.

7.
Concepts: highlighting design priorities, emphasizing good design and quality layouts
- Designer highlights or prioritizes certain design aspects, such as auto-generated content.
- Designers emphasize the importance of a well-designed auto-generated layout.

8.
Concepts: ongoing refinement, focusing on continuous improvement
- Emphasizing the importance of regular updates and refinements based on user feedback.
- Statements highlighting the software's focus on continuous improvement and frequent updates.

9.
Concepts: promoting iterative refinement, promoting and contributing to design refinement
- Promoting or encouraging iterative refinement or improvement.
- Users or designers suggest or emphasize the importance of refinement or improvement.

10.
Concepts: acknowledging optimization efforts, expressing gratitude and commitment
- Designer acknowledges optimization efforts.
- A designer expresses gratitude and commitment to improvement.

11.
Concepts: promise to improve, improving user interface
- The designer promises to improve the software or its features.
- The designer discusses or plans to improve the user interface of the software.

12.
Concepts: prioritizing local export, consider local export functionality
- Designers or developers prioritize or mention the importance of local export functionality.
- Designer considers or plans to support local export functionality in the software.

13.
Concepts: highlighting benefits, explaining feature importance
- The designer explains the benefits or value of a feature and justifies its development.
- Explaining or justifying the importance of a specific feature or development.

14.
Concepts: highlighting new features, describing innovative features
- The designer highlights or showcases a new feature or capability of the platform.
- The designer describes or demonstrates novel or innovative features.

15.
Concepts: promoting new features, introducing new components
- Designers promote new features or updates.
- Designers introduce new components or features to the product.

16.
Concepts: highlighting ideal components, highlighting component capabilities
- Designer highlights ideal components or features.
- The designer highlights the capabilities or features of a component or tool.

17.
Concepts: sharing workarounds, acknowledging workarounds
- The designer shares workarounds and troubleshooting tips.
- The designer acknowledges a workaround.

18.
Concepts: technical workaround, technical troubleshooting
- Providing a technical workaround or solution to a problem.
- Shares a personal experience or workaround related to a specific technical issue.

19.
Concepts: addressing bug fixes, noting potential bugs
- Designers or developers address or fix bugs, issues, or errors in the application.
- A designer or administrator notes potential bugs or issues with the software or online community.

20.
Concepts: self-help, self-directed resource access
- User takes initiative to find solutions or resources.
- User finds or accesses resources independently

21.
Concepts: promoting problem solving, promoting problem-solving
- A designer promotes problem-solving or experimentation.
- Designers or developers promote or highlight the problem-solving capabilities of the application.

22.
Concepts: proposing design solutions, proposing a solution
- Proposing design solutions or ideas
- Suggesting a potential solution or approach to a problem or challenge.

23.
Concepts: providing user perspective, understanding user perspective
- User provides a perspective or insight based on their experience.
- The designer seeks to understand a user's perspective or experience.

24.
Concepts: providing user context, informing design considerations
- Statements that provide context, background, or information about users, their needs, or their environments.
- Users inform design considerations by providing context for design constraints.

25.
Concepts: inquire about context, seeking user information, seeking context for feedback
- Designers inquire about user context to show interest.
- Seeking information about the user's environment or context.
- A user or designer seeks context or clarification about the other's background or experience.

26.
Concepts: user background interest, inquiring about user background
- Designer shows interest in a user's background or experience.
- A designer inquires about a user's profession or role to understand their context and inquires about a user's identity or role to understand their context.

27.
Concepts: gathering user feedback, gathering user requirements
- Designers gather feedback and solicit user input.
- Designers request specific requirements or features from users and ask about user needs or preferences for future iterations.

28.
Concepts: fulfilling user requests, incorporating user feedback
- Designer fulfills a user request or implements a feature based on user feedback.
- Designer considers user suggestions and requests and considers incorporating user feedback to improve the software.

29.
Concepts: respond to advice, accepting suggestions
- Designers respond to user advice or feedback and adapt to suggestions.
- Designers agree to implement user suggestions or requests.

30.
Concepts: identifying ui challenges, inquiring about user issues
- The designer or user identifies and discusses potential usability challenges in the user interface.
- Designers inquire about user issues and probe for user difficulties and ask about specific problems or issues encountered by users.

31.
Concepts: ensuring user needs, ensuring user satisfaction, ensuring proper operation
- A designer or administrator ensures that user needs are being met or addressed.
- Designer ensures user satisfaction or happiness with the software.
- Designer ensures proper operation or usage of the software.

32.
Concepts: catering to user needs, aligning with user needs
- The designer prioritizes or caters to user needs and requirements.
- The designer aligns the software with user needs and requirements.
===
Here are the definitions for each code:

---
1.
Concepts: allowing manual editing, acknowledging manual editing
Relationship: Manual editing is acknowledged as a possibility or planned feature.
Criteria: Designer allows or plans to allow manual editing in the software.
Phrase: Allowing manual editing.

2.
Concepts: future feature planning, promising manual editing option
Relationship: Future feature planning involves promising manual editing options.
Criteria: Planning for future manual editing features and promising to include a manual editing option in future updates.
Phrase: Planning manual editing features.

3.
Concepts: feature customization, offering customization options
Relationship: Customization options are offered to provide user control.
Criteria: Designer acknowledges user control over software features and offers options for customizing the software or its components.
Phrase: Offering customization options.

4.
Concepts: manual adjustment, highlighting manual options
Relationship: Manual adjustment options are highlighted or discussed.
Criteria: Offers or discussions about manual adjustment options or customization and a designer or developer highlights manual adjustment options for a feature.
Phrase: Highlighting manual options.

5.
Concepts: quality control, prioritizing quality
Relationship: Quality is prioritized in the design or development process.
Criteria: Emphasis on quality control, testing, or refinement, and prioritizing quality or excellence in a design or development process.
Phrase: Prioritizing quality.

6.
Concepts: emphasizing quality, valuing craftsmanship and perfection
Relationship: Quality is emphasized as a core value.
Criteria: Emphasizing the importance of quality or perfection in a product or feature, and statements emphasize the importance of craftsmanship and striving for perfection.
Phrase: Emphasizing quality.

7.
Concepts: highlighting design priorities, emphasizing good design and quality layouts
Relationship: Design priorities are highlighted, emphasizing good design and quality layouts.
Criteria: Designer highlights or prioritizes certain design aspects, such as auto-generated content, and designers emphasize the importance of a well-designed auto-generated layout.
Phrase: Highlighting design priorities.

8.
Concepts: ongoing refinement, focusing on continuous improvement
Relationship: Ongoing refinement is focused on continuous improvement.
Criteria: Emphasizing the importance of regular updates and refinements based on user feedback, and statements highlighting the software's focus on continuous improvement and frequent updates.
Phrase: Focusing on continuous improvement.

9.
Concepts: promoting iterative refinement, promoting and contributing to design refinement
Relationship: Iterative refinement is promoted and contributed to.
Criteria: Promoting or encouraging iterative refinement or improvement, and users or designers suggest or emphasize the importance of refinement or improvement.
Phrase: Promoting iterative refinement.

10.
Concepts: acknowledging optimization efforts, expressing gratitude and commitment
Relationship: Optimization efforts are acknowledged with gratitude and commitment.
Criteria: Designer acknowledges optimization efforts, and a designer expresses gratitude and commitment to improvement.
Phrase: Acknowledging optimization efforts.

11.
Concepts: promise to improve, improving user interface
Relationship: A promise to improve is made, focusing on the user interface.
Criteria: The designer promises to improve the software or its features, and the designer discusses or plans to improve the user interface of the software.
Phrase: Promising to improve.

12.
Concepts: prioritizing local export, consider local export functionality
Relationship: Local export functionality is prioritized or considered.
Criteria: Designers or developers prioritize or mention the importance of local export functionality, and designer considers or plans to support local export functionality in the software.
Phrase: Prioritizing local export.

13.
Concepts: highlighting benefits, explaining feature importance
Relationship: Benefits are highlighted, explaining feature importance.
Criteria: The designer explains the benefits or value of a feature and justifies its development, and explaining or justifying the importance of a specific feature or development.
Phrase: Highlighting benefits.

14.
Concepts: highlighting new features, describing innovative features
Relationship: New features are highlighted, describing innovative features.
Criteria: The designer highlights or showcases a new feature or capability of the platform, and the designer describes or demonstrates novel or innovative features.
Phrase: Highlighting new features.

15.
Concepts: promoting new features, introducing new components
Relationship: New features are promoted, introducing new components.
Criteria: Designers promote new features or updates, and designers introduce new components or features to the product.
Phrase: Promoting new features.

16.
Concepts: highlighting ideal components, highlighting component capabilities
Relationship: Ideal components are highlighted, showcasing capabilities.
Criteria: Designer highlights ideal components or features, and the designer highlights the capabilities or features of a component or tool.
Phrase: Highlighting ideal components.

17.
Concepts: sharing workarounds, acknowledging workarounds
Relationship: Workarounds are shared and acknowledged.
Criteria: The designer shares workarounds and troubleshooting tips, and the designer acknowledges a workaround.
Phrase: Sharing workarounds.

18.
Concepts: technical workaround, technical troubleshooting
Relationship: Technical workarounds are provided, troubleshooting technical issues.
Criteria: Providing a technical workaround or solution to a problem, and shares a personal experience or workaround related to a specific technical issue.
Phrase: Providing technical workarounds.

19.
Concepts: addressing bug fixes, noting potential bugs
Relationship: Bug fixes are addressed, noting potential bugs.
Criteria: Designers or developers address or fix bugs, issues, or errors in the application, and a designer or administrator notes potential bugs or issues with the software or online community.
Phrase: Addressing bug fixes.

20.
Concepts: self-help, self-directed resource access
Relationship: Users take initiative for self-help and resource access.
Criteria: User takes initiative to find solutions or resources, and user finds or accesses resources independently.
Phrase: Accessing resources independently.

21.
Concepts: promoting problem solving, promoting problem-solving
Relationship: Problem-solving is promoted as a capability.
Criteria: A designer promotes problem-solving or experimentation, and designers or developers promote or highlight the problem-solving capabilities of the application.
Phrase: Promoting problem-solving.

22.
Concepts: proposing design solutions, proposing a solution
Relationship: Design solutions are proposed, suggesting a solution.
Criteria: Proposing design solutions or ideas, and suggesting a potential solution or approach to a problem or challenge.
Phrase: Proposing design solutions.

23.
Concepts: providing user perspective, understanding user perspective
Relationship: User perspective is provided and understood.
Criteria: User provides a perspective or insight based on their experience, and the designer seeks to understand a user's perspective or experience.
Phrase: Providing user perspective.

24.
Concepts: providing user context, informing design considerations
Relationship: User context is provided, informing design considerations.
Criteria: Statements that provide context, background, or information about users, their needs, or their environments, and users inform design considerations by providing context for design constraints.
Phrase: Providing user context.

25.
Concepts: inquire about context, seeking user information, seeking context for feedback
Relationship: Context is inquired about, seeking user information and feedback.
Criteria: Designers inquire about user context to show interest, seeking information about the user's environment or context, and a user or designer seeks context or clarification about the other's background or experience.
Phrase: Inquiring about context.

26.
Concepts: user background interest, inquiring about user background
Relationship: User background is inquired about, showing interest.
Criteria: Designer shows interest in a user's background or experience, and a designer inquires about a user's profession or role to understand their context and inquires about a user's identity or role to understand their context.
Phrase: Inquiring about user background.

27.
Concepts: gathering user feedback, gathering user requirements
Relationship: User feedback and requirements are gathered.
Criteria: Designers gather feedback and solicit user input, and designers request specific requirements or features from users and ask about user needs or preferences for future iterations.
Phrase: Gathering user feedback.

28.
Concepts: fulfilling user requests, incorporating user feedback
Relationship: User requests are fulfilled, incorporating feedback.
Criteria: Designer fulfills a user request or implements a feature based on user feedback, and designer considers user suggestions and requests and considers incorporating user feedback to improve the software.
Phrase: Fulfilling user requests.

29.
Concepts: respond to advice, accepting suggestions
Relationship: Advice is responded to, accepting suggestions.
Criteria: Designers respond to user advice or feedback and adapt to suggestions, and designers agree to implement user suggestions or requests.
Phrase: Responding to advice.

30.
Concepts: identifying ui challenges, inquiring about user issues
Relationship: UI challenges are identified, inquiring about user issues.
Criteria: The designer or user identifies and discusses potential usability challenges in the user interface, and designers inquire about user issues and probe for user difficulties and ask about specific problems or issues encountered by users.
Phrase: Identifying ui challenges.

31.
Concepts: ensuring user needs, ensuring user satisfaction, ensuring proper operation
Relationship: User needs are ensured, ensuring satisfaction and proper operation.
Criteria: A designer or administrator ensures that user needs are being met or addressed, designer ensures user satisfaction or happiness with the software, and designer ensures proper operation or usage of the software.
Phrase: Ensuring user needs.

32.
Concepts: catering to user needs, aligning with user needs
Relationship: User needs are catered to, aligning with user needs.
Criteria: The designer prioritizes or caters to user needs and requirements, and the designer aligns the software with user needs and requirements.
Phrase: Catering to user needs.