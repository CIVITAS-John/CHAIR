You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (32 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
32. 
Concepts: {Repeat the input 32}
Relationship: {What is logical relationship between concepts in code 32, or N/A if not applicable}
Criteria: {Who did what, and how for code 32}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: resources sharing, facilitates access to resources
- Designer shares resources or provides access to information
- A designer facilitates access to resources and provides access.

2.
Concepts: practicality, highlights practical application
- Highlights the practicality or usefulness of the software, often in comparison to other tools.
- User or designer highlights the practical applications or benefits of the software.

3.
Concepts: evaluating software practicality, evaluating software usability
- A user evaluates software and appreciates its practicality.
- Feedback or evaluation is provided on the usability or practicality of the software.

4.
Concepts: demonstrating self-reliance, demonstrating independence
- User demonstrates self-reliance and problem-solving skills.
- Demonstrating independence or self-sufficiency in finding resources or information.

5.
Concepts: promotes convenience, expresses desire for convenience, advocating for user convenience
- User promotes the value of convenience in the software's design.
- User expresses a desire for convenience or ease of use.
- A user advocates for convenience or ease of use in the online community.

6.
Concepts: highlighting usability, convenience highlighting
- A user highlights the usability or effectiveness of the software.
- A user highlights the convenience of a feature or functionality.

7.
Concepts: offers solutions, propose potential solution
- Offering solutions or suggestions to overcome obstacles or challenges.
- Suggesting a potential solution or approach to a problem or issue.

8.
Concepts: sharing workarounds, offering workarounds
- Designers share workarounds or solutions to common issues or problems.
- A designer offers or identifies workarounds or temporary solutions to issues, addressing user needs.

9.
Concepts: promoting problem-solving, demonstrating problem-solving
- A designer promotes problem-solving or provides guidance.
- User or designer demonstrates problem-solving skills or suggests solutions.

10.
Concepts: seeking peer help, offers or seeks help
- Designer seeks help or assistance from a peer or community member.
- A designer or user initiates an offer of help or politely seeks assistance.

11.
Concepts: offers guidance, providing feature guidance
- A designer or user offers guidance or advice.
- A designer provides guidance on how to access or use a specific feature or platform.

12.
Concepts: provides instructions, providing equipment instructions
- Provides step-by-step instructions or guidance on how to accomplish a task.
- A designer provides instructions or steps for using a specific tool or device.

13.
Concepts: sharing version information, providing version details
- Sharing information about software versions or updates.
- A person provides detailed information about a system or software, often including features or updates.

14.
Concepts: explaining version type, clarifies version details
- Designer explains the type or version of a product.
- Designer clarifies software version information.

15.
Concepts: user understanding, building understanding
- Ensures users understand specific features, concepts, or changes to the software.
- The designer helps build understanding of the software's features.

16.
Concepts: explaining component behavior, providing feature explanations, explaining technical artifacts
- Designer explains how a component or feature is expected to behave.
- A designer provides feature explanations and explains their significance.
- A designer explains the purpose or functionality of a technical artifact.

17.
Concepts: uses visual aids, facilitating user input through visuals
- User or designer uses visual aids to communicate or illustrate a point.
- The speaker uses visuals to facilitate user input or feedback.

18.
Concepts: visual communication, share visual reference
- Using images to communicate or share information.
- Sharing a visual aid to facilitate understanding or discussion

19.
Concepts: showcasing software functionality, highlighting problem-solving capabilities
- Designers explain or showcase software functionality and capabilities.
- Designers highlight the problem-solving capabilities of the software, demonstrating its potential.

20.
Concepts: highlighting software benefits, highlighting software features and components
- A designer highlights software benefits to demonstrate its value.
- A designer highlights and outlines software features and components.

21.
Concepts: highlighting design improvements, highlighting update significance
- A designer highlights or showcases improvements to users.
- A designer highlights the significance or importance of an update.

22.
Concepts: showcasing progress, showcasing innovations
- A designer showcases progress.
- A designer showcases innovative features or technologies.

23.
Concepts: provides examples, illustrates technical points
- Designer provides examples or illustrations.
- Designer demonstrates technical expertise.

24.
Concepts: context sharing, explaining situation
- A user shares context or background information.
- Users explain a situation or context or provide context or background information about their situation.

25.
Concepts: provide background information, provide context for future interactions
- Providing background information or context about oneself or one's experience.
- User provides information about their background or context that sets the stage for future interactions.

26.
Concepts: sharing technical context, providing context for software use
- Sharing technical context or information about a specific system or environment.
- Providing context or background information about the use of specific software or tools.

27.
Concepts: context provision, providing theoretical context
- Provides context or background information to help others understand a topic or issue.
- Provides theoretical context or background information on a concept or idea.

28.
Concepts: clarification response, responding to a question
- Responding to a question or clarification request from a user.
- User responds to a question or provides information about themselves.

29.
Concepts: elaboration, elaborating on question, additional information
- Providing additional details or explanation to clarify a point.
- User elaborates or provides more information about a question or topic.
- Providing additional information or clarification on a topic.

30.
Concepts: self-rebut previous response, elaborating on responses
- Designer corrects or rebuts their previous response.
- Designers elaborate on responses, adding specific details or criteria to clarify their previous responses.

31.
Concepts: emphasizing importance, highlights significance
- Emphasizes the importance of a task, feature, or concept.
- Highlighting the significance or importance of something

32.
Concepts: impact emphasis, highlight progress
- Emphasizing the significance or impact of an update or feature.
- Highlighting or emphasizing the significance or impact of a change or update.
===
Here are the definitions for each code:

---
1.
Concepts: resources sharing, facilitates access to resources
Relationship: Resources sharing leads to facilitating access to resources.
Criteria: A designer shares resources or provides access to information, facilitating access to resources.
Phrase: Shares resources and facilitates access.

2.
Concepts: practicality, highlights practical application
Relationship: Highlighting practicality emphasizes the usefulness of the software.
Criteria: A user or designer highlights the practical applications or benefits of the software.
Phrase: Highlights practical applications.

3.
Concepts: evaluating software practicality, evaluating software usability
Relationship: Evaluating practicality and usability are interconnected aspects of software evaluation.
Criteria: A user evaluates software and appreciates its practicality and usability.
Phrase: Evaluates software practicality and usability.

4.
Concepts: demonstrating self-reliance, demonstrating independence
Relationship: Demonstrating self-reliance implies independence in finding resources or information.
Criteria: A user demonstrates self-reliance and problem-solving skills, showcasing independence.
Phrase: Demonstrates self-reliance and independence.

5.
Concepts: promotes convenience, expresses desire for convenience, advocating for user convenience
Relationship: Promoting convenience, expressing desire for convenience, and advocating for user convenience are interconnected aspects of convenience.
Criteria: A user promotes the value of convenience in the software's design, expresses a desire for convenience, and advocates for convenience.
Phrase: Advocates for user convenience.

6.
Concepts: highlighting usability, convenience highlighting
Relationship: Highlighting usability and convenience are interconnected aspects of software usability.
Criteria: A user highlights the usability or effectiveness of the software, emphasizing convenience.
Phrase: Highlights usability and convenience.

7.
Concepts: offers solutions, propose potential solution
Relationship: Offering solutions implies proposing potential solutions to overcome obstacles or challenges.
Criteria: A designer or user offers solutions or suggests a potential solution to a problem or issue.
Phrase: Offers solutions to problems.

8.
Concepts: sharing workarounds, offering workarounds
Relationship: Sharing workarounds implies offering temporary solutions to common issues or problems.
Criteria: A designer shares workarounds or solutions to common issues or problems, addressing user needs.
Phrase: Shares workarounds and solutions.

9.
Concepts: promoting problem-solving, demonstrating problem-solving
Relationship: Promoting problem-solving implies demonstrating problem-solving skills or suggesting solutions.
Criteria: A designer promotes problem-solving or provides guidance, demonstrating problem-solving skills.
Phrase: Promotes problem-solving and guidance.

10.
Concepts: seeking peer help, offers or seeks help
Relationship: Seeking peer help implies offering or seeking assistance from a peer or community member.
Criteria: A designer seeks help or assistance from a peer or community member, or initiates an offer of help.
Phrase: Seeks or offers help from peers.

11.
Concepts: offers guidance, providing feature guidance
Relationship: Offering guidance implies providing guidance on how to access or use a specific feature or platform.
Criteria: A designer or user offers guidance or advice, providing guidance on feature usage.
Phrase: Offers guidance and advice.

12.
Concepts: provides instructions, providing equipment instructions
Relationship: Providing instructions implies providing step-by-step guidance on how to accomplish a task.
Criteria: A designer provides instructions or steps for using a specific tool or device.
Phrase: Provides instructions and guidance.

13.
Concepts: sharing version information, providing version details
Relationship: Sharing version information implies providing detailed information about a system or software.
Criteria: A person shares information about software versions or updates, providing detailed information.
Phrase: Shares version information and details.

14.
Concepts: explaining version type, clarifies version details
Relationship: Explaining version type implies clarifying software version information.
Criteria: A designer explains the type or version of a product, clarifying software version information.
Phrase: Explains and clarifies version details.

15.
Concepts: user understanding, building understanding
Relationship: Ensuring user understanding implies building understanding of the software's features.
Criteria: A designer ensures users understand specific features, concepts, or changes to the software, building understanding.
Phrase: Ensures user understanding and builds knowledge.

16.
Concepts: explaining component behavior, providing feature explanations, explaining technical artifacts
Relationship: Explaining component behavior implies providing feature explanations and explaining technical artifacts.
Criteria: A designer explains how a component or feature is expected to behave, providing feature explanations and technical artifact explanations.
Phrase: Explains component behavior and technical artifacts.

17.
Concepts: uses visual aids, facilitating user input through visuals
Relationship: Using visual aids implies facilitating user input or feedback through visuals.
Criteria: A user or designer uses visual aids to communicate or illustrate a point, facilitating user input or feedback.
Phrase: Uses visual aids to facilitate input.

18.
Concepts: visual communication, share visual reference
Relationship: Visual communication implies sharing visual references to facilitate understanding or discussion.
Criteria: A user or designer uses images to communicate or share information, sharing a visual aid to facilitate understanding or discussion.
Phrase: Communicates visually and shares references.

19.
Concepts: showcasing software functionality, highlighting problem-solving capabilities
Relationship: Showcasing software functionality implies highlighting problem-solving capabilities.
Criteria: Designers explain or showcase software functionality and capabilities, highlighting problem-solving capabilities.
Phrase: Showcases software functionality and problem-solving capabilities.

20.
Concepts: highlighting software benefits, highlighting software features and components
Relationship: Highlighting software benefits implies highlighting software features and components.
Criteria: A designer highlights software benefits to demonstrate its value, outlining software features and components.
Phrase: Highlights software benefits and features.

21.
Concepts: highlighting design improvements, highlighting update significance
Relationship: Highlighting design improvements implies highlighting the significance or importance of an update.
Criteria: A designer highlights or showcases improvements to users, highlighting the significance or importance of an update.
Phrase: Highlights design improvements and update significance.

22.
Concepts: showcasing progress, showcasing innovations
Relationship: Showcasing progress implies showcasing innovative features or technologies.
Criteria: A designer showcases progress, highlighting innovative features or technologies.
Phrase: Showcases progress and innovations.

23.
Concepts: provides examples, illustrates technical points
Relationship: Providing examples implies illustrating technical points or demonstrating technical expertise.
Criteria: A designer provides examples or illustrations, demonstrating technical expertise.
Phrase: Provides examples and illustrates technical points.

24.
Concepts: context sharing, explaining situation
Relationship: Context sharing implies explaining a situation or context or providing context or background information.
Criteria: A user shares context or background information, explaining a situation or context.
Phrase: Shares context and explains situation.

25.
Concepts: provide background information, provide context for future interactions
Relationship: Providing background information implies providing context for future interactions.
Criteria: Providing background information or context about oneself or one's experience, setting the stage for future interactions.
Phrase: Provides background information and context.

26.
Concepts: sharing technical context, providing context for software use
Relationship: Sharing technical context implies providing context or background information about the use of specific software or tools.
Criteria: Sharing technical context or information about a specific system or environment, providing context for software use.
Phrase: Shares technical context and provides software context.

27.
Concepts: context provision, providing theoretical context
Relationship: Context provision implies providing theoretical context or background information on a concept or idea.
Criteria: Provides context or background information to help others understand a topic or issue, providing theoretical context.
Phrase: Provides context and theoretical background.

28.
Concepts: clarification response, responding to a question
Relationship: Clarification response implies responding to a question or clarification request from a user.
Criteria: Responding to a question or clarification request from a user, providing information about themselves.
Phrase: Responds to questions and clarifies.

29.
Concepts: elaboration, elaborating on question, additional information
Relationship: Elaboration implies providing additional details or explanation to clarify a point.
Criteria: Providing additional details or explanation to clarify a point, elaborating on a question or topic.
Phrase: Elaborates and provides additional information.

30.
Concepts: self-rebut previous response, elaborating on responses
Relationship: Self-rebutting previous response implies elaborating on responses, adding specific details or criteria.
Criteria: A designer corrects or rebuts their previous response, elaborating on responses and adding specific details or criteria.
Phrase: Elaborates and corrects previous responses.

31.
Concepts: emphasizing importance, highlights significance
Relationship: Emphasizing importance implies highlighting the significance or importance of a task, feature, or concept.
Criteria: Emphasizes the importance of a task, feature, or concept, highlighting its significance.
Phrase: Emphasizes importance and highlights significance.

32.
Concepts: impact emphasis, highlight progress
Relationship: Impact emphasis implies highlighting the significance or impact of an update or feature.
Criteria: Emphasizing the significance or impact of an update or feature, highlighting progress.
Phrase: Emphasizes impact and highlights progress.