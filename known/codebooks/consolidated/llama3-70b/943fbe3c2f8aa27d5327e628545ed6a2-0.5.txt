You are an expert in thematic analysis. 
Each code is a cluster of multiple qualitative sub-code. First, determine the logical relationship between concepts. If a concept includes another, use the broader one. If concepts are parallel, try to cover both concepts.
Write clear and generalizable labels and criteria for each merged code, informed by the context, and without unnecessary specifics or examples.
Find a theory-informed category for each code. Use 2-4 words for categories and avoid over-generalization.
The research question is: How did Physics Lab's online community emerge? (through the lens of learning sciences, human-computer interaction, and participatory design)
Always follow the output format:
---
Categories: 
* {Name some categories you identified from the research question and theoretical lens}

Definitions for each code (6 in total):
1. {Repeat the input 1}
Relationship: {The logical relationship between concepts in input 1}
Criteria: {A sentence of consolidated criteria for code 1}
Label: {A consolidated label of code 1}
Category: {2-4 words for code 1}
...
6. {Repeat the input 6}
Relationship: {The logical relationship between concepts in input 6}
Criteria: {A sentence of consolidated criteria for code 6}
Label: {A consolidated label of code 6}
Category: {2-4 words for code 6}
---
~~~
1. system capabilities, technical capabilities.
- Referring to the capabilities of a network or operating system.
- Discussion of technical capabilities or limitations.

2. affordances, technological affordances.
- The perceived and actual capabilities of the software that enable users to accomplish their tasks.
- Discussions or descriptions of digital tools, platforms, or features.

3. conceptual scaffolding, scaffolding and support.
- Software features supporting conceptual understanding of physics principles.
- Discussions or descriptions of support systems, guidance, or scaffolding for users.

4. providing resources, access to resources.
- Instances where the designer provides resources or guidance to users.
- Discussing or mentioning access to resources, systems, or information, including providing information about accessing the software.

5. simplicity and simplification, simplicity vs. complexity.
- Emphasizing the importance of simplicity.
- Discussion points that highlight the balance between making the tool simple for regular use and adding complex features for enhanced functionality.

6. practical solution, practical applications.
- Offers a practical or feasible solution to a problem.
- How the software can be used effectively in real-world scenarios.
===
Here is the output:

---
Categories: 
* System Design
* User Experience
* Support Systems
* Resource Access
* Design Principles
* Practical Applications

Definitions for each code:

1. system capabilities, technical capabilities.
Relationship: Inclusive (technical capabilities is a subset of system capabilities)
Criteria: Referring to the capabilities of a network or operating system, including technical capabilities or limitations.
Label: System Capabilities
Category: System Design

2. affordances, technological affordances.
Relationship: Parallel (both concepts are related to capabilities of digital tools)
Criteria: Discussions or descriptions of digital tools, platforms, or features, including perceived and actual capabilities.
Label: Technological Affordances
Category: User Experience

3. conceptual scaffolding, scaffolding and support.
Relationship: Inclusive (scaffolding and support is a subset of conceptual scaffolding)
Criteria: Software features supporting conceptual understanding of physics principles, including discussions or descriptions of support systems or guidance.
Label: Conceptual Scaffolding
Category: Support Systems

4. providing resources, access to resources.
Relationship: Parallel (both concepts are related to access to resources)
Criteria: Discussing or mentioning access to resources, systems, or information, including providing information about accessing the software.
Label: Resource Access
Category: Resource Access

5. simplicity and simplification, simplicity vs. complexity.
Relationship: Inclusive (simplicity vs. complexity is a subset of simplicity and simplification)
Criteria: Emphasizing the importance of simplicity, including discussion points that highlight the balance between simplicity and complexity.
Label: Simplicity and Complexity
Category: Design Principles

6. practical solution, practical applications.
Relationship: Inclusive (practical applications is a subset of practical solution)
Criteria: Offers a practical or feasible solution to a problem, including how the software can be used effectively in real-world scenarios.
Label: Practical Solutions
Category: Practical Applications