You are an expert in thematic analysis. 
Each code is a cluster of multiple qualitative sub-code. First, determine the logical relationship between concepts. If a concept includes another, use the broader one. If concepts are parallel, try to cover both concepts.
Write clear and generalizable labels and criteria for each merged code, informed by the context, and without unnecessary specifics or examples.
Find a theory-informed category for each code. Use 2-4 words for categories and avoid over-generalization.
The research question is: How did Physics Lab's online community emerge? (through the lens of learning sciences, human-computer interaction, and participatory design)
Always follow the output format:
---
Categories: 
* {Name some categories you identified from the research question and theoretical lens}

Definitions for each code (12 in total):
1. {Repeat the input 1}
Relationship: {The logical relationship between concepts in input 1}
Criteria: {A sentence of consolidated criteria for code 1}
Label: {A consolidated label of code 1}
Category: {2-4 words for code 1}
...
12. {Repeat the input 12}
Relationship: {The logical relationship between concepts in input 12}
Criteria: {A sentence of consolidated criteria for code 12}
Label: {A consolidated label of code 12}
Category: {2-4 words for code 12}
---
~~~
1. affordances, learning affordances.
- The perceived and actual capabilities of the software that enable users to accomplish their tasks.
- Features or aspects of the software that encourage active learning, experimentation, or facilitate conceptual understanding.

2. emojis, emojis and informal communication.
- Use of emojis in communication.
- Use of emojis or informal language that adds a personal touch to the interaction.

3. establishing norms, social norms.
- Statements that help establish group norms or expectations.
- Instances of community members establishing or reinforcing social norms within the group.

4. image sharing, content sharing.
- Instances where participants share or discuss sharing images.
- Group members actively share information, resources, and content within the online community, facilitated by the technical aspects of the software.

5. file sharing, sharing download links.
- Members share or request access to files or resources within the group.
- The designer provides instructions on where to find the download links.

6. collaborative effort, collaboration and consultation.
- Indications of a collaborative effort between the designer and users in developing or improving the software.
- Designer soliciting input or feedback from community members.

7. compatibility concerns, compatibility discussions.
- Discussions or considerations about the software's compatibility with different operating systems and hardware.
- Conversations on Physics Lab's compatibility with various operating systems, devices, and browsers.

8. software limitations, technical limitations.
- Mentions of usability issues, constraints, or limitations of the software in supporting learning or usability.
- Instances where technical limitations or constraints are discussed, including specific contexts in which the software is used.

9. platform updates, platform updates and user-centered design.
- Designers sharing information about changes or updates to the Physics Lab platform.
- This code captures the designer's efforts to keep the community informed about platform updates and their commitment to incorporating user feedback into the design and development process.

10. prioritization, content prioritization.
- Designers explaining the order in which they will address different sections or features.
- Conversations on prioritizing specific sections of the platform for development.

11. response to requests, inquiries and responses.
- Designers respond to user requests, providing feedback or guidance.
- Instances where participants ask questions to gain information or clarify doubts and receive responses.

12. feedback integration, incorporating feedback.
- Instances where user feedback is actively integrated into the software development process, leading to changes or updates.
- The designer considers and incorporates feedback and suggestions from group members and stakeholders into the design and development process.
===
---
Categories: 
* Community Building
* Software Development
* User Experience
* Learning and Instruction
* Communication and Feedback

Definitions for each code:

1. affordances, learning affordances.
Relationship: Inclusion (learning affordances is a type of affordance)
Criteria: The software's capabilities that enable users to accomplish tasks and facilitate learning.
Label: Software Affordances
Category: User Experience

2. emojis, emojis and informal communication.
Relationship: Parallel (both concepts are related to informal communication)
Criteria: The use of emojis or informal language to add a personal touch to interactions.
Label: Informal Communication
Category: Communication and Feedback

3. establishing norms, social norms.
Relationship: Inclusion (social norms is a type of norm)
Criteria: Statements that establish or reinforce group norms or expectations.
Label: Establishing Norms
Category: Community Building

4. image sharing, content sharing.
Relationship: Inclusion (image sharing is a type of content sharing)
Criteria: Group members sharing information, resources, or content within the online community.
Label: Content Sharing
Category: Community Building

5. file sharing, sharing download links.
Relationship: Inclusion (sharing download links is a type of file sharing)
Criteria: Members sharing or requesting access to files or resources within the group.
Label: File Sharing
Category: Community Building

6. collaborative effort, collaboration and consultation.
Relationship: Parallel (both concepts are related to collaboration)
Criteria: Collaborative efforts between the designer and users in developing or improving the software.
Label: Collaborative Development
Category: Software Development

7. compatibility concerns, compatibility discussions.
Relationship: Inclusion (compatibility discussions is a type of compatibility concern)
Criteria: Discussions about the software's compatibility with different operating systems and hardware.
Label: Compatibility Concerns
Category: Software Development

8. software limitations, technical limitations.
Relationship: Inclusion (technical limitations is a type of software limitation)
Criteria: Mentions of usability issues, constraints, or limitations of the software in supporting learning or usability.
Label: Software Limitations
Category: User Experience

9. platform updates, platform updates and user-centered design.
Relationship: Inclusion (platform updates and user-centered design is a type of platform update)
Criteria: Designers sharing information about changes or updates to the Physics Lab platform.
Label: Platform Updates
Category: Software Development

10. prioritization, content prioritization.
Relationship: Inclusion (content prioritization is a type of prioritization)
Criteria: Designers explaining the order in which they will address different sections or features.
Label: Prioritization
Category: Software Development

11. response to requests, inquiries and responses.
Relationship: Parallel (both concepts are related to responding to requests)
Criteria: Designers respond to user requests, providing feedback or guidance.
Label: Responding to Requests
Category: Communication and Feedback

12. feedback integration, incorporating feedback.
Relationship: Inclusion (incorporating feedback is a type of feedback integration)
Criteria: User feedback is actively integrated into the software development process, leading to changes or updates.
Label: Feedback Integration
Category: Software Development