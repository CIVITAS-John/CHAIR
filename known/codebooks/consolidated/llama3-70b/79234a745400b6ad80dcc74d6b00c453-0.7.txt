You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (24 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
24. 
Concepts: {Repeat the input 24}
Relationship: {What is logical relationship between concepts in code 24, or N/A if not applicable}
Criteria: {Who did what, and how for code 24}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: system compatibility mention, system compatibility clarification
- Mentioning compatibility with a specific system or platform.
- Clarifying the compatibility of a system or tool with specific hardware or software configurations.

2.
Concepts: suggests system compatibility, expressing hope for compatibility
- The user suggests that a specific system (e.g. Win7) should be compatible.
- A user expresses a hope or expectation for compatibility with a specific system or version.

3.
Concepts: explores compatibility options, speculating about compatibility
- User or designer explores options for compatibility with different systems or platforms.
- The designer speculates about the compatibility of the software with specific devices or systems.

4.
Concepts: theoretical compatibility, mentions theoretical compatibility requirements for the software
- Designer states theoretical compatibility or limitations.
- The designer mentions theoretical compatibility requirements for the software, such as hardware specifications.

5.
Concepts: considers xp compatibility, system compatibility consideration
- Designer considers or discusses XP compatibility or other legacy system issues.
- Considering system compatibility for older systems.

6.
Concepts: considers offline functionality, offline functionality considerations
- Designer considers the possibility of offline functionality or internet connectivity.
- Considering or discussing potential offline functionality or limitations.

7.
Concepts: prioritizing offline support, recognizing need for offline functionality
- Prioritizing offline support and functionality
- The speaker recognizes the need for offline functionality or support.

8.
Concepts: seeking platform accessibility, requesting multi-platform support or expressing interest in cross-platform access
- A user requests access to the software on a specific platform or device.
- A user requests multi-platform support, expresses interest in accessing the software on multiple devices, or expresses interest in cross-platform access.

9.
Concepts: considering local export, recognizing feature needs
- The designer considers supporting local export functionality.
- The designer recognizes the need for a specific feature, such as local export.

10.
Concepts: gathering user requirements, recognizing requirements
- Designers gather and solicit user needs.
- Recognizing or identifying design requirements or needs.

11.
Concepts: highlighting regional needs, identifies regional user needs
- The participant (user) highlights regional or local needs or requirements.
- Identifies a specific need or requirement from a particular region or user group.

12.
Concepts: establishing system boundaries, defining technical requirements
- The designer sets or clarifies boundaries or limitations of the system.
- Designers define technical requirements and establish software limitations.

13.
Concepts: exploring technical requirements, discussing technical possibilities
- Exploring technical requirements and limitations
- Designer or user discusses technical possibilities or limitations.

14.
Concepts: feasibility assessment, considering implementation constraints
- Assessing the feasibility of an idea or feature
- Considerations of the feasibility or practicality of implementing a feature.

15.
Concepts: reveals environmental constraints, sharing environmental constraints
- User reveals environmental constraints or limitations.
- A user shares environmental constraints or limitations in the online community.

16.
Concepts: technical explanation, explaining constraints, explaining constraint
- Explains technical constraints or limitations.
- Explaining limitations, constraints, or challenges faced by the development team.
- A user explains the reason behind a specific constraint or limitation.

17.
Concepts: explaining technical constraints, highlighting technical challenges
- Users explain technical constraints and classroom limitations.
- The user discusses technical challenges or limitations related to using Physics Lab in educational settings.

18.
Concepts: sharing technical constraints, highlighting software limitations and technical constraints
- The speaker shares technical constraints or limitations that affect the development or use of the software.
- A user highlights software limitations and technical constraints.

19.
Concepts: explaining purpose or limitations, addressing and explaining limitations
- The designer explains the purpose or limitations of a specific feature or tool.
- The designer addresses and explains system limitations to users.

20.
Concepts: highlights challenges, highlighting and revealing design constraints
- The designer highlights UI and design challenges to users.
- A designer highlights and reveals design constraints.

21.
Concepts: challenge highlighting, highlights potential obstacles
- Highlights challenges or difficulties faced.
- A person highlights potential obstacles or challenges.

22.
Concepts: consider hardware limitations, technical limitation acknowledgment
- Comments that consider the limitations or constraints of hardware or software.
- Acknowledging limitations or constraints of a system or feature.

23.
Concepts: frustration, frustration with current features
- User or designer expresses frustration or annoyance.
- Expressing frustration or dissatisfaction with current software or features.

24.
Concepts: product gap identification, identifying gap in existing tools
- Identifies a gap or limitation in the product.
- User identifies a gap or limitation in existing tools or software.
===
Here are the definitions for each code:

---
1.
Concepts: system compatibility mention, system compatibility clarification
Relationship: Clarification is a more detailed explanation of the mention.
Criteria: Users mention or clarify system compatibility.
Phrase: Mentions system compatibility.

2.
Concepts: suggests system compatibility, expressing hope for compatibility
Relationship: Suggesting implies a hope for compatibility.
Criteria: Users suggest or express hope for system compatibility.
Phrase: Suggests system compatibility.

3.
Concepts: explores compatibility options, speculating about compatibility
Relationship: Exploration leads to speculation about possibilities.
Criteria: Designers or users explore and speculate about compatibility options.
Phrase: Explores compatibility options.

4.
Concepts: theoretical compatibility, mentions theoretical compatibility requirements for the software
Relationship: Theoretical compatibility implies meeting requirements.
Criteria: Designers mention theoretical compatibility requirements.
Phrase: Mentions theoretical compatibility.

5.
Concepts: considers xp compatibility, system compatibility consideration
Relationship: Consideration implies a thought process about compatibility.
Criteria: Designers consider XP or legacy system compatibility.
Phrase: Considers system compatibility.

6.
Concepts: considers offline functionality, offline functionality considerations
Relationship: Consideration implies a thought process about offline functionality.
Criteria: Designers consider offline functionality or internet connectivity.
Phrase: Considers offline functionality.

7.
Concepts: prioritizing offline support, recognizing need for offline functionality
Relationship: Prioritizing implies recognition of a need.
Criteria: Designers prioritize offline support and recognize the need.
Phrase: Prioritizes offline support.

8.
Concepts: seeking platform accessibility, requesting multi-platform support or expressing interest in cross-platform access
Relationship: Seeking implies a request or interest in accessibility.
Criteria: Users request or express interest in multi-platform support.
Phrase: Seeks platform accessibility.

9.
Concepts: considering local export, recognizing feature needs
Relationship: Consideration implies recognition of a need.
Criteria: Designers consider and recognize the need for local export functionality.
Phrase: Considers local export.

10.
Concepts: gathering user requirements, recognizing requirements
Relationship: Gathering implies recognition of user needs.
Criteria: Designers gather and recognize user requirements.
Phrase: Gathers user requirements.

11.
Concepts: highlighting regional needs, identifies regional user needs
Relationship: Highlighting implies identification of regional needs.
Criteria: Users highlight and identify regional needs.
Phrase: Highlights regional needs.

12.
Concepts: establishing system boundaries, defining technical requirements
Relationship: Establishing implies definition of technical requirements.
Criteria: Designers establish and define technical requirements.
Phrase: Establishes system boundaries.

13.
Concepts: exploring technical requirements, discussing technical possibilities
Relationship: Exploration implies discussion of technical possibilities.
Criteria: Designers explore and discuss technical requirements.
Phrase: Explores technical requirements.

14.
Concepts: feasibility assessment, considering implementation constraints
Relationship: Assessment implies consideration of implementation constraints.
Criteria: Designers assess feasibility and consider implementation constraints.
Phrase: Assesses feasibility.

15.
Concepts: reveals environmental constraints, sharing environmental constraints
Relationship: Revealing implies sharing of environmental constraints.
Criteria: Users reveal and share environmental constraints.
Phrase: Reveals environmental constraints.

16.
Concepts: technical explanation, explaining constraints, explaining constraint
Relationship: Explanation implies a clarification of constraints.
Criteria: Users or designers explain technical constraints.
Phrase: Explains technical constraints.

17.
Concepts: explaining technical constraints, highlighting technical challenges
Relationship: Explanation implies highlighting of technical challenges.
Criteria: Users explain and highlight technical challenges.
Phrase: Explains technical constraints.

18.
Concepts: sharing technical constraints, highlighting software limitations and technical constraints
Relationship: Sharing implies highlighting of technical constraints.
Criteria: Users share and highlight technical constraints.
Phrase: Shares technical constraints.

19.
Concepts: explaining purpose or limitations, addressing and explaining limitations
Relationship: Explanation implies addressing and explaining limitations.
Criteria: Designers explain and address limitations.
Phrase: Explains purpose or limitations.

20.
Concepts: highlights challenges, highlighting and revealing design constraints
Relationship: Highlighting implies revealing of design constraints.
Criteria: Designers highlight and reveal design constraints.
Phrase: Highlights challenges.

21.
Concepts: challenge highlighting, highlights potential obstacles
Relationship: Highlighting implies revealing of potential obstacles.
Criteria: Users highlight potential obstacles.
Phrase: Highlights challenges.

22.
Concepts: consider hardware limitations, technical limitation acknowledgment
Relationship: Consideration implies acknowledgment of limitations.
Criteria: Designers consider and acknowledge hardware limitations.
Phrase: Considers hardware limitations.

23.
Concepts: frustration, frustration with current features
Relationship: Frustration implies dissatisfaction with current features.
Criteria: Users or designers express frustration with current features.
Phrase: Expresses frustration.

24.
Concepts: product gap identification, identifying gap in existing tools
Relationship: Identification implies recognition of a gap.
Criteria: Users identify gaps in existing tools or software.
Phrase: Identifies product gaps.