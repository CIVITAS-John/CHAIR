You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (24 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
24. 
Concepts: {Repeat the input 24}
Relationship: {What is logical relationship between concepts in code 24, or N/A if not applicable}
Criteria: {Who did what, and how for code 24}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: considering accessibility, consider user accessibility
- The designer considers accessibility in software development.
- A designer considers user accessibility by suggesting a feature that caters to users' needs.

2.
Concepts: designer consideration, show consideration
- Designer 1 shows consideration or empathy towards users.
- Designer shows consideration or empathy towards users, acknowledging their concerns or needs.

3.
Concepts: broader implications, considering broader implications
- Designer questions the broader implications of an issue.
- Designer considers broader implications of software design.

4.
Concepts: show understanding, demonstrating understanding
- A designer or community member shows understanding or acknowledgement of a concern or idea.
- A designer demonstrates understanding of a specific concept or issue.
- A user shows understanding or agreement with a concept or idea.

5.
Concepts: reflective thinking, contemplation expression
- A designer engages in reflective thinking or consideration.
- A designer expresses contemplation or thoughtfulness.

6.
Concepts: consideration of local export, recognized need for local export
- The designer considers local export functionality.
- Designer recognizes the need for local export or offline capabilities.

7.
Concepts: consider technical requirements, practical constraint consideration
- A designer considers technical requirements or limitations.
- A designer considers practical constraints or limitations.

8.
Concepts: explaining software functionality, explain bidirectional conversion benefits, explaining bidirectional conversion
- The designer explains a feature of bidirectional conversion.
- Designer explains benefits of bidirectional conversion
- A designer explains the concept or functionality of bidirectional conversion.

9.
Concepts: clarify user interactions, clarifies touch screen functionality
- Designer explains how users can interact with specific features or components.
- A designer clarifies how a feature or functionality works, especially in relation to touch screens.

10.
Concepts: clarifying software features, clarify software capabilities
- The designer clarifies a feature.
- The designer clarifies software capabilities or features.

11.
Concepts: clarify purpose, clarify functionality
- A designer clarifies the purpose or functionality of a feature.
- Designer clarifies how a feature or component works.

12.
Concepts: enhancing user experience, clarifying user experience
- The designer enhances user experience with clarity.
- Enhancing user experience through design improvements.
- A designer clarifies or explains a user's experience.

13.
Concepts: guide user understanding, enhancing user understanding, facilitating user understanding
- A designer guides users in understanding updated resources or features.
- Designer enhances user understanding through additional explanations.
- Designer facilitates user understanding through explanations or instructions.

14.
Concepts: explaining existing features, informing about existing features
- Designer explains existing features or functionality.
- Designers inform about existing features.

15.
Concepts: explaining design benefits, emphasize utility of features
- Explaining the benefits or advantages of a design or feature.
- The designer highlights the benefits or advantages of a feature.

16.
Concepts: feature significance, feature importance explanation
- Explaining the importance or benefits of a feature or functionality.
- A designer explains the importance or rationale behind a specific software feature.

17.
Concepts: practical problem-solving, promotes practical application
- Designer promotes practical problem-solving using the application.
- Designer promotes the practical application of the software.

18.
Concepts: practical applications, software functionality
- A designer explains or illustrates the practical applications or benefits of the software.
- A designer illustrates or explains the practical functionality or application of the software.

19.
Concepts: explain practical applications, explaining practical applications, illustrates practical application
- Designer explains how a feature can be applied in a practical context.
- Designer explains the practical application of a feature or tool
- A designer provides an example or illustration of how a feature or concept works in practice.

20.
Concepts: feature explanation, explaining functionality, explain application functionality, functionality explanation, designer explains feature, describe component functionality, functional explanation
- Designer explains specific features or functionalities.
- Designer explains the functionality of a component or feature.
- Designer explains how to use or apply a specific application feature.
- Designer or user explains the functionality or features of a tool or component.
- A designer explains the functionality or features of the software.
- Designer describes or explains the functionality of a specific component or feature.
- Designer explains the functionality of a feature.

21.
Concepts: provide examples, providing feature examples, provide feature example, illustrate feature functionality
- The designer provides examples or illustrations to help explain a concept or feature.
- Designer provides examples of software features.
- The designer provides an example or illustration of a feature.
- Designer illustrates how a feature functions, providing examples or explanations.

22.
Concepts: proposing compromises, propose design compromise, propose compromise
- Designers propose compromises.
- A designer suggests a compromise or alternative design.
- A designer proposes a compromise or alternative solution.

23.
Concepts: propose design idea, designer proposes design change
- Designer proposes or suggests a design idea or feature.
- Proposals or suggestions for design changes or improvements, often from designers or developers.

24.
Concepts: self-correction, self-rebut the previous response
- Designer corrects or reconsiders their previous statement.
- The designer corrects or refutes their previous response or statement.
===
Here are the definitions for each code:

---
1.
Concepts: considering accessibility, consider user accessibility
Relationship: Accessibility is a consideration for user needs
Criteria: Designers consider accessibility to cater to users' needs
Phrase: Consider user accessibility

2.
Concepts: designer consideration, show consideration
Relationship: Designer empathy is shown through consideration
Criteria: Designers show consideration or empathy towards users' concerns
Phrase: Show consideration

3.
Concepts: broader implications, considering broader implications
Relationship: Broader implications are considered in software design
Criteria: Designers consider the broader implications of software design
Phrase: Consider broader implications

4.
Concepts: show understanding, demonstrating understanding
Relationship: Understanding is demonstrated through acknowledgement
Criteria: Designers or community members show understanding or acknowledgement of concerns
Phrase: Show understanding

5.
Concepts: reflective thinking, contemplation expression
Relationship: Reflective thinking is expressed through contemplation
Criteria: Designers engage in reflective thinking or consideration
Phrase: Engage in reflective thinking

6.
Concepts: consideration of local export, recognized need for local export
Relationship: Local export is recognized as a necessary feature
Criteria: Designers recognize the need for local export or offline capabilities
Phrase: Recognize need for local export

7.
Concepts: consider technical requirements, practical constraint consideration
Relationship: Technical requirements are considered in software design
Criteria: Designers consider technical requirements or limitations
Phrase: Consider technical requirements

8.
Concepts: explaining software functionality, explain bidirectional conversion benefits, explaining bidirectional conversion
Relationship: Functionality is explained through benefits and explanations
Criteria: Designers explain software functionality, benefits, or concepts
Phrase: Explain software functionality

9.
Concepts: clarify user interactions, clarifies touch screen functionality
Relationship: User interactions are clarified through feature explanations
Criteria: Designers explain how users can interact with specific features
Phrase: Clarify user interactions

10.
Concepts: clarifying software features, clarify software capabilities
Relationship: Software features are clarified through explanations
Criteria: Designers clarify software features or capabilities
Phrase: Clarify software features

11.
Concepts: clarify purpose, clarify functionality
Relationship: Purpose and functionality are clarified through explanations
Criteria: Designers clarify the purpose or functionality of features
Phrase: Clarify purpose

12.
Concepts: enhancing user experience, clarifying user experience
Relationship: User experience is enhanced through clarity
Criteria: Designers enhance user experience through clear explanations
Phrase: Enhance user experience

13.
Concepts: guide user understanding, enhancing user understanding, facilitating user understanding
Relationship: User understanding is facilitated through guidance
Criteria: Designers guide users in understanding updated resources or features
Phrase: Guide user understanding

14.
Concepts: explaining existing features, informing about existing features
Relationship: Existing features are explained through information
Criteria: Designers explain existing features or functionality
Phrase: Explain existing features

15.
Concepts: explaining design benefits, emphasize utility of features
Relationship: Benefits are explained through emphasis on utility
Criteria: Designers explain the benefits or advantages of a design
Phrase: Explain design benefits

16.
Concepts: feature significance, feature importance explanation
Relationship: Feature importance is explained through significance
Criteria: Designers explain the importance or benefits of a feature
Phrase: Explain feature significance

17.
Concepts: practical problem-solving, promotes practical application
Relationship: Practical problem-solving is promoted through application
Criteria: Designers promote practical problem-solving using the application
Phrase: Promote practical problem-solving

18.
Concepts: practical applications, software functionality
Relationship: Practical applications are explained through software functionality
Criteria: Designers explain the practical applications or benefits of the software
Phrase: Explain practical applications

19.
Concepts: explain practical applications, explaining practical applications, illustrates practical application
Relationship: Practical applications are explained through examples
Criteria: Designers explain how a feature can be applied in a practical context
Phrase: Explain practical applications

20.
Concepts: feature explanation, explaining functionality, explain application functionality, functionality explanation, designer explains feature, describe component functionality, functional explanation
Relationship: Features are explained through functionality explanations
Criteria: Designers explain specific features or functionalities
Phrase: Explain feature functionality

21.
Concepts: provide examples, providing feature examples, provide feature example, illustrate feature functionality
Relationship: Examples are provided to illustrate feature functionality
Criteria: Designers provide examples or illustrations to explain concepts or features
Phrase: Provide examples

22.
Concepts: proposing compromises, propose design compromise, propose compromise
Relationship: Compromises are proposed as alternative solutions
Criteria: Designers propose compromises or alternative design solutions
Phrase: Propose compromises

23.
Concepts: propose design idea, designer proposes design change
Relationship: Design ideas are proposed as improvements
Criteria: Designers propose design ideas or changes
Phrase: Propose design ideas

24.
Concepts: self-correction, self-rebut the previous response
Relationship: Previous responses are corrected through self-reflection
Criteria: Designers correct or reconsider their previous statements
Phrase: Engage in self-correction