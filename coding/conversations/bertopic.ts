import * as File from 'fs';
import { CodedThread, Conversation, Message } from '../../utils/schema.js';
import { BuildMessagePrompt, ConversationAnalyzer } from './conversations.js';
import { PythonShell } from 'python-shell';
import chalk from 'chalk';

/** BertopicAnalyzer: Conduct the first-round bertopic coding of the conversations. */
// Authored by John Chen.
export default class BertopicAnalyzer extends ConversationAnalyzer {
    /** Name: The name of the analyzer. */
    public Name: string = "bertopic";
    /** Codes: The codes generated by Bertopic. */
    private Codes: Record<string, string> = {};
    /** GetChunkSize: Get the chunk size and cursor movement for the LLM. */
    // Return value: [Chunk size, Cursor movement]
    public GetChunkSize(Recommended: number, Remaining: number) {
        return Remaining;
    }
    /** BatchPreprocess: Preprocess the conversations in batch. */
    public async BatchPreprocess(Conversations: Conversation[], Analyzed: CodedThread[]): Promise<void> {
        // Write the messages into the file.
        var Messages = Conversations.flatMap(Conversation => 
            Conversation.AllItems!.filter(Message => Message.Content.length > 0 && Message.Chunk == Conversation.ID));
        var Content = Messages.map(Message => BuildMessagePrompt(Message, undefined, undefined, true).replaceAll("\n", " "));
        File.writeFileSync("./known/temp.text", Content.join("\n"));
        // Run the Python script
        var Results: Record<number, { ID: number, Topic: string, Probability: number }>;
        await PythonShell.run(`coding/conversations/bertopic-impl.py`, {
            args: [Messages.length.toString()],
            parser: (Message) => {
                if (Message.startsWith("{")) {
                    Results = JSON.parse(Message);
                    for (var Result of Object.values(Results))
                        if (Result.Probability > 0)
                            this.Codes[Messages[Result.ID].ID] = Result.Topic;
                    console.log(JSON.stringify(Results, null, 4));
                } else {
                    console.log(chalk.gray(Message));
                }
            }
        });
    }
    /** ParseResponse: Parse the response from the LLM. */
    public async ParseResponse(Analysis: CodedThread, Lines: string[], Subunits: Message[], ChunkStart: number, Iteration: number): Promise<Record<number, string>> {
        var Results: Record<number, string> = {};
        for (var I = 0; I < Subunits.length; I++) {
            var Code = this.Codes[Subunits[I].ID] ?? "";
            // Sometimes, the code ends with a period
            if (Code.endsWith(".")) Code = Code.slice(0, -1);
            // Sometimes, the code is inside a quote
            if (Code.startsWith("\"") && Code.endsWith("\"")) Code = Code.slice(1, -1);
            Results[I + 1] = Code;
        }
        return Results;
    }
}