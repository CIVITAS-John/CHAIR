You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another and please do not merge them.
Determine the logical relationship between concepts within each code, such as inclusion, parallel, or intersection.
Write clear and generalizable criteria for each code and do not introduce unnecessary details. Then, write an accurate verb phrase as label for the combined concept.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (36 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Label: {A consolidated verb phrase of code 1}
...
36. 
Concepts: {Repeat the input 36}
Relationship: {What is logical relationship between concepts in code 36, or N/A if not applicable}
Criteria: {Who did what, and how for code 36}
Label: {A consolidated verb phrase of code 36}
---
~~~
1.
Concepts: promise future features, promise future perfection, confirm future features
- Designers promise to implement features or updates at a later time.
- A designer promising future perfection or improvement of a feature.
- Designers affirm and commit to including planned or requested features in future updates.

2.
Concepts: provide development roadmap, discuss development priorities
- Designers outline development priorities and the planned sequence of feature development.
- Designers discuss and indicate the order of development tasks or features.

3.
Concepts: set development goals, share development plans and goals
- Designers set and explain specific goals for software development and design focus areas.
- A designer shares information about the development plan, future plans, and goals.

4.
Concepts: internal update, discuss future updates
- Designers discuss internal updates and changes.
- Designers discuss and describe plans for future updates and potential developments.

5.
Concepts: discuss feature stability, communicate long-term benefits
- Designers discuss the long-term stability and importance of features.
- Designers discuss long-term planning and communicate the benefits of features over time.

6.
Concepts: list bug fixes and features, acknowledge potential issues
- Designers list specific bug fixes and new features in the app.
- Designers note and acknowledge potential bugs or issues in the software.

7.
Concepts: describe update scope, describe software update process
- Designers describe the nature, scope, and extent of software updates.
- Designers describe the update process and provide platform-specific update information.

8.
Concepts: discuss software constraints, discuss software limitations
- Designers discuss platform-specific and technical constraints of the software.
- Designers discuss and explain technical, system, and version limitations of the software.

9.
Concepts: specify system requirements, confirm system compatibility
- Designers specify system requirements and ensure compatibility of the software.
- Designers suggest checking and confirm compatibility with specific systems or versions.
- Designers confirm software alignment with user needs and discuss compatibility with different systems.

10.
Concepts: collaborative planning, discuss design decisions
- Designers and users collaboratively discussing and planning the development of the software.
- Designers and users discuss design ideas, decision-making processes, and interface layout.

11.
Concepts: visual and functional design, discuss design principles
- Discussions about the visual and functional aspects of the software.
- Designers discuss principles, instructional design, and usability features guiding the software.

12.
Concepts: simplify software design, suggest design simplification
- Efforts and discussions aimed at simplifying and refining software design.
- Designers refine or suggest simplifications to design elements.

13.
Concepts: access facilitation, provide access information
- The designer facilitates access to resources or information.
- Designers provide information on accessing development plans or download links.

14.
Concepts: user guidance, offer usage guidance
- A designer provides guidance or instructions for using the app.
- When designers provide guidance or instructions on how to use features.

15.
Concepts: explain technical details, describe component functionality
- Designers explain technical details and aspects of the development process.
- Designers describe the functionality of components and provide examples to explain features.

16.
Concepts: explain task complexity, discuss design challenges
- Designers explain the complexity of tasks and the impact on development timelines.
- Issues and obstacles faced by designers during the development process are explained.

17.
Concepts: gather user context, show interest in user context
- Designers seek context or background information from users to better understand their situations.
- Designers show interest in users' teaching contexts or backgrounds.

18.
Concepts: offer a solution, offer solutions
- Offering solutions to users' problems or requests.
- Designers offer help and share potential solutions or workarounds for problems.

19.
Concepts: inquire about issues, describe technical issues
- Users inquire about problems or technical issues they have encountered.
- Users describe technical issues and explain their situations or contexts.

20.
Concepts: agree on design ideas, confirm understanding
- Users or designers express agreement or concurrence on design ideas.
- Designers confirm statements, collaboration efforts, and mutual understanding with users.

21.
Concepts: propose usability improvements, provide feedback and suggest improvements
- Users suggest changes to improve software usability and workflow.
- Users provide feedback or suggestions for software improvements, and users or designers suggest new features, functionalities, or improvements for the software.

22.
Concepts: express feature needs, provide specific feedback
- Users express their needs for specific software features.
- Users state their preferences and provide specific feedback or suggestions.

23.
Concepts: invite user feedback, solicit user feedback
- Designers invite users to provide feedback, suggestions, or report issues.
- Users provide feedback and suggestions, and designers encourage and solicit this feedback.

24.
Concepts: further suggestion, suggest feature expansion
- A user suggests a refinement or improvement.
- Designers mention the expansion of features and suggest broader usability improvements.

25.
Concepts: show interest in development, compliment development progress
- Users show interest in development progress and respond positively to information from developers.
- Users compliment the development progress and express appreciation for the project's state and future plans.

26.
Concepts: demonstrate politeness, maintain polite communication
- Users demonstrate politeness and etiquette in their interactions.
- Users or designers maintain social norms and polite communication within the community.

27.
Concepts: followup, encourage community discussion
- Community members engage in follow-up discussions about a topic.
- Encouraging discussions within the community and promoting future questions or interactions.

28.
Concepts: foster open communication, promote group communication
- Designers encourage open communication and dialogue within the community.
- Designers facilitate information sharing and promote communication within the group.

29.
Concepts: express approval, provide positive software reviews
- Users express approval and provide positive feedback about features or ideas.
- Users provide positive reviews, express satisfaction, and compliment specific features of the software.

30.
Concepts: provide visual aids, using images to help demonstration
- Providing visual confirmation or clarification using images to support communication.
- A designer uses images to aid in their demonstration or explanation.

31.
Concepts: information seeking, request software assistance
- Users asking questions to gain knowledge or resources related to the software.
- Users seek assistance, request guidance, and inquire about software access and usage.

32.
Concepts: share teaching experience, share professional background
- Users share their teaching experience and background information.
- Users share their professional or personal background to establish credibility and context within the community.

33.
Concepts: confirm professional role, confirm professional identity
- A user confirms their professional role.
- Designers inquire about and confirm users' professional backgrounds and teaching levels.

34.
Concepts: justify suggestions, provide justified input
- Users provide reasoning or rationale behind their suggestions or requests.
- Users provide input, feedback, or suggestions along with justifications.

35.
Concepts: show appreciation, acknowledge assistance
- Users show appreciation for help or support, particularly from teachers.
- Users acknowledge and thank for assistance or information provided.

36.
Concepts: share user experiences, describe educational use cases
- Users highlight software effectiveness, student engagement, and share their experiences.
- Users describe scenarios and educational use cases for software features.
===
---
Definitions for each code (36 in total):
1.
Concepts: promise future features, promise future perfection, confirm future features
Relationship: Parallel
Criteria: Designers promise, affirm, or commit to implementing features or updates in future versions.
Label: Promise future updates

2.
Concepts: provide development roadmap, discuss development priorities
Relationship: Parallel
Criteria: Designers outline and discuss the sequence and priorities of feature development.
Label: Outline development roadmap

3.
Concepts: set development goals, share development plans and goals
Relationship: Parallel
Criteria: Designers set and share specific goals and plans for software development.
Label: Share development goals

4.
Concepts: internal update, discuss future updates
Relationship: Parallel
Criteria: Designers discuss internal changes and plans for future updates.
Label: Discuss updates

5.
Concepts: discuss feature stability, communicate long-term benefits
Relationship: Parallel
Criteria: Designers discuss the stability and long-term benefits of features.
Label: Communicate feature stability and benefits

6.
Concepts: list bug fixes and features, acknowledge potential issues
Relationship: Parallel
Criteria: Designers list specific bug fixes and new features, and acknowledge potential issues.
Label: Report bug fixes and features

7.
Concepts: describe update scope, describe software update process
Relationship: Parallel
Criteria: Designers describe the scope and process of software updates.
Label: Explain update process

8.
Concepts: discuss software constraints, discuss software limitations
Relationship: Inclusion
Criteria: Designers discuss technical and platform-specific constraints and limitations.
Label: Discuss software limitations

9.
Concepts: specify system requirements, confirm system compatibility
Relationship: Parallel
Criteria: Designers specify system requirements and confirm compatibility with different systems.
Label: Confirm system compatibility

10.
Concepts: collaborative planning, discuss design decisions
Relationship: Parallel
Criteria: Designers and users collaboratively plan and discuss design decisions.
Label: Collaborate on design planning

11.
Concepts: visual and functional design, discuss design principles
Relationship: Parallel
Criteria: Designers discuss visual, functional aspects, and principles guiding the software design.
Label: Discuss design principles

12.
Concepts: simplify software design, suggest design simplification
Relationship: Parallel
Criteria: Designers discuss and suggest simplifications to the software design.
Label: Suggest design simplifications

13.
Concepts: access facilitation, provide access information
Relationship: Parallel
Criteria: Designers facilitate access to resources and provide access information.
Label: Facilitate resource access

14.
Concepts: user guidance, offer usage guidance
Relationship: Parallel
Criteria: Designers provide guidance or instructions for using the software.
Label: Offer usage guidance

15.
Concepts: explain technical details, describe component functionality
Relationship: Parallel
Criteria: Designers explain technical details and describe the functionality of components.
Label: Explain technical details

16.
Concepts: explain task complexity, discuss design challenges
Relationship: Parallel
Criteria: Designers explain task complexity and discuss challenges faced during development.
Label: Discuss design challenges

17.
Concepts: gather user context, show interest in user context
Relationship: Parallel
Criteria: Designers seek and show interest in users' contexts and backgrounds.
Label: Gather user context

18.
Concepts: offer a solution, offer solutions
Relationship: Inclusion
Criteria: Designers offer solutions or workarounds to users' problems or requests.
Label: Offer solutions

19.
Concepts: inquire about issues, describe technical issues
Relationship: Parallel
Criteria: Users inquire about and describe technical issues they have encountered.
Label: Report technical issues

20.
Concepts: agree on design ideas, confirm understanding
Relationship: Parallel
Criteria: Users or designers express agreement on design ideas and confirm mutual understanding.
Label: Confirm design agreement

21.
Concepts: propose usability improvements, provide feedback and suggest improvements
Relationship: Inclusion
Criteria: Users suggest usability improvements and provide feedback for software enhancements.
Label: Propose usability improvements

22.
Concepts: express feature needs, provide specific feedback
Relationship: Parallel
Criteria: Users express needs for specific features and provide detailed feedback or suggestions.
Label: Express feature needs

23.
Concepts: invite user feedback, solicit user feedback
Relationship: Parallel
Criteria: Designers invite and solicit feedback, suggestions, or issue reports from users.
Label: Solicit user feedback

24.
Concepts: further suggestion, suggest feature expansion
Relationship: Parallel
Criteria: Users or designers suggest refinements, improvements, or feature expansions.
Label: Suggest feature expansion

25.
Concepts: show interest in development, compliment development progress
Relationship: Parallel
Criteria: Users show interest in and compliment the development progress.
Label: Compliment development progress

26.
Concepts: demonstrate politeness, maintain polite communication
Relationship: Parallel
Criteria: Users or designers maintain politeness and etiquette in their interactions.
Label: Maintain polite communication

27.
Concepts: followup, encourage community discussion
Relationship: Parallel
Criteria: Community members engage in follow-up discussions and encourage further dialogue.
Label: Encourage community discussion

28.
Concepts: foster open communication, promote group communication
Relationship: Parallel
Criteria: Designers encourage open and group communication within the community.
Label: Promote open communication

29.
Concepts: express approval, provide positive software reviews
Relationship: Parallel
Criteria: Users express approval and provide positive feedback or reviews about the software.
Label: Provide positive feedback

30.
Concepts: provide visual aids, using images to help demonstration
Relationship: Parallel
Criteria: Designers use images to aid in demonstrations or explanations.
Label: Use visual aids

31.
Concepts: information seeking, request software assistance
Relationship: Parallel
Criteria: Users seek information or assistance related to the software.
Label: Request software assistance

32.
Concepts: share teaching experience, share professional background
Relationship: Parallel
Criteria: Users share their teaching experiences or professional backgrounds.
Label: Share professional background

33.
Concepts: confirm professional role, confirm professional identity
Relationship: Inclusion
Criteria: Users or designers confirm professional roles and identities.
Label: Confirm professional identity

34.
Concepts: justify suggestions, provide justified input
Relationship: Parallel
Criteria: Users provide suggestions or input along with justifications.
Label: Justify suggestions

35.
Concepts: show appreciation, acknowledge assistance
Relationship: Parallel
Criteria: Users show appreciation and acknowledge assistance received.
Label: Acknowledge assistance

36.
Concepts: share user experiences, describe educational use cases
Relationship: Parallel
Criteria: Users share their experiences and describe educational use cases for the software.
Label: Share educational use cases