You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (40 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
40. 
Concepts: {Repeat the input 40}
Relationship: {What is logical relationship between concepts in code 40, or N/A if not applicable}
Criteria: {Who did what, and how for code 40}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: expressive, using non-verbal communication
- User or designer uses expressive language or emojis to convey emotion.
- Users express emotions or reactions using emojis in their communications.

2.
Concepts: maintaining politeness, demonstrating politeness
- Designers show empathy and politeness towards community members.
- Participants display polite behavior in their interactions.

3.
Concepts: greeting the community, initiating interactions
- Participants greet the community or each other.
- Participants reciprocate greetings or initiate interactions.

4.
Concepts: expressing agreement, confirming statements
- Participants express agreement with ideas or focus areas previously mentioned.
- Participants confirm or agree with statements or suggestions to acknowledge understanding or agreement.

5.
Concepts: acknowledging assistance, acknowledging community input
- Participants express gratitude for assistance, acknowledge statements, or recognize resolutions.
- Participants respond to community comments with appreciation or agreement.

6.
Concepts: providing responses, elaborating on responses
- Participants offer responses or replies to previous comments or questions.
- Participants elaborate on suggestions or responses to provide clarity.

7.
Concepts: encouraging discussions, encouraging community involvement
- Participants encourage discussions or reporting of issues within the community.
- Efforts are made to involve the community in decision-making or development processes.

8.
Concepts: sharing images, sharing visual updates
- Users share images as part of their communication.
- Participants share visual references or updates, often in image form.

9.
Concepts: share information, sharing within the group
- Instances where participants share information or resources to solve a problem or answer a question.
- Participants share information or suggest group sharing of resources.

10.
Concepts: planning iterative feedback, engaging in iterative development
- Planning or discussing iterative development based on user feedback.
- Designers discuss and implement ongoing improvements and updates based on feedback and testing.

11.
Concepts: responding to feedback, responding to user feedback
- Designers respond to feedback with plans for future updates.
- Designers acknowledge and respond to user feedback or suggestions.

12.
Concepts: sharing knowledge, collaborative learning
- Participants share technical knowledge or information for design considerations.
- A designer or user engages in sharing information for mutual learning.

13.
Concepts: resolving concerns, reach a conclusion
- Designers respond to and resolve user concerns.
- Designers concluding a solution based on user feedback.

14.
Concepts: acknowledging user input, express comprehension, agreeing with design ideas
- Designers acknowledge understanding of user input or experiences.
- Designers expressing their understanding and willingness to receive more detailed user requests.
- Users concur with design ideas or acknowledge the designer's point.

15.
Concepts: proposing features, suggesting collaboration
- Users suggest new features or changes to improve software usability.
- Users suggest ideas for collaboration or feature development.

16.
Concepts: justifying requests, explaining suggestions
- Users explain the reasons behind their requests or suggestions.
- Users provide reasons for their suggestions based on practical needs.

17.
Concepts: download instructions, providing update instructions
- Designers provide instructions on how to download the software.
- Designers provide updates, instructions, and download links to help users understand and use the software effectively.

18.
Concepts: asking follow-up questions, explain the intention of followup question
- Participants ask follow-up questions to gather more information about usage scenarios.
- Designers explain the rationale behind asking follow-up questions.

19.
Concepts: seeking clarification, requesting clarification
- Participants ask questions to seek clarification or information about requests.
- Users express uncertainty and request clarification on various topics.

20.
Concepts: making technical inquiries, show interest in technical details
- Users or developers ask technical questions about the platform or its use.
- A user shows interest in or asks about technical specifics.

21.
Concepts: seeking assistance, requesting support
- Users seek help or information related to the software.
- Users request guidance or technical support for using specific features.

22.
Concepts: describing update scope, describing update contents
- Designers describe the extent or scope of an update.
- Designers list or describe specific content included in updates and provide detailed update notes.

23.
Concepts: confirming ongoing updates, clarifying testing status
- Designers acknowledge points and confirm that updates are being developed.
- Designers indicate that a feature or product is currently in the testing phase and clarify its status.

24.
Concepts: checking for updates, inquiring about updates
- Users checking for recent or upcoming updates.
- Users express anticipation for future updates and inquire about their timing and status.

25.
Concepts: clarifying version details, clarifying software versions
- Designers clarify the version being discussed and provide specific version information.
- Participants clarify or ask about specific software versions and their types.

26.
Concepts: outlining future plans, planning future projects
- Team members outline and explain future plans and priorities.
- Participants outline plans for future project activities and confirm future implementation plans.

27.
Concepts: planning future updates, discussing future development plans
- Team members discuss plans for upcoming updates, list future features, and outline the development sequence.
- Designers share and discuss plans for future updates and development strategies.

28.
Concepts: refining designs, adjusting features
- Designers discuss refining designs and suggest simplifications.
- Designers discuss adjustments and adaptations to features and designs.

29.
Concepts: discussing technical aspects, discussing software compatibility
- Participants discuss technical considerations and the requirements needed to use the software.
- Team members discuss, confirm, and speculate on the software's compatibility with different systems.

30.
Concepts: practical application, discussing classroom use
- Instances where the practical application of the software in educational settings is discussed.
- Users discuss the application's use in classrooms and describe successful implementations.

31.
Concepts: expressing satisfaction, providing positive feedback
- Users discuss and express satisfaction with the software's ease of use.
- Users provide positive feedback about the software and share student engagement experiences.

32.
Concepts: development difficulty, discussing complexity
- A team member mentions the complexity and time required for development.
- Designers explain the complexity of tasks and features and the time needed for their release.

33.
Concepts: describing functionality, providing technical explanations, explaining software features
- Designers address and describe the functionality of features and components.
- Designers explain or clarify technical artifacts and provide technical details.
- Designers explain the importance and workings of specific software features.
- Participants clarify existing features and introduce new feature functions.

34.
Concepts: detailing feature functions, detailing planned features
- Participants describe feature details and provide examples of their functions.
- Developers provide specific examples or descriptions of planned features and explain their functionalities in detail.

35.
Concepts: discussing limitations, highlighting limitations
- Participants explain limitations related to features or system usage.
- Designers talk about limitations of solutions and highlight technical constraints of the software.

36.
Concepts: compatibility answers, inquiring about compatibility
- Answers questions related to software compatibility.
- Users inquire about the software's availability on various platforms and the specifics of the PC version.

37.
Concepts: proposing solutions, collaborating on problem-solving
- Designers discuss workarounds and propose potential solutions for compatibility issues.
- Designers and users work together to address issues or improve the product by sharing potential solutions and collaboratively solving problems.

38.
Concepts: offering solutions, engaging in troubleshooting
- Participants offer solutions to compatibility or feature questions and problems encountered by others.
- Designers offer and commit to providing solutions to users' problems.
- Participants engage in troubleshooting technical issues or compatibility problems.

39.
Concepts: gathering user input
- Designers ask for user input, often from specific groups like teachers, to understand their needs or preferences.
- Designers gather opinions before starting new features or projects due to team limitations.

40.
Concepts: sharing experiences
- Participants reflect on and share their past experiences with the community.
- Users share their experiences and the impact of the software on their activities.
===
---
Definitions for each code (40 in total):
1.
Concepts: expressive, using non-verbal communication
Relationship: Both concepts involve the communication of emotions or reactions through non-verbal means.
Criteria: Users or designers use emojis or expressive language to convey emotions and reactions.
Phrase: Conveying emotions non-verbally

2.
Concepts: maintaining politeness, demonstrating politeness
Relationship: Both concepts involve the act of showing politeness and empathy in interactions.
Criteria: Designers and participants show empathy and politeness towards each other in their communications.
Phrase: Demonstrating politeness

3.
Concepts: greeting the community, initiating interactions
Relationship: Both concepts involve starting communications within the community.
Criteria: Participants greet each other or the community to initiate interactions.
Phrase: Initiating interactions with greetings

4.
Concepts: expressing agreement, confirming statements
Relationship: Both concepts involve participants showing agreement with previously mentioned ideas or statements.
Criteria: Participants confirm and express agreement with ideas or statements made by others.
Phrase: Confirming and agreeing

5.
Concepts: acknowledging assistance, acknowledging community input
Relationship: Both concepts involve participants expressing gratitude and recognition towards others' contributions.
Criteria: Participants express gratitude and acknowledge assistance or input from the community.
Phrase: Acknowledging contributions

6.
Concepts: providing responses, elaborating on responses
Relationship: Both concepts involve participants replying to comments and providing additional details.
Criteria: Participants respond to comments or questions and elaborate on their responses to provide clarity.
Phrase: Elaborating on responses

7.
Concepts: encouraging discussions, encouraging community involvement
Relationship: Both concepts are about fostering engagement and participation within the community.
Criteria: Participants encourage discussions and involvement in decision-making processes.
Phrase: Encouraging community involvement

8.
Concepts: sharing images, sharing visual updates
Relationship: Both concepts involve the use of images as a form of communication or updates.
Criteria: Users share images and visual updates as part of their communication.
Phrase: Sharing visual content

9.
Concepts: share information, sharing within the group
Relationship: Both concepts involve the act of disseminating information or resources within the community.
Criteria: Participants share information and resources to solve problems or answer questions within the group.
Phrase: Sharing information

10.
Concepts: planning iterative feedback, engaging in iterative development
Relationship: Both concepts involve ongoing development and improvements based on feedback.
Criteria: Planning and discussing iterative development based on ongoing user feedback and testing.
Phrase: Engaging in iterative development

11.
Concepts: responding to feedback, responding to user feedback
Relationship: Both concepts involve acknowledging and addressing user feedback.
Criteria: Designers respond to user feedback with plans for future updates and improvements.
Phrase: Responding to feedback

12.
Concepts: sharing knowledge, collaborative learning
Relationship: Both concepts involve the exchange of information for mutual benefit.
Criteria: Participants share technical knowledge and engage in collaborative learning processes.
Phrase: Engaging in collaborative learning

13.
Concepts: resolving concerns, reach a conclusion
Relationship: Both concepts are related to addressing and resolving user issues or concerns.
Criteria: Designers respond to and resolve user concerns, reaching a conclusion based on feedback.
Phrase: Resolving user concerns

14.
Concepts: acknowledging user input, express comprehension, agreeing with design ideas
Relationship: All concepts involve understanding and agreeing with user input and design ideas.
Criteria: Designers acknowledge user input, express comprehension, and agree with design ideas.
Phrase: Acknowledging and understanding user input

15.
Concepts: proposing features, suggesting collaboration
Relationship: Both concepts involve suggesting improvements or collaborative efforts.
Criteria: Users propose new features or collaborative ideas to improve the software.
Phrase: Proposing improvements

16.
Concepts: justifying requests, explaining suggestions
Relationship: Both concepts involve providing reasons for requests or suggestions.
Criteria: Users explain and justify their requests or suggestions based on practical needs.
Phrase: Justifying suggestions

17.
Concepts: download instructions, providing update instructions
Relationship: Both concepts involve giving guidance on how to download or update software.
Criteria: Designers provide instructions for downloading and updating the software effectively.
Phrase: Providing download instructions

18.
Concepts: asking follow-up questions, explain the intention of followup question
Relationship: Both concepts involve gathering more information through follow-up questions.
Criteria: Participants ask follow-up questions and explain their rationale behind them.
Phrase: Asking follow-up questions

19.
Concepts: seeking clarification, requesting clarification
Relationship: Both concepts involve asking for more information or clarification.
Criteria: Participants seek or request clarification on various topics or requests.
Phrase: Requesting clarification

20.
Concepts: making technical inquiries, show interest in technical details
Relationship: Both concepts involve asking about or showing interest in technical specifics.
Criteria: Users or developers make technical inquiries and show interest in platform details.
Phrase: Making technical inquiries

21.
Concepts: seeking assistance, requesting support
Relationship: Both concepts involve asking for help or support with the software.
Criteria: Users seek assistance or request technical support for using specific features.
Phrase: Requesting assistance

22.
Concepts: describing update scope, describing update contents
Relationship: Both concepts involve providing detailed information about updates.
Criteria: Designers describe the scope and specific contents included in updates.
Phrase: Describing updates

23.
Concepts: confirming ongoing updates, clarifying testing status
Relationship: Both concepts involve providing status updates on ongoing development or testing.
Criteria: Designers confirm ongoing updates and clarify the status of features in testing.
Phrase: Confirming update status

24.
Concepts: checking for updates, inquiring about updates
Relationship: Both concepts involve users seeking information about updates.
Criteria: Users check for and inquire about recent or upcoming updates.
Phrase: Inquiring about updates

25.
Concepts: clarifying version details, clarifying software versions
Relationship: Both concepts involve providing specific information about software versions.
Criteria: Participants clarify and ask about specific software versions and their details.
Phrase: Clarifying version details

26.
Concepts: outlining future plans, planning future projects
Relationship: Both concepts involve discussing future activities and plans.
Criteria: Team members outline and plan future projects and activities.
Phrase: Planning future projects

27.
Concepts: planning future updates, discussing future development plans
Relationship: Both concepts involve discussing the plans for future updates and development.
Criteria: Team members discuss and share plans for upcoming updates and development strategies.
Phrase: Discussing future updates

28.
Concepts: refining designs, adjusting features
Relationship: Both concepts involve improving and adjusting designs or features.
Criteria: Designers refine designs and suggest adjustments to features.
Phrase: Refining designs

29.
Concepts: discussing technical aspects, discussing software compatibility
Relationship: Both concepts involve technical discussions about the software.
Criteria: Participants discuss technical considerations and software compatibility with different systems.
Phrase: Discussing technical aspects

30.
Concepts: practical application, discussing classroom use
Relationship: Both concepts involve discussing the software's practical use, especially in educational settings.
Criteria: Users discuss the practical application and successful implementation of the software in classrooms.
Phrase: Discussing practical application

31.
Concepts: expressing satisfaction, providing positive feedback
Relationship: Both concepts involve users giving positive feedback about the software.
Criteria: Users express satisfaction and provide positive feedback on the software's ease of use and engagement.
Phrase: Providing positive feedback

32.
Concepts: development difficulty, discussing complexity
Relationship: Both concepts involve discussing the challenges and complexity of development.
Criteria: Team members mention the complexity and time required for development tasks and features.
Phrase: Discussing development challenges

33.
Concepts: describing functionality, providing technical explanations, explaining software features
Relationship: All concepts involve explaining and clarifying software features and their functionalities.
Criteria: Designers and participants describe and provide technical explanations of software features.
Phrase: Explaining software functionality

34.
Concepts: detailing feature functions, detailing planned features
Relationship: Both concepts involve providing detailed descriptions of features and their functions.
Criteria: Participants describe the functions of current and planned features in detail.
Phrase: Detailing feature functions

35.
Concepts: discussing limitations, highlighting limitations
Relationship: Both concepts involve identifying and explaining limitations.
Criteria: Participants and designers discuss and highlight limitations of features or the software.
Phrase: Highlighting limitations

36.
Concepts: compatibility answers, inquiring about compatibility
Relationship: Both concepts involve questions and answers about software compatibility.
Criteria: Participants inquire about and answer questions related to the software's compatibility with various platforms.
Phrase: Discussing compatibility

37.
Concepts: proposing solutions, collaborating on problem-solving
Relationship: Both concepts involve working together to address issues or improve the product.
Criteria: Designers and users propose solutions and collaborate on solving compatibility or feature problems.
Phrase: Collaborating on solutions

38.
Concepts: offering solutions, engaging in troubleshooting
Relationship: Both concepts involve providing solutions and troubleshooting issues.
Criteria: Participants offer solutions and engage in troubleshooting technical problems.
Phrase: Troubleshooting issues

39.
Concepts: gathering user input
Relationship: N/A
Criteria: Designers collect input from users to understand their needs or preferences before starting new projects.
Phrase: Gathering user input

40.
Concepts: sharing experiences
Relationship: N/A
Criteria: Participants reflect on and share their past experiences within the community.
Phrase: Sharing experiences
---