You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (19 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
19. 
Concepts: {Repeat the input 19}
Relationship: {What is logical relationship between concepts in code 19, or N/A if not applicable}
Criteria: {Who did what, and how for code 19}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: gathering user input, soliciting user feedback
- Designers gather opinions or feedback before starting new projects or development phases.
- Designers involve users in the design process by soliciting feedback and testing.

2.
Concepts: sharing development plans, acknowledge community needs
- A designer shares current and future development plans with the community.
- A designer acknowledges the community's needs and outlines future plans based on them.

3.
Concepts: consulting with teachers, consult on educational standards
- Designers consult with teachers and align the software's features with educational needs.
- A designer consults the community or experts about educational standards.

4.
Concepts: announcing and providing updates, making community announcements
- Designers communicate changes or new features of the software to users.
- Designers make announcements or communicate updates about the software to the community.

5.
Concepts: acknowledge limitations, explaining technical constraints
- A designer acknowledges the limitations of the software.
- Designers mention team limitations and explain technical constraints of features.

6.
Concepts: discussing future plans, outlining development priorities
- Designers discuss future interests, planning, and development activities, outlining future design plans.
- Designers discuss focus areas and outline development priorities.

7.
Concepts: feature flexibility, discussing feature adjustments
- Designers discuss the flexibility of features or layout options.
- Designers discuss adjustments needed for features and the possibility of manual editing.

8.
Concepts: explaining features, explaining feature complexity
- Designers explain technical artifacts, details, functionalities, and examples of features or components.
- Designers discuss and explain the complexity of certain features and their implementation.

9.
Concepts: proposing solutions, proposing dual solutions
- Designers offer solutions or assistance and suggest alternative solutions to problems.
- Designers make suggestions and propose using dual solutions simultaneously.

10.
Concepts: provide rationale, explaining design rationale
- Users or designers provide rationale or reasons for certain decisions or conditions.
- Designers provide explanations about design rationale and discuss guiding principles.

11.
Concepts: community support, acknowledging community support
- Instances where users express support, encouragement, or appreciation for the designers' efforts.
- Designers acknowledge and appreciate the community's support and expertise.

12.
Concepts: confirming update completion, confirming issue resolution
- Users confirm that an update has been applied.
- Users confirm the diagnosis of an issue and acknowledge its resolution.

13.
Concepts: establishing credibility, introducing teaching identity
- Users establish their credibility by sharing their teaching experience and professional backgrounds.
- Users introduce their teaching identities, including grade level and years of experience.

14.
Concepts: mentioning technical issues, engaging in troubleshooting
- Users explain the context behind problems and mention technical issues related to their systems.
- A team member asks users about problems they encountered, and users respond with troubleshooting information.

15.
Concepts: addressing usability, reviewing software usability
- A user or designer emphasizes the practical usability and specific functionality of the software.
- Users describe the context in which they use the software and provide usability reviews.

16.
Concepts: discussing system requirements, confirming system compatibility
- Designers provide technical information and discuss system requirements for the software.
- Users or designers confirm and discuss the compatibility of their systems with the software.

17.
Concepts: requesting new features, requesting specific features
- Users request new features or improvements and the inclusion of additional experiments.
- Users express needs for specific features, and developers inquire about community preferences.

18.
Concepts: seeking information, seeking usage information
- Users ask questions to seek information or clarification due to uncertainty.
- Users ask questions to gain knowledge and seek help with using the software, requesting documentation.

19.
Concepts: expressing gratitude
- Users express gratitude and acknowledgment for assistance or support received.
- A team member expresses gratitude to the community, and members respond with support.
===
---
Definitions for each code (19 in total):
1.
Concepts: gathering user input, soliciting user feedback
Relationship: Both involve obtaining opinions or feedback from users.
Criteria: Designers gather opinions or feedback from users before starting new projects or development phases by involving them in the design process.
Phrase: Soliciting user input

2.
Concepts: sharing development plans, acknowledge community needs
Relationship: Both involve communicating plans and recognizing community requirements.
Criteria: A designer shares current and future development plans with the community while acknowledging their needs.
Phrase: Sharing development plans

3.
Concepts: consulting with teachers, consult on educational standards
Relationship: Both involve seeking advice from educational professionals.
Criteria: Designers consult with teachers and experts to align the software's features with educational needs and standards.
Phrase: Consulting educational experts

4.
Concepts: announcing and providing updates, making community announcements
Relationship: Both involve communicating information to the community.
Criteria: Designers communicate changes, new features, or updates about the software to the community.
Phrase: Announcing updates

5.
Concepts: acknowledge limitations, explaining technical constraints
Relationship: Both involve recognizing and explaining limitations.
Criteria: Designers acknowledge the software's limitations and explain the technical constraints of features.
Phrase: Explaining limitations

6.
Concepts: discussing future plans, outlining development priorities
Relationship: Both involve planning and prioritizing future activities.
Criteria: Designers discuss future interests and outline development priorities and plans.
Phrase: Outlining future plans

7.
Concepts: feature flexibility, discussing feature adjustments
Relationship: Both involve discussing the adaptability and changes of features.
Criteria: Designers discuss the flexibility and necessary adjustments of features, including the possibility of manual editing.
Phrase: Discussing feature flexibility

8.
Concepts: explaining features, explaining feature complexity
Relationship: Both involve providing detailed explanations about features.
Criteria: Designers explain the technical details, functionalities, and complexities of certain features and their implementation.
Phrase: Explaining feature details

9.
Concepts: proposing solutions, proposing dual solutions
Relationship: Both involve suggesting ways to address problems.
Criteria: Designers offer solutions or assistance and suggest alternative or dual solutions to problems.
Phrase: Proposing solutions

10.
Concepts: provide rationale, explaining design rationale
Relationship: Both involve giving reasons or explanations for decisions.
Criteria: Designers provide rationale and explanations about design decisions and guiding principles.
Phrase: Explaining design rationale

11.
Concepts: community support, acknowledging community support
Relationship: Both involve recognizing and appreciating support from the community.
Criteria: Designers acknowledge and appreciate the community's support and expertise.
Phrase: Acknowledging community support

12.
Concepts: confirming update completion, confirming issue resolution
Relationship: Both involve verifying the completion or resolution of an action.
Criteria: Users confirm that an update has been applied or an issue has been resolved.
Phrase: Confirming resolution

13.
Concepts: establishing credibility, introducing teaching identity
Relationship: Both involve sharing professional background to build credibility.
Criteria: Users establish their credibility by sharing their teaching experience and professional backgrounds.
Phrase: Establishing teaching credibility

14.
Concepts: mentioning technical issues, engaging in troubleshooting
Relationship: Both involve discussing and addressing technical problems.
Criteria: Users mention technical issues and engage in troubleshooting by providing context and responding to inquiries.
Phrase: Troubleshooting technical issues

15.
Concepts: addressing usability, reviewing software usability
Relationship: Both involve evaluating the practical use of the software.
Criteria: Users or designers emphasize and review the practical usability and specific functionality of the software.
Phrase: Reviewing usability

16.
Concepts: discussing system requirements, confirming system compatibility
Relationship: Both involve technical discussions about system specifications.
Criteria: Designers provide technical information and discuss system requirements while confirming compatibility with users.
Phrase: Discussing system compatibility

17.
Concepts: requesting new features, requesting specific features
Relationship: Both involve users expressing needs for additional functionalities.
Criteria: Users request new or specific features, and developers inquire about community preferences.
Phrase: Requesting features

18.
Concepts: seeking information, seeking usage information
Relationship: Both involve users asking questions to gain knowledge.
Criteria: Users ask questions to seek information or clarification and request help or documentation for using the software.
Phrase: Seeking information

19.
Concepts: expressing gratitude
Relationship: N/A
Criteria: Users or team members express gratitude and acknowledgment for assistance or support received.
Phrase: Expressing gratitude
---