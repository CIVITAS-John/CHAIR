You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (30 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
30. 
Concepts: {Repeat the input 30}
Relationship: {What is logical relationship between concepts in code 30, or N/A if not applicable}
Criteria: {Who did what, and how for code 30}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: propose design ideas, suggest future possibilities
- Designers propose enhancements or design ideas for the software.
- Designers suggest future possibilities for software development.

2.
Concepts: discuss design interests, discuss ongoing research efforts
- Designers engage in discussions about design considerations and potential future directions.
- Designers discuss current research efforts related to software features.

3.
Concepts: announce planned updates, announce component updates, announce feature enhancements
- Designers announce planned updates and features.
- Designers announce changes to component specifications.
- Designers announce feature expansions and enhancements.

4.
Concepts: describe update scope, share the magnitude of update
- Designers describe the scope and content of updates.
- A designer communicates the scale or significance of an upcoming update to the application.

5.
Concepts: provide development timelines, outline development timeline
- Designers provide timelines for feature development.
- Designers outline the development timeline for the project.

6.
Concepts: provide download instructions, direct users to resources
- Designers share download instructions with users.
- A designer directs users to where they can find resources or download software.

7.
Concepts: share knowledge, explain software functionalities
- Designers share factual information or knowledge about the software's capabilities or features.
- Designers explain the functionalities of the software.

8.
Concepts: confirm software compatibility, acknowledge software limitations
- Designers confirm and provide technical information regarding compatibility.
- Designers acknowledge software limitations and explain compatibility issues.

9.
Concepts: consider future compatibility, suggest checking compatibility
- Designers consider future compatibility issues in their planning.
- Designers suggest checking system compatibility for future updates.

10.
Concepts: system compatibility, explain compatibility speculation
- The designer discusses compatibility issues with various systems, highlighting technical considerations.
- Designers explain the development process and speculate on compatibility.

11.
Concepts: offer potential solutions, commit to providing a solution
- Designers offer and propose solutions to user-reported issues.
- Designers commit to addressing user needs and providing solutions based on inquiries.

12.
Concepts: explain feature complexity, compare feature complexities
- Designers explain the complexities involved in software development.
- A designer compares the complexities of different features in terms of development and implementation.

13.
Concepts: noting for potential bugs, list updates and bug fixes
- Designer notes potential bugs in the current version of the software.
- Designers list new features and bug fixes in the software update and provide detailed notes on updates.

14.
Concepts: clarify existing feature, clarify functionality
- Designer clarifies how existing features function within the software.
- Designers address functionality issues and provide technical clarifications related to user interface components.

15.
Concepts: clarify testing status, clarify version details
- Designers clarify the testing status of specific versions.
- Designers provide detailed information about the application version.

16.
Concepts: emphasize usability, seek and emphasize efficiency
- Designers emphasize the software's usability and ease of use in discussions.
- Designers express a desire for increased efficiency and emphasize the importance of optimizing the software.

17.
Concepts: provide reasoning, explain and justify decisions
- Designers and participants provide reasoning and rationale for their development choices and actions.
- Designers explain the importance of features and provide rationale for their development choices.

18.
Concepts: explain design rationale, explaining design goals
- Designers explain the rationale and intentions behind the software's user-friendly design.
- Designers explain their design philosophy aimed at user-friendliness based on community feedback.

19.
Concepts: long term planning, discuss feature stability
- A designer discusses long-term planning for features that will enhance the application's stability.
- Designers discuss the stability of features and explain their importance for long-term software performance.

20.
Concepts: personal connection, share teaching experiences
- Users and designers share personal teaching experiences to foster connections.
- Users share their teaching experiences and perspectives on educational practices.

21.
Concepts: establish credibility, introduce teaching identity
- A user shares their teaching experience to establish their expertise in the community.
- Users share their teaching experiences, specifying grade levels taught and years of service.

22.
Concepts: identify as teachers, confirm professional identity, confirm teacher identity
- Users confirm their roles as teachers and discuss their educational needs.
- Users confirm their professional roles, indicating their engagement in the educational community.
- The designer engages with users by asking about their teaching levels and professional backgrounds.

23.
Concepts: share past incidents, share technology stories
- Users share past incidents that affected their experiences with the software in educational settings.
- Users share stories about technology situations affecting software use in educational contexts.

24.
Concepts: gather context, seek context for understanding
- A designer gathers context by asking users about their teaching environment.
- Designers seek context to understand user needs and challenges.

25.
Concepts: confirm understanding and clarify, engage in follow-up discussions
- Users and designers confirm understanding and seek clarification during discussions.
- Users or designers engage in follow-up discussions to clarify design information shared in the group.

26.
Concepts: engage in informal communication, build rapport through interaction
- Designers engage users informally regarding avatar customization.
- Designers build rapport through informal interactions with users.

27.
Concepts: collaborate with teachers, consulting educators on standards
- Designers consult teachers for input and discuss educational standards within the community.
- Designers consult educators about educational standards and seek input on specific technical details.

28.
Concepts: request specific features, request new features and improvements
- Users make detailed requests for specific features and explain the reasons behind their requests.
- Users articulate specific requests for new features or improvements to the product.

29.
Concepts: suggest improvements, suggest practical enhancements
- Users suggest new features and improvements for the software's usability.
- Users suggest features that enhance convenience and practical applications for the software.

30.
Concepts: support suggestions, further suggestion
- Users agree with and second suggestions made in community discussions.
- Users provide additional suggestions or refinements to previously discussed ideas or features.
===
---
Definitions for each code (30 in total):
1.  
Concepts: propose design ideas, suggest future possibilities  
Relationship: Both concepts involve the act of forward-thinking and innovation in software design.  
Criteria: Designers propose enhancements or design ideas for the software while suggesting future possibilities for software development.  
Phrase: Propose design enhancements.

2.  
Concepts: discuss design interests, discuss ongoing research efforts  
Relationship: Both concepts focus on collaborative discussions that contribute to the development and improvement of software.  
Criteria: Designers engage in discussions about design considerations and current research efforts related to software features.  
Phrase: Discuss design considerations.

3.  
Concepts: announce planned updates, announce component updates, announce feature enhancements  
Relationship: All concepts relate to communication regarding software changes and improvements.  
Criteria: Designers announce planned updates, changes to component specifications, and feature expansions.  
Phrase: Announce software updates.

4.  
Concepts: describe update scope, share the magnitude of update  
Relationship: Both concepts involve communicating the extent and significance of software updates.  
Criteria: Designers describe the scope and content of updates while communicating the scale of upcoming changes.  
Phrase: Describe update significance.

5.  
Concepts: provide development timelines, outline development timeline  
Relationship: Both concepts pertain to the scheduling and planning of software development processes.  
Criteria: Designers provide and outline timelines for feature development within the project.  
Phrase: Provide development timelines.

6.  
Concepts: provide download instructions, direct users to resources  
Relationship: Both concepts involve guiding users in accessing software and resources.  
Criteria: Designers share download instructions and direct users to find resources or download software.  
Phrase: Share download guidance.

7.  
Concepts: share knowledge, explain software functionalities  
Relationship: Both concepts focus on the dissemination of information regarding software capabilities.  
Criteria: Designers share factual information and explain the functionalities of the software.  
Phrase: Share software knowledge.

8.  
Concepts: confirm software compatibility, acknowledge software limitations  
Relationship: Both concepts address the technical aspects of software performance and user experience.  
Criteria: Designers confirm compatibility and acknowledge limitations while explaining compatibility issues.  
Phrase: Confirm software compatibility.

9.  
Concepts: consider future compatibility, suggest checking compatibility  
Relationship: Both concepts involve proactive measures regarding software compatibility.  
Criteria: Designers consider future compatibility issues and suggest checking system compatibility for updates.  
Phrase: Consider compatibility issues.

10.  
Concepts: system compatibility, explain compatibility speculation  
Relationship: Both concepts focus on the technical considerations surrounding software compatibility with systems.  
Criteria: Designers discuss compatibility issues and explain the development process related to compatibility.  
Phrase: Discuss compatibility considerations.

11.  
Concepts: offer potential solutions, commit to providing a solution  
Relationship: Both concepts involve addressing user-reported issues and demonstrating commitment to user needs.  
Criteria: Designers offer solutions to user-reported issues and commit to addressing user needs.  
Phrase: Offer user solutions.

12.  
Concepts: explain feature complexity, compare feature complexities  
Relationship: Both concepts relate to understanding and analyzing the intricacies of software features.  
Criteria: Designers explain and compare the complexities involved in software development.  
Phrase: Explain feature complexities.

13.  
Concepts: noting for potential bugs, list updates and bug fixes  
Relationship: Both concepts focus on identifying and communicating software issues and updates.  
Criteria: Designers note potential bugs and list new features and bug fixes in software updates.  
Phrase: List bugs and updates.

14.  
Concepts: clarify existing feature, clarify functionality  
Relationship: Both concepts aim to enhance user understanding of software features.  
Criteria: Designers clarify how existing features function and address functionality issues.  
Phrase: Clarify software functionality.

15.  
Concepts: clarify testing status, clarify version details  
Relationship: Both concepts involve providing detailed information regarding software versions and testing.  
Criteria: Designers clarify the testing status of versions and provide details about the application version.  
Phrase: Clarify version information.

16.  
Concepts: emphasize usability, seek and emphasize efficiency  
Relationship: Both concepts focus on improving user experience and software performance.  
Criteria: Designers emphasize usability and express the importance of optimizing the software for efficiency.  
Phrase: Emphasize software usability.

17.  
Concepts: provide reasoning, explain and justify decisions  
Relationship: Both concepts involve articulating the rationale behind design decisions.  
Criteria: Designers provide reasoning and explain the importance of features in their development choices.  
Phrase: Justify design decisions.

18.  
Concepts: explain design rationale, explaining design goals  
Relationship: Both concepts focus on articulating the intentions behind design choices.  
Criteria: Designers explain the rationale and goals behind the user-friendly design based on community feedback.  
Phrase: Explain design rationale.

19.  
Concepts: long term planning, discuss feature stability  
Relationship: Both concepts relate to strategic planning for software features and long-term performance.  
Criteria: Designers discuss long-term planning for features that enhance application stability.  
Phrase: Discuss feature stability.

20.  
Concepts: personal connection, share teaching experiences  
Relationship: Both concepts focus on building relationships through shared experiences in education.  
Criteria: Users and designers share personal teaching experiences to foster connections within the community.  
Phrase: Share teaching experiences.

21.  
Concepts: establish credibility, introduce teaching identity  
Relationship: Both concepts involve sharing teaching experience to build authority in the community.  
Criteria: A user shares their teaching experience to establish expertise and introduce their teaching identity.  
Phrase: Establish teaching credibility.

22.  
Concepts: identify as teachers, confirm professional identity, confirm teacher identity  
Relationship: All concepts relate to affirming one's role and engagement in the educational community.  
Criteria: Users confirm their roles as teachers and engage in discussions about their educational needs.  
Phrase: Confirm teacher identity.

23.  
Concepts: share past incidents, share technology stories  
Relationship: Both concepts involve sharing experiences that shape user perceptions of the software.  
Criteria: Users share past incidents and stories about technology situations affecting software use.  
Phrase: Share technology experiences.

24.  
Concepts: gather context, seek context for understanding  
Relationship: Both concepts involve collecting information to better understand user needs.  
Criteria: A designer gathers and seeks context by asking users about their teaching environment.  
Phrase: Gather user context.

25.  
Concepts: confirm understanding and clarify, engage in follow-up discussions  
Relationship: Both concepts focus on ensuring clear communication and understanding between users and designers.  
Criteria: Users and designers confirm understanding and engage in follow-up discussions to clarify design information.  
Phrase: Clarify understanding.

26.  
Concepts: engage in informal communication, build rapport through interaction  
Relationship: Both concepts emphasize the importance of casual interactions in fostering community relationships.  
Criteria: Designers engage users informally and build rapport through interactions.  
Phrase: Build community rapport.

27.  
Concepts: collaborate with teachers, consulting educators on standards  
Relationship: Both concepts involve working together with educators to enhance software relevance in education.  
Criteria: Designers consult teachers for input and discuss educational standards within the community.  
Phrase: Collaborate with educators.

28.  
Concepts: request specific features, request new features and improvements  
Relationship: Both concepts focus on users articulating their needs for software enhancements.  
Criteria: Users make detailed requests for specific features and improvements to the product.  
Phrase: Request software features.

29.  
Concepts: suggest improvements, suggest practical enhancements  
Relationship: Both concepts involve users proposing changes to enhance usability and convenience.  
Criteria: Users suggest new features and practical enhancements for the software.  
Phrase: Suggest software improvements.

30.  
Concepts: support suggestions, further suggestion  
Relationship: Both concepts relate to collaborative idea generation and refinement within the community.  
Criteria: Users agree with and provide additional suggestions or refinements to discussed ideas.  
Phrase: Support community suggestions.
---