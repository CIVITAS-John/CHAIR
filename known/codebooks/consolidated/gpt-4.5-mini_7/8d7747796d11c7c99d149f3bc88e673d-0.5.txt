You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (7 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
7. 
Concepts: {Repeat the input 7}
Relationship: {What is logical relationship between concepts in code 7, or N/A if not applicable}
Criteria: {Who did what, and how for code 7}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: announce software updates, communicate software updates
- Designers announce new features and updates to the community through release notes and notifications.
- Designers detail updates and specify version information relevant to different platforms.

2.
Concepts: expand and describe updates, announce updates and improvements
- Designers discuss the extent of an update and share information about its scale or significance.
- Designers provide updates on changes and invite suggestions for upcoming updates.

3.
Concepts: gather user opinions, align features with user needs
- Designers seek agreement among users and gather opinions before implementing new features.
- Designers align features with user needs based on user feedback.

4.
Concepts: propose feature improvements, suggest feature simplification
- A designer offers a suggestion regarding the software, and a user suggests a better method.
- Instances where suggestions or changes are made to improve the usability of the software.

5.
Concepts: provide usage instructions, instruction and updates
- Designers provide instructions to ensure users can operate the software correctly.
- Designers providing updates and instructions to help users understand and use the software effectively.

6.
Concepts: share potential solutions, propose potential solution
- Designers share potential solutions or strategies based on feedback.
- Developers propose solutions to potential compatibility issues and users suggest alternatives.

7.
Concepts: foster user interaction, engage in development discussions
- Direct interactions between designers and users foster dialogue about features and updates.
- Users inquire about future updates, and developers invite users to share input for future versions.
===
---
Definitions for each code (7 in total):
1.
Concepts: announce software updates, communicate software updates
Relationship: The concepts are interrelated as both involve the dissemination of information regarding software changes to the community.
Criteria: Designers announce new features and updates to the community through release notes and notifications, detailing updates and specifying version information relevant to different platforms.
Phrase: Communicate software updates.

2.
Concepts: expand and describe updates, announce updates and improvements
Relationship: The concepts are connected as they both involve sharing information about software updates, with one focusing on scale and significance while the other emphasizes ongoing communication.
Criteria: Designers discuss the extent of an update and share information about its scale or significance while providing updates on changes and inviting suggestions for upcoming updates.
Phrase: Describe updates and improvements.

3.
Concepts: gather user opinions, align features with user needs
Relationship: The concepts are logically linked as gathering user opinions is essential for aligning features with what users actually need.
Criteria: Designers seek agreement among users and gather opinions before implementing new features, aligning features with user needs based on user feedback.
Phrase: Align features with user needs.

4.
Concepts: propose feature improvements, suggest feature simplification
Relationship: The concepts are related as they both involve suggestions aimed at enhancing the software's usability.
Criteria: A designer offers a suggestion regarding the software, while users suggest better methods to improve usability through their feedback.
Phrase: Suggest feature improvements.

5.
Concepts: provide usage instructions, instruction and updates
Relationship: The concepts are interconnected as providing usage instructions is a form of updating users on how to effectively use the software.
Criteria: Designers provide instructions to ensure users can operate the software correctly and offer updates to help users understand and use the software effectively.
Phrase: Provide usage instructions.

6.
Concepts: share potential solutions, propose potential solution
Relationship: The concepts are related as both involve offering solutions to problems based on user feedback and compatibility issues.
Criteria: Designers share potential solutions or strategies based on feedback, while developers propose solutions to potential compatibility issues and users suggest alternatives.
Phrase: Propose potential solutions.

7.
Concepts: foster user interaction, engage in development discussions
Relationship: The concepts are logically connected as fostering user interaction encourages dialogue about development and updates.
Criteria: Direct interactions between designers and users foster dialogue about features and updates, with users inquiring about future updates and developers inviting input for future versions.
Phrase: Foster user interaction.