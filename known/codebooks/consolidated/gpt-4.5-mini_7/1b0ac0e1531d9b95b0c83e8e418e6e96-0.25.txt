You are an expert in thematic analysis clarifying the criteria of qualitative codes. Do not attempt to merge codes now.
Consider provided quotes, and note that each quote is independent of others.
Write clear and generalizable criteria for each code and do not introduce unnecessary details.
If necessary, refine labels to be more accurate, but do not repeat yourself.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (64 in total):
1. 
Criteria: {Who did what, and how for code 1}
Label: {A descriptive label of code 1}
...
64.
Criteria: {Who did what, and how for code 64}
Label: {A descriptive label of code 64}
---
~~~
1.
Label: acknowledges non conventional solutions
Quotes:
- E01: That's okay. Go is a convention. It's not really a requirement of the language that you use the word go. You can say banana to banana and have a button on the interface. It's a banana button. (interviewer's observation) E01 honors ChatGPT's own intuition even though it might be different from the convention.

2.
Label: non deterministic
Quotes:
- E04: Sometimes it'll give me instructions and sometimes it'll just give me the code and then sometimes it'll tell me to use R extensions or something like that. It is random in that regard, it's not deterministic in terms of what result you're going to get. (interviewer's observation) E04 regularly evaluates the AI responses and thinks that it is not deterministic.

3.
Label: specifies model requirements
Quotes:
- E04: "I want to create a simple feed-forward neural network in NetLogo with one hidden layer."

4.
Label: jargon translation
Quotes:
- E01: And you want doctors to use it, nurses to use it and medical transcriptionists to use it. They use a different word for whatever the verb for whatever it is you're saying you want them to do. And so, in some sense, their documentation has to be customized to their context to their user group. ... It's a language system. If you have a learning system that's actually capable of harvesting information, yeah, and a lot of them are not yet, but I think we'll get there. (interviewer's observation) AI could be used to translate jargons between different sub-groups working in the same systems and ease the cost of writing customized documentation.

5.
Label: uses ai code due to time constraints
Quotes:
- E04: It'd be that I just take this and see what this does. This should just be a single node so it'll kind of overwrite what I already did. (interviewer's observation) E04 uses the AI-generated code completely when realizing time constraints.

6.
Label: humor
Quotes:
- E01: (no verbal response) (interviewer's observation) E01 laughs when he sees ChatGPT making a classical error.

7.
Label: technicality
Quotes:
- E04: Because I'll like forget the syntax sometimes and I usually use the netlogo dictionary and just have it like open to the side. (interviewer's observation) E04 still forgets about the syntax and ChatGPT can help.
- E04: "how to define breeds in netlogo" (interviewer's observation) E04 tries to find certain syntax structures from the AI-generated code and ask for it when it is not there.
- E04: I use it a lot for developing like, equations for specific like, aspects of agent-based models that I create. (interviewer's observation) Helpful for creating equations

8.
Label: compares with other resources
Quotes:
- E04: I'll go on Stack Exchange or Stack Overflow, I'm part of the NetLogo listserv, but obviously there's a delay there. So in the instance that I need immediate feedback, it is really helpful. (interviewer's observation) Nice to have immediate feedback.

9.
Label: personalization
Quotes:
- E01: Can it design a generic learning management path? Because a lot of people can develop systems, but they're not good teachers. (interviewer's observation) Hypothetically: maybe AI could be used for building learning pathways.

10.
Label: direct
Quotes:
- E04: It seems like it's, you know, pretty straightforward to use and like intuitive, which is nice. And it's like, it's easy to interact with. So I feel like if I had like enough time to play around with it, it could be like really helpful. (interviewer's observation) Straightforward to use and intuitive.

11.
Label: incomplete code
Quotes:
- E04: It doesn't... Include everything that you need.  (interviewer's observation) Misses code structures at times.

12.
Label: model translation
Quotes:
- E04: I've found that AI is really helpful for like, translating other models from other languages into NetLogo, for example. (interviewer's observation) Helpful for translating from other languages into NetLogo

13.
Label: highlights ai's promptness
Quotes:
- E04: I'll go on Stack Exchange or Stack Overflow, I'm part of the NetLogo listserv, but obviously there's a delay there. So in the instance that I need immediate feedback, it is really helpful. (interviewer's observation) Nice to have immediate feedback.

14.
Label: values documentation
Quotes:
- E01: I don't want chat GPT to write 27 operations in one line and show how brilliant it is. I wanted to separate out the code and, and it did a good job of not only did it write the code, but it commented the code. And then in addition to commenting the code externally, it did documentation. (interviewer's observation) ChatGPT tends to provide comments and documentation. Generated code is easy to read.

15.
Label: emphasizes iterative questioning
Quotes:
- E01: If you know how to ask iterative questions, I think it could do pretty well. (interviewer's observation) E01 thinks ChatGPT would do well if one knows how to ask iterative questions.

16.
Label: novice
Quotes:
- E04: Like in this type of, like, like I was saying with this window, for example, where it's giving you the options and basically there was that one time where the only option was for it to explain itself.  Which makes sense, but it'd be nice if I could just kind of like forego that and just keep doing, you know, But you know, for someone that's probably not as useful for someone who's like still learning, but like, I guess for someone who's more experienced, it's nice to be able to just like skip over things that you already know. (interviewer's observation) Options too limited; tension between a novice-oriented/expert-oriented design.
- E01: And I find what I have trouble with and certainly what beginners have trouble with is "scope".   You know, when you go from one point to another and all of a sudden you're, you're not no longer in ask turtles to do something you're in, ask links to do. But you know, so all of a sudden you've shifted, you've shifted your variable space and this happens implicitly and all of a sudden you're writing code and then it gives you an error that of the nature X Y Z doesn't operate in a turtle context. (interviewer's observation) AI needs to support learning of the "scope" concept in NetLogo.
- E04: To me, it seems like you need to have a certain degree of expertise to understand where the errors are and how to fix them. Because otherwise it's like you're going down this path where you're blindly following the ChatGPT and you have no idea what's going on. For less experienced people, I wouldn't like that because it could put you in a worse situation. (interviewer's observation) Requires expertise to understand errors and debug them. Risks to blindly follow ChatGPT, esp. for less experienced people.
- E01: I'm not sure that any beginner wouldn't necessarily know that unless they'd ever practiced. And so some of the users of NetLogo have never programmed anything. So, (they might lack) the whole concept of debugging or maybe starting with a design outline. They start typing and then they get frustrated because they don't know how to debug code. (interviewer's observation) E01 reflects on how novices might get stuck during the human-AI collaboration process.
- E01: In terms of learning experiences, like ramping up to using an assistant wrapping up to using ChatGPT might have some sort of evaluates. How well can you write instructions for another person? Some people just don't know how to conceptualize a problem. (interviewer's observation) E01 discusses how "writing instructions" is a capability that is missing on many people, and that is key to work with AI.

17.
Label: customizes ai generated code
Quotes:
- E04: (no verbal response) (interviewer's observation) Again, he reads the code and selectively copies code to the model.

18.
Label: model library
Quotes:
- E04: I know that Perceptron model exists in the NetLogo model library. So it's interesting to me that it didn't pull that up, but it could be that I used like the wrong verbiage, but it doesn't understand what I'm trying to do. (interviewer's observation) E04 expects ChatLogo to find "Perceptron" model from the library but it does not. He evaluates the search results of the AI.

19.
Label: conceptual errors
Quotes:
- E01: So I see this from beginners all the time is they, they just get totally lost. I call it lint program from Unix, you know, it's like it's a little green checkbox looks at you and go, okay, wait, it's just, you've spelled everything correctly, but you have a conceptual error here. If it, if it caught structural problems like that, that would, that would help. (interviewer's observation) NetLogo needs to have linting features that exist in other languages (we are working on that right now). Here, E01 wants the linting to support identifying conceptual mistakes, different from syntax mistakes which most linters work on.

20.
Label: explanation clarity
Quotes:
- E04: It seems to explain things pretty well, it does not seems to be overly technical. (interviewer's observation) Provides clear, less technical explanations.

21.
Label: documentation search
Quotes:
- E04: And it could take a lot of time to like search the documentation and go online and try and figure out all those answers and just to have it like right there. So you can kind of stay within the task is really nice. (interviewer's observation) The capability to search for documentation and read it inside the workspace: esp. beneficial for novices.

22.
Label: instruction writing
Quotes:
- E01: In terms of learning experiences, like ramping up to using an assistant wrapping up to using ChatGPT might have some sort of evaluates. How well can you write instructions for another person? Some people just don't know how to conceptualize a problem. (interviewer's observation) E01 discusses how "writing instructions" is a capability that is missing on many people, and that is key to work with AI.

23.
Label: highlights best practices
Quotes:
- E04: It includes debugging, it is actually trying to incorporate like a unit test, which is really cool and really helpful, especially for beginners, because they can kind of, you know, check their inputs. Beginners, everyone really. They can debug their code appropriately. (interviewer's observation) Debugging capability.

24.
Label: knowledge sharing
Quotes:
- E01: So one of the things that certainly about ChatGPT is, or whatever the AI tool is that you build, is that it will probably always be advancing, and always stay pretty close to the state of the art about all these things. So if it has, especially if it has a hive business, so that if any user discovers something, they can feed it back into the system. And then everybody knows it now. (interviewer's observation) AI could be used to preserve, process, and retrieve fragmented knowledge generated by human as a collaboration process.

25.
Label: comments on ai's interpretation
Quotes:
- E01: So set up, move the turtle to go. Increase the size of the turtle by two units. Oh, dear. It's, it's making the turtle bigger. Oh, that's kind of, that's kind of messed it up a little bit then. (interviewer's observation) E01 reads the code and comments, summarizing the code, and thinks about how the AI was understanding the request.

26.
Label: context inference
Quotes:
- E01: Well, I cut the entire user's question. It figured out what I wanted. I didn't even tell it what I wanted. It just told me. (interviewer's observation) ChatGPT could infer E01's need from the input context.

27.
Label: debugging risks
Quotes:
- E04: To me, it seems like you need to have a certain degree of expertise to understand where the errors are and how to fix them. Because otherwise it's like you're going down this path where you're blindly following the ChatGPT and you have no idea what's going on. For less experienced people, I wouldn't like that because it could put you in a worse situation. (interviewer's observation) Requires expertise to understand errors and debug them. Risks to blindly follow ChatGPT, esp. for less experienced people.

28.
Label: emphasizes questioning motives
Quotes:
- E01: What if you were just sitting in a peer programming and sitting next to a, uh, a bright person who was helping you, what would you want them to do? So you might start writing a line of code and they would stop and go, why are you, why are you typing? (interviewer's observation) E01 discusses how AI could potentially serve as a pair programmer that questions the learners' motives.

29.
Label: clarifies requirements
Quotes:
- E01: "I would like to write code to have a turtle run slowly around the perimeter of a square, but the square should go larger each time it goes around." (interviewer's observation) Seeing AI's counter question, E01 makes his request more detailed.

30.
Label: reduce learning curve and even save human's needs for learning some programming knowledge
Quotes:
- E01: There's a lot of extensions I would love to know about GIS extensions, but I have very limited time. What could I do in two hours? And I think everybody has a very finite length of time. (interviewer's observation) AI could potentially save time for learning new extensions (compared with core concepts) of NetLogo.

31.
Label: addressing scope-related challenges in coding tasks
Quotes:
- E01: And I find what I have trouble with and certainly what beginners have trouble with is "scope".   You know, when you go from one point to another and all of a sudden you're, you're not no longer in ask turtles to do something you're in, ask links to do. But you know, so all of a sudden you've shifted, you've shifted your variable space and this happens implicitly and all of a sudden you're writing code and then it gives you an error that of the nature X Y Z doesn't operate in a turtle context. (interviewer's observation) AI needs to support learning of the "scope" concept in NetLogo.
- E01: So set up, move the turtle to go. Increase the size of the turtle by two units. Oh, dear. It's, it's making the turtle bigger. Oh, that's kind of, that's kind of messed it up a little bit then. (interviewer's observation) E01 reads the code and comments, summarizing the code, and thinks about how the AI was understanding the request.
- E01: "I would like to write code to have a turtle run slowly around the perimeter of a square, but the square should go larger each time it goes around." (interviewer's observation) Seeing AI's counter question, E01 makes his request more detailed.
- E01: So let's say "I would like to write code to have a turtle run slowly around the perimeter of a square." (interviewer's observation) E01's first task.

32.
Label: considers optimal input terms
Quotes:
- E04: "I want to create a simple perception" (interviewer's observation) Thinks a bit about whether to use "in NetLogo" or not.

33.
Label: prefers readable code
Quotes:
- E01: I don't want chat GPT to write 27 operations in one line and show how brilliant it is. I wanted to separate out the code and, and it did a good job of not only did it write the code, but it commented the code. And then in addition to commenting the code externally, it did documentation. (interviewer's observation) ChatGPT tends to provide comments and documentation. Generated code is easy to read.

34.
Label: appreciates workflow efficiency
Quotes:
- E04: I really liked how, like the code that it generates, if you could just kind of place that into the model automatically.  (interviewer's observation) The capability to put into the model automatically.

35.
Label: reads and adapts ai responses
Quotes:
- E04: (no verbal response) (interviewer's observation) Again, he reads the code and selectively copies code to the model.

36.
Label: allows ai's intuition
Quotes:
- E01: That's okay. Go is a convention. It's not really a requirement of the language that you use the word go. You can say banana to banana and have a button on the interface. It's a banana button. (interviewer's observation) E01 honors ChatGPT's own intuition even though it might be different from the convention.

37.
Label: user choice
Quotes:
- E01: (no verbal response) (interviewer's observation) E01 chooses to fix the problem rather than showing the explanation.

38.
Label: expertise requirement
Quotes:
- E04: To me, it seems like you need to have a certain degree of expertise to understand where the errors are and how to fix them. Because otherwise it's like you're going down this path where you're blindly following the ChatGPT and you have no idea what's going on. For less experienced people, I wouldn't like that because it could put you in a worse situation. (interviewer's observation) Requires expertise to understand errors and debug them. Risks to blindly follow ChatGPT, esp. for less experienced people.

39.
Label: lack of consistency in output - not sure what to expect
Quotes:
- E04: Sometimes it'll give me instructions and sometimes it'll just give me the code and then sometimes it'll tell me to use R extensions or something like that. It is random in that regard, it's not deterministic in terms of what result you're going to get. (interviewer's observation) E04 regularly evaluates the AI responses and thinks that it is not deterministic.

40.
Label: summarizes ai's code
Quotes:
- E01: So set up, move the turtle to go. Increase the size of the turtle by two units. Oh, dear. It's, it's making the turtle bigger. Oh, that's kind of, that's kind of messed it up a little bit then. (interviewer's observation) E01 reads the code and comments, summarizing the code, and thinks about how the AI was understanding the request.

41.
Label: iterative debugging
Quotes:
- E01: This is what conversations with ChatGPT typically look like. I had to go through about eight separate times to get all the errors out of it.  But, but look at how it structured the code. Look at the things that did look what you could learn from this. This is valuable. (interviewer's observation) Users may benefit from the iterative debugging process during working with AI, even though AI might give wrong answers.

42.
Label: accepts the limitation
Quotes:
- E01: It's about, let's see, what did I count is 3800 lines of code. Well, first I couldn't feed it all the ChatGPT can only take it 1800 lines at a time. And then I said, you know, can you tell me what this does? And it basically said, no. ... I can live with that again. (interviewer's observation) ChatGPT's limitation on reading long code pieces.

43.
Label: human's value: judgement
Quotes:
- E01: I think the key is to not replace human judgment and ability, but to find a fast way to increase human capability and judgment. (interviewer's observation) Augmentation of human capabilities & building on human judgement. Subjectivity of humanity?

44.
Label: chatgpt ability (positive): infer
Quotes:
- E01: Well, I cut the entire user's question. It figured out what I wanted. I didn't even tell it what I wanted. It just told me. (interviewer's observation) ChatGPT could infer E01's need from the input context.

45.
Label: r extension
Quotes:
- E04: "How about without the R extension" (interviewer's observation) E04 evaluates the AI response and decides that he does not need to use the R extension.

46.
Label: ai errors
Quotes:
- E01: (no verbal response) (interviewer's observation) E01 laughs when he sees ChatGPT making a classical error.

47.
Label: emphasizes oral tradition
Quotes:
- E01: So my observation is that a critical, critical 10%, maybe more, maybe a lot more of knowledge that you need to do your job in software is only contained in oral tradition. It's, it is not documented anywhere.  (interviewer's observation) E01's reflection on knowledge in pieces - how they are generated and sustained.

48.
Label: integrates ai into established workflow
Quotes:
- E04: I just like being able to kind of, like, iteratively build it. The thing that I always do when I create a model is I do, like, the initial command. I'll set up and go here. I'll go ahead and after I kind of set up the buttons, I'll put the functions behind them back here in the interface. (interviewer's observation) E04 creates the code skeleton before asking ChatGPT. He has a clear idea & established process of building ABMs.

49.
Label: people's abilitiy to write clear instructions & contextualize problems can vary quite a bit
Quotes:
- E01: In terms of learning experiences, like ramping up to using an assistant wrapping up to using ChatGPT might have some sort of evaluates. How well can you write instructions for another person? Some people just don't know how to conceptualize a problem. (interviewer's observation) E01 discusses how "writing instructions" is a capability that is missing on many people, and that is key to work with AI.

50.
Label: code skeleton
Quotes:
- E04: I just like being able to kind of, like, iteratively build it. The thing that I always do when I create a model is I do, like, the initial command. I'll set up and go here. I'll go ahead and after I kind of set up the buttons, I'll put the functions behind them back here in the interface. (interviewer's observation) E04 creates the code skeleton before asking ChatGPT. He has a clear idea & established process of building ABMs.

51.
Label: evaluating chatgpt's intuitive responses
Quotes:
- E01: I speak to (ChatGPT) like a person. I could just walk in the room and go write me code that does X, but I don't, I start with good morning. And it comes back, but it comes back with good morning. How can I assist you today? It's pretty good at figuring out natural language. So in some sense that you might just be better off, just pretend it's not a computer. (interviewer's observation) E01 reflects on how he interacts with ChatGPT like a person.
- E01: And, and they don't, this is an unfamiliar task to them apparently. So they want to ask one question and get the right answer the first time. And I, I don't have that expectation. I'll ask the right question and it'll get me 80% of the way there. (interviewer's observation) Novices might have a too high expectation for ChatGPT (but it cannot achieve that).
- E01: I've observed when I tried to suggest ChatGPT to other people, they're, um, they are amazed at the output that I can get. And that's because I know how to ask six questions in a row to zero in on what I'm after. (interviewer's observation) To maximize the capability of ChatGPT, one needs to know how to iteratively ask questions.
- E01: That's okay. Go is a convention. It's not really a requirement of the language that you use the word go. You can say banana to banana and have a button on the interface. It's a banana button. (interviewer's observation) E01 honors ChatGPT's own intuition even though it might be different from the convention.
- E01: Well, I cut the entire user's question. It figured out what I wanted. I didn't even tell it what I wanted. It just told me. (interviewer's observation) ChatGPT could infer E01's need from the input context.

52.
Label: human-effort: intepretation
Quotes:
- E04: I know that Perceptron model exists in the NetLogo model library. So it's interesting to me that it didn't pull that up, but it could be that I used like the wrong verbiage, but it doesn't understand what I'm trying to do. (interviewer's observation) E04 expects ChatLogo to find "Perceptron" model from the library but it does not. He evaluates the search results of the AI.
- E04: Interesting because it's trying to plot the name, which I know is wrong, but I'm just trying to remember how to... (interviewer's observation) E04 reasons through the responses of ChatGPT.

53.
Label: troubleshooting capability
Quotes:
- E04: It was really nice that it, like with the troubleshooting errors, for example, like at least in principle, I know that we had this one that we couldn't fix. It seemed like it was able to kind of do some better troubleshooting to a certain extent. (interviewer's observation) Better troubleshooting capability.

54.
Label: has only used chat gpt 3.5
Quotes:
- E04: I don't know if I've ever tried 4. I guess it would be 3.5. (interviewer's observation) Only used ChatGPT 3.5 before

55.
Label: time constraints
Quotes:
- E01: There's a lot of extensions I would love to know about GIS extensions, but I have very limited time. What could I do in two hours? And I think everybody has a very finite length of time. (interviewer's observation) AI could potentially save time for learning new extensions (compared with core concepts) of NetLogo.
- E04: It'd be that I just take this and see what this does. This should just be a single node so it'll kind of overwrite what I already did. (interviewer's observation) E04 uses the AI-generated code completely when realizing time constraints.

56.
Label: having an accessible  instanteous form of assistance is helpful for simple questions
Quotes:
- E04: And it could take a lot of time to like search the documentation and go online and try and figure out all those answers and just to have it like right there. So you can kind of stay within the task is really nice. (interviewer's observation) The capability to search for documentation and read it inside the workspace: esp. beneficial for novices.

57.
Label: highlights cost saving
Quotes:
- E01: Part of getting AI to be your assistant on the side is, is having a culture where you're used to asking for help. And asking that early and often, and you know, from development costs, the later you discover you have a problem, the more it costs to fix it. (interviewer's observation) AI could help people to ask more questions, more early and often, to save cost for the future.

58.
Label: warns against blind reliance on ai
Quotes:
- E04: To me, it seems like you need to have a certain degree of expertise to understand where the errors are and how to fix them. Because otherwise it's like you're going down this path where you're blindly following the ChatGPT and you have no idea what's going on. For less experienced people, I wouldn't like that because it could put you in a worse situation. (interviewer's observation) Requires expertise to understand errors and debug them. Risks to blindly follow ChatGPT, esp. for less experienced people.

59.
Label: values flexibility
Quotes:
- E01: That's okay. Go is a convention. It's not really a requirement of the language that you use the word go. You can say banana to banana and have a button on the interface. It's a banana button. (interviewer's observation) E01 honors ChatGPT's own intuition even though it might be different from the convention.

60.
Label: values state of the art updates
Quotes:
- E01: So one of the things that certainly about ChatGPT is, or whatever the AI tool is that you build, is that it will probably always be advancing, and always stay pretty close to the state of the art about all these things. So if it has, especially if it has a hive business, so that if any user discovers something, they can feed it back into the system. And then everybody knows it now. (interviewer's observation) AI could be used to preserve, process, and retrieve fragmented knowledge generated by human as a collaboration process.

61.
Label: user judgment
Quotes:
- E01: Some of this advice may be wrong. Use your good judgment. This is like Apple maps in 2010 or whatever, that tells you to turn right into the river and you have to go. (interviewer's observation) Users need to use their own judgment to evaluate ChatGPT's responses.

62.
Label: linting
Quotes:
- E01: So I see this from beginners all the time is they, they just get totally lost. I call it lint program from Unix, you know, it's like it's a little green checkbox looks at you and go, okay, wait, it's just, you've spelled everything correctly, but you have a conceptual error here. If it, if it caught structural problems like that, that would, that would help. (interviewer's observation) NetLogo needs to have linting features that exist in other languages (we are working on that right now). Here, E01 wants the linting to support identifying conceptual mistakes, different from syntax mistakes which most linters work on.
- E04: maybe you saw something that I didn't, but from my perspective, it seemed as though the code was set up appropriately, but it was marking the syntax as wrong. So maybe I was missing something, but I didn't see anything missing. So that was kind of frustrating. (interviewer's observation) Shows error messages even when it seems to be correct (that's a bug identified)
- E01: I mean, it's like, write a line of code. Are there any errors? But, beginners will start and they write three pages of code and then they hit the green check mark.  (interviewer's observation) Beginners could write chunks of code and then find many errors that they cannot fix.
- E04: It seems like a bug because I feel like all my parentheses are closed and all of my arguments and syntax are correct. (interviewer's observation) A less-clear error message makes E04 stuck.

63.
Label: manual coding
Quotes:
- E04: (Throughout this phase. He uses generated code only for reference when writing his own.) (interviewer's observation) E04 writes code manually with the steps given by ChatGPT, rather than copy & paste code.

64.
Label: questions ai capabilities
Quotes:
- E04: So if I can talk to it in NetLogo, does that mean I could give it in the logo command and then it would like turn that into code on the backend or? (interviewer's observation) Initial confusion over what the system could do.
===
---
Definitions for each code (64 in total):
1. 
Criteria: Acknowledges the existence of unconventional solutions in programming.
Label: Acknowledges non-conventional solutions

2. 
Criteria: Describes the variability and unpredictability of AI-generated responses.
Label: Non-deterministic

3. 
Criteria: Clearly articulates specific programming requirements for a model.
Label: Specifies model requirements

4. 
Criteria: Discusses the need for translating jargon to facilitate understanding among different user groups.
Label: Jargon translation

5. 
Criteria: Utilizes AI-generated code as a time-saving measure when under time constraints.
Label: Uses AI code due to time constraints

6. 
Criteria: Exhibits amusement in response to AI's errors.
Label: Humor

7. 
Criteria: Refers to the need for technical syntax support and assistance in coding.
Label: Technicality

8. 
Criteria: Compares AI assistance with other resources for immediate feedback.
Label: Compares with other resources

9. 
Criteria: Suggests the potential for AI to create personalized learning pathways.
Label: Personalization

10. 
Criteria: Describes the user-friendliness and intuitiveness of the AI interface.
Label: Direct

11. 
Criteria: Identifies instances where the AI-generated code lacks completeness.
Label: Incomplete code

12. 
Criteria: Highlights the AI's usefulness in translating models from other programming languages to NetLogo.
Label: Model translation

13. 
Criteria: Recognizes the AI's ability to provide immediate feedback compared to other resources.
Label: Highlights AI's promptness

14. 
Criteria: Values the clarity and documentation provided alongside AI-generated code.
Label: Values documentation

15. 
Criteria: Emphasizes the importance of asking iterative questions to improve AI responses.
Label: Emphasizes iterative questioning

16. 
Criteria: Reflects on the challenges faced by novices in using AI tools effectively.
Label: Novice

17. 
Criteria: Selectively modifies AI-generated code to fit specific needs.
Label: Customizes AI-generated code

18. 
Criteria: Expects the AI to retrieve models from the NetLogo library but finds it lacking.
Label: Model library

19. 
Criteria: Identifies the need for AI to catch conceptual errors in coding.
Label: Conceptual errors

20. 
Criteria: Evaluates the clarity and accessibility of AI explanations.
Label: Explanation clarity

21. 
Criteria: Discusses the benefits of having documentation readily available during tasks.
Label: Documentation search

22. 
Criteria: Highlights the importance of writing clear instructions for effective AI interaction.
Label: Instruction writing

23. 
Criteria: Notes the inclusion of best practices, such as debugging, in AI outputs.
Label: Highlights best practices

24. 
Criteria: Reflects on the potential for AI to facilitate knowledge sharing among users.
Label: Knowledge sharing

25. 
Criteria: Comments on the AI's interpretation of coding instructions.
Label: Comments on AI's interpretation

26. 
Criteria: Observes the AI's ability to infer user needs from context.
Label: Context inference

27. 
Criteria: Warns about the risks of blindly following AI without understanding errors.
Label: Debugging risks

28. 
Criteria: Discusses how AI could prompt users to reflect on their coding motives.
Label: Emphasizes questioning motives

29. 
Criteria: Provides more detailed requirements in response to AI prompts.
Label: Clarifies requirements

30. 
Criteria: Considers the potential for AI to reduce the learning curve for new extensions.
Label: Reduce learning curve and save human's needs for learning some programming knowledge

31. 
Criteria: Identifies the need for AI to assist in understanding scope-related challenges in coding.
Label: Addressing scope-related challenges in coding tasks

32. 
Criteria: Considers the optimal phrasing of requests to the AI for better responses.
Label: Considers optimal input terms

33. 
Criteria: Prefers AI-generated code that is clear and well-documented.
Label: Prefers readable code

34. 
Criteria: Appreciates the efficiency of integrating AI-generated code into existing workflows.
Label: Appreciates workflow efficiency

35. 
Criteria: Reads and adapts AI responses for personal use in coding tasks.
Label: Reads and adapts AI responses

36. 
Criteria: Values the AI's ability to propose unconventional solutions.
Label: Allows AI's intuition

37. 
Criteria: Chooses to address problems directly rather than seeking explanations from the AI.
Label: User choice

38. 
Criteria: Highlights the necessity of expertise to effectively utilize AI-generated solutions.
Label: Expertise requirement

39. 
Criteria: Expresses uncertainty regarding the consistency of AI outputs.
Label: Lack of consistency in output - not sure what to expect

40. 
Criteria: Summarizes and reflects on the AI's code outputs.
Label: Summarizes AI's code

41. 
Criteria: Describes the iterative process of debugging with AI assistance.
Label: Iterative debugging

42. 
Criteria: Accepts the limitations of the AI in processing large code segments.
Label: Accepts the limitation

43. 
Criteria: Emphasizes the importance of human judgment in conjunction with AI assistance.
Label: Human's value: judgment

44. 
Criteria: Recognizes the AI's capability to infer user needs effectively.
Label: ChatGPT ability (positive): infer

45. 
Criteria: Evaluates the necessity of specific extensions in AI responses.
Label: R extension

46. 
Criteria: Responds with amusement to AI errors.
Label: AI errors

47. 
Criteria: Reflects on the significance of oral tradition in knowledge retention.
Label: Emphasizes oral tradition

48. 
Criteria: Integrates AI into established workflows for model creation.
Label: Integrates AI into established workflow

49. 
Criteria: Discusses the variability in users' abilities to articulate problems and instructions.
Label: People's ability to write clear instructions & contextualize problems can vary quite a bit

50. 
Criteria: Creates a foundational structure for coding before engaging with AI.
Label: Code skeleton

51. 
Criteria: Evaluates the conversational nature of interactions with the AI.
Label: Evaluating ChatGPT's intuitive responses

52. 
Criteria: Analyzes the AI's understanding of user queries and its limitations.
Label: Human-effort: interpretation

53. 
Criteria: Acknowledges the AI's troubleshooting capabilities in error resolution.
Label: Troubleshooting capability

54. 
Criteria: Indicates limited experience with different versions of the AI.
Label: Has only used ChatGPT 3.5

55. 
Criteria: Recognizes the impact of time constraints on learning and coding.
Label: Time constraints

56. 
Criteria: Values the immediacy of AI assistance for simple queries.
Label: Having an accessible instantaneous form of assistance is helpful for simple questions

57. 
Criteria: Notes the potential for AI to reduce costs by encouraging early problem identification.
Label: Highlights cost saving

58. 
Criteria: Warns against over-reliance on AI without critical evaluation.
Label: Warns against blind reliance on AI

59. 
Criteria: Appreciates the flexibility offered by AI in programming conventions.
Label: Values flexibility

60. 
Criteria: Values the continuous updates and advancements of AI tools.
Label: Values state of the art updates

61. 
Criteria: Stresses the need for users to apply their judgment when using AI-generated advice.
Label: User judgment

62. 
Criteria: Identifies the need for linting features to catch conceptual errors in coding.
Label: Linting

63. 
Criteria: Engages in manual coding while using AI-generated code as a reference.
Label: Manual coding

64. 
Criteria: Questions the capabilities and functionalities of the AI system.
Label: Questions AI capabilities
---