You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (19 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
19. 
Concepts: {Repeat the input 19}
Relationship: {What is logical relationship between concepts in code 19, or N/A if not applicable}
Criteria: {Who did what, and how for code 19}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: express approval, affirm points made
- Users express approval and reinforce previously shared ideas or statements.
- Users affirm the contributions of both themselves and designers in discussions.

2.
Concepts: provide discussion context, provide context for interest
- Users share relevant background information to support current discussions.
- A user provides a positive affirmation relevant to prior discussion or inquiry.

3.
Concepts: express user appreciation, appreciate community support
- Users express gratitude towards designers for their work and efforts.
- Users express support for designers while designers appreciate community feedback.

4.
Concepts: questioning identity, inquire about professional backgrounds
- Participants ask others about their roles or status within the community.
- Inquiry about community members' professional status provides insights into identities.

5.
Concepts: share professional background, share teaching backgrounds
- A user shares their professional background when prompted by others.
- Users detail their teaching backgrounds in response to inquiries about their experience.

6.
Concepts: cross platform usage, clarify platform compatibility
- Users inquire about the availability of the application on different platforms.
- Users inquire about specific software versions and seek clarification on compatibility.

7.
Concepts: inquire about software access, request additional information
- User inquiries about the process for accessing the software help in understanding the platform.
- Users ask for clarification or further information regarding the software's functionalities.

8.
Concepts: suggest new features, provide specific feedback
- Users suggest features that would enhance the software, justifying their recommendations.
- Users provide suggestions for software improvements and feedback.

9.
Concepts: identify software gaps, propose usability improvements
- Users identify features that should exist within the software to meet their educational needs.
- Users propose features to improve classroom usability of the software.

10.
Concepts: request new features, propose additional functionality
- Users request new features or additional experiments to be included in the software.
- Users suggest convenient features like exporting experiments to enhance usability.

11.
Concepts: communicate user requests, articulate rationale for software requests
- Users make requests for specific functionalities or features.
- Users explain the rationale behind their requests and decisions regarding software features based on their experiences or needs.

12.
Concepts: highlight ideal use, reference educational contexts
- Designers describe optimal scenarios for using certain software components in educational settings.
- Designers mention the software's practical application in educational settings.

13.
Concepts: explain software limitations, explain current version's limitation
- Designers explain limitations caused by operating systems and outline software constraints.
- Discussion of the limitations and constraints of the current software version.

14.
Concepts: analyze compatibility issues, provide system compatibility information
- Designers analyze compatibility questions related to older systems and consider implications.
- Designers provide users with system requirements and compatibility confirmations.

15.
Concepts: clarify software details, clarify technical specifications
- Designers clarify how existing features work and provide details about specific software versions.
- Designers clarify technical specifications about software functionality, especially on touch screens.

16.
Concepts: outline design principles, justify design intentions
- Designers explain the principles that inform their design philosophy.
- Designers clarify their design choices and the rationale sustaining those decisions.

17.
Concepts: share development plans, discuss future development plans
- Designers share details regarding future software development plans with the community.
- Discussions occur concerning potential future developments and design considerations for the product.

18.
Concepts: share development timelines, outline feature and release plans
- Designers provide timelines for updates and inform users about expected software release dates.
- Designers outline plans for feature development and release timelines.

19.
Concepts: propose design improvements, improve software usability
- Designers seek and propose suggestions for enhancing software design and functionality.
- Designers implement updates specifically aimed at enhancing the software's usability for users.
===
---
Definitions for each code (19 in total):
1.
Concepts: express approval, affirm points made  
Relationship: Users express approval of others' ideas and reinforce them.  
Criteria: Users affirm contributions made by themselves and others in discussions.  
Phrase: Affirm contributions.

2.
Concepts: provide discussion context, provide context for interest  
Relationship: Users provide background information relevant to the ongoing discussions.  
Criteria: Users share positive affirmations that relate to previous inquiries.  
Phrase: Share relevant background information.

3.
Concepts: express user appreciation, appreciate community support  
Relationship: Users express gratitude towards designers and acknowledge community collaboration.  
Criteria: Users show support for designers while receiving appreciation for their feedback.  
Phrase: Express gratitude and support.

4.
Concepts: questioning identity, inquire about professional backgrounds  
Relationship: Participants seek to understand roles within the community through inquiries.  
Criteria: Users ask others about their professional status to gain context on community identities.  
Phrase: Inquire about professional roles.

5.
Concepts: share professional background, share teaching backgrounds  
Relationship: Users disclose their experiences in response to inquiries.  
Criteria: Users share their professional and teaching experiences when prompted.  
Phrase: Disclose professional experiences.

6.
Concepts: cross platform usage, clarify platform compatibility  
Relationship: Users investigate the softwareâ€™s usability across different systems.  
Criteria: Users inquire about application availability and compatibility on various platforms.  
Phrase: Seek platform compatibility.

7.
Concepts: inquire about software access, request additional information  
Relationship: User inquiries help clarify the software's accessibility and features.  
Criteria: Users ask for details regarding access and functionalities of the software.  
Phrase: Ask for software access.

8.
Concepts: suggest new features, provide specific feedback  
Relationship: Users offer ideas to enhance software usability based on their experiences.  
Criteria: Users suggest features and improvements for the software.  
Phrase: Suggest software enhancements.

9.
Concepts: identify software gaps, propose usability improvements  
Relationship: Users recognize missing features that could aid their educational needs.  
Criteria: Users propose necessary features to enhance the software's educational usability.  
Phrase: Identify software needs.

10.
Concepts: request new features, propose additional functionality  
Relationship: Users advocate for enhancements to expand software functionality.  
Criteria: Users request the inclusion of new features or experiments in the software.  
Phrase: Request additional features.

11.
Concepts: communicate user requests, articulate rationale for software requests  
Relationship: Users convey specific needs and the reasoning behind them.  
Criteria: Users articulate their requests for functionalities based on personal experience.  
Phrase: Articulate software requests.

12.
Concepts: highlight ideal use, reference educational contexts  
Relationship: Designers illustrate the effective applications of software in educational scenarios.  
Criteria: Designers describe optimal uses of software in educational settings.  
Phrase: Describe ideal software use.

13.
Concepts: explain software limitations, explain current version's limitation  
Relationship: Designers outline the constraints and limitations of the software version.  
Criteria: Designers explain limitations posed by the operating systems or software itself.  
Phrase: Explain software constraints.

14.
Concepts: analyze compatibility issues, provide system compatibility information  
Relationship: Designers evaluate compatibility concerns regarding various systems.  
Criteria: Designers provide details on required systems and compatibility confirmations.  
Phrase: Analyze compatibility.

15.
Concepts: clarify software details, clarify technical specifications  
Relationship: Designers elucidate the functioning of the software and its specifications.  
Criteria: Designers clarify operation and technical details of software features.  
Phrase: Clarify technical specifications.

16.
Concepts: outline design principles, justify design intentions  
Relationship: Designers reflect on the guiding principles behind their design choices.  
Criteria: Designers explain the rationale and philosophy underpinning their design choices.  
Phrase: Justify design choices.

17.
Concepts: share development plans, discuss future development plans  
Relationship: Designers communicate their visions for the software's trajectory.  
Criteria: Designers share intentions and considerations regarding future software developments.  
Phrase: Share development plans.

18.
Concepts: share development timelines, outline feature and release plans  
Relationship: Designers inform users about scheduling and future updates to the software.  
Criteria: Designers outline upcoming features and their corresponding timeline for releases.  
Phrase: Outline release timelines.

19.
Concepts: propose design improvements, improve software usability  
Relationship: Designers seek feedback to enhance both design and functionality.  
Criteria: Designers propose updates aimed at improving usability.  
Phrase: Propose usability improvements.
---