You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (53 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
53. 
Concepts: {Repeat the input 53}
Relationship: {What is logical relationship between concepts in code 53, or N/A if not applicable}
Criteria: {Who did what, and how for code 53}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: offer user support, provide technical support
- Designers offer support and assistance to users to help them effectively use the product.
- Designers provide technical support and guidance to users regarding the software.

2.
Concepts: provide feature details, explain feature functionality
- A designer clarifies and illustrates the functionality of specific features through examples.
- The designer explains and introduces the functions and functionalities of specific software features.

3.
Concepts: explaining design goals, explain design principles
- Designers explain their design philosophy aimed at user-friendliness.
- Designers articulate and explain the principles and philosophy behind their design choices.

4.
Concepts: clarify version type, update clarification
- Designers clarify the type of version being discussed within the community.
- Designer clarifies which version of the software is being discussed in the group.

5.
Concepts: apologize for disturbance, apologize for inconvenience
- Designers apologize for any inconvenience caused to users.
- The designer apologizes for any inconvenience caused by late communication.

6.
Concepts: explain limitations, acknowledge limitations
- The designer explains and discusses limitations of a feature or solution within the software.
- A designer recognizes potential limitations of the software and suggests future considerations.

7.
Concepts: express user frustration, express frustration with current limitations
- Users express frustration regarding the limitations of their current technology.
- Developer expresses frustration with limitations in the software or tools available.

8.
Concepts: release new features, announce software release, announce version updates
- The designer announces new features and updates in a version release.
- The designer announces the release of a new software version and provides detailed information about it.
- The developer informs users about the release of a new version and its updates.
- The designer announces the release of a new version of the product and its updates.

9.
Concepts: detail specific updates, list and detail updates
- The designer details specific updates and provides a comprehensive overview of new features and fixes.
- The designer lists and provides a comprehensive overview of new features and bug fixes in the software update.

10.
Concepts: share version details, version update notes
- Designers share specific details about the current version of the software.
- Designers provide detailed notes on updates, features, and changes in new software versions.

11.
Concepts: list upcoming features, preview upcoming features
- Designers list upcoming features and updates included in the software.
- A designer previews upcoming features and updates for the software, using visual or textual formats.

12.
Concepts: provide version updates, inform about version availability
- Designers inform users about the status of software versions and their expected release timelines.
- Designers inform users about software updates, downloads, and version releases.

13.
Concepts: communicate updates, communicate release plans, share update timeline
- The designer communicates updates and timelines for software releases to users.
- Designers communicate specific timelines and plans for software updates and releases.
- The designer gives and communicates expected timelines for software updates and releases.

14.
Concepts: update the community, provide progress updates
- The designer makes announcements regarding upcoming software updates and features.
- The designer updates the community on the progress of software releases and updates.

15.
Concepts: development update, communicate product updates
- Information shared by designers about the current status, updates, and future plans for the Physics Lab software.
- Designers provide information about updates or technical changes to the Physics Lab software.

16.
Concepts: share development plans, share development updates
- The designer makes announcements about upcoming features or updates.
- Designers share detailed information about updates and ongoing feature development.

17.
Concepts: internal update, share visual updates
- Designer shares updates about changes to software components in future releases.
- The designer shares visual updates related to the software's development.

18.
Concepts: announce updates, announce component changes
- Designers announce new features and updates based on user input and provide information about upcoming changes.
- Designers provide updates regarding software versions and new features.
- The designer informs and announces changes to component specifications in upcoming updates.

19.
Concepts: provide status updates, communicating progress
- Designers provide updates on the status of software development.
- Designers communicate updates on the progress of software releases across different platforms.

20.
Concepts: reassure users, answer to a question
- The developer reassures users regarding the progress and future availability of features.
- Designer reassures users about the upcoming feature's release timeline.

21.
Concepts: suggest prioritization, prioritize user feedback
- User advises prioritization of features over completeness in development.
- The developer indicates plans for prioritizing certain features based on user feedback.

22.
Concepts: discuss future directions, future planning and development
- The designer discusses and shares potential future interests that may influence development.
- Designer discusses future planning and ongoing development efforts.

23.
Concepts: outline future plans, future design plans/considerations
- Designers outline future plans and considerations for software development.
- Designers share considerations or plans for future design developments based on user needs.

24.
Concepts: use non verbal communication, use emojis for communication
- Use of emojis or other non-verbal forms of communication by users.
- Users communicate emotions or reactions through the use of emojis.

25.
Concepts: appreciate designers' efforts, express gratitude to others
- Users express appreciation and gratitude for the designers' contributions.
- Users express gratitude and appreciation for the work done by designers and community members.

26.
Concepts: integrate user feedback, involve users in design
- Designers actively seek and incorporate user feedback into the design process.
- Designers actively involve users in the design process through feedback or testing.

27.
Concepts: gather user input, gather user feedback
- Designers gather user input on specific aspects of the software's design.
- Designers request feedback from users to enhance the software based on their experiences.

28.
Concepts: invite feedback, encourage feedback
- Designers invite users to provide feedback and suggestions for future updates.
- Designers encourage users to provide suggestions and feedback for improvements.

29.
Concepts: solicit user feedback, solicit user suggestions
- Designers prompt users for feedback and solicit suggestions to improve the app.
- Designers invite users to share suggestions and requirements for future software iterations.

30.
Concepts: plan for iterative development, engage in iterative development
- Designers outline plans for iterative development based on user feedback.
- Designers discuss updates and continuously improve the product based on user feedback.

31.
Concepts: align with user feedback, refine design based on feedback
- The designer aligns their actions with user feedback to improve the software.
- Designers propose refinements and adaptations to the software's design based on user input.

32.
Concepts: developer response, respond to user feedback
- Designers respond to user inquiries or feedback regarding software features and updates.
- Designers respond to user feedback or queries regarding feature support.

33.
Concepts: react to user feedback, accept user suggestions
- Designers indicate that user feedback will be incorporated in future updates.
- Designers acknowledge and agree to implement user suggestions in future updates.

34.
Concepts: announce future plans, announce future consultation
- Designers communicate plans for future updates and solicit community input.
- Designers indicate plans to consult with the community before making decisions.

35.
Concepts: encourage community participation, encourage participatory design
- Designers encourage and invite community participation in the development process.
- Designers encourage community contributions to the design process through feedback and suggestions.

36.
Concepts: acknowledge mutual points, confirm understanding in discussions
- Users and designers affirm and acknowledge each other's points during discussions.
- Users and designers confirm their understanding of statements or feedback during discussions.

37.
Concepts: encourage open communication, encourage future discussion or questions
- Designers promote open communication and encourage users to share issues or suggestions.
- The designer encourages ongoing discussion and problem reporting among users.

38.
Concepts: user background inquiry, inquire about user backgrounds
- Designer inquires about the user's teaching level to understand their background.
- Designers inquire about users' professional backgrounds to better understand their perspectives.

39.
Concepts: ask further questions, ask follow-up questions
- Designers ask questions to clarify user preferences or requests.
- A designer asks follow-up questions to clarify user needs and issues.

40.
Concepts: share teaching experiences, share user experiences
- Users share their teaching experiences to inform their contributions.
- Users share their experiences and the impact of the software on their teaching or learning.

41.
Concepts: question, ask about recent updates
- Users ask questions about software updates and features.
- Users inquire about recent updates or changes to the software.

42.
Concepts: inquire about update timing, inquire about update status
- Users inquire about the timing and schedule of upcoming software updates.
- Users inquire about the status of updates for specific versions of the software.

43.
Concepts: inquire about pc version, pc version inquiries
- Users inquire specifically about the software's PC version.
- Users inquire specifically about the usage and features of the PC version of the app.

44.
Concepts: information seeking, request information
- Users asking questions to gain knowledge or resources related to the software.
- Users ask for specific information or help regarding the software's functionalities.

45.
Concepts: request assistance, request technical support
- Users request assistance or guidance regarding software usage.
- Users ask for assistance or guidance on using the software effectively.

46.
Concepts: request user manual, reiterate user manual request
- Users request a user manual or guidance on using the software.
- Users restate their requests for a user manual to assist with software usage.

47.
Concepts: share positive classroom experiences, share feedback on software effectiveness
- Users share positive feedback and experiences regarding the software's success in classrooms.
- Users share positive feedback regarding the software's effectiveness in enhancing student engagement.

48.
Concepts: express positive feedback, express satisfaction with software, review software usability positively
- Users express positive feedback and approval about the software's effectiveness and usability.
- Users express satisfaction regarding the software's practicality and features.
- Users provide positive reviews highlighting the software's usability and practicality.

49.
Concepts: provide comparative feedback, compare software favorably
- Users provide comparative feedback regarding the software's quality and practicality.
- Users compare the software positively against similar applications, highlighting its practicality and effectiveness.

50.
Concepts: appreciate software features, demonstrate appreciation for feedback
- Users express appreciation for the software's features and development.
- Users express gratitude for feedback regarding software features or updates.

51.
Concepts: provide specific feedback, provide feedback and suggestions
- Users provide specific feedback regarding features or aspects of the software.
- Users provide feedback and suggestions regarding the software's features and development direction.

52.
Concepts: suggest new features, suggest educational enhancements
- Users suggest improvements and new features to enhance the software's functionality.
- Users suggest or request enhancements to improve the software's educational utility.

53.
Concepts: collect user requests, make feature requests
- Users request new features or improvements to the software.
- Users make formal and detailed requests for specific features in the software.
===
---
Definitions for each code (53 in total):
1.
Concepts: offer user support, provide technical support  
Relationship: Both concepts involve designers assisting users in navigating and utilizing the software effectively.  
Criteria: Designers offer and provide technical support to users to enhance their experience with the product.  
Phrase: Provide user and technical support.

2.
Concepts: provide feature details, explain feature functionality  
Relationship: Both concepts focus on clarifying and illustrating the functions of software features to users.  
Criteria: Designers provide detailed explanations and examples of feature functionalities to users.  
Phrase: Explain feature functionalities.

3.
Concepts: explaining design goals, explain design principles  
Relationship: Both concepts involve designers articulating their design philosophy and principles aimed at user experience.  
Criteria: Designers explain their design goals and principles to enhance user understanding.  
Phrase: Explain design philosophy.

4.
Concepts: clarify version type, update clarification  
Relationship: Both concepts involve designers providing clarity on the specific version of the software being discussed.  
Criteria: Designers clarify the type and specifics of the software version within the community.  
Phrase: Clarify version details.

5.
Concepts: apologize for disturbance, apologize for inconvenience  
Relationship: Both concepts involve designers expressing regret for any issues that may have affected users.  
Criteria: Designers apologize for any disturbances or inconveniences experienced by users.  
Phrase: Apologize for inconveniences.

6.
Concepts: explain limitations, acknowledge limitations  
Relationship: Both concepts involve designers discussing and recognizing the constraints of the software.  
Criteria: Designers explain and acknowledge limitations of features or solutions within the software.  
Phrase: Discuss software limitations.

7.
Concepts: express user frustration, express frustration with current limitations  
Relationship: Both concepts involve users and developers expressing dissatisfaction with existing software limitations.  
Criteria: Users and developers express frustration regarding the limitations of the software or technology.  
Phrase: Express frustration with limitations.

8.
Concepts: release new features, announce software release, announce version updates  
Relationship: All concepts relate to designers informing users about new features and updates in software releases.  
Criteria: Designers announce new features and version updates to inform users about software changes.  
Phrase: Announce software releases.

9.
Concepts: detail specific updates, list and detail updates  
Relationship: Both concepts involve designers providing comprehensive information about software updates.  
Criteria: Designers detail and list specific updates, including new features and bug fixes.  
Phrase: Detail software updates.

10.
Concepts: share version details, version update notes  
Relationship: Both concepts involve designers providing information about the current version and its updates.  
Criteria: Designers share specific details and notes regarding the current software version and updates.  
Phrase: Share version details.

11.
Concepts: list upcoming features, preview upcoming features  
Relationship: Both concepts involve designers informing users about future features and updates.  
Criteria: Designers list and preview upcoming features and updates for the software.  
Phrase: Preview upcoming features.

12.
Concepts: provide version updates, inform about version availability  
Relationship: Both concepts involve designers communicating the status and availability of software versions.  
Criteria: Designers inform users about version updates and their availability.  
Phrase: Provide version updates.

13.
Concepts: communicate updates, communicate release plans, share update timeline  
Relationship: All concepts relate to designers informing users about updates and timelines for software releases.  
Criteria: Designers communicate updates and timelines for software releases to users.  
Phrase: Communicate release plans.

14.
Concepts: update the community, provide progress updates  
Relationship: Both concepts involve designers informing the community about software updates and progress.  
Criteria: Designers update the community on software release progress and upcoming features.  
Phrase: Update the community.

15.
Concepts: development update, communicate product updates  
Relationship: Both concepts involve designers sharing information about the status and updates of the software.  
Criteria: Designers provide updates on the current status and future plans for the software.  
Phrase: Communicate product updates.

16.
Concepts: share development plans, share development updates  
Relationship: Both concepts involve designers informing users about ongoing and future software developments.  
Criteria: Designers share plans and updates regarding ongoing feature development.  
Phrase: Share development updates.

17.
Concepts: internal update, share visual updates  
Relationship: Both concepts involve designers sharing information about changes and visual elements of the software.  
Criteria: Designers share internal updates and visual changes related to software development.  
Phrase: Share visual updates.

18.
Concepts: announce updates, announce component changes  
Relationship: Both concepts involve designers informing users about new features and changes in the software.  
Criteria: Designers announce updates and changes to software components based on user input.  
Phrase: Announce software updates.

19.
Concepts: provide status updates, communicating progress  
Relationship: Both concepts involve designers updating users on the development status of the software.  
Criteria: Designers provide status updates and communicate progress on software releases.  
Phrase: Provide status updates.

20.
Concepts: reassure users, answer to a question  
Relationship: Both concepts involve designers addressing user concerns and providing reassurance about features.  
Criteria: Designers reassure users regarding feature availability and respond to their inquiries.  
Phrase: Reassure users.

21.
Concepts: suggest prioritization, prioritize user feedback  
Relationship: Both concepts involve users and developers focusing on prioritizing features based on feedback.  
Criteria: Users and developers suggest and prioritize features based on user feedback.  
Phrase: Prioritize user feedback.

22.
Concepts: discuss future directions, future planning and development  
Relationship: Both concepts involve designers sharing insights on future development directions.  
Criteria: Designers discuss future planning and directions that may influence software development.  
Phrase: Discuss future directions.

23.
Concepts: outline future plans, future design plans/considerations  
Relationship: Both concepts involve designers sharing their plans and considerations for future software development.  
Criteria: Designers outline and share future plans for software development based on user needs.  
Phrase: Outline future plans.

24.
Concepts: use non verbal communication, use emojis for communication  
Relationship: Both concepts involve users employing non-verbal methods, such as emojis, to communicate.  
Criteria: Users utilize non-verbal communication, including emojis, to express emotions and reactions.  
Phrase: Use non-verbal communication.

25.
Concepts: appreciate designers' efforts, express gratitude to others  
Relationship: Both concepts involve users expressing appreciation for the contributions of designers and community members.  
Criteria: Users express gratitude and appreciation for the efforts of designers and others in the community.  
Phrase: Appreciate designers' efforts.

26.
Concepts: integrate user feedback, involve users in design  
Relationship: Both concepts involve designers actively seeking and incorporating user feedback into the design process.  
Criteria: Designers integrate and involve users in the design process through feedback and testing.  
Phrase: Integrate user feedback.

27.
Concepts: gather user input, gather user feedback  
Relationship: Both concepts involve designers collecting input and feedback from users regarding the software.  
Criteria: Designers gather user input and feedback to enhance the software's design.  
Phrase: Gather user feedback.

28.
Concepts: invite feedback, encourage feedback  
Relationship: Both concepts involve designers promoting the provision of feedback and suggestions from users.  
Criteria: Designers invite and encourage users to provide feedback and suggestions for improvements.  
Phrase: Invite user feedback.

29.
Concepts: solicit user feedback, solicit user suggestions  
Relationship: Both concepts involve designers prompting users for feedback and suggestions to improve the software.  
Criteria: Designers solicit user feedback and suggestions for future software iterations.  
Phrase: Solicit user suggestions.

30.
Concepts: plan for iterative development, engage in iterative development  
Relationship: Both concepts involve designers planning and discussing iterative development based on user feedback.  
Criteria: Designers plan and engage in iterative development to continuously improve the product.  
Phrase: Engage in iterative development.

31.
Concepts: align with user feedback, refine design based on feedback  
Relationship: Both concepts involve designers adapting their actions and designs based on user feedback.  
Criteria: Designers align their designs and propose refinements based on user feedback.  
Phrase: Refine design based on feedback.

32.
Concepts: developer response, respond to user feedback  
Relationship: Both concepts involve designers addressing user inquiries and feedback regarding software features.  
Criteria: Designers respond to user feedback and inquiries about software features and updates.  
Phrase: Respond to user feedback.

33.
Concepts: react to user feedback, accept user suggestions  
Relationship: Both concepts involve designers acknowledging and agreeing to incorporate user feedback in future updates.  
Criteria: Designers react to and accept user suggestions for future software updates.  
Phrase: Accept user suggestions.

34.
Concepts: announce future plans, announce future consultation  
Relationship: Both concepts involve designers communicating their plans for future updates and consulting with the community.  
Criteria: Designers announce future plans and indicate intentions to consult with the community.  
Phrase: Announce future plans.

35.
Concepts: encourage community participation, encourage participatory design  
Relationship: Both concepts involve designers promoting community involvement in the development process.  
Criteria: Designers encourage community participation and contributions to the design process.  
Phrase: Encourage community participation.

36.
Concepts: acknowledge mutual points, confirm understanding in discussions  
Relationship: Both concepts involve users and designers affirming and acknowledging each other's contributions in discussions.  
Criteria: Users and designers acknowledge and confirm mutual understanding during discussions.  
Phrase: Confirm understanding in discussions.

37.
Concepts: encourage open communication, encourage future discussion or questions  
Relationship: Both concepts involve designers promoting ongoing communication and discussion among users.  
Criteria: Designers encourage open communication and future discussions among users.  
Phrase: Encourage open communication.

38.
Concepts: user background inquiry, inquire about user backgrounds  
Relationship: Both concepts involve designers seeking to understand users' backgrounds to inform their design approach.  
Criteria: Designers inquire about users' backgrounds to better understand their perspectives.  
Phrase: Inquire about user backgrounds.

39.
Concepts: ask further questions, ask follow-up questions  
Relationship: Both concepts involve designers seeking clarification on user preferences or requests.  
Criteria: Designers ask follow-up questions to clarify user needs and preferences.  
Phrase: Ask follow-up questions.

40.
Concepts: share teaching experiences, share user experiences  
Relationship: Both concepts involve users sharing their experiences to inform the community.  
Criteria: Users share their teaching experiences and the impact of the software on their practices.  
Phrase: Share user experiences.

41.
Concepts: question, ask about recent updates  
Relationship: Both concepts involve users inquiring about updates and features of the software.  
Criteria: Users ask questions regarding recent updates and changes to the software.  
Phrase: Ask about updates.

42.
Concepts: inquire about update timing, inquire about update status  
Relationship: Both concepts involve users seeking information about the timing and status of software updates.  
Criteria: Users inquire about the timing and status of upcoming software updates.  
Phrase: Inquire about update status.

43.
Concepts: inquire about pc version, pc version inquiries  
Relationship: Both concepts involve users specifically asking about the PC version of the software.  
Criteria: Users inquire about the features and usage of the software's PC version.  
Phrase: Inquire about PC version.

44.
Concepts: information seeking, request information  
Relationship: Both concepts involve users asking questions to gain knowledge about the software.  
Criteria: Users request specific information or assistance regarding the software's functionalities.  
Phrase: Request information.

45.
Concepts: request assistance, request technical support  
Relationship: Both concepts involve users seeking help or guidance on using the software effectively.  
Criteria: Users request assistance or technical support for software usage.  
Phrase: Request technical support.

46.
Concepts: request user manual, reiterate user manual request  
Relationship: Both concepts involve users asking for guidance or a user manual for the software.  
Criteria: Users request and reiterate their need for a user manual to assist with software usage.  
Phrase: Request user manual.

47.
Concepts: share positive classroom experiences, share feedback on software effectiveness  
Relationship: Both concepts involve users sharing positive feedback about the software's impact in educational settings.  
Criteria: Users share positive experiences and feedback regarding the software's effectiveness in classrooms.  
Phrase: Share positive experiences.

48.
Concepts: express positive feedback, express satisfaction with software, review software usability positively  
Relationship: All concepts involve users expressing approval and satisfaction with the software's usability and effectiveness.  
Criteria: Users express positive feedback and satisfaction regarding the software's usability and features.  
Phrase: Express positive feedback.

49.
Concepts: provide comparative feedback, compare software favorably  
Relationship: Both concepts involve users comparing the software positively against similar applications.  
Criteria: Users provide comparative feedback highlighting the software's quality and effectiveness.  
Phrase: Compare software favorably.

50.
Concepts: appreciate software features, demonstrate appreciation for feedback  
Relationship: Both concepts involve users expressing gratitude for the software's features and the feedback received.  
Criteria: Users appreciate the software's features and express gratitude for feedback on updates.  
Phrase: Appreciate software features.

51.
Concepts: provide specific feedback, provide feedback and suggestions  
Relationship: Both concepts involve users giving detailed feedback and suggestions regarding the software.  
Criteria: Users provide specific feedback and suggestions for the software's features and development.  
Phrase: Provide specific feedback.

52.
Concepts: suggest new features, suggest educational enhancements  
Relationship: Both concepts involve users proposing improvements and new features to enhance the software's functionality.  
Criteria: Users suggest new features and enhancements to improve the software's educational utility.  
Phrase: Suggest new features.

53.
Concepts: collect user requests, make feature requests  
Relationship: Both concepts involve users formally requesting new features or improvements for the software.  
Criteria: Users collect and make requests for new features or improvements to the software.  
Phrase: Make feature requests.
---