You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (50 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
50. 
Concepts: {Repeat the input 50}
Relationship: {What is logical relationship between concepts in code 50, or N/A if not applicable}
Criteria: {Who did what, and how for code 50}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: outline development priorities, discuss prioritization and development order
- The designer outlines current areas of focus and priorities for development.
- Statements indicate the order of tasks or features to be developed, discussing prioritization among different features.

2.
Concepts: testing phase, clarify testing status and version information
- Designer specifies the phase of development for a particular version or tool.
- Designer clarifies the purpose of a specific version of a tool and identifies the current version being discussed.

3.
Concepts: component adjustments, refine and improve design features
- The designer discusses adjustments made to components within the application, detailing their properties and functionalities.
- Designer proposes adjustments to improve software design and discusses necessary improvements for features.

4.
Concepts: simplification and refinement in design, seek efficiency and suggest simplification
- Designers advocate for simplification and refinement processes in design strategies.
- The designer emphasizes the need for simplicity in software design and suggests simplifying features for better usability.

5.
Concepts: explaining technical artifacts, provide technical details and explain functionalities
- Designer explains the nature of a specific technical artifact or tool available to users.
- The designer shares technical details about features, explains how to simulate components, and clarifies feature functionalities.

6.
Concepts: outline and consider technical requirements, explain design goals and development process
- The designer outlines and considers technical specifications or requirements necessary for the software's performance.
- A designer articulates the goals of the software design process and explains compatibility and requirements for effective use.

7.
Concepts: justify design decisions, explain rationale and share design thoughts
- Users and designers provide reasoning for decisions based on user input.
- The designer explains the rationale behind usability design and shares insights into design decisions.

8.
Concepts: develop and explain feature needs, give examples and acknowledge feature needs
- Designers outline ongoing feature development efforts and explain the motivations behind them.
- The designer provides details about a proposed feature and acknowledges the need for specific functionalities.

9.
Concepts: speculate and consider compatibility, discuss and clarify system compatibility
- Designer speculates about the product's compatibility with older systems and considers future compatibility challenges.
- The designer discusses potential compatibility with various operating systems and clarifies the need for compatibility checks.

10.
Concepts: mention feedback based prompts, ask for help and suggest possibilities
- Designer mentions the intention to use user feedback for guiding software design.
- The designer indicates plans to seek user input in future stages and suggests exploring new feature possibilities.

11.
Concepts: explain limitations and highlight constraints, acknowledge limitations and potential updates
- Designers explain the limitations of software features and highlight technical constraints affecting performance.
- A designer identifies potential issues with software compatibility and acknowledges limitations that need attention.

12.
Concepts: give usage instructions, guide users and instruct on usage
- Designers provide instructions on how to use specific features within the software.
- The designer provides detailed usage instructions and information on new features.

13.
Concepts: direct users to resources, provide instructions and information for downloading
- Designer directs users to specific resources for obtaining software or tools.
- Designers provide instructions on how to download the software and disseminate information on download locations.

14.
Concepts: user support, provide technical support
- Assistance and support provided by designers to help users effectively use the product.
- Designers offer technical support to users facing challenges.

15.
Concepts: communicate user updates, communicate software timelines
- Designers communicate updates and timelines regarding software releases and features to users.
- The designer shared a timeline for upcoming software updates and informed users about the current version and its release timeline.

16.
Concepts: share and communicate updates, update and share information on review status
- The designer shares visual content to inform users about ongoing updates and communicates news regarding software.
- The designer updates the community about the status of software reviews and shares information regarding app releases.

17.
Concepts: inform about software updates, provide platform-specific updates and information
- Designers inform users about software updates, version availability, and download information.
- Designer provides updates specific to platforms and shares relevant information regarding software availability.

18.
Concepts: preview and describe update scope, outline and validate future updates
- A designer previews upcoming updates and describes the extent of changes included in the update.
- The designer explains features included in future updates and confirms upcoming updates being prepared for future release.

19.
Concepts: internal update, communicate product updates
- Designers provide updates about specific components or features of the software that will change in future versions.
- Designers provide information about updates or changes to the Physics Lab software.

20.
Concepts: promise that the update is ongoing, confirm and promise future updates
- Designers assure the community that updates and improvements are actively being pursued.
- Designer reaffirms commitment to future updates and asserts certainty regarding the availability of features.

21.
Concepts: address user concerns, reassure and enhance user confidence
- Designers addressed user concerns by providing reassuring information and alleviating worries regarding functionality.
- Instances where designers reassure users about progress and express gratitude for support and improvements.

22.
Concepts: set timeline expectations, suggest and promise future feature completion
- Designers set expectations regarding the availability and timelines for updates or feature releases.
- The designer suggests a possible release timeframe for a complex feature and indicates that a requested feature will be implemented later.

23.
Concepts: detail educational benefits, highlight benefits and explain feature importance
- The designer details the educational benefits tied to upcoming features in the software.
- The designer discusses long-term benefits of software features and explains their significance in ensuring effectiveness.

24.
Concepts: explain lack of internet, discuss system limitations
- A user explains a limitation regarding internet access in their educational environment.
- Users provide insights on system limitations and internet restrictions in educational settings.

25.
Concepts: make inquiries and seek information, request support and information
- Users ask questions to seek information or clarification regarding the software.
- User inquires about technical usage or functionality and requests assistance or additional resources.

26.
Concepts: question access and clarify platforms, inquire about downloads and processes
- A user requests information on how to access specific software versions and asks about their availability.
- A user requests information about how to download the software version and seeks specifics about downloading.

27.
Concepts: share contextual software narratives, share and recount past incidents
- Users narrate personal stories that contextualize software use and effectiveness.
- Users recount past incidents affecting software usage and share experiences related to negative incidents.

28.
Concepts: suggest new software features, provide feedback and suggestions
- Users suggest new features that could enhance the software's functionality.
- Users provide suggestions or feedback on software features and direction.

29.
Concepts: expand platform scope, request additional features for experiments
- Users suggest expanding the software's capabilities to include additional scientific experiments or topics.
- Users request specific experiments and features to enhance the software's experimental capabilities.

30.
Concepts: solve user problems, collaborate on solutions
- Designers and users work together to address issues and propose solutions.
- Designers share and collaborate with users on improving software usability.

31.
Concepts: share design knowledge, shared experiences and support
- Designers and users share information relevant to the software's development.
- Users and designers sharing experiences and supporting each other in using and improving the software.

32.
Concepts: share visual references, seek visual confirmation
- Designers and users share images to clarify points in discussions.
- Designers confirm understanding or seek clarification visually from users.

33.
Concepts: express approval on design ideas, confirm collaboration and understanding
- Users express approval and agree on the design ideas of the software during discussions.
- Users and designers affirm agreement or understanding during discussions.

34.
Concepts: gather community feedback, announce future consultations
- Designers express intent to gather feedback from the community before making decisions.
- A designer indicates a commitment to consult the community before making decisions.

35.
Concepts: share development resources, suggest community resource sharing
- Designers and users share development plans and resources with the community.
- Designers and users suggest approaches for collaborative resource sharing.

36.
Concepts: co-design with users, offering co-designing
- Designers engage users in the design process, allowing contributions to ideas and decisions.
- A designer indicates their intention to involve community members in the design process for future development.

37.
Concepts: engage in iterative development, plan for iterative feedback
- Instances where designers discuss updates and improvements based on feedback.
- Designers plan to gather feedback before starting new features in the software development process.

38.
Concepts: prioritize user feedback, commit to improvement and solutions
- Designers align software updates with user needs and adjust features accordingly.
- Designers commit to improving the application based on user feedback and address user needs in updates.

39.
Concepts: acknowledge user suggestions, plan updates based on feedback
- Designers accept user feedback and discuss timelines for suggested features.
- Designers indicate future incorporation of user feedback in updates and outline plans for enhancements.

40.
Concepts: ask follow-up questions, ask clarifying questions
- Designers and users follow up with questions to clarify usability issues.
- Designers and users inquire for further clarity on software features.

41.
Concepts: discuss design inquiries, facilitate query and response
- Designers pose questions related to input methods and software functionalities.
- Users ask questions and receive answers regarding design-related issues.

42.
Concepts: gather user insights, collect user insights
- Designers actively gather input from users about their preferences and needs.
- Designers engage users to collect detailed information about their experiences.

43.
Concepts: open communication, facilitate direct communication
- Designers promote open communication by encouraging users to express their needs or issues freely.
- Designers engage in real-time discussions with users to share updates and feedback.

44.
Concepts: compliment software and its 3d effects, compliment and appreciate software features
- A user offers compliments about the software's simulation capabilities and its 3D rendering.
- A user expresses admiration for the software and highlights its features.

45.
Concepts: appreciate designers' efforts, acknowledge software craftsmanship
- Users express gratitude towards the efforts made by the designers.
- Users express admiration for the quality and dedication behind the software's development.

46.
Concepts: achieve self-sufficiency in resource access, engage in self-help through information retrieval
- Users acknowledge their self-sufficiency by finding resources in group files independently.
- Users express gratitude for retrieving information from group files, showcasing their self-help capabilities.

47.
Concepts: share teaching experiences, establish teaching credibility
- Users share their teaching experiences and qualifications to establish their identities.
- Users share their teaching backgrounds to establish authority within the community.

48.
Concepts: welcome community members, reciprocate greetings to foster engagement, initiate positive interactions
- Designers and users greet each other to establish a friendly atmosphere.
- Designers greet community members and reciprocate greetings to build rapport.
- Users greet the community to foster a welcoming environment.

49.
Concepts: elaborate on suggestions, provide contextual explanations
- Users elaborate on previous topics or suggestions for clearer understanding.
- Users provide context that enhances understanding of their comments and questions.

50.
Concepts: express personal interest
- The designer shares their personal interest in chemistry, highlighting a connection with the community.
- Designers share their personal interests to engage the community.
===
---
Definitions for each code (50 in total):

1.
Concepts: outline development priorities, discuss prioritization and development order
Relationship: The concepts are logically related as outlining priorities informs the discussion of which features to develop first.
Criteria: The designer outlines current areas of focus and discusses the order of tasks or features to be developed.
Phrase: Prioritize and discuss development order.

2.
Concepts: testing phase, clarify testing status and version information
Relationship: Clarifying the testing status is essential to understand the phase of development for a version.
Criteria: The designer specifies the testing phase and clarifies the purpose and current version of a tool.
Phrase: Clarify testing status.

3.
Concepts: component adjustments, refine and improve design features
Relationship: Adjusting components is directly related to refining and improving design features.
Criteria: The designer discusses adjustments made to components and proposes improvements for software design.
Phrase: Refine and improve design features.

4.
Concepts: simplification and refinement in design, seek efficiency and suggest simplification
Relationship: Simplification and refinement are interconnected as both aim to enhance efficiency in design.
Criteria: Designers advocate for simplification in design strategies to enhance usability.
Phrase: Advocate for simplification.

5.
Concepts: explaining technical artifacts, provide technical details and explain functionalities
Relationship: Explaining the nature of technical artifacts is inherently connected to detailing their functionalities.
Criteria: The designer elucidates the nature of technical artifacts and shares technical details about features.
Phrase: Explain technical artifacts.

6.
Concepts: outline and consider technical requirements, explain design goals and development process
Relationship: Outlining technical requirements is directly linked to explaining the design goals and development processes.
Criteria: The designer outlines technical specifications and articulates the goals of the software design process.
Phrase: Outline technical requirements.

7.
Concepts: justify design decisions, explain rationale and share design thoughts
Relationship: Justifying design decisions necessitates an explanation of the rationale behind them.
Criteria: Users and designers provide reasoning for decisions based on user input and share insights into design choices.
Phrase: Justify design decisions.

8.
Concepts: develop and explain feature needs, give examples and acknowledge feature needs
Relationship: Developing features involves explaining their needs and providing relevant examples.
Criteria: Designers outline ongoing feature development efforts and acknowledge the need for specific functionalities.
Phrase: Explain feature needs.

9.
Concepts: speculate and consider compatibility, discuss and clarify system compatibility
Relationship: Speculation about compatibility directly informs discussions on system compatibility.
Criteria: The designer speculates about compatibility with older systems and discusses potential compatibility challenges.
Phrase: Discuss system compatibility.

10.
Concepts: mention feedback based prompts, ask for help and suggest possibilities
Relationship: Mentioning feedback prompts is logically related to seeking help and suggesting new features.
Criteria: The designer indicates plans to use user feedback for guiding software design and exploring feature possibilities.
Phrase: Suggest possibilities based on feedback.

11.
Concepts: explain limitations and highlight constraints, acknowledge limitations and potential updates
Relationship: Explaining limitations is closely tied to acknowledging constraints affecting performance.
Criteria: Designers explain the limitations of software features and identify potential issues needing attention.
Phrase: Highlight software limitations.

12.
Concepts: give usage instructions, guide users and instruct on usage
Relationship: Providing usage instructions is fundamentally about guiding users on how to use the software.
Criteria: Designers provide detailed instructions on how to use specific features within the software.
Phrase: Guide users on usage.

13.
Concepts: direct users to resources, provide instructions and information for downloading
Relationship: Directing users to resources is intrinsically linked to providing information on how to download software.
Criteria: Designers direct users to resources for obtaining software and provide downloading instructions.
Phrase: Provide download instructions.

14.
Concepts: user support, provide technical support
Relationship: User support inherently includes providing technical assistance when challenges arise.
Criteria: Assistance is provided by designers to help users effectively utilize the product.
Phrase: Provide user support.

15.
Concepts: communicate user updates, communicate software timelines
Relationship: Communicating updates is logically related to sharing timelines for software releases.
Criteria: Designers communicate updates about software releases and timelines to users.
Phrase: Communicate software updates.

16.
Concepts: share and communicate updates, update and share information on review status
Relationship: Sharing updates is intertwined with communicating the status of reviews.
Criteria: The designer shares visual content and updates the community about the status of software reviews.
Phrase: Share review updates.

17.
Concepts: inform about software updates, provide platform-specific updates and information
Relationship: Informing users about updates is directly related to providing platform-specific information.
Criteria: Designers inform users about software updates and share platform-specific availability.
Phrase: Inform about software updates.

18.
Concepts: preview and describe update scope, outline and validate future updates
Relationship: Previewing updates inherently involves outlining and validating the scope of future changes.
Criteria: A designer previews upcoming updates and confirms features included in future releases.
Phrase: Preview future updates.

19.
Concepts: internal update, communicate product updates
Relationship: Internal updates are essential to communicate changes to specific components or features.
Criteria: Designers provide updates about specific components or features of the software.
Phrase: Communicate product updates.

20.
Concepts: promise that the update is ongoing, confirm and promise future updates
Relationship: Promising ongoing updates is connected to confirming the availability of future enhancements.
Criteria: Designers assure the community that updates are actively being pursued and reaffirm commitment.
Phrase: Promise future updates.

21.
Concepts: address user concerns, reassure and enhance user confidence
Relationship: Addressing user concerns is essential for providing reassurance and enhancing confidence in the software.
Criteria: Designers provide reassuring information to alleviate user worries regarding functionality.
Phrase: Reassure users.

22.
Concepts: set timeline expectations, suggest and promise future feature completion
Relationship: Setting timeline expectations directly relates to suggesting future feature availability.
Criteria: Designers establish timelines for updates or feature releases and suggest possible release dates.
Phrase: Set timeline expectations.

23.
Concepts: detail educational benefits, highlight benefits and explain feature importance
Relationship: Detailing educational benefits is inherently connected to highlighting the importance of features.
Criteria: The designer explains the educational benefits tied to software features and their significance.
Phrase: Highlight educational benefits.

24.
Concepts: explain lack of internet, discuss system limitations
Relationship: Explaining the lack of internet access is related to discussing broader system limitations impacting usability.
Criteria: A user describes limitations regarding internet access and shares insights on system constraints.
Phrase: Discuss system limitations.

25.
Concepts: make inquiries and seek information, request support and information
Relationship: Making inquiries is inherently linked to requesting support or additional information.
Criteria: Users ask questions to seek clarification regarding the software and request assistance.
Phrase: Seek information.

26.
Concepts: question access and clarify platforms, inquire about downloads and processes
Relationship: Questioning access is logically related to clarifying the processes for downloading software.
Criteria: A user requests information about accessing specific software versions and downloading processes.
Phrase: Clarify access to software.

27.
Concepts: share contextual software narratives, share and recount past incidents
Relationship: Sharing narratives is connected to recounting past incidents that contextualize software use.
Criteria: Users narrate personal stories and recount experiences related to software usage.
Phrase: Share software narratives.

28.
Concepts: suggest new software features, provide feedback and suggestions
Relationship: Suggesting new features is directly related to providing feedback on existing functionalities.
Criteria: Users propose new features that could enhance software functionality and provide suggestions.
Phrase: Suggest new features.

29.
Concepts: expand platform scope, request additional features for experiments
Relationship: Expanding platform scope is inherently about requesting additional features for enhanced functionality.
Criteria: Users suggest expanding the software's capabilities to include more scientific experiments.
Phrase: Request additional features.

30.
Concepts: solve user problems, collaborate on solutions
Relationship: Solving user problems necessitates collaboration to propose effective solutions.
Criteria: Designers and users work collaboratively to address issues and improve software usability.
Phrase: Collaborate on solutions.

31.
Concepts: share design knowledge, shared experiences and support
Relationship: Sharing design knowledge is related to sharing experiences that support software development.
Criteria: Designers and users share information relevant to software development and support each other.
Phrase: Share design knowledge.

32.
Concepts: share visual references, seek visual confirmation
Relationship: Sharing visual references is directly linked to seeking confirmation or clarification visually.
Criteria: Designers and users share images to clarify points in discussions and confirm understanding.
Phrase: Share visual references.

33.
Concepts: express approval on design ideas, confirm collaboration and understanding
Relationship: Expressing approval is inherently related to confirming collaboration and mutual understanding.
Criteria: Users express agreement on design ideas during discussions and affirm understanding.
Phrase: Confirm design collaboration.

34.
Concepts: gather community feedback, announce future consultations
Relationship: Gathering community feedback logically involves announcing intentions for future consultations.
Criteria: Designers express intent to gather feedback and indicate their commitment to consultation.
Phrase: Gather community feedback.

35.
Concepts: share development resources, suggest community resource sharing
Relationship: Sharing development resources is intrinsically linked to suggesting collaborative approaches for resource sharing.
Criteria: Designers and users share development plans and propose ways for collaborative resource sharing.
Phrase: Share development resources.

36.
Concepts: co-design with users, offering co-designing
Relationship: Co-designing inherently involves engaging users in the design process and allowing contributions.
Criteria: Designers engage users in the design process and indicate their intention to involve them in future developments.
Phrase: Co-design with users.

37.
Concepts: engage in iterative development, plan for iterative feedback
Relationship: Engaging in iterative development is closely tied to planning for feedback that informs improvements.
Criteria: Designers discuss updates based on feedback and plan to gather input before new features are developed.
Phrase: Engage in iterative development.

38.
Concepts: prioritize user feedback, commit to improvement and solutions
Relationship: Prioritizing user feedback is directly related to committing to making improvements based on that input.
Criteria: Designers align software updates with user needs and commit to addressing user feedback.
Phrase: Commit to improvement.

39.
Concepts: acknowledge user suggestions, plan updates based on feedback
Relationship: Acknowledging user suggestions is logically connected to planning updates that incorporate those suggestions.
Criteria: Designers accept user feedback and discuss timelines for suggesting features in updates.
Phrase: Acknowledge user suggestions.

40.
Concepts: ask follow-up questions, ask clarifying questions
Relationship: Asking follow-up questions is inherently related to seeking further clarification on usability issues.
Criteria: Designers and users follow up with questions to clarify aspects of software features.
Phrase: Ask clarifying questions.

41.
Concepts: discuss design inquiries, facilitate query and response
Relationship: Discussing design inquiries is logically related to facilitating queries and responses between users and designers.
Criteria: Designers pose questions related to software functionalities and users ask for clarification.
Phrase: Facilitate design inquiries.

42.
Concepts: gather user insights, collect user insights
Relationship: Gathering user insights is directly tied to collecting detailed information about user preferences and experiences.
Criteria: Designers actively seek input from users about their needs and preferences.
Phrase: Collect user insights.

43.
Concepts: open communication, facilitate direct communication
Relationship: Promoting open communication is intrinsically linked to facilitating direct discussions with users.
Criteria: Designers encourage users to express their needs and engage in real-time discussions.
Phrase: Facilitate open communication.

44.
Concepts: compliment software and its 3d effects, compliment and appreciate software features
Relationship: Complimenting the software's 3D effects is directly related to appreciating its overall features.
Criteria: A user offers compliments about the software's capabilities and expresses admiration for its features.
Phrase: Compliment software features.

45.
Concepts: appreciate designers' efforts, acknowledge software craftsmanship
Relationship: Appreciating designers' efforts is logically connected to acknowledging the quality of software craftsmanship.
Criteria: Users express gratitude towards the efforts made by designers and admire the software's development.
Phrase: Appreciate designers' efforts.

46.
Concepts: achieve self-sufficiency in resource access, engage in self-help through information retrieval
Relationship: Achieving self-sufficiency is directly linked to engaging in self-help for retrieving necessary information.
Criteria: Users acknowledge their ability to find resources independently within group files.
Phrase: Achieve self-sufficiency.

47.
Concepts: share teaching experiences, establish teaching credibility
Relationship: Sharing teaching experiences is inherently tied to establishing credibility and authority within the community.
Criteria: Users share their teaching backgrounds and experiences to build authority.
Phrase: Establish teaching credibility.

48.
Concepts: welcome community members, reciprocate greetings to foster engagement, initiate positive interactions
Relationship: Welcoming community members is logically related to initiating positive interactions and fostering engagement.
Criteria: Designers and users greet each other to create a friendly atmosphere and build rapport.
Phrase: Welcome community members.

49.
Concepts: elaborate on suggestions, provide contextual explanations
Relationship: Elaborating on suggestions is directly connected to providing context for clearer understanding.
Criteria: Users elaborate on previous suggestions and provide additional context to enhance comprehension.
Phrase: Elaborate on suggestions.

50.
Concepts: express personal interest
Relationship: Expressing personal interest is inherently about sharing a connection with the community.
Criteria: The designer shares their personal interests to engage with the community.
Phrase: Share personal interest.
---