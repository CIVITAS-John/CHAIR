You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (32 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
32. 
Concepts: {Repeat the input 32}
Relationship: {What is logical relationship between concepts in code 32, or N/A if not applicable}
Criteria: {Who did what, and how for code 32}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: realistic expectation setting, setting realistic expectations
- Setting realistic expectations or managing user expectations
- A designer sets realistic expectations about the project's progress or timelines.

2.
Concepts: set scope for experiments, outline limitations of experimental scope
- Designers define or set the scope for experiments or features.
- A designer outlines limitations or constraints of the app's experimental scope.

3.
Concepts: setting boundaries, set boundaries for future development
- Designer sets boundaries or limits for the project or community.
- A designer or user sets boundaries or clarifies the scope of future development or projects.

4.
Concepts: maintaining progress updates, communicating ongoing work
- Provides updates on progress or status of a task
- Informing users about ongoing work or development related to the software.

5.
Concepts: development progress, development update
- Moving forward with design or development plans
- A participant provides an update on the development progress.

6.
Concepts: informing the community, designer uses group announcement for communication
- Designer informs the community about updates or releases.
- A designer uses a group announcement to share information with the community.

7.
Concepts: encouraging transparency, maintain transparency
- Encouraging transparency in project progress or updates.
- The speaker is maintaining transparency about updates, plans, or processes.

8.
Concepts: demonstrating transparency, ensuring update transparency
- Designer provides transparency into development processes or timelines.
- A designer ensures transparency by sharing information about updates and progress with the community.

9.
Concepts: apologizing for delays, apology for late-night communication
- A designer explains or apologizes for a delay in development or response.
- Designer apologizes for a late-night communication.

10.
Concepts: offer to contribute content, offer to upload content
- Offering to contribute or provide content related to the software.
- Offers to upload content, share resources, or provide assistance within the online community.

11.
Concepts: commit to quick update, committing to a feature
- Designer commits to a quick update or resolution.
- Designers commit to adding a feature or fixing an issue.

12.
Concepts: future development commitment, designer 1 commits to development
- Committing to future updates or improvements
- Commitments or assurances from designers or developers about future updates, improvements, or developments.

13.
Concepts: sharing workarounds, suggesting compatibility solutions
- A designer shares a workaround or solution to a problem.
- A designer suggests solutions or workarounds for compatibility issues.

14.
Concepts: addressing limitations, provided workaround
- Providing a solution or workaround for a known limitation.
- Providing alternative solutions or workarounds to overcome obstacles or limitations.

15.
Concepts: identified solution, proposing alternative solutions
- A designer identifies a solution or answer to a specific problem or issue.
- A designer proposes an alternative solution to a problem or limitation.

16.
Concepts: problem-solving contribution, contributing to problem-solving
- Contributes to solving a problem or issue.
- Designer contributes to problem-solving within the community.

17.
Concepts: active problem-solving, encourage problem-solving through shared experiences, promote problem-solving culture
- Designer promotes active problem-solving within the application.
- The designer encourages problem-solving through shared experiences.
- A designer or user promotes a culture of problem-solving and open discussion.

18.
Concepts: assessing needs, identify frustrations
- Designers try to understand user needs or problems.
- A designer identifies potential issues or frustrations that users may experience.

19.
Concepts: identify input issue, identify usability issue
- A designer identifies an input issue.
- A user identifies a usability issue or problem with the software.

20.
Concepts: raises related issues, raise a concern for the new feature
- A designer or user raises a related issue or concern.
- A designer raises a concern or potential issue with a new feature or update.

21.
Concepts: notes potential issues, addressing previous issues
- A designer notes or mentions potential bugs or issues with the current design.
- Designer addresses previous issues or bugs in the software.

22.
Concepts: technical support, collaborative troubleshooting, contribute to troubleshooting
- Providing technical support or troubleshooting
- Participates in or facilitates collaborative troubleshooting.
- User contributes to troubleshooting discussions or provides technical support.

23.
Concepts: troubleshooting issues, facilitating problem-solving
- A user and designer work together to troubleshoot an issue.
- Designers facilitate problem-solving or troubleshooting discussions with users.

24.
Concepts: suggest troubleshooting tips, engaging in proactive problem-solving
- Designer suggests troubleshooting tips or solutions.
- Designers indicate proactive problem-solving or troubleshooting.

25.
Concepts: brief response, briefly responded
- Response is brief and lacks additional information.
- Users respond briefly, often with acknowledgement or confirmation.

26.
Concepts: expressing concern, express concern over memory retention of suggestions
- A designer expresses concern or worry about a particular issue, such as memory or capacity.
- A designer or user expresses concern about remembering or retaining user suggestions or feedback.

27.
Concepts: share concerns about internet access, share experience of network limitations
- User shares concerns about internet access or restrictions.
- A user shares an experience related to network limitations or constraints.

28.
Concepts: express concern, expressing frustration
- A user expresses concern or worry about an issue.
- A user expresses frustration or dissatisfaction with a specific issue.

29.
Concepts: raising security concerns, address network security concerns
- A user or designer raises concerns about the security of the platform.
- User expresses concerns about network security.

30.
Concepts: identifying gaps in functionality, highlight gaps in existing software
- A user or designer identifies gaps or limitations in the current software.
- The speaker is highlighting gaps or limitations in existing software or solutions.

31.
Concepts: highlighting outdated systems, critiquing outdated technology
- User highlights limitations of current systems.
- A user describes and expresses dissatisfaction with outdated technology.

32.
Concepts: checking compatibility, highlight compatibility, informing about compatibility
- A designer checks or suggests testing for compatibility to facilitate user understanding.
- A designer highlights or emphasizes the compatibility of a feature or tool with different systems or devices.
- Designers clarify or inform users about system compatibility.
===
Here are the definitions for each code:

---
1.
Concepts: realistic expectation setting, setting realistic expectations
Relationship: These concepts are related as they both involve managing user expectations.
Criteria: Designers set realistic expectations about project progress or timelines.
Phrase: Setting realistic expectations.

2.
Concepts: set scope for experiments, outline limitations of experimental scope
Relationship: These concepts are related as they both involve defining boundaries for experiments.
Criteria: Designers define or set the scope for experiments or features.
Phrase: Defining experimental scope.

3.
Concepts: setting boundaries, set boundaries for future development
Relationship: These concepts are related as they both involve setting limits for the project or community.
Criteria: Designers set boundaries or limits for the project or community.
Phrase: Setting boundaries.

4.
Concepts: maintaining progress updates, communicating ongoing work
Relationship: These concepts are related as they both involve keeping users informed.
Criteria: Designers provide updates on progress or status of a task.
Phrase: Providing progress updates.

5.
Concepts: development progress, development update
Relationship: These concepts are related as they both involve updating users on development.
Criteria: Designers provide updates on development progress.
Phrase: Providing development updates.

6.
Concepts: informing the community, designer uses group announcement for communication
Relationship: These concepts are related as they both involve sharing information with the community.
Criteria: Designers inform the community about updates or releases.
Phrase: Informing the community.

7.
Concepts: encouraging transparency, maintain transparency
Relationship: These concepts are related as they both involve openness and honesty.
Criteria: Designers encourage transparency in project progress or updates.
Phrase: Encouraging transparency.

8.
Concepts: demonstrating transparency, ensuring update transparency
Relationship: These concepts are related as they both involve providing clear information.
Criteria: Designers provide transparency into development processes or timelines.
Phrase: Demonstrating transparency.

9.
Concepts: apologizing for delays, apology for late-night communication
Relationship: These concepts are related as they both involve expressing regret for inconvenience.
Criteria: Designers explain or apologize for a delay in development or response.
Phrase: Apologizing for delays.

10.
Concepts: offer to contribute content, offer to upload content
Relationship: These concepts are related as they both involve offering assistance.
Criteria: Users offer to contribute or provide content related to the software.
Phrase: Offering to contribute content.

11.
Concepts: commit to quick update, committing to a feature
Relationship: These concepts are related as they both involve making promises to users.
Criteria: Designers commit to a quick update or resolution.
Phrase: Committing to updates.

12.
Concepts: future development commitment, designer 1 commits to development
Relationship: These concepts are related as they both involve making promises for future development.
Criteria: Designers commit to future updates or improvements.
Phrase: Committing to future development.

13.
Concepts: sharing workarounds, suggesting compatibility solutions
Relationship: These concepts are related as they both involve providing alternative solutions.
Criteria: Designers share workarounds or solutions to problems.
Phrase: Sharing workarounds.

14.
Concepts: addressing limitations, provided workaround
Relationship: These concepts are related as they both involve finding solutions to limitations.
Criteria: Designers provide solutions or workarounds for known limitations.
Phrase: Addressing limitations.

15.
Concepts: identified solution, proposing alternative solutions
Relationship: These concepts are related as they both involve finding solutions to problems.
Criteria: Designers identify or propose solutions to problems or limitations.
Phrase: Proposing solutions.

16.
Concepts: problem-solving contribution, contributing to problem-solving
Relationship: These concepts are related as they both involve helping to solve problems.
Criteria: Designers contribute to solving problems or issues.
Phrase: Contributing to problem-solving.

17.
Concepts: active problem-solving, encourage problem-solving through shared experiences, promote problem-solving culture
Relationship: These concepts are related as they all involve promoting a culture of problem-solving.
Criteria: Designers promote active problem-solving within the application.
Phrase: Promoting problem-solving.

18.
Concepts: assessing needs, identify frustrations
Relationship: These concepts are related as they both involve understanding user needs.
Criteria: Designers try to understand user needs or problems.
Phrase: Assessing user needs.

19.
Concepts: identify input issue, identify usability issue
Relationship: These concepts are related as they both involve identifying problems with the software.
Criteria: Designers identify input issues or usability problems.
Phrase: Identifying issues.

20.
Concepts: raises related issues, raise a concern for the new feature
Relationship: These concepts are related as they both involve expressing concerns.
Criteria: Designers raise related issues or concerns about new features.
Phrase: Raising concerns.

21.
Concepts: notes potential issues, addressing previous issues
Relationship: These concepts are related as they both involve addressing potential problems.
Criteria: Designers note potential issues or address previous issues.
Phrase: Addressing potential issues.

22.
Concepts: technical support, collaborative troubleshooting, contribute to troubleshooting
Relationship: These concepts are related as they all involve providing technical assistance.
Criteria: Designers provide technical support or troubleshooting.
Phrase: Providing technical support.

23.
Concepts: troubleshooting issues, facilitating problem-solving
Relationship: These concepts are related as they both involve helping to solve problems.
Criteria: Designers facilitate troubleshooting or problem-solving discussions.
Phrase: Facilitating troubleshooting.

24.
Concepts: suggest troubleshooting tips, engaging in proactive problem-solving
Relationship: These concepts are related as they both involve finding solutions to problems.
Criteria: Designers suggest troubleshooting tips or solutions.
Phrase: Suggesting troubleshooting tips.

25.
Concepts: brief response, briefly responded
Relationship: These concepts are related as they both involve providing short responses.
Criteria: Designers respond briefly, often with acknowledgement or confirmation.
Phrase: Responding briefly.

26.
Concepts: expressing concern, express concern over memory retention of suggestions
Relationship: These concepts are related as they both involve expressing worry about an issue.
Criteria: Designers express concern about memory or capacity issues.
Phrase: Expressing concern.

27.
Concepts: share concerns about internet access, share experience of network limitations
Relationship: These concepts are related as they both involve sharing concerns about access.
Criteria: Users share concerns about internet access or network limitations.
Phrase: Sharing concerns about access.

28.
Concepts: express concern, expressing frustration
Relationship: These concepts are related as they both involve expressing negative emotions.
Criteria: Users express concern or frustration about an issue.
Phrase: Expressing frustration.

29.
Concepts: raising security concerns, address network security concerns
Relationship: These concepts are related as they both involve expressing concerns about security.
Criteria: Users raise concerns about the security of the platform.
Phrase: Raising security concerns.

30.
Concepts: identifying gaps in functionality, highlight gaps in existing software
Relationship: These concepts are related as they both involve identifying limitations.
Criteria: Users identify gaps or limitations in the current software.
Phrase: Identifying gaps in functionality.

31.
Concepts: highlighting outdated systems, critiquing outdated technology
Relationship: These concepts are related as they both involve expressing dissatisfaction with outdated technology.
Criteria: Users highlight limitations of current systems or express dissatisfaction with outdated technology.
Phrase: Highlighting outdated systems.

32.
Concepts: checking compatibility, highlight compatibility, informing about compatibility
Relationship: These concepts are related as they all involve ensuring compatibility.
Criteria: Designers check or highlight compatibility to facilitate user understanding.
Phrase: Ensuring compatibility.

Let me know if you'd like me to make any changes!