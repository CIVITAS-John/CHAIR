You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (32 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
32. 
Concepts: {Repeat the input 32}
Relationship: {What is logical relationship between concepts in code 32, or N/A if not applicable}
Criteria: {Who did what, and how for code 32}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: instructional design, share knowledge about the software
- A designer discusses the instructional design or user experience of the software.
- A designer shares knowledge or information about the software.

2.
Concepts: design discussion, discussion of further interests
- The designer discusses or explains design-related topics, such as features, functionality, or technical aspects.
- A designer discusses or expresses interest in exploring further topics or features.

3.
Concepts: discuss adjustments, discuss product improvement
- Designers discuss adjustments or changes to component properties or behaviors.
- Designers discuss plans for improving the product or developing new features.

4.
Concepts: consideration, design contemplation
- Designer considers a particular issue or problem.
- Designer expresses contemplation or hesitation about a design decision or feature.

5.
Concepts: on-screen keyboard functionality, discuss touch screen functionality
- The designer discusses the functionality of on-screen keyboards or touch screens.
- Designers or users inform about or consider touch screen functionality or limitations.

6.
Concepts: discuss usability, collaborative planning
- Designers or users discuss or consider the usability of the software.
- Designers and users collaboratively discussing and planning the development of the software.

7.
Concepts: visual and functional design, interface layout decisions
- Discussions about the visual and functional aspects of the software.
- Decisions or discussions about the layout or design of the software's interface.

8.
Concepts: auto layout optimization, emphasize quality of auto-generated layout
- A designer discusses or mentions auto layout optimization or improvements.
- A designer emphasizes the importance of high-quality auto-generated layouts in the software.

9.
Concepts: emphasize optimization, refine design elements
- Designers mention optimizing or refining a feature or functionality.
- Designers refine or improve design elements to enhance user experience, emphasizing simplicity and stability.

10.
Concepts: seek efficiency, suggest simplification
- Designer seeks to simplify or improve a process.
- Designers or users suggest simplifying a design or process.

11.
Concepts: reiterate bidirectional conversion, explain bidirectional conversion
- Designer reiterates or emphasizes the bidirectional conversion feature.
- The designer explains or discusses bidirectional conversion between different formats or modes.

12.
Concepts: explain simulation, simulation enhancement
- Designers explain details about a simulation.
- The designer discusses or enhances simulation-related features or functionality.

13.
Concepts: complexity explanation, explain development process, clarify technical aspects
- A designer explains the complexity of a software feature or issue.
- The designer explains the development process or technical aspects of the software.
- Designers provide explanations or technical clarifications about the software.

14.
Concepts: explaining the need, explain feature importance
- Designer explains the need or purpose behind a feature or development.
- A designer explains the importance, significance, or value of a feature or component.

15.
Concepts: diagnosing a problem, problem-solving advice
- Designer provides a diagnosis for a problem.
- Designer provides problem-solving strategies or advice.

16.
Concepts: seek technical assistance, offer technical assistance
- A designer seeks technical assistance, help, or guidance from users or other stakeholders.
- Designers or users provide technical assistance or address technical issues to help others.

17.
Concepts: offering solutions, providing workarounds
- Offering solutions or workarounds.
- Providing a temporary solution or workaround.

18.
Concepts: open to alternatives, suggesting alternative solutions
- The designer mentions being open to alternative solutions or approaches.
- Suggesting alternative solutions or approaches.

19.
Concepts: manual editing, suggest manual adjustments, manual adjustment
- The designer mentions allowing manual editing of content or functionality.
- Designer or user suggests making manual adjustments to a system or process.
- A designer mentions the possibility of manual adjustments or customization options in the software.

20.
Concepts: assure compatibility, consider technical requirements
- Designers assure compatibility with specific devices or systems.
- Designers consider or discuss technical requirements or compatibility of the software with specific devices or systems.

21.
Concepts: compatibility check, compatibility answer, confirming system compatibility
- A designer suggests checking the compatibility of the system.
- A designer or user answers a question about compatibility.
- Designer confirms or responds to questions about system compatibility issues.

22.
Concepts: align with user needs, align with educational needs
- A designer aligns with user needs, preferences, or expectations in the development of Physics Lab.
- The designer aligns the software with educational needs or requirements.

23.
Concepts: share potential future direction, suggest future possibilities
- Designer shares potential future directions or interests.
- The designer suggests or discusses potential future possibilities or directions for the software or community.

24.
Concepts: development goals, discussing future plans, consider future compatibility
- Designer discusses long-term goals or objectives for the physics lab.
- Designer discusses potential future plans or considerations for the Physics Lab online community.
- A designer considers or discusses future compatibility, updates, or maintenance of Physics Lab.

25.
Concepts: long-term planning, discuss project planning
- A designer discusses long-term plans or goals for the project.
- A designer discusses project planning or organization.

26.
Concepts: mention ongoing research, mentioning future experiments
- Designer mentions ongoing research or development.
- Designer mentions potential future experiments or features.

27.
Concepts: prioritization, prioritize development tasks
- Statements indicating the order in which tasks or features will be developed.
- Designers discuss the prioritization of different features or sections to be developed.

28.
Concepts: provide release timelines, provide android update timeline
- A designer provides a timeline or schedule for a release or update.
- A designer provides a timeline or update on the Android version of the software.

29.
Concepts: promise to improve, commit to improvement
- Promises or commitments to improve the software or its features.
- A designer commits to improving the software, addressing user concerns, or incorporating feedback.

30.
Concepts: committing to a solution, promising future realization, promise to make the feature on a later time
- Designer commits to providing a solution or feature in the future.
- Designer promises or assures the realization of a feature or functionality.
- Designer promises to implement a feature or improvement at a later time.

31.
Concepts: craftsmanship, use the metaphor of craftsmanship to refer to app development
- A user mentions the importance of craftsmanship or striving for perfection in the software development process.
- A user or designer uses a metaphor related to craftsmanship to describe app development.

32.
Concepts: update introduction, provide update descriptions
- Designer provides an introduction or overview of the content in an update.
- Designers provide descriptions or explanations of updates or changes.
===
Here are the definitions for each code:

---
1.
Concepts: instructional design, share knowledge about the software
Relationship: The designer's instructional design expertise is shared with others to educate them about the software.
Criteria: A designer shares knowledge about the software's instructional design.
Phrase: Sharing software knowledge.

2.
Concepts: design discussion, discussion of further interests
Relationship: Designers engage in discussions about design-related topics and express interest in exploring further features.
Criteria: Designers discuss design topics and express interest in further exploration.
Phrase: Discussing design interests.

3.
Concepts: discuss adjustments, discuss product improvement
Relationship: Designers discuss making adjustments to improve the product and develop new features.
Criteria: Designers discuss product adjustments and improvements.
Phrase: Discussing product improvements.

4.
Concepts: consideration, design contemplation
Relationship: Designers consider issues and contemplate design decisions.
Criteria: A designer considers design issues and contemplates decisions.
Phrase: Contemplating design decisions.

5.
Concepts: on-screen keyboard functionality, discuss touch screen functionality
Relationship: Designers discuss the functionality of on-screen keyboards and touch screens.
Criteria: Designers discuss on-screen keyboard and touch screen functionality.
Phrase: Discussing touch screen functionality.

6.
Concepts: discuss usability, collaborative planning
Relationship: Designers and users collaborate to discuss and plan the development of the software, focusing on usability.
Criteria: Designers and users collaboratively discuss and plan software development.
Phrase: Collaboratively planning software development.

7.
Concepts: visual and functional design, interface layout decisions
Relationship: Designers discuss visual and functional aspects of the software and make decisions about the interface layout.
Criteria: Designers discuss visual and functional design and make interface layout decisions.
Phrase: Deciding on interface layout.

8.
Concepts: auto layout optimization, emphasize quality of auto-generated layout
Relationship: Designers discuss optimizing auto layout and emphasize the importance of high-quality auto-generated layouts.
Criteria: Designers discuss auto layout optimization and emphasize quality.
Phrase: Optimizing auto layout.

9.
Concepts: emphasize optimization, refine design elements
Relationship: Designers refine design elements to enhance user experience, emphasizing simplicity and stability.
Criteria: Designers refine design elements for simplicity and stability.
Phrase: Refining design elements.

10.
Concepts: seek efficiency, suggest simplification
Relationship: Designers seek to simplify processes and suggest improvements.
Criteria: Designers seek to simplify and suggest improvements.
Phrase: Seeking efficiency improvements.

11.
Concepts: reiterate bidirectional conversion, explain bidirectional conversion
Relationship: Designers reiterate and explain the bidirectional conversion feature.
Criteria: Designers explain and reiterate bidirectional conversion.
Phrase: Explaining bidirectional conversion.

12.
Concepts: explain simulation, simulation enhancement
Relationship: Designers explain simulation details and discuss enhancements.
Criteria: Designers explain and enhance simulations.
Phrase: Enhancing simulations.

13.
Concepts: complexity explanation, explain development process, clarify technical aspects
Relationship: Designers explain complex software features, development processes, and technical aspects.
Criteria: Designers explain software complexity, development, and technical aspects.
Phrase: Explaining software complexity.

14.
Concepts: explaining the need, explain feature importance
Relationship: Designers explain the need and importance of features or developments.
Criteria: Designers explain the need and importance of features.
Phrase: Explaining feature importance.

15.
Concepts: diagnosing a problem, problem-solving advice
Relationship: Designers diagnose problems and provide problem-solving strategies.
Criteria: Designers diagnose and provide problem-solving advice.
Phrase: Diagnosing and solving problems.

16.
Concepts: seek technical assistance, offer technical assistance
Relationship: Designers seek and offer technical assistance to address issues.
Criteria: Designers seek and offer technical assistance.
Phrase: Offering technical assistance.

17.
Concepts: offering solutions, providing workarounds
Relationship: Designers offer solutions and provide workarounds.
Criteria: Designers offer solutions and workarounds.
Phrase: Offering solutions.

18.
Concepts: open to alternatives, suggesting alternative solutions
Relationship: Designers are open to alternative solutions and suggest them.
Criteria: Designers suggest alternative solutions.
Phrase: Suggesting alternative solutions.

19.
Concepts: manual editing, suggest manual adjustments, manual adjustment
Relationship: Designers discuss manual editing and suggest manual adjustments.
Criteria: Designers discuss and suggest manual editing and adjustments.
Phrase: Suggesting manual adjustments.

20.
Concepts: assure compatibility, consider technical requirements
Relationship: Designers assure compatibility and consider technical requirements.
Criteria: Designers assure compatibility and consider technical requirements.
Phrase: Assuring compatibility.

21.
Concepts: compatibility check, compatibility answer, confirming system compatibility
Relationship: Designers check, answer, and confirm system compatibility.
Criteria: Designers check and confirm system compatibility.
Phrase: Confirming system compatibility.

22.
Concepts: align with user needs, align with educational needs
Relationship: Designers align the software with user needs and educational requirements.
Criteria: Designers align with user and educational needs.
Phrase: Aligning with user needs.

23.
Concepts: share potential future direction, suggest future possibilities
Relationship: Designers share potential future directions and suggest possibilities.
Criteria: Designers share and suggest future possibilities.
Phrase: Suggesting future possibilities.

24.
Concepts: development goals, discussing future plans, consider future compatibility
Relationship: Designers discuss long-term goals, future plans, and consider future compatibility.
Criteria: Designers discuss long-term goals and future plans.
Phrase: Discussing future plans.

25.
Concepts: long-term planning, discuss project planning
Relationship: Designers discuss long-term plans and project planning.
Criteria: Designers discuss long-term planning and project planning.
Phrase: Discussing project planning.

26.
Concepts: mention ongoing research, mentioning future experiments
Relationship: Designers mention ongoing research and future experiments.
Criteria: Designers mention ongoing research and future experiments.
Phrase: Mentioning ongoing research.

27.
Concepts: prioritization, prioritize development tasks
Relationship: Designers prioritize tasks and features to be developed.
Criteria: Designers prioritize development tasks.
Phrase: Prioritizing development tasks.

28.
Concepts: provide release timelines, provide android update timeline
Relationship: Designers provide timelines for releases and updates.
Criteria: Designers provide release and update timelines.
Phrase: Providing release timelines.

29.
Concepts: promise to improve, commit to improvement
Relationship: Designers promise and commit to improving the software.
Criteria: Designers promise and commit to improvement.
Phrase: Committing to improvement.

30.
Concepts: committing to a solution, promising future realization, promise to make the feature on a later time
Relationship: Designers commit to providing solutions and promise future realization.
Criteria: Designers commit to providing solutions and promise future realization.
Phrase: Committing to solutions.

31.
Concepts: craftsmanship, use the metaphor of craftsmanship to refer to app development
Relationship: Designers use the metaphor of craftsmanship to describe app development.
Criteria: Designers use the craftsmanship metaphor.
Phrase: Describing craftsmanship.

32.
Concepts: update introduction, provide update descriptions
Relationship: Designers introduce and describe updates.
Criteria: Designers introduce and describe updates.
Phrase: Introducing updates.