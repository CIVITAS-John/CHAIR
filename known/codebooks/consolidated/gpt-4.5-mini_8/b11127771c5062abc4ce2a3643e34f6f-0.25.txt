You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (6 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
6. 
Concepts: {Repeat the input 6}
Relationship: {What is logical relationship between concepts in code 6, or N/A if not applicable}
Criteria: {Who did what, and how for code 6}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: acknowledge contributions, appreciate community support
- Users express appreciation for the resources and dedication shown by designers in the community.
- Designers and users express gratitude for the support and encouragement received from each other.

2.
Concepts: request guidance materials, express need for documentation
- Users actively seek a user manual and additional resources to better understand the software.
- A user expresses the need for documentation or guidance related to the application.

3.
Concepts: announce updates, make announcements
- Designers announce and release new features in version updates.
- Designers announce updates and planned improvements for the software.

4.
Concepts: future plans, share future development plans
- Discussions about potential future developments and directions for the product.
- Designers outline future plans and considerations for software development.

5.
Concepts: provide timelines, plan future updates
- Designers share timelines and confirm the schedule for upcoming software updates.
- Designers outline the timeline for future software updates and features.

6.
Concepts: provide clarifications, clarify software limitations
- Designers clarify the details and purpose of the software version being discussed.
- Designers clarify the limitations of the software's functionalities, particularly regarding the current version.
===
---
Definitions for each code (6 in total):
1. 
Concepts: acknowledge contributions, appreciate community support
Relationship: Users and designers mutually express gratitude, creating a supportive environment.
Criteria: Users and designers express appreciation for each other's contributions and support within the community.
Phrase: Acknowledge and appreciate contributions.

2. 
Concepts: request guidance materials, express need for documentation
Relationship: Users identify a gap in understanding and seek resources to fill that gap.
Criteria: Users actively seek documentation and guidance materials to enhance their understanding of the software.
Phrase: Request guidance materials.

3. 
Concepts: announce updates, make announcements
Relationship: Designers communicate changes and improvements to keep users informed.
Criteria: Designers announce new features and updates to the software to inform the community.
Phrase: Announce updates.

4. 
Concepts: future plans, share future development plans
Relationship: Designers and users engage in discussions about the direction of the software.
Criteria: Designers share and discuss potential future developments and directions for the software.
Phrase: Share future plans.

5. 
Concepts: provide timelines, plan future updates
Relationship: Designers establish a schedule for upcoming changes to manage user expectations.
Criteria: Designers provide timelines for future software updates and features to inform users.
Phrase: Provide timelines.

6. 
Concepts: provide clarifications, clarify software limitations
Relationship: Designers offer explanations to enhance user understanding of the software's capabilities.
Criteria: Designers clarify the software's functionalities and limitations to ensure users have accurate information.
Phrase: Provide clarifications.
---