You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (11 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
11. 
Concepts: {Repeat the input 11}
Relationship: {What is logical relationship between concepts in code 11, or N/A if not applicable}
Criteria: {Who did what, and how for code 11}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: considering system compatibility and system requirements, ensuring software compatibility and providing compatibility information
- Designers consider system compatibility and system requirements.
- Designers ensure software compatibility and provide compatibility information.

2.
Concepts: evaluating usability, evaluate ui design
- Users evaluate the software's usability or effectiveness.
- Designers consider user interface design and evaluate its usefulness and usability.

3.
Concepts: suggesting interactions, engaging in collaborative decision making
- Users suggest new interactions or features that enable user interaction.
- A user engages in collaborative decision making or suggests an option.

4.
Concepts: suggesting future developments based on user needs, elaborating on suggestions and contributing to product development
- Suggesting future developments based on user needs or feedback.
- A user elaborates on a suggestion, contributes to product development, or suggests workflow improvements.

5.
Concepts: suggesting solutions, proposing design solutions
- Users and designers suggest solutions and alternative approaches.
- Proposing design solutions or ideas, and suggesting a potential solution or approach to a problem or challenge.

6.
Concepts: seeking alternative solutions, being open to alternatives
- Seeking alternative solutions or approaches to specific problems or challenges.
- Designers are open to alternative solutions or approaches, being open to new ideas and opportunities.

7.
Concepts: acknowledging technical limitations, acknowledging limitations and explaining software limitations
- Users acknowledge technical limitations.
- Designers acknowledge limitations and explain software limitations.

8.
Concepts: providing layout adjustment options, introducing customization options
- Providing options for adjusting the layout or design of the software.
- Designers introduce customization options for components, acknowledging user control over software features and offering options for customizing the software or its components.

9.
Concepts: acknowledging optimization efforts, emphasizing optimization
- Designer acknowledges optimization efforts, and a designer expresses gratitude and commitment to improvement.
- Designers emphasize the importance of optimization or improvement, promoting or encouraging iterative refinement or improvement, and users or designers suggest or emphasize the importance of refinement or improvement.

10.
Concepts: gathering user feedback
- Designers gather feedback and solicit user input, and designers request specific requirements or features from users and ask about user needs or preferences for future iterations.
- Designers promise to invite feedback and facilitate open communication to gather input.

11.
Concepts: exploring ideas and solutions
- Designers explore ideas and solutions.
- Designers consider design implications and broader applications, making design decisions considering multiple perspectives.
===
Here are the definitions for each code:

---
1.
Concepts: considering system compatibility and system requirements, ensuring software compatibility and providing compatibility information
Relationship: The concepts are logically related as they all pertain to ensuring the software's compatibility with different systems and providing relevant information.
Criteria: Designers consider system compatibility and requirements, ensuring software compatibility, and providing compatibility information.
Phrase: Ensure software compatibility.

2.
Concepts: evaluating usability, evaluate ui design
Relationship: The concepts are logically related as they both involve assessing the software's usability and user interface design.
Criteria: Users and designers evaluate the software's usability and user interface design.
Phrase: Evaluate usability.

3.
Concepts: suggesting interactions, engaging in collaborative decision making
Relationship: The concepts are logically related as they both involve users contributing to the software's development through suggestions and collaborative decision-making.
Criteria: Users suggest interactions and engage in collaborative decision-making.
Phrase: Suggest interactions.

4.
Concepts: suggesting future developments based on user needs, elaborating on suggestions and contributing to product development
Relationship: The concepts are logically related as they all involve users contributing to the software's development by suggesting future developments and elaborating on suggestions.
Criteria: Users suggest future developments based on their needs, elaborate on suggestions, and contribute to product development.
Phrase: Contribute to product development.

5.
Concepts: suggesting solutions, proposing design solutions
Relationship: The concepts are logically related as they both involve suggesting solutions or approaches to problems or challenges.
Criteria: Users and designers suggest solutions and propose design solutions.
Phrase: Propose solutions.

6.
Concepts: seeking alternative solutions, being open to alternatives
Relationship: The concepts are logically related as they both involve being open to alternative approaches or solutions.
Criteria: Designers seek alternative solutions and are open to new ideas and opportunities.
Phrase: Seek alternative solutions.

7.
Concepts: acknowledging technical limitations, acknowledging limitations and explaining software limitations
Relationship: The concepts are logically related as they all involve acknowledging and explaining the software's limitations.
Criteria: Users and designers acknowledge technical limitations and explain software limitations.
Phrase: Acknowledge limitations.

8.
Concepts: providing layout adjustment options, introducing customization options
Relationship: The concepts are logically related as they both involve providing users with control over the software's design or layout.
Criteria: Designers provide layout adjustment options and introduce customization options.
Phrase: Introduce customization options.

9.
Concepts: acknowledging optimization efforts, emphasizing optimization
Relationship: The concepts are logically related as they both involve acknowledging and promoting optimization efforts.
Criteria: Designers acknowledge optimization efforts and emphasize the importance of optimization.
Phrase: Emphasize optimization.

10.
Concepts: gathering user feedback
Relationship: N/A
Criteria: Designers gather user feedback, solicit user input, and facilitate open communication.
Phrase: Gather user feedback.

11.
Concepts: exploring ideas and solutions
Relationship: The concepts are logically related as they both involve considering and exploring different ideas and solutions.
Criteria: Designers explore ideas and solutions, considering multiple perspectives.
Phrase: Explore ideas.