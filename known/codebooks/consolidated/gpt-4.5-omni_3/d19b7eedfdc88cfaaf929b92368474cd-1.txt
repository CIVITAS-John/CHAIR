You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (10 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
10. 
Concepts: {Repeat the input 10}
Relationship: {What is logical relationship between concepts in code 10, or N/A if not applicable}
Criteria: {Who did what, and how for code 10}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: user assistance request, requesting technical help and usage guidance
- Users request assistance with using or accessing the software.
- Users ask for assistance on how to use specific versions or features of the software.

2.
Concepts: request additional resources, requesting user manuals and documentation
- Users request additional resources like user manuals to aid software usage.
- Users express the need for user guides or documentation to assist with software usage.

3.
Concepts: sharing development plans, collaborative planning
- Designers share details or plans about future software development.
- Designers and users collaboratively discussing and planning the development of the software.

4.
Concepts: inviting feedback and suggestions, inviting feature requests and interaction
- Designers invite and encourage users to provide suggestions and feedback.
- Designers invite users to suggest new features or improvements.

5.
Concepts: suggesting usability improvements, suggesting software improvements and new features
- Users suggest specific changes or additions to improve the software's usability.
- Users provide specific suggestions and feedback to improve software features and functionality.

6.
Concepts: integrating user feedback, implementing feedback loop
- User feedback is acknowledged and incorporated into the design process.
- A process where user feedback is collected, considered, and implemented into design decisions.

7.
Concepts: confirming upcoming update, confirming and communicating planned updates
- Confirming plans for upcoming updates or release versions of the product.
- Designers confirm and communicate information about upcoming updates or features.

8.
Concepts: announcing new version details, informing the community about updates
- Designers notify the community about new version details and updates.
- Designers inform the community about the availability of updates and release details.

9.
Concepts: explain version limitations, explaining platform limitations
- A designer explains limitations or issues of the current software version.
- Designers clarify limitations regarding the softwareâ€™s compatibility with certain systems.

10.
Concepts: responding to user feedback
- Instances where designers respond to user feedback or queries.
- Designers respond to user feedback and outline future updates based on it.
===
---
Definitions for each code (10 in total):
1.
Concepts: user assistance request, requesting technical help and usage guidance
Relationship: Complementary
Criteria: Users request assistance with specific software versions or features.
Phrase: Requesting technical assistance

2.
Concepts: request additional resources, requesting user manuals and documentation
Relationship: Complementary
Criteria: Users request additional resources like user guides or manuals to facilitate software usage.
Phrase: Requesting additional documentation

3.
Concepts: sharing development plans, collaborative planning
Relationship: Joint
Criteria: Designers and users engage in collaborative discussions and planning regarding future software development.
Phrase: Engaging in collaborative planning

4.
Concepts: inviting feedback and suggestions, inviting feature requests and interaction
Relationship: Complementary
Criteria: Designers encourage users to provide feedback and suggest new features or improvements.
Phrase: Inviting user interaction

5.
Concepts: suggesting usability improvements, suggesting software improvements and new features
Relationship: Complementary
Criteria: Users propose suggestions to enhance software usability and functionality.
Phrase: Proposing software enhancements

6.
Concepts: integrating user feedback, implementing feedback loop
Relationship: Sequential
Criteria: Designers incorporate user feedback into the software design process.
Phrase: Integrating user feedback

7.
Concepts: confirming upcoming update, confirming and communicating planned updates
Relationship: Joint
Criteria: Designers confirm and communicate information about upcoming product updates or features.
Phrase: Communicating updates

8.
Concepts: announcing new version details, informing the community about updates
Relationship: Complementary
Criteria: Designers inform the community about the details and availability of new software versions or updates.
Phrase: Announcing version updates

9.
Concepts: explain version limitations, explaining platform limitations
Relationship: Complementary
Criteria: Designers clarify the limitations or issues of the current software version in terms of compatibility or functionality.
Phrase: Explaining software limitations

10.
Concepts: responding to user feedback
Relationship: N/A
Criteria: Designers respond to user feedback and provide information on future updates based on it.
Phrase: Addressing user feedback
---