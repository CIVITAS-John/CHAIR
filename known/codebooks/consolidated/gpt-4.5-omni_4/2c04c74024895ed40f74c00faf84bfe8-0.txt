You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (13 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
13. 
Concepts: {Repeat the input 13}
Relationship: {What is logical relationship between concepts in code 13, or N/A if not applicable}
Criteria: {Who did what, and how for code 13}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: seek clarification, ask follow-up questions
- Participants respond to or seek clarification on previous messages or design elements.
- Participants restate requests for clarity and ask follow-up questions to gather more information.

2.
Concepts: express appreciation, express enthusiasm
- Users express approval and appreciation for specific features of the platform.
- A user or designer expresses enthusiasm or support for the software or its visual design.

3.
Concepts: appreciate community support, acknowledge community support
- Designers appreciate the support from users.
- Designers express gratitude and acknowledge the expertise within the community.

4.
Concepts: mentioning technical issues, explain software limitations
- A participant mentions technical issues or limitations with their computer system.
- Participants acknowledge and discuss the limitations and constraints of the software and system.

5.
Concepts: personalized assistance, provide user support
- Designers offer personalized assistance to users.
- Designers offer assistance and technical support to help users effectively use the software.

6.
Concepts: share experiences, reflect on past experiences
- Participants share past experiences and support each other, providing information relevant to design.
- Designers discuss previous experiences or solutions and reflect on their past experiences.

7.
Concepts: suggest feature simplification, discuss design simplification
- Designers suggest simplifying a feature or design.
- Participants discuss the refinement, adjustment, and simplification of design features.

8.
Concepts: discuss input methods, discuss user interface design
- Designers discuss input methods or user interface elements, including requirements.
- Participants discuss the visual and functional aspects of the software, including user interface and instructional design.

9.
Concepts: request new features, make feature suggestions
- Users request specific new features or suggest collaboration.
- Users make suggestions for specific features or improvements for the platform.

10.
Concepts: collaborate on problem solving, facilitating designer-user interaction
- Designers and users work together to address issues and improve the product.
- Collaborative interactions between users and designers discussing specific features or issues.

11.
Concepts: provide update notes, announce component updates
- Designers list new features, components, adjustments, and bug fixes in an update.
- Developers make announcements regarding new features, components, adjustments, and bug fixes.

12.
Concepts: explaining the plans, explain situations
- A participant explains the plans or rationale behind a feature.
- Participants provide reasons for planned actions or decisions and explain specific situations.

13.
Concepts: encouraging user feedback
- Designers encourage users to provide feedback, suggestions, and interact with the community.
- Participants encourage others to provide feedback and offer specific suggestions with justifications.
===
---
Definitions for each code (13 in total):
1.
Concepts: seek clarification, ask follow-up questions
Relationship: Both concepts involve participants seeking additional information.
Criteria: Participants respond to previous messages or design elements by seeking clarification and asking follow-up questions.
Phrase: Seek additional information

2.
Concepts: express appreciation, express enthusiasm
Relationship: Both concepts involve positive emotional responses towards the platform.
Criteria: Users express approval and appreciation for specific features and show enthusiasm or support for the software or its design.
Phrase: Show positive emotional responses

3.
Concepts: appreciate community support, acknowledge community support
Relationship: Both concepts involve recognizing and valuing the community's contributions.
Criteria: Designers express gratitude and acknowledge the expertise and support from the community.
Phrase: Recognize community contributions

4.
Concepts: mentioning technical issues, explain software limitations
Relationship: Both concepts involve discussing problems or constraints related to technology.
Criteria: Participants mention technical issues or limitations and discuss the constraints of the software and system.
Phrase: Discuss technological constraints

5.
Concepts: personalized assistance, provide user support
Relationship: Both concepts involve offering help to users.
Criteria: Designers offer personalized assistance and technical support to help users effectively use the software.
Phrase: Offer user assistance

6.
Concepts: share experiences, reflect on past experiences
Relationship: Both concepts involve discussing past events or experiences.
Criteria: Participants share and reflect on past experiences to support each other and provide relevant information for design.
Phrase: Discuss past experiences

7.
Concepts: suggest feature simplification, discuss design simplification
Relationship: Both concepts involve the idea of making features or designs simpler.
Criteria: Designers and participants suggest and discuss the refinement, adjustment, and simplification of design features.
Phrase: Propose design simplification

8.
Concepts: discuss input methods, discuss user interface design
Relationship: Both concepts involve discussing aspects of user interaction with the software.
Criteria: Designers and participants discuss input methods and the visual and functional aspects of the user interface.
Phrase: Discuss user interaction design

9.
Concepts: request new features, make feature suggestions
Relationship: Both concepts involve proposing new elements for the platform.
Criteria: Users request specific new features and make suggestions for improvements.
Phrase: Propose new features

10.
Concepts: collaborate on problem solving, facilitating designer-user interaction
Relationship: Both concepts involve collaborative efforts between designers and users.
Criteria: Designers and users work together to address issues and improve the product through collaborative interactions.
Phrase: Engage in collaborative problem-solving

11.
Concepts: provide update notes, announce component updates
Relationship: Both concepts involve communicating changes or updates to the software.
Criteria: Designers list and announce new features, components, adjustments, and bug fixes.
Phrase: Communicate software updates

12.
Concepts: explaining the plans, explain situations
Relationship: Both concepts involve providing explanations or rationales.
Criteria: Participants explain the plans or rationale behind features and provide reasons for planned actions or decisions.
Phrase: Provide explanations

13.
Concepts: encouraging user feedback
Relationship: N/A
Criteria: Designers and participants encourage others to provide feedback, suggestions, and interact with the community.
Phrase: Solicit user feedback
---