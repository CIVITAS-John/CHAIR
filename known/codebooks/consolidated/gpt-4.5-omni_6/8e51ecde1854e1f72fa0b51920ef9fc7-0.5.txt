You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (54 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
54. 
Concepts: {Repeat the input 54}
Relationship: {What is logical relationship between concepts in code 54, or N/A if not applicable}
Criteria: {Who did what, and how for code 54}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: community answer, provide community context
- Community members provide answers to questions posed within the community.
- Users provide context about the community to explain their questions or needs.

2.
Concepts: demonstrating politeness, adhere to community norms with politeness
- Users or designers use polite language in their interactions.
- Designers or users adhere to community norms by apologizing for disturbances and being polite.

3.
Concepts: explain lack of internet, describe classroom internet restrictions
- Users explain reasons for the lack of internet access in classrooms.
- Users describe network and software restrictions in their classroom environments.

4.
Concepts: school needs, discuss school initiatives
- Users discuss the needs of their school.
- Users mention and discuss school initiatives or projects, including their implementation.

5.
Concepts: requesting features, request detailed features
- Users make detailed requests for specific features or experiments related to physics.
- Users make detailed requests for specific features or requirements.

6.
Concepts: provide platform specifications, inquire about cross-platform compatibility
- Users provide or request information specific to software platforms.
- Users inquire about the software's compatibility across different platforms.

7.
Concepts: request user manual, justify need for user manual
- Users request a user manual or documentation for the application.
- Users reiterate and justify their need for a user manual.

8.
Concepts: provide download instructions, providing updates and downloads
- Designers provide instructions and information on how to download the software.
- Designers provide updates, instructions, and download links to help users understand and use the software effectively.

9.
Concepts: user guidance, feature guidance
- A designer provides instructions or guidelines on how to use the platform or its features.
- A designer provides guidance on how to use specific features of the software.

10.
Concepts: provide detailed specifics, provide further elaboration
- Users provide specific and detailed information or answers about a topic.
- Users provide additional context or information to elaborate on their questions.

11.
Concepts: share knowledge, share resources
- Designers share knowledge or information with the community.
- Users or designers share resources or information with the community.

12.
Concepts: indirect rejection, implicitly rejecting suggestions
- A team member indirectly declines a suggestion or request by providing an alternative plan or prioritization.
- A designer implicitly disagrees with a suggestion or idea without directly rejecting it, often by deferring action or promising future consideration.

13.
Concepts: commit to providing a solution, committing to improvement
- Designers commit to providing a solution or update.
- Designers promise to improve based on user feedback and express commitment to enhancing the software.

14.
Concepts: agree to implement suggestions, acknowledging and implementing requests
- Users agree with suggestions made by others and commit to implementing them in future updates.
- Designers accept and confirm the addition of requested features in future updates, acknowledging user feedback and discussing implementation plans.

15.
Concepts: confirming agreement, confirming collaboration
- Users or developers express agreement with statements or suggestions, confirming their understanding or agreement.
- Users concur with design ideas or suggestions, and designers confirm or agree on collaboration or gathering opinions.

16.
Concepts: confirm and acknowledge resolution, acknowledge receipt of resources
- Users confirm the existence of issues and acknowledge their resolution.
- Users acknowledge receipt of information or resources, contributing to issue resolution.

17.
Concepts: acknowledge user experience, acknowledge and understand situations
- Recognizing or validating a user's experience or issue.
- Users or designers acknowledge points and demonstrate understanding of each other's situations.

18.
Concepts: appreciate visual design, appreciate software craftsmanship
- Complimenting the visual design or graphical elements of the software.
- Users acknowledge and appreciate the craftsmanship and detailed work of the designers.

19.
Concepts: share classroom success stories, share educational user experiences
- Users share successful classroom experiences using the software.
- Users share their experiences and the impact of the software in educational settings.

20.
Concepts: share user reviews, provide comparative feedback
- Users provide reviews or opinions about the software.
- Users compare the software to similar applications and provide feedback on differences.

21.
Concepts: share personal stories, reflect on past experiences
- Users share personal anecdotes or stories related to the software.
- Users or developers reflect on and share their past experiences with the software.

22.
Concepts: informing update schedule, inquire about software updates
- Informing users about new updates and the expected timeline for software updates.
- Users inquire about recent updates, feature updates, or the status of upcoming updates.

23.
Concepts: update planning, providing feature roadmap
- A team member discusses plans for future updates.
- A team member provides a timeline for updates and outlines the sequence of tasks or features to be developed.

24.
Concepts: announcing future plans, confirming future features
- Designers outline and announce future development plans and updates.
- Designers confirm and promise the implementation of specific features in future updates.

25.
Concepts: introducing new features, detailing version updates
- Designers mention the expansion or enhancement of features and describe newly introduced functionalities in a software update.
- Designers specify which software version is being discussed and provide detailed information about its features and updates.

26.
Concepts: describing update scope, give an intro to the update content
- Designers describe the scope, extent, or significance of an upcoming update.
- A designer introduces the content of upcoming updates.

27.
Concepts: updating status, highlighting ongoing progress
- A designer provides an update on the current status of development and the review process for the platform.
- A designer highlights significant progress and promises that updates are ongoing, providing a preview.

28.
Concepts: explaining complexity, elaborating response
- Designers explain the complexity of a task or feature and the time required for its release.
- Designers elaborate on specific processes or features and the complexity and timeline of a response or update.

29.
Concepts: discussing release process, providing development timelines
- Designers discuss the process and status of software releases and confirm the timeline for upcoming software updates.
- Designers communicate schedules and plans for software releases and provide timelines for the development and release of features.

30.
Concepts: project management, prioritizing development
- Developers discuss the sequencing and management of project tasks.
- Designers discuss the order in which tasks or features will be developed and outline development priorities or sequences.

31.
Concepts: follow up on user requests, clarify requests with follow-up questions
- Developers ask follow-up questions to better understand user requests and needs.
- Developers ask follow-up questions to clarify user requests or usage scenarios.

32.
Concepts: explain the intention of followup question, seek confirmation with follow-up questions
- Designers explain the purpose of follow-up questions or actions.
- Designers ask follow-up questions to confirm details or clarify points.

33.
Concepts: gather user context, inquiring about user problems
- Designers ask questions to gather more information about user context or environment.
- Designers ask users about specific problems to understand their needs.

34.
Concepts: sharing personal interests, express interest in engagement
- Developers express and share their personal interests or hobbies that may influence design.
- Designers engage with users by expressing personal interest in subjects.

35.
Concepts: engage in designer-user dialogue, engage in informal direct communication
- Users and designers engage in back-and-forth dialogue to clarify or discuss topics.
- Users and designers engage in informal, direct interactions to discuss features and feedback.

36.
Concepts: collaborative learning, collaborative planning
- Designers or users engage in sharing and collaborative learning within the group.
- Designers and users collaboratively discussing and planning the development of the software.

37.
Concepts: elicit feedback, gathering feedback for planning
- A designer elicits feedback from the community.
- A designer plans to gather feedback iteratively and considers user opinions before starting a new project or project phase.

38.
Concepts: encouragement, encouraging feedback
- Users provide encouragement or advice to the designers.
- Users provide specific feedback or direction, and team members encourage users to provide feedback and interact.

39.
Concepts: inviting user participation, soliciting user suggestions
- Users suggest collaboration or request features, and participants invite user opinions, feedback, or participation.
- Designers solicit suggestions and requirements from users, invite them to suggest new features, and accept their suggestions.

40.
Concepts: encourage questions and discussions, encouraging detailed suggestions
- Designers encourage users to ask questions or discuss future issues.
- Designers elaborate on suggestions for improvements and encourage users to provide more detailed feedback.

41.
Concepts: suggesting priorities, highlighting user needs
- Users express their preferences regarding software features or design and suggest prioritizing certain features over others.
- Users express specific requirements or necessities related to the software, indicating potential needs and highlighting usability features or improvements.

42.
Concepts: engaging with development, respond to developer's earlier information on feature development
- Users show interest in the development process by asking about updates and expressing interest in platform development.
- Users respond positively to information about feature development.

43.
Concepts: suggest future possibilities, proposing design ideas
- A designer suggests future possibilities for development.
- A designer makes decisions or suggestions about design elements or features and proposes potential design ideas.

44.
Concepts: proposing solutions, engage in collaborative problem solving
- Designers share potential solutions based on user feedback and propose solutions to compatibility issues.
- Collaborative efforts between users and designers to solve issues and improve the product.

45.
Concepts: respond to design inquiries, seeking/offering technical help
- Users or designers respond to inquiries about design support or software functionality.
- A designer offers help or seeks technical assistance or advice from others.

46.
Concepts: discuss system compatibility, suggesting checking compatibility of the system
- Developers or users discuss and confirm the software's compatibility with different systems.
- Developers suggest checking or addressing compatibility issues with the system.

47.
Concepts: compatibility assurance, confirm system compatibility
- Assuring users about the compatibility of the application with certain systems.
- Designers outline and confirm system requirements for compatibility with the software.

48.
Concepts: clarifying features, providing technical details
- A designer provides an explanation or clarification regarding the software's functionality and existing features.
- Designers provide technical clarifications, discuss technical considerations and requirements, and provide information about system support or compatibility.

49.
Concepts: feature justification, explaining feature importance
- Giving reasons for needing specific features or functions.
- Designers explain the need, importance, and functionalities of certain features.

50.
Concepts: provide rationale, justifying suggestions
- User or designer provides a rationale or reason for a specific action or decision.
- Users explain the reasons behind their requests or suggestions, providing input or feedback with justifications.

51.
Concepts: align with user needs, adapting to user needs
- Designers align features with user needs and preferences.
- Designers adapt features to better meet user needs or preferences and suggest adjustments suitable for user constraints.

52.
Concepts: explaining design rationale, sharing design philosophy
- Designers explain the principles guiding the software's design and the rationale behind design choices.
- A designer shares thoughts on the design process or philosophy and the underlying principles guiding the design and development of the product.

53.
Concepts: addressing usability and design, discussing user interface design
- Designers explain usability aspects, design goals, and address issues related to usability and functionality.
- Designers discuss aspects of the user interface, including the placement, organization, visual, and functional design of software elements.

54.
Concepts: acknowledging limitations, discussing limitations
- A designer acknowledges limitations of the software and considers hardware limitations in design.
- Designers mention the limitations or constraints of the development team, explain system limitations, and highlight technical constraints of features or platforms.
===
---
Definitions for each code (54 in total):
1.
Concepts: community answer, provide community context
Relationship: Both involve community members contributing information.
Criteria: Community members provide answers to questions and context about the community.
Phrase: Providing community answers and context

2.
Concepts: demonstrating politeness, adhere to community norms with politeness
Relationship: Both involve maintaining politeness in interactions.
Criteria: Users or designers use polite language and adhere to community norms by being polite.
Phrase: Demonstrating politeness and adhering to norms

3.
Concepts: explain lack of internet, describe classroom internet restrictions
Relationship: Both involve discussing internet access issues in classrooms.
Criteria: Users explain reasons for lack of internet and describe classroom internet restrictions.
Phrase: Explaining internet access issues in classrooms

4.
Concepts: school needs, discuss school initiatives
Relationship: Both involve discussing school-related topics.
Criteria: Users discuss school needs and initiatives or projects.
Phrase: Discussing school needs and initiatives

5.
Concepts: requesting features, request detailed features
Relationship: Both involve making requests for specific features.
Criteria: Users make detailed requests for specific features or experiments.
Phrase: Requesting detailed features

6.
Concepts: provide platform specifications, inquire about cross-platform compatibility
Relationship: Both involve discussing software platform details.
Criteria: Users provide or request information on software specifications and compatibility.
Phrase: Discussing platform specifications and compatibility

7.
Concepts: request user manual, justify need for user manual
Relationship: Both involve requesting and justifying the need for documentation.
Criteria: Users request and justify the need for a user manual.
Phrase: Requesting and justifying need for user manual

8.
Concepts: provide download instructions, providing updates and downloads
Relationship: Both involve providing information related to software downloads.
Criteria: Designers provide download instructions and updates.
Phrase: Providing download instructions and updates

9.
Concepts: user guidance, feature guidance
Relationship: Both involve providing guidance on software use.
Criteria: Designers provide instructions on using the platform and its features.
Phrase: Providing user and feature guidance

10.
Concepts: provide detailed specifics, provide further elaboration
Relationship: Both involve giving detailed information.
Criteria: Users provide specific details and further elaboration on topics.
Phrase: Providing detailed specifics and elaboration

11.
Concepts: share knowledge, share resources
Relationship: Both involve sharing valuable information with the community.
Criteria: Designers and users share knowledge and resources.
Phrase: Sharing knowledge and resources

12.
Concepts: indirect rejection, implicitly rejecting suggestions
Relationship: Both involve declining suggestions indirectly.
Criteria: Team members indirectly decline suggestions by providing alternatives or deferring action.
Phrase: Indirectly rejecting suggestions

13.
Concepts: commit to providing a solution, committing to improvement
Relationship: Both involve making commitments based on user feedback.
Criteria: Designers commit to providing solutions and improving the software.
Phrase: Committing to solutions and improvements

14.
Concepts: agree to implement suggestions, acknowledging and implementing requests
Relationship: Both involve agreeing to and implementing user suggestions.
Criteria: Designers agree to and confirm the implementation of user suggestions.
Phrase: Agreeing to and implementing suggestions

15.
Concepts: confirming agreement, confirming collaboration
Relationship: Both involve confirming mutual understanding and collaboration.
Criteria: Users and developers confirm agreement and collaboration.
Phrase: Confirming agreement and collaboration

16.
Concepts: confirm and acknowledge resolution, acknowledge receipt of resources
Relationship: Both involve acknowledging resolutions and resources.
Criteria: Users confirm issue resolution and acknowledge receipt of resources.
Phrase: Confirming and acknowledging resolutions and resources

17.
Concepts: acknowledge user experience, acknowledge and understand situations
Relationship: Both involve recognizing and understanding user experiences.
Criteria: Users and designers acknowledge and understand each other's situations.
Phrase: Acknowledging user experiences and situations

18.
Concepts: appreciate visual design, appreciate software craftsmanship
Relationship: Both involve expressing appreciation for design quality.
Criteria: Users compliment visual design and craftsmanship.
Phrase: Appreciating design and craftsmanship

19.
Concepts: share classroom success stories, share educational user experiences
Relationship: Both involve sharing positive educational experiences.
Criteria: Users share successful classroom and educational experiences using the software.
Phrase: Sharing educational success stories

20.
Concepts: share user reviews, provide comparative feedback
Relationship: Both involve providing opinions and comparisons.
Criteria: Users provide reviews and comparative feedback on the software.
Phrase: Providing user reviews and comparative feedback

21.
Concepts: share personal stories, reflect on past experiences
Relationship: Both involve sharing personal anecdotes related to the software.
Criteria: Users share personal stories and reflect on past experiences with the software.
Phrase: Sharing personal stories and reflections

22.
Concepts: informing update schedule, inquire about software updates
Relationship: Both involve discussing software updates.
Criteria: Informing users about update schedules and responding to inquiries about updates.
Phrase: Discussing software updates

23.
Concepts: update planning, providing feature roadmap
Relationship: Both involve planning and outlining future updates.
Criteria: Team members discuss update plans and provide a feature roadmap.
Phrase: Planning and outlining updates

24.
Concepts: announcing future plans, confirming future features
Relationship: Both involve communicating future development plans.
Criteria: Designers announce and confirm future development plans and features.
Phrase: Announcing and confirming future plans

25.
Concepts: introducing new features, detailing version updates
Relationship: Both involve discussing new features and updates.
Criteria: Designers introduce new features and detail version updates.
Phrase: Introducing and detailing new features

26.
Concepts: describing update scope, give an intro to the update content
Relationship: Both involve explaining the content and scope of updates.
Criteria: Designers describe the scope and content of upcoming updates.
Phrase: Describing update scope and content

27.
Concepts: updating status, highlighting ongoing progress
Relationship: Both involve providing status updates on development progress.
Criteria: Designers provide status updates and highlight ongoing progress.
Phrase: Providing status updates and progress highlights

28.
Concepts: explaining complexity, elaborating response
Relationship: Both involve discussing the complexity of tasks or features.
Criteria: Designers explain the complexity and elaborate on processes or features.
Phrase: Explaining complexity and elaborating responses

29.
Concepts: discussing release process, providing development timelines
Relationship: Both involve discussing the release process and timelines.
Criteria: Designers discuss the release process and provide development timelines.
Phrase: Discussing release process and timelines

30.
Concepts: project management, prioritizing development
Relationship: Both involve managing and prioritizing project tasks.
Criteria: Developers discuss project management and development priorities.
Phrase: Managing and prioritizing development

31.
Concepts: follow up on user requests, clarify requests with follow-up questions
Relationship: Both involve following up on and clarifying user requests.
Criteria: Developers follow up on user requests and ask clarifying questions.
Phrase: Following up and clarifying user requests

32.
Concepts: explain the intention of followup question, seek confirmation with follow-up questions
Relationship: Both involve explaining and seeking confirmation through follow-up questions.
Criteria: Designers explain the intention of follow-up questions and seek confirmation.
Phrase: Explaining and seeking confirmation with follow-up questions

33.
Concepts: gather user context, inquiring about user problems
Relationship: Both involve gathering information about user context and problems.
Criteria: Designers inquire about user context and specific problems.
Phrase: Inquiring about user context and problems

34.
Concepts: sharing personal interests, express interest in engagement
Relationship: Both involve sharing interests to engage with users.
Criteria: Developers share personal interests and engage with users.
Phrase: Sharing interests and engaging with users

35.
Concepts: engage in designer-user dialogue, engage in informal direct communication
Relationship: Both involve direct and informal communication between users and designers.
Criteria: Users and designers engage in dialogue and informal communication.
Phrase: Engaging in dialogue and informal communication

36.
Concepts: collaborative learning, collaborative planning
Relationship: Both involve collaboration in learning and planning.
Criteria: Designers and users engage in collaborative learning and planning.
Phrase: Engaging in collaborative learning and planning

37.
Concepts: elicit feedback, gathering feedback for planning
Relationship: Both involve gathering feedback for planning purposes.
Criteria: Designers elicit and gather feedback for planning.
Phrase: Gathering feedback for planning

38.
Concepts: encouragement, encouraging feedback
Relationship: Both involve providing and encouraging feedback.
Criteria: Users provide encouragement and feedback to designers.
Phrase: Providing and encouraging feedback

39.
Concepts: inviting user participation, soliciting user suggestions
Relationship: Both involve inviting and soliciting user input.
Criteria: Designers invite user participation and solicit suggestions.
Phrase: Inviting and soliciting user input

40.
Concepts: encourage questions and discussions, encouraging detailed suggestions
Relationship: Both involve encouraging user engagement and detailed feedback.
Criteria: Designers encourage questions, discussions, and detailed suggestions.
Phrase: Encouraging questions and detailed suggestions

41.
Concepts: suggesting priorities, highlighting user needs
Relationship: Both involve highlighting and suggesting user needs and priorities.
Criteria: Users suggest priorities and highlight specific needs.
Phrase: Highlighting and suggesting user needs and priorities

42.
Concepts: engaging with development, respond to developer's earlier information on feature development
Relationship: Both involve user engagement with development information.
Criteria: Users engage with and respond to information on feature development.
Phrase: Engaging with and responding to development information

43.
Concepts: suggest future possibilities, proposing design ideas
Relationship: Both involve suggesting and proposing future design possibilities.
Criteria: Designers suggest future possibilities and propose design ideas.
Phrase: Suggesting and proposing design possibilities

44.
Concepts: proposing solutions, engage in collaborative problem solving
Relationship: Both involve proposing and collaboratively solving problems.
Criteria: Designers propose solutions and engage in collaborative problem solving.
Phrase: Proposing and solving problems collaboratively

45.
Concepts: respond to design inquiries, seeking/offering technical help
Relationship: Both involve responding to and seeking technical help.
Criteria: Users and designers respond to design inquiries and offer or seek technical help.
Phrase: Responding to and seeking technical help

46.
Concepts: discuss system compatibility, suggesting checking compatibility of the system
Relationship: Both involve discussing and checking system compatibility.
Criteria: Developers discuss and suggest checking system compatibility.
Phrase: Discussing and checking system compatibility

47.
Concepts: compatibility assurance, confirm system compatibility
Relationship: Both involve assuring and confirming compatibility.
Criteria: Designers assure and confirm system compatibility.
Phrase: Assuring and confirming system compatibility

48.
Concepts: clarifying features, providing technical details
Relationship: Both involve providing clarifications and technical details.
Criteria: Designers clarify features and provide technical details.
Phrase: Clarifying features and providing technical details

49.
Concepts: feature justification, explaining feature importance
Relationship: Both involve justifying and explaining the importance of features.
Criteria: Designers justify and explain the importance of features.
Phrase: Justifying and explaining feature importance

50.
Concepts: provide rationale, justifying suggestions
Relationship: Both involve providing rationale and justifications.
Criteria: Users and designers provide rationale and justify suggestions.
Phrase: Providing and justifying rationale for suggestions

51.
Concepts: align with user needs, adapting to user needs
Relationship: Both involve aligning and adapting to user needs.
Criteria: Designers align features with and adapt to user needs.
Phrase: Aligning and adapting to user needs

52.
Concepts: explaining design rationale, sharing design philosophy
Relationship: Both involve explaining and sharing design principles.
Criteria: Designers explain design rationale and share design philosophy.
Phrase: Explaining and sharing design philosophy

53.
Concepts: addressing usability and design, discussing user interface design
Relationship: Both involve addressing and discussing design and usability.
Criteria: Designers address usability and discuss user interface design.
Phrase: Addressing usability and discussing design

54.
Concepts: acknowledging limitations, discussing limitations
Relationship: Both involve acknowledging and discussing limitations.
Criteria: Designers acknowledge and discuss software limitations.
Phrase: Acknowledging and discussing limitations
---