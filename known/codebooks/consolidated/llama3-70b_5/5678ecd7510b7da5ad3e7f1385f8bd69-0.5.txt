You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (21 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
21. 
Concepts: {Repeat the input 21}
Relationship: {What is logical relationship between concepts in code 21, or N/A if not applicable}
Criteria: {Who did what, and how for code 21}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: identifying pain points, probing for user difficulties
- A designer asks about problems encountered during software use.
- Inquiries or questions about user experiences, difficulties, or pain points.

2.
Concepts: issue inquiry, inquire about specific problems
- Asking users about problems or issues they encountered
- Designer asks about specific issues or problems encountered.

3.
Concepts: open feedback, encouraging users to report problems
- Encouraging users to report problems or issues without hesitation.
- Encouraging users to report problems or issues encountered during use.

4.
Concepts: seeking help, seeking community assistance
- Requesting help or assistance
- Users ask for help or assistance from the community.

5.
Concepts: seeking platform assistance, technical assistance
- A designer asks for assistance or guidance on using a platform feature.
- Designers ask about or provide information on how to perform a specific action or task in the community (e.g., uploading images)

6.
Concepts: describing student reaction, sharing classroom experience
- A user describes a student's reaction to the software.
- A user shares their personal experience or story about using the software in a classroom setting.

7.
Concepts: favorable comparison, appreciating practicality
- A user compares the software favorably to other inconvenient software.
- User appreciates or praises the software's practicality.

8.
Concepts: suggesting workflow improvements, evaluating software usability
- A user suggests improvements to the workflow or functionality of the Physics Lab software.
- User evaluates the usability of the Physics Lab software, expressing opinions on its practicality and user-friendliness.

9.
Concepts: highlighting user experience, specifies details for enhanced user experience
- Highlighting user experience or usability.
- Specifying details or features that enhance user experience.

10.
Concepts: ease of use, promoting user convenience
- Emphasizing the importance of ease of use or user experience in software design
- A user highlights the importance of convenience or ease of use in a feature or design.

11.
Concepts: suggesting practical use cases, highlighting practical application
- The speaker suggests a practical use case or application.
- Users or designers mention the potential uses or advantages of a feature in real-life scenarios.

12.
Concepts: showcasing innovation, demonstrating functionality
- Demonstrating or highlighting innovative features or capabilities.
- Demonstrating the functionality or features of a product

13.
Concepts: informing about devices, addressing input methods for different devices
- Designer provides information about touch screens or other devices.
- Designer addresses input methods for different devices, often related to touch screens or on-screen keyboards.

14.
Concepts: describing old computer system, describing school computer system
- User describes their old computer system or environment.
- User describes the computer system or infrastructure used in their school.

15.
Concepts: product gap, identifying gap in existing tools
- User highlights a product gap or limitation, often related to specific features or functionalities.
- A user identifies a gap or limitation in existing tools or software.

16.
Concepts: hardware-related suggestion, considering hardware limitations
- User suggests a feature or improvement based on hardware considerations.
- Users suggest or mention limitations of hardware or devices.

17.
Concepts: theorizing system compatibility, express theoretical compatibility
- Speculating about system compatibility based on theoretical knowledge
- A designer expresses theoretical compatibility with a system.

18.
Concepts: check system compatibility, clarifying system requirements and capabilities
- Designers check and clarify system compatibility issues.
- Designers clarify system requirements, including its capabilities.

19.
Concepts: compatibility speculation, exploring compatibility options
- A user or designer speculates or discusses compatibility issues.
- User explores or discusses compatibility options.

20.
Concepts: technical clarification, providing technical assurance
- Confirming or clarifying technical details or standards
- Providing assurance or confirmation about a technical aspect.

21.
Concepts: version explanation, platform clarification, version clarification
- Explaining the type or nature of a software version.
- Clarifying differences between software versions or platforms
- Clarifying the type or version of a resource.
===
Here are the definitions for each code:

---
1.
Concepts: identifying pain points, probing for user difficulties
Relationship: The concepts are related as they both involve understanding user struggles.
Criteria: Designers ask users about problems or difficulties encountered during software use.
Phrase: Probing for user difficulties.

2.
Concepts: issue inquiry, inquire about specific problems
Relationship: The concepts are related as they both involve asking about specific user issues.
Criteria: Designers ask users about specific problems or issues encountered.
Phrase: Inquiring about specific issues.

3.
Concepts: open feedback, encouraging users to report problems
Relationship: The concepts are related as they both involve encouraging users to share their experiences.
Criteria: Designers encourage users to report problems or issues without hesitation.
Phrase: Encouraging open feedback.

4.
Concepts: seeking help, seeking community assistance
Relationship: The concepts are related as they both involve requesting support.
Criteria: Users ask for help or assistance from the community.
Phrase: Seeking community assistance.

5.
Concepts: seeking platform assistance, technical assistance
Relationship: The concepts are related as they both involve asking for guidance.
Criteria: Designers ask for assistance or guidance on using a platform feature.
Phrase: Seeking technical assistance.

6.
Concepts: describing student reaction, sharing classroom experience
Relationship: The concepts are related as they both involve sharing personal experiences.
Criteria: Users share their personal experiences or stories about using the software in a classroom setting.
Phrase: Sharing classroom experiences.

7.
Concepts: favorable comparison, appreciating practicality
Relationship: The concepts are related as they both involve positive evaluations.
Criteria: Users compare the software favorably to other inconvenient software.
Phrase: Appreciating practicality.

8.
Concepts: suggesting workflow improvements, evaluating software usability
Relationship: The concepts are related as they both involve assessing software usability.
Criteria: Users suggest improvements to the workflow or functionality of the Physics Lab software.
Phrase: Evaluating software usability.

9.
Concepts: highlighting user experience, specifies details for enhanced user experience
Relationship: The concepts are related as they both involve emphasizing user experience.
Criteria: Users highlight user experience or usability, specifying details or features that enhance it.
Phrase: Highlighting user experience.

10.
Concepts: ease of use, promoting user convenience
Relationship: The concepts are related as they both involve prioritizing user convenience.
Criteria: Users emphasize the importance of ease of use or user experience in software design.
Phrase: Promoting user convenience.

11.
Concepts: suggesting practical use cases, highlighting practical application
Relationship: The concepts are related as they both involve exploring software applications.
Criteria: Users suggest practical use cases or applications.
Phrase: Highlighting practical applications.

12.
Concepts: showcasing innovation, demonstrating functionality
Relationship: The concepts are related as they both involve displaying software capabilities.
Criteria: Designers demonstrate or highlight innovative features or capabilities.
Phrase: Showcasing innovation.

13.
Concepts: informing about devices, addressing input methods for different devices
Relationship: The concepts are related as they both involve discussing device-related issues.
Criteria: Designers provide information about touch screens or other devices, addressing input methods.
Phrase: Informing about devices.

14.
Concepts: describing old computer system, describing school computer system
Relationship: The concepts are related as they both involve describing computer systems.
Criteria: Users describe their old computer system or environment.
Phrase: Describing computer systems.

15.
Concepts: product gap, identifying gap in existing tools
Relationship: The concepts are related as they both involve identifying limitations.
Criteria: Users highlight a product gap or limitation, often related to specific features or functionalities.
Phrase: Identifying product gaps.

16.
Concepts: hardware-related suggestion, considering hardware limitations
Relationship: The concepts are related as they both involve considering hardware constraints.
Criteria: Users suggest features or improvements based on hardware considerations.
Phrase: Considering hardware limitations.

17.
Concepts: theorizing system compatibility, express theoretical compatibility
Relationship: The concepts are related as they both involve speculating about compatibility.
Criteria: Designers speculate about system compatibility based on theoretical knowledge.
Phrase: Theorizing system compatibility.

18.
Concepts: check system compatibility, clarifying system requirements and capabilities
Relationship: The concepts are related as they both involve ensuring compatibility.
Criteria: Designers check and clarify system compatibility issues.
Phrase: Clarifying system compatibility.

19.
Concepts: compatibility speculation, exploring compatibility options
Relationship: The concepts are related as they both involve exploring compatibility possibilities.
Criteria: Users speculate or discuss compatibility issues.
Phrase: Exploring compatibility options.

20.
Concepts: technical clarification, providing technical assurance
Relationship: The concepts are related as they both involve providing technical confirmation.
Criteria: Designers confirm or clarify technical details or standards.
Phrase: Providing technical clarification.

21.
Concepts: version explanation, platform clarification, version clarification
Relationship: The concepts are related as they all involve explaining or clarifying software versions or platforms.
Criteria: Designers explain the type or nature of a software version, clarifying differences between versions or platforms.
Phrase: Explaining software versions.