You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (19 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
19. 
Concepts: {Repeat the input 19}
Relationship: {What is logical relationship between concepts in code 19, or N/A if not applicable}
Criteria: {Who did what, and how for code 19}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: share knowledge, sharing information for design
- A designer shares knowledge or information about the software, its features, or its limitations.
- Sharing information or experiences related to design or development.

2.
Concepts: offer technical support, offer ongoing support
- Designers offer assistance or help to users.
- A designer offers ongoing support, encouragement, or assistance to users.

3.
Concepts: usability, discuss usability
- Designers discuss the usability of the software.
- A designer discusses usability issues or ideas with the online community.

4.
Concepts: input methods, discuss input methods
- A designer discusses input methods, such as keyboard or other interfaces, for the software.
- Discussion revolves around input methods or keyboard functionality.

5.
Concepts: system requirements, platform specification
- Mentioning specific technical requirements for the system
- Specifying or discussing platform-specific features or requirements.

6.
Concepts: confirming compatibility, answer about compatibility
- Designers confirm or suggest checking the compatibility of the system with different platforms.
- Designer responds to questions about the software's compatibility with different systems.

7.
Concepts: cross-platform usage, platform specific communication
- A user or designer discusses the use of the Physics Lab application across different platforms.
- A designer or user mentions a specific platform (e.g., PC, iOS) in the context of the Physics Lab application.

8.
Concepts: platform question, inquire about platform compatibility
- A user asks a question about the platform, its features, or its availability.
- A user inquires about platform compatibility or availability.

9.
Concepts: design decision, design rationale
- The designer makes a decision or explains the reasoning behind a design choice.
- Design rationale includes explanations or justifications for design decisions or features.

10.
Concepts: explain complexity, feature complexity
- The designer explains the complexity of a feature or issue.
- The code discusses the complexity of a feature or task, often in relation to its development or implementation.

11.
Concepts: share workaround, usability workaround, provide practical advice
- A designer shares a workaround or solution to a specific issue.
- The developer provides a usability workaround or tip for a specific feature or functionality.
- A designer provides practical advice or a workaround for a specific issue.

12.
Concepts: offering solutions, offers a diagnose for the problem
- Designers offer solutions or propose potential solutions to a problem or issue.
- Designer offers a diagnosis or solution to a problem.

13.
Concepts: share potential solutions, offering/seeking alternative
- The code shares potential solutions or ideas for a problem or issue.
- The code offers or seeks alternative solutions or approaches to a problem or issue.

14.
Concepts: offer a solution, suggesting alternative solutions
- Offering solutions or suggestions to user problems or questions
- Users suggest alternative solutions or approaches to a problem or issue.

15.
Concepts: frustration, user frustration, express frustration with current limitations
- Expressions of annoyance, disappointment, or dissatisfaction.
- A user expresses frustration or annoyance with a feature or functionality.
- Expression of frustration or dissatisfaction with current limitations.

16.
Concepts: problem analysis, problem identification
- Analyzing or troubleshooting a problem or issue.
- Inquiring about issues or problems encountered during use.

17.
Concepts: troubleshooting, inquire about specific problems
- A designer troubleshoots an issue or problem with a user.
- A designer asks a user about specific issues or problems they encountered while using the software.

18.
Concepts: informed feedback, provide specific feedback
- Providing input, feedback, or suggestions with supporting reasons.
- Providing specific and detailed feedback on a particular aspect

19.
Concepts: feedback request, solicit suggestions and requirements
- Encouraging or soliciting feedback or suggestions.
- Solicit suggestions and requirements involves statements that ask for user input, feedback, or recommendations.
===
Here are the definitions for each code:

---
1.
Concepts: share knowledge, sharing information for design
Relationship: The concepts are related as sharing knowledge is a way of providing information for design purposes.
Criteria: A designer shares knowledge or information about the software, its features, or its limitations.
Phrase: Shares knowledge for design.

2.
Concepts: offer technical support, offer ongoing support
Relationship: The concepts are related as offering technical support implies providing ongoing assistance.
Criteria: Designers offer assistance or help to users in need.
Phrase: Offers technical support.

3.
Concepts: usability, discuss usability
Relationship: The concepts are related as discussing usability is a way of exploring the usability of the software.
Criteria: Designers discuss the usability of the software or its features.
Phrase: Discusses usability.

4.
Concepts: input methods, discuss input methods
Relationship: The concepts are related as discussing input methods is a way of exploring the input methods of the software.
Criteria: Designers discuss input methods, such as keyboard or other interfaces, for the software.
Phrase: Discusses input methods.

5.
Concepts: system requirements, platform specification
Relationship: The concepts are related as system requirements imply specifying platform-specific features or requirements.
Criteria: Designers mention specific technical requirements for the system.
Phrase: Specifies system requirements.

6.
Concepts: confirming compatibility, answer about compatibility
Relationship: The concepts are related as confirming compatibility implies answering questions about compatibility.
Criteria: Designers confirm or suggest checking the compatibility of the system with different platforms.
Phrase: Confirms compatibility.

7.
Concepts: cross-platform usage, platform specific communication
Relationship: The concepts are related as cross-platform usage implies discussing platform-specific features or requirements.
Criteria: Users or designers discuss the use of the Physics Lab application across different platforms.
Phrase: Discusses cross-platform usage.

8.
Concepts: platform question, inquire about platform compatibility
Relationship: The concepts are related as inquiring about platform compatibility implies asking questions about the platform.
Criteria: Users ask questions about the platform, its features, or its availability.
Phrase: Inquires about platform compatibility.

9.
Concepts: design decision, design rationale
Relationship: The concepts are related as design decisions imply explaining the reasoning behind a design choice.
Criteria: Designers make a decision or explain the reasoning behind a design choice.
Phrase: Makes design decisions.

10.
Concepts: explain complexity, feature complexity
Relationship: The concepts are related as explaining complexity implies discussing the complexity of a feature or issue.
Criteria: Designers explain the complexity of a feature or issue.
Phrase: Explains complexity.

11.
Concepts: share workaround, usability workaround, provide practical advice
Relationship: The concepts are related as sharing a workaround implies providing practical advice or solutions.
Criteria: Designers share a workaround or solution to a specific issue.
Phrase: Shares workarounds.

12.
Concepts: offering solutions, offers a diagnose for the problem
Relationship: The concepts are related as offering solutions implies diagnosing a problem or issue.
Criteria: Designers offer solutions or propose potential solutions to a problem or issue.
Phrase: Offers solutions.

13.
Concepts: share potential solutions, offering/seeking alternative
Relationship: The concepts are related as sharing potential solutions implies offering or seeking alternative solutions.
Criteria: The code shares potential solutions or ideas for a problem or issue.
Phrase: Shares potential solutions.

14.
Concepts: offer a solution, suggesting alternative solutions
Relationship: The concepts are related as offering a solution implies suggesting alternative solutions.
Criteria: Designers offer solutions or suggestions to user problems or questions.
Phrase: Offers solutions.

15.
Concepts: frustration, user frustration, express frustration with current limitations
Relationship: The concepts are related as expressing frustration implies being dissatisfied with current limitations.
Criteria: Users express frustration or annoyance with a feature or functionality.
Phrase: Expresses frustration.

16.
Concepts: problem analysis, problem identification
Relationship: The concepts are related as problem analysis implies identifying a problem or issue.
Criteria: Designers analyze or troubleshoot a problem or issue.
Phrase: Analyzes problems.

17.
Concepts: troubleshooting, inquire about specific problems
Relationship: The concepts are related as troubleshooting implies inquiring about specific problems.
Criteria: Designers troubleshoot an issue or problem with a user.
Phrase: Troubleshoots issues.

18.
Concepts: informed feedback, provide specific feedback
Relationship: The concepts are related as informed feedback implies providing specific and detailed feedback.
Criteria: Designers provide input, feedback, or suggestions with supporting reasons.
Phrase: Provides informed feedback.

19.
Concepts: feedback request, solicit suggestions and requirements
Relationship: The concepts are related as requesting feedback implies soliciting suggestions and requirements.
Criteria: Designers encourage or solicit feedback or suggestions from users.
Phrase: Requests feedback.