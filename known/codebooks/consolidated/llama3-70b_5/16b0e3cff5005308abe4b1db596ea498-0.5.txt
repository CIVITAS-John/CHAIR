You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: In the context of NetLogo learning and practice: What perceptions - strengths, weaknesses, and adoption plans - do interviewees perceive LLM-driven interfaces? How do they use it to support their work? What are their needs for LLM-based interfaces?
Always follow the output format:
---
Definitions for each code (19 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
19. 
Concepts: {Repeat the input 19}
Relationship: {What is logical relationship between concepts in code 19, or N/A if not applicable}
Criteria: {Who did what, and how for code 19}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: prioritizing efficiency, prioritize problem-solving
- Participants prioritize efficiency in problem-solving.
- Participants prioritize fixing a problem over other tasks, such as explaining the code.

2.
Concepts: critiques individualism, critiquing individualistic work culture
- Participants critique individualism and excessive self-reliance, highlighting the importance of collaboration.
- Participants critique individualistic work culture and reflect on its effects.

3.
Concepts: values community support, valuing online help communities
- Participants value community support in resolving problems.
- Participants appreciate and value online help communities and share positive experiences.

4.
Concepts: prioritizes best practices, appreciates responsible creation
- Participants emphasize following best practices over ruthlessly creating a model.
- Participants value responsible model creation and emphasize the importance of best practices.

5.
Concepts: emphasize code quality, emphasize programming best practices
- Participants emphasize the importance of high-quality code and learning processes.
- Participants highlight the importance of incremental testing, practice, and design outlines in programming.

6.
Concepts: appreciates ai adherence to coding standards, demonstrates discernment in code adoption
- Participants recognize and appreciate AI's adherence to coding standards and best practices.
- Participants demonstrate discernment when adopting AI-generated code and recognize opportunities for code improvement.

7.
Concepts: prioritizing code readability, emphasizes readable ai-generated code
- Participants prioritize code readability and prefer readable code.
- Participants emphasize the importance of readable code generated by AI.

8.
Concepts: demonstrates debugging skills, engages in independent debugging
- Participants demonstrate problem-solving skills in debugging code through human effort.
- Participants engage in independent problem-solving and debugging efforts.

9.
Concepts: correct code independently, demonstrate coding independence
- Participants correct code independently without relying on AI suggestions.
- Participants demonstrate independence in their coding process, using AI as a tool.

10.
Concepts: requests code verification, requesting ai-generated code
- Participants request AI code verification and seek AI verification for resolving coding errors.
- Interviewees seek AI-generated code for a specific task and request code generation for a specific task.

11.
Concepts: selectively copies ai code, decides to copy and paste ai code
- Participants selectively copy code from AI output and avoid direct code copying.
- Participants decide to copy and paste AI-generated code, choose to copy AI output for implementation, and read AI output before deciding to copy and paste.

12.
Concepts: engages with ai output, evaluates ai-generated code
- Participants engage with AI-generated code, evaluate AI instructions, and evaluate AI-generated code.
- Participants evaluate AI-generated code and test AI's code generation capabilities.

13.
Concepts: writes code with ai guidance, integrates ai-generated code manually
- Participants write code manually with AI guidance and use AI-generated code as a reference.
- Participants manually integrate AI-generated code into their model.

14.
Concepts: realizing need for reset, identifies reset requirements
- Realizes the need for reset in setup, demonstrating a pragmatic approach to AI assistance.
- Interviewees identify the need for a reset in the setup based on the AI's generated code.

15.
Concepts: model setup adjustment, sets up model structure
- Adjusts model setup based on AI-generated code
- Participants set up model structure before using AI-generated code.

16.
Concepts: defining ai tasks, formulating coding tasks
- Participants formulate new coding tasks for AI to complete and define tasks or prompts for AI tools.
- Participants propose a simple coding task and define an initial coding task.

17.
Concepts: input task parameters, initiating human-ai interaction
- Participants input task parameters and showcase task-oriented AI interactions.
- Participants initiate human-AI interaction with a specific task or question and initiate tasks or requests specific programs from AI.

18.
Concepts: values ai's error clarification
- Interviewees recognize and value AI's ability to detect and clarify errors.
- Participants value the interface's capability to clarify error codes.

19.
Concepts: acknowledges learning curve
- Mentions a learning curve.
- Participants struggle with unfamiliar interface design and mention the learning curve.
===
Here are the definitions for each code:

---
1.
Concepts: prioritizing efficiency, prioritize problem-solving
Relationship: The concepts are related in that prioritizing efficiency is a key aspect of problem-solving.
Criteria: Participants prioritize fixing a problem over other tasks, such as explaining the code, to achieve efficiency.
Phrase: Prioritizing problem-solving efficiency.

2.
Concepts: critiques individualism, critiquing individualistic work culture
Relationship: The concepts are related in that critiquing individualism implies a critique of individualistic work culture.
Criteria: Participants highlight the importance of collaboration over individualism in their work culture.
Phrase: Critiquing individualistic work culture.

3.
Concepts: values community support, valuing online help communities
Relationship: The concepts are related in that valuing community support implies an appreciation for online help communities.
Criteria: Participants appreciate online help communities and value community support in resolving problems.
Phrase: Valuing community support.

4.
Concepts: prioritizes best practices, appreciates responsible creation
Relationship: The concepts are related in that prioritizing best practices implies an appreciation for responsible creation.
Criteria: Participants emphasize following best practices over ruthlessly creating a model.
Phrase: Prioritizing responsible creation.

5.
Concepts: emphasize code quality, emphasize programming best practices
Relationship: The concepts are related in that emphasizing code quality implies an emphasis on programming best practices.
Criteria: Participants emphasize the importance of high-quality code and learning processes.
Phrase: Emphasizing code quality.

6.
Concepts: appreciates ai adherence to coding standards, demonstrates discernment in code adoption
Relationship: The concepts are related in that appreciating AI's adherence to coding standards implies discernment in code adoption.
Criteria: Participants recognize and appreciate AI's adherence to coding standards and best practices.
Phrase: Appreciating AI's adherence to coding standards.

7.
Concepts: prioritizing code readability, emphasizes readable ai-generated code
Relationship: The concepts are related in that prioritizing code readability implies an emphasis on readable AI-generated code.
Criteria: Participants prioritize code readability and prefer readable code.
Phrase: Prioritizing code readability.

8.
Concepts: demonstrates debugging skills, engages in independent debugging
Relationship: The concepts are related in that demonstrating debugging skills implies engaging in independent debugging.
Criteria: Participants demonstrate problem-solving skills in debugging code through human effort.
Phrase: Demonstrating debugging skills.

9.
Concepts: correct code independently, demonstrate coding independence
Relationship: The concepts are related in that correcting code independently implies demonstrating coding independence.
Criteria: Participants correct code independently without relying on AI suggestions.
Phrase: Demonstrating coding independence.

10.
Concepts: requests code verification, requesting ai-generated code
Relationship: The concepts are related in that requesting code verification implies requesting AI-generated code.
Criteria: Participants request AI code verification and seek AI verification for resolving coding errors.
Phrase: Requesting code verification.

11.
Concepts: selectively copies ai code, decides to copy and paste ai code
Relationship: The concepts are related in that selectively copying AI code implies deciding to copy and paste AI code.
Criteria: Participants selectively copy code from AI output and avoid direct code copying.
Phrase: Selectively copying AI code.

12.
Concepts: engages with ai output, evaluates ai-generated code
Relationship: The concepts are related in that engaging with AI output implies evaluating AI-generated code.
Criteria: Participants engage with AI-generated code, evaluate AI instructions, and evaluate AI-generated code.
Phrase: Engaging with AI output.

13.
Concepts: writes code with ai guidance, integrates ai-generated code manually
Relationship: The concepts are related in that writing code with AI guidance implies integrating AI-generated code manually.
Criteria: Participants write code manually with AI guidance and use AI-generated code as a reference.
Phrase: Writing code with AI guidance.

14.
Concepts: realizing need for reset, identifies reset requirements
Relationship: The concepts are related in that realizing the need for reset implies identifying reset requirements.
Criteria: Participants realize the need for reset in setup, demonstrating a pragmatic approach to AI assistance.
Phrase: Realizing need for reset.

15.
Concepts: model setup adjustment, sets up model structure
Relationship: The concepts are related in that adjusting model setup implies setting up model structure.
Criteria: Participants adjust model setup based on AI-generated code.
Phrase: Adjusting model setup.

16.
Concepts: defining ai tasks, formulating coding tasks
Relationship: The concepts are related in that defining AI tasks implies formulating coding tasks.
Criteria: Participants formulate new coding tasks for AI to complete and define tasks or prompts for AI tools.
Phrase: Defining AI tasks.

17.
Concepts: input task parameters, initiating human-ai interaction
Relationship: The concepts are related in that inputting task parameters implies initiating human-AI interaction.
Criteria: Participants input task parameters and showcase task-oriented AI interactions.
Phrase: Inputting task parameters.

18.
Concepts: values ai's error clarification
Relationship: N/A
Criteria: Participants value the interface's capability to clarify error codes.
Phrase: Valuing AI's error clarification.

19.
Concepts: acknowledges learning curve
Relationship: N/A
Criteria: Participants struggle with unfamiliar interface design and mention the learning curve.
Phrase: Acknowledging learning curve.