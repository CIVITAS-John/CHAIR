You are an expert in thematic analysis. You are giving labels and definitions for qualitative codes.
Each code includes one or more concepts and definitions. Each code is independent of another. Never attempt to merge them.
For each code, reflect on the logical relationship between the concepts.
Then, write a combined sentence of criteria covering all the concepts. Use clear and generalizable language and do not introduce unnecessary details. 
Finally, write an accurate verb phrase to best represent the code.
The research question is: How did Physics Lab's online community emerge?
Always follow the output format:
---
Definitions for each code (55 in total):
1.
Concepts: {Repeat the input 1}
Relationship: {What is logical relationship between concepts in code 1, or N/A if not applicable}
Criteria: {Who did what, and how for code 1}
Phrase: {The most representative verb phrase for the concepts}
...
55. 
Concepts: {Repeat the input 55}
Relationship: {What is logical relationship between concepts in code 55, or N/A if not applicable}
Criteria: {Who did what, and how for code 55}
Phrase: {The most representative verb phrase for the concepts}
---
~~~
1.
Concepts: network policy, explaining internet restrictions
- Users discuss network policies or restrictions in educational settings.
- Users discuss or explain restrictions on internet access in educational settings.

2.
Concepts: sharing user experiences, sharing classroom experiences
- Users share their experiences and the impact of the software on their teaching or learning.
- Users share positive classroom experiences and student reactions using the software.

3.
Concepts: inquiring about download process, inquiring about software access
- Users ask where and how to download the software.
- Users inquire about how to access or download the software.

4.
Concepts: information seeking, inquiring about software usage
- Users asking questions to gain knowledge or resources related to the software.
- Users ask questions about how to use specific versions of the software.

5.
Concepts: seek usage instructions, expressing need for usage support
- Users seek instructions on how to use the software.
- Users express the need for guidance or help with using the software.

6.
Concepts: provide feature details, explain feature functionality
- Community members provide details and examples to illustrate a feature's functionality.
- Community members explain the functionality of components and provide usage instructions.

7.
Concepts: context, provide question context
- Users provide context about their environment or experience.
- Users provide context for their questions or interests.

8.
Concepts: inquiring about update status, inquiring about update timeline
- Users inquire about the status and timing of software updates.
- Users inquire about the timeline for upcoming feature updates.

9.
Concepts: physics concepts, requesting physics experiment features
- A user requests the inclusion of specific physics concepts or demonstrations.
- Users make detailed requests for specific physics experiments and features.

10.
Concepts: requesting specific features, requesting additional features
- Users request specific features or functionalities to be added to the software.
- Users request additional experiments or features to be included in the platform.

11.
Concepts: provide feedback, provide user feedback
- Users provide feedback or suggestions for improvement.
- Users provide feedback or suggestions on the software's features or development direction.

12.
Concepts: proposing new features, suggesting improvements, making feature suggestions
- Users suggest adding new features to improve the platform.
- Users make suggestions for improvements or enhancements.
- Users and designers make suggestions for new features or improvements.

13.
Concepts: self-answer, solving independently
- A user acknowledges finding information independently.
- Users acknowledge finding a solution to their query by themselves.

14.
Concepts: teacher identity, introduce teacher identity
- A community member identifies themselves as a teacher.
- Users identify themselves as teachers and discuss their teaching experience.

15.
Concepts: consulting the community, seeking community input
- Designers consult the community for opinions or feedback.
- A designer seeks opinions or feedback from the community before proceeding with a task.

16.
Concepts: compliment, praising the software
- Users compliment the software or the team, often alongside other requests or suggestions.
- Users express positive feedback or praise for the software.

17.
Concepts: comparing software to others, providing comparative feedback
- Users compare the software favorably against other applications.
- Users compare the software to other software, highlighting its strengths or weaknesses.

18.
Concepts: software effectiveness, highlighting software practicality
- A user comments on the effectiveness of the software in a practical setting.
- Users express satisfaction with the software's practicality and features.

19.
Concepts: communicating with emojis, using emojis for expression, use non verbal communication
- Users communicate using emojis to express emotions or reactions.
- Users express themselves using emojis or other non-verbal symbols.
- Use of emojis or other non-verbal forms of communication by users.

20.
Concepts: appreciate dedication, appreciating designers' efforts
- A user appreciates the dedication or craftsmanship of the designers.
- Users acknowledge and appreciate the efforts of the designers.

21.
Concepts: acknowledging community support, appreciating community support
- Designers express gratitude and acknowledge the support from the community.
- Users express support, encouragement, or appreciation for the designers' efforts.

22.
Concepts: seek confirmation, seek clarification
- A designer seeks confirmation from a user about a specific detail.
- Designers or users seek or request clarification on specific points or design elements.

23.
Concepts: developer response, respond to user feedback
- Designers respond to user feedback or questions.
- Designers respond to user feedback or queries.

24.
Concepts: question, design question
- Users and designers ask questions.
- A designer asks a question related to the design or functionality of the software.

25.
Concepts: apologize for inconvenience, inconvenience acknowledgment
- Designers apologize for any inconvenience or potential interruptions caused to users.
- A developer or designer acknowledges a potential inconvenience caused by their actions.

26.
Concepts: propose solutions, offer solutions
- Designers share or propose potential solutions to issues.
- Designers offer solutions or assistance to technical issues or questions.

27.
Concepts: answer a concern, resolve user concerns
- Designers respond to user concerns or questions.
- Designers respond to and resolve user inquiries or concerns.

28.
Concepts: acknowledge feedback, appreciate user feedback
- Designers acknowledge receiving user feedback or suggestions.
- A designer takes user feedback, expresses appreciation, and mentions incorporating it in future updates.

29.
Concepts: suggestion acceptance, invite feature requests
- Designers accept suggestions or requests from the community.
- Designers invite feedback or suggestions for new features or improvements from the community.

30.
Concepts: accept user request, respond to feature request
- A designer acknowledges a request and commits to including it in a future update.
- A designer responds to a feature request or suggestion.

31.
Concepts: seek user input, solicit user feedback
- Designers seek input or feedback from users for future iterations or desired features.
- A designer solicits, prompts, or requests feedback from users about their experience with the software.

32.
Concepts: encourage user feedback, encourage user interaction
- Designers encourage users to provide feedback or suggestions.
- A designer encourages users to provide feedback and interact for future improvements.

33.
Concepts: ask follow-up questions, inquire about usage scenarios
- Designers ask follow-up questions to clarify user needs or preferences.
- Designers ask follow-up questions about the usage scenario to better understand user needs.

34.
Concepts: user role inquiry, inquiring about user identity, inquiring about user background
- A designer inquires about the user's role.
- Designers inquire about the professional role or identity of users.
- Designers inquire about the background or role of users to better understand their needs.

35.
Concepts: engage in dialogue, interacting with users
- Users and designers engage in a back-and-forth dialogue.
- Users and designers interact, often involving questions or clarifications.

36.
Concepts: cultivating community, maintaining community interaction
- Designers encourage community interaction and feedback.
- Designers maintain engagement and interaction with the community.

37.
Concepts: provide rationale, provide design rationale
- Users or designers provide reasons or justifications for certain actions or features.
- Designers provide a reason or rationale behind a design decision.

38.
Concepts: discuss feature development, discuss feature improvements
- A designer discusses the development and details of a feature.
- A developer or designer discusses improvements or optimizations to a feature.

39.
Concepts: explain feature limitations, system limitation explanation
- Designers explain the limitations or constraints of a feature or solution.
- Designers explain why certain features cannot be supported due to system limitations.

40.
Concepts: confirm system compatibility, discuss system compatibility
- Designers confirm the compatibility of the software with different systems.
- Designers and users discuss the compatibility of the software with different systems.

41.
Concepts: technical consideration, discuss technical constraints
- Discussions that involve technical considerations or requirements.
- Instances where technical limitations or requirements are discussed.

42.
Concepts: share development update, announce development plans
- Designers share information about current feature development and updates.
- Designers make announcements about development plans or updates.

43.
Concepts: provide community update, communicate updates to community
- Designers provide updates or announcements about the software to the community.
- Designers communicate updates or release schedules to the community.

44.
Concepts: provide version details, provide version information
- Designers provide detailed information about software versions and updates.
- Designers provide more information about the versions available.

45.
Concepts: inform about changes, provide update information, provide technical updates
- Designers inform users about changes or updates to the internal components of the software.
- Designers provide updates about the software's version or status.
- Designers provide information about technical updates or changes to the software.

46.
Concepts: announce software update, announce software release
- Designers announce software updates and changes to specific components.
- Designers announce the release of new software versions or features.

47.
Concepts: notify about new version, announce new version release
- Designers notify users about the availability of a new version.
- Designers announce the release of a new version and its updates.

48.
Concepts: provide update timeline, share update timeline
- Designers provide a timeline for updates or releases.
- Designers share and confirm the timeline for upcoming updates or feature releases.

49.
Concepts: provide update schedule, communicate release schedule
- Designers provide an update schedule and describe the process for software updates.
- Designers communicate the release schedule and plans for software updates.

50.
Concepts: update magnitude, describe update scope
- Designers share the scope or magnitude of upcoming updates.
- Designers describe the scope or extent of an update.

51.
Concepts: preview upcoming features, explain feature implementation plans
- Designers share and explain upcoming features or enhancements.
- Designers explain the plans for feature implementation in future updates.

52.
Concepts: announce upcoming updates, provide feature updates
- Designers announce upcoming updates or features.
- Designers provide information about new features and updates being added to the product.

53.
Concepts: share future development plan, discuss potential future direction
- Designers share information about future development plans or directions.
- Designers discuss further interests or potential future projects.

54.
Concepts: open up plans, discuss future design plans, discuss future update plans
- Designers discuss plans for future compatibility or features.
- Designers discuss future plans or considerations for feature development.
- Designers discuss planning for future updates and potential improvements.

55.
Concepts: confirm future feature, promise future feature realization, future feature promise
- Designers confirm that a future feature will be implemented.
- Designers assure users that a feature will be realized or optimized in the future.
- A developer or designer promises to implement a feature at a later time.
===
---
Definitions for each code (55 in total):
1.
Concepts: network policy, explaining internet restrictions
Relationship: Both concepts involve discussing limitations on internet access within educational settings.
Criteria: Users discuss or explain restrictions on internet access in educational settings.
Phrase: Discussing internet restrictions

2.
Concepts: sharing user experiences, sharing classroom experiences
Relationship: Both concepts involve users sharing their experiences with the software in educational contexts.
Criteria: Users share their experiences and the impact of the software on their teaching or learning.
Phrase: Sharing user experiences

3.
Concepts: inquiring about download process, inquiring about software access
Relationship: Both concepts involve users asking about how to obtain the software.
Criteria: Users inquire about how to access or download the software.
Phrase: Inquiring about software access

4.
Concepts: information seeking, inquiring about software usage
Relationship: Both concepts involve users seeking information about how to use the software.
Criteria: Users ask questions to gain knowledge or resources related to the software.
Phrase: Seeking information about software usage

5.
Concepts: seek usage instructions, expressing need for usage support
Relationship: Both concepts involve users seeking help or instructions for using the software.
Criteria: Users seek instructions or express the need for guidance on using the software.
Phrase: Seeking usage support

6.
Concepts: provide feature details, explain feature functionality
Relationship: Both concepts involve community members explaining how features work.
Criteria: Community members provide details and examples to illustrate a feature's functionality.
Phrase: Explaining feature functionality

7.
Concepts: context, provide question context
Relationship: Both concepts involve users providing background information for their questions or interests.
Criteria: Users provide context about their environment or experience for their questions or interests.
Phrase: Providing question context

8.
Concepts: inquiring about update status, inquiring about update timeline
Relationship: Both concepts involve users asking about the progress and timing of software updates.
Criteria: Users inquire about the status and timing of software updates.
Phrase: Inquiring about update status

9.
Concepts: physics concepts, requesting physics experiment features
Relationship: Both concepts involve users requesting specific physics-related content.
Criteria: Users request the inclusion of specific physics concepts or demonstrations.
Phrase: Requesting physics experiment features

10.
Concepts: requesting specific features, requesting additional features
Relationship: Both concepts involve users asking for new functionalities to be added to the software.
Criteria: Users request specific features or functionalities to be added to the software.
Phrase: Requesting additional features

11.
Concepts: provide feedback, provide user feedback
Relationship: Both concepts involve users giving feedback or suggestions for improvement.
Criteria: Users provide feedback or suggestions on the software's features or development direction.
Phrase: Providing user feedback

12.
Concepts: proposing new features, suggesting improvements, making feature suggestions
Relationship: All concepts involve users suggesting new features or improvements.
Criteria: Users suggest adding new features or improvements to the platform.
Phrase: Proposing new features

13.
Concepts: self-answer, solving independently
Relationship: Both concepts involve users finding solutions on their own.
Criteria: Users acknowledge finding a solution to their query by themselves.
Phrase: Solving independently

14.
Concepts: teacher identity, introduce teacher identity
Relationship: Both concepts involve users identifying themselves as teachers.
Criteria: Users identify themselves as teachers and discuss their teaching experience.
Phrase: Introducing teacher identity

15.
Concepts: consulting the community, seeking community input
Relationship: Both concepts involve designers seeking feedback from the community.
Criteria: Designers consult the community for opinions or feedback.
Phrase: Seeking community input

16.
Concepts: compliment, praising the software
Relationship: Both concepts involve users expressing positive feedback about the software.
Criteria: Users express positive feedback or praise for the software.
Phrase: Praising the software

17.
Concepts: comparing software to others, providing comparative feedback
Relationship: Both concepts involve users comparing the software to other applications.
Criteria: Users compare the software to other software, highlighting its strengths or weaknesses.
Phrase: Providing comparative feedback

18.
Concepts: software effectiveness, highlighting software practicality
Relationship: Both concepts involve users commenting on the software's practical effectiveness.
Criteria: Users express satisfaction with the software's practicality and features.
Phrase: Highlighting software practicality

19.
Concepts: communicating with emojis, using emojis for expression, use non verbal communication
Relationship: All concepts involve users using non-verbal forms of communication.
Criteria: Users express themselves using emojis or other non-verbal symbols.
Phrase: Using non-verbal communication

20.
Concepts: appreciate dedication, appreciating designers' efforts
Relationship: Both concepts involve users acknowledging the efforts of the designers.
Criteria: Users acknowledge and appreciate the efforts of the designers.
Phrase: Appreciating designers' efforts

21.
Concepts: acknowledging community support, appreciating community support
Relationship: Both concepts involve expressing gratitude for community support.
Criteria: Designers express gratitude and acknowledge the support from the community.
Phrase: Appreciating community support

22.
Concepts: seek confirmation, seek clarification
Relationship: Both concepts involve seeking verification or understanding of specific details.
Criteria: Designers or users seek or request clarification on specific points or design elements.
Phrase: Seeking clarification

23.
Concepts: developer response, respond to user feedback
Relationship: Both concepts involve designers responding to user feedback or questions.
Criteria: Designers respond to user feedback or queries.
Phrase: Responding to user feedback

24.
Concepts: question, design question
Relationship: Both concepts involve asking questions related to the design or functionality of the software.
Criteria: Users and designers ask questions related to the design or functionality of the software.
Phrase: Asking design questions

25.
Concepts: apologize for inconvenience, inconvenience acknowledgment
Relationship: Both concepts involve acknowledging and apologizing for inconveniences caused to users.
Criteria: Designers apologize for any inconvenience or potential interruptions caused to users.
Phrase: Apologizing for inconvenience

26.
Concepts: propose solutions, offer solutions
Relationship: Both concepts involve designers offering solutions to issues.
Criteria: Designers share or propose potential solutions to issues.
Phrase: Offering solutions

27.
Concepts: answer a concern, resolve user concerns
Relationship: Both concepts involve addressing and resolving user concerns.
Criteria: Designers respond to and resolve user inquiries or concerns.
Phrase: Resolving user concerns

28.
Concepts: acknowledge feedback, appreciate user feedback
Relationship: Both concepts involve designers acknowledging and appreciating user feedback.
Criteria: Designers acknowledge receiving user feedback or suggestions.
Phrase: Acknowledging user feedback

29.
Concepts: suggestion acceptance, invite feature requests
Relationship: Both concepts involve designers accepting or inviting suggestions from the community.
Criteria: Designers invite feedback or suggestions for new features or improvements from the community.
Phrase: Inviting feature requests

30.
Concepts: accept user request, respond to feature request
Relationship: Both concepts involve designers responding to user requests for features.
Criteria: A designer responds to a feature request or suggestion.
Phrase: Responding to feature requests

31.
Concepts: seek user input, solicit user feedback
Relationship: Both concepts involve designers seeking feedback from users.
Criteria: Designers seek input or feedback from users for future iterations or desired features.
Phrase: Soliciting user feedback

32.
Concepts: encourage user feedback, encourage user interaction
Relationship: Both concepts involve designers encouraging users to provide feedback or interact.
Criteria: Designers encourage users to provide feedback and interact for future improvements.
Phrase: Encouraging user interaction

33.
Concepts: ask follow-up questions, inquire about usage scenarios
Relationship: Both concepts involve designers asking additional questions to understand user needs better.
Criteria: Designers ask follow-up questions about the usage scenario to better understand user needs.
Phrase: Inquiring about usage scenarios

34.
Concepts: user role inquiry, inquiring about user identity, inquiring about user background
Relationship: All concepts involve designers asking about the user's role or background.
Criteria: Designers inquire about the professional role or identity of users.
Phrase: Inquiring about user identity

35.
Concepts: engage in dialogue, interacting with users
Relationship: Both concepts involve users and designers engaging in interactive dialogue.
Criteria: Users and designers engage in a back-and-forth dialogue.
Phrase: Interacting with users

36.
Concepts: cultivating community, maintaining community interaction
Relationship: Both concepts involve designers fostering and maintaining community engagement.
Criteria: Designers encourage community interaction and feedback.
Phrase: Cultivating community interaction

37.
Concepts: provide rationale, provide design rationale
Relationship: Both concepts involve providing reasons or justifications for actions or features.
Criteria: Designers provide a reason or rationale behind a design decision.
Phrase: Providing design rationale

38.
Concepts: discuss feature development, discuss feature improvements
Relationship: Both concepts involve discussing the development and improvement of features.
Criteria: Designers discuss the development and details of a feature.
Phrase: Discussing feature development

39.
Concepts: explain feature limitations, system limitation explanation
Relationship: Both concepts involve explaining the limitations of features or systems.
Criteria: Designers explain the limitations or constraints of a feature or solution.
Phrase: Explaining feature limitations

40.
Concepts: confirm system compatibility, discuss system compatibility
Relationship: Both concepts involve discussing the compatibility of the software with different systems.
Criteria: Designers confirm the compatibility of the software with different systems.
Phrase: Discussing system compatibility

41.
Concepts: technical consideration, discuss technical constraints
Relationship: Both concepts involve discussing technical requirements or limitations.
Criteria: Discussions that involve technical considerations or requirements.
Phrase: Discussing technical constraints

42.
Concepts: share development update, announce development plans
Relationship: Both concepts involve sharing information about current and future development.
Criteria: Designers share information about current feature development and updates.
Phrase: Announcing development plans

43.
Concepts: provide community update, communicate updates to community
Relationship: Both concepts involve communicating updates to the community.
Criteria: Designers provide updates or announcements about the software to the community.
Phrase: Communicating updates to community

44.
Concepts: provide version details, provide version information
Relationship: Both concepts involve providing detailed information about software versions.
Criteria: Designers provide detailed information about software versions and updates.
Phrase: Providing version information

45.
Concepts: inform about changes, provide update information, provide technical updates
Relationship: All concepts involve informing users about changes or updates to the software.
Criteria: Designers inform users about changes or updates to the internal components of the software.
Phrase: Providing update information

46.
Concepts: announce software update, announce software release
Relationship: Both concepts involve announcing new software updates or releases.
Criteria: Designers announce software updates and changes to specific components.
Phrase: Announcing software updates

47.
Concepts: notify about new version, announce new version release
Relationship: Both concepts involve notifying users about new software versions.
Criteria: Designers notify users about the availability of a new version.
Phrase: Announcing new version release

48.
Concepts: provide update timeline, share update timeline
Relationship: Both concepts involve providing timelines for updates or releases.
Criteria: Designers provide a timeline for updates or releases.
Phrase: Sharing update timeline

49.
Concepts: provide update schedule, communicate release schedule
Relationship: Both concepts involve providing schedules for software updates.
Criteria: Designers provide an update schedule and describe the process for software updates.
Phrase: Communicating release schedule

50.
Concepts: update magnitude, describe update scope
Relationship: Both concepts involve describing the extent of upcoming updates.
Criteria: Designers share the scope or magnitude of upcoming updates.
Phrase: Describing update scope

51.
Concepts: preview upcoming features, explain feature implementation plans
Relationship: Both concepts involve sharing and explaining future feature plans.
Criteria: Designers share and explain upcoming features or enhancements.
Phrase: Previewing upcoming features

52.
Concepts: announce upcoming updates, provide feature updates
Relationship: Both concepts involve announcing new features or updates.
Criteria: Designers announce upcoming updates or features.
Phrase: Announcing upcoming updates

53.
Concepts: share future development plan, discuss potential future direction
Relationship: Both concepts involve discussing future development plans or directions.
Criteria: Designers share information about future development plans or directions.
Phrase: Discussing future development plans

54.
Concepts: open up plans, discuss future design plans, discuss future update plans
Relationship: All concepts involve discussing future plans for the software.
Criteria: Designers discuss plans for future compatibility or features.
Phrase: Discussing future design plans

55.
Concepts: confirm future feature, promise future feature realization, future feature promise
Relationship: All concepts involve confirming or promising future feature implementations.
Criteria: Designers confirm that a future feature will be implemented.
Phrase: Promising future feature realization
---